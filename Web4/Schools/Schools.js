/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<9
	// For `typeof node.method` instead of `node.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.9.1",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support, all, a,
		input, select, fragment,
		opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		checkOn: !!input.value,

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: document.compatMode === "CSS1Compat",

		// Will be defined later
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})();

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, ret,
		internalKey = jQuery.expando,
		getByName = typeof name === "string",

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		cache[ id ] = {};

		// Avoids exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		if ( !isNode ) {
			cache[ id ].toJSON = jQuery.noop;
		}
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( getByName ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var i, l, thisCache,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			for ( i = 0, l = name.length; i < l; i++ ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				// Try to fetch any internally stored data first
				return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
			}

			this.each(function() {
				jQuery.data( this, key, value );
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, notxml, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			// In IE9+, Flash objects don't have .getAttribute (#12945)
			// Support: IE9+
			if ( typeof elem.getAttribute !== core_strundefined ) {
				ret =  elem.getAttribute( name );
			}

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( rboolean.test( name ) ) {
					// Set corresponding property to false for boolean attributes
					// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
					if ( !getSetAttribute && ruseDefault.test( name ) ) {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					} else {
						elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		var
			// Use .prop to determine if this attribute is understood as boolean
			prop = jQuery.prop( elem, name ),

			// Fetch it accordingly
			attr = typeof prop === "boolean" && elem.getAttribute( name ),
			detail = typeof prop === "boolean" ?

				getSetInput && getSetAttribute ?
					attr != null :
					// oldIE fabricates an empty string for missing boolean attributes
					// and conflates checked/selected into attroperties
					ruseDefault.test( name ) ?
						elem[ jQuery.camelCase( "default-" + name ) ] :
						!!attr :

				// fetch an attribute node for properties not recognized as boolean
				elem.getAttributeNode( name );

		return detail && detail.value !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// fix oldIE value attroperty
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return jQuery.nodeName( elem, "input" ) ?

				// Ignore the value *property* by using defaultValue
				elem.defaultValue :

				ret && ret.specified ? ret.value : undefined;
		},
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret == null ? undefined : ret;
			}
		});
	});

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		event.isTrigger = true;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur != this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			}
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== document.activeElement && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === document.activeElement && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	hasDuplicate,
	outermostContext,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsXML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	sortOrder,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},


	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rsibling = /[\x20\t\r\n\f]*[+~]/,

	rnative = /^[^{]+\{\s*\[native code/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,
	rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Use a stripped-down slice if we can't use a native one
try {
	slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		while ( (elem = this[i++]) ) {
			results.push( elem );
		}
		return results;
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return fn( div );
	} catch (e) {
		return false;
	} finally {
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( !documentIsXML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && !rbuggyQSA.test(selector) ) {
			old = true;
			nid = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results, slice.call( newContext.querySelectorAll(
						newSelector
					), 0 ) );
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsXML = isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.tagNameNoComments = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if attributes should be retrieved by attribute nodes
	support.attributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	});

	// Check if getElementsByClassName can be trusted
	support.getByClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	});

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	support.getByName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = doc.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			doc.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			doc.getElementsByName( expando + 0 ).length;
		support.getIdNotName = !doc.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

	// IE6/7 return modified attributes
	Expr.attrHandle = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}) ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		};

	// ID find and filter
	if ( support.getIdNotName ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.tagNameNoComments ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Name
	Expr.find["NAME"] = support.getByName && function( tag, context ) {
		if ( typeof context.getElementsByName !== strundefined ) {
			return context.getElementsByName( name );
		}
	};

	// Class
	Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21),
	// no need to also add to buggyMatches since matches checks buggyQSA
	// A support test would require too much code (would include document ready)
	rbuggyQSA = [ ":focus" ];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE8 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<input type='hidden' i=''/>";
			if ( div.querySelectorAll("[i^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.webkitMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		var compare;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
			if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
				if ( a === doc || contains( preferredDoc, a ) ) {
					return -1;
				}
				if ( b === doc || contains( preferredDoc, b ) ) {
					return 1;
				}
				return 0;
			}
			return compare & 4 ? -1 : 1;
		}

		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	hasDuplicate = false;
	[0, 0].sort( sortOrder );
	support.detectDuplicates = hasDuplicate;

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	var val;

	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( !documentIsXML ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( documentIsXML || support.attributes ) {
		return elem.getAttribute( name );
	}
	return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
		name :
		val && val.specified ? val.value : null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}

			nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifider
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsXML ?
						elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
						elem.lang) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !documentIsXML &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		documentIsXML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Initialize with the default document
setDocument();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, ret, self,
			len = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		ret = [];
		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, this[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		var isFunc = jQuery.isFunction( value );

		// Make sure that the elements are removed from the DOM before they are inserted
		// this can help fix replacing a parent with child elements
		if ( !isFunc && typeof value !== "string" ) {
			value = jQuery( value ).not( this ).detach();
		}

		return this.domManip( [ value ], true, function( elem ) {
			var next = this.nextSibling,
				parent = this.parentNode;

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		});
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, table ? self.html() : undefined );
				}
				self.domManip( args, table, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						node,
						i
					);
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery.ajax({
									url: node.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									"throws": true
								});
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	var attr = elem.getAttributeNode("type");
	elem.type = ( attr && attr.specified ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.hover = function( fnOver, fnOut ) {
	return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
};
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					isSuccess = true;
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					isSuccess = true;
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	}
});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {
	var conv2, current, conv, tmp,
		converters = {},
		i = 0,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ];

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var value, name, index, easing, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/*jshint validthis:true */
	var prop, index, length,
		value, dataShow, toggle,
		tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.documentElement;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.documentElement;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );

(function (jQuery, window, undefined) {
  var browser;
  jQuery.uaMatch = function (ua) {
    ua = ua.toLowerCase();

    var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
      /(webkit)[ \/]([\w.]+)/.exec(ua) ||
      /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
      /(msie) ([\w.]+)/.exec(ua) ||
      ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
      [];

    return {
      browser: match[1] || "",
      version: match[2] || "0"
    };
  };

  // Don't clobber any existing jQuery.browser in case it's different
  if (!jQuery.browser) {
    matched = jQuery.uaMatch(navigator.userAgent);
    browser = {};

    if (matched.browser) {
      browser[matched.browser] = true;
      browser.version = matched.version;
    }

    // Chrome is Webkit, but Webkit is also Safari.
    if (browser.chrome) {
      browser.webkit = true;
    } else if (browser.webkit) {
      browser.safari = true;
    }

    jQuery.browser = browser;
  }
})(jQuery, window);
/*!
 * Globalize
 *
 * http://github.com/jquery/globalize
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 */

(function( window, undefined ) {

var Globalize,
	// private variables
	regexHex,
	regexInfinity,
	regexParseFloat,
	regexTrim,
	// private JavaScript utility functions
	arrayIndexOf,
	endsWith,
	extend,
	isArray,
	isFunction,
	isObject,
	startsWith,
	trim,
	truncate,
	zeroPad,
	// private Globalization utility functions
	appendPreOrPostMatch,
	expandFormat,
	formatDate,
	formatNumber,
	getTokenRegExp,
	getEra,
	getEraYear,
	parseExact,
	parseNegativePattern;

// Global variable (Globalize) or CommonJS module (globalize)
Globalize = function( cultureSelector ) {
	return new Globalize.prototype.init( cultureSelector );
};

if ( typeof require !== "undefined" &&
	typeof exports !== "undefined" &&
	typeof module !== "undefined" ) {
	// Assume CommonJS
	module.exports = Globalize;
} else {
	// Export as global variable
	window.Globalize = Globalize;
}

Globalize.cultures = {};

Globalize.prototype = {
	constructor: Globalize,
	init: function( cultureSelector ) {
		this.cultures = Globalize.cultures;
		this.cultureSelector = cultureSelector;

		return this;
	}
};
Globalize.prototype.init.prototype = Globalize.prototype;

// 1. When defining a culture, all fields are required except the ones stated as optional.
// 2. Each culture should have a ".calendars" object with at least one calendar named "standard"
//    which serves as the default calendar in use by that culture.
// 3. Each culture should have a ".calendar" object which is the current calendar being used,
//    it may be dynamically changed at any time to one of the calendars in ".calendars".
Globalize.cultures[ "default" ] = {
	// A unique name for the culture in the form <language code>-<country/region code>
	name: "en",
	// the name of the culture in the english language
	englishName: "English",
	// the name of the culture in its own language
	nativeName: "English",
	// whether the culture uses right-to-left text
	isRTL: false,
	// "language" is used for so-called "specific" cultures.
	// For example, the culture "es-CL" means "Spanish, in Chili".
	// It represents the Spanish-speaking culture as it is in Chili,
	// which might have different formatting rules or even translations
	// than Spanish in Spain. A "neutral" culture is one that is not
	// specific to a region. For example, the culture "es" is the generic
	// Spanish culture, which may be a more generalized version of the language
	// that may or may not be what a specific culture expects.
	// For a specific culture like "es-CL", the "language" field refers to the
	// neutral, generic culture information for the language it is using.
	// This is not always a simple matter of the string before the dash.
	// For example, the "zh-Hans" culture is netural (Simplified Chinese).
	// And the "zh-SG" culture is Simplified Chinese in Singapore, whose lanugage
	// field is "zh-CHS", not "zh".
	// This field should be used to navigate from a specific culture to it's
	// more general, neutral culture. If a culture is already as general as it
	// can get, the language may refer to itself.
	language: "en",
	// numberFormat defines general number formatting rules, like the digits in
	// each grouping, the group separator, and how negative numbers are displayed.
	numberFormat: {
		// [negativePattern]
		// Note, numberFormat.pattern has no "positivePattern" unlike percent and currency,
		// but is still defined as an array for consistency with them.
		//   negativePattern: one of "(n)|-n|- n|n-|n -"
		pattern: [ "-n" ],
		// number of decimal places normally shown
		decimals: 2,
		// string that separates number groups, as in 1,000,000
		",": ",",
		// string that separates a number from the fractional portion, as in 1.99
		".": ".",
		// array of numbers indicating the size of each number group.
		// TODO: more detailed description and example
		groupSizes: [ 3 ],
		// symbol used for positive numbers
		"+": "+",
		// symbol used for negative numbers
		"-": "-",
		// symbol used for NaN (Not-A-Number)
		"NaN": "NaN",
		// symbol used for Negative Infinity
		negativeInfinity: "-Infinity",
		// symbol used for Positive Infinity
		positiveInfinity: "Infinity",
		percent: {
			// [negativePattern, positivePattern]
			//   negativePattern: one of "-n %|-n%|-%n|%-n|%n-|n-%|n%-|-% n|n %-|% n-|% -n|n- %"
			//   positivePattern: one of "n %|n%|%n|% n"
			pattern: [ "-n %", "n %" ],
			// number of decimal places normally shown
			decimals: 2,
			// array of numbers indicating the size of each number group.
			// TODO: more detailed description and example
			groupSizes: [ 3 ],
			// string that separates number groups, as in 1,000,000
			",": ",",
			// string that separates a number from the fractional portion, as in 1.99
			".": ".",
			// symbol used to represent a percentage
			symbol: "%"
		},
		currency: {
			// [negativePattern, positivePattern]
			//   negativePattern: one of "($n)|-$n|$-n|$n-|(n$)|-n$|n-$|n$-|-n $|-$ n|n $-|$ n-|$ -n|n- $|($ n)|(n $)"
			//   positivePattern: one of "$n|n$|$ n|n $"
			pattern: [ "($n)", "$n" ],
			// number of decimal places normally shown
			decimals: 2,
			// array of numbers indicating the size of each number group.
			// TODO: more detailed description and example
			groupSizes: [ 3 ],
			// string that separates number groups, as in 1,000,000
			",": ",",
			// string that separates a number from the fractional portion, as in 1.99
			".": ".",
			// symbol used to represent currency
			symbol: "$"
		}
	},
	// calendars defines all the possible calendars used by this culture.
	// There should be at least one defined with name "standard", and is the default
	// calendar used by the culture.
	// A calendar contains information about how dates are formatted, information about
	// the calendar's eras, a standard set of the date formats,
	// translations for day and month names, and if the calendar is not based on the Gregorian
	// calendar, conversion functions to and from the Gregorian calendar.
	calendars: {
		standard: {
			// name that identifies the type of calendar this is
			name: "Gregorian_USEnglish",
			// separator of parts of a date (e.g. "/" in 11/05/1955)
			"/": "/",
			// separator of parts of a time (e.g. ":" in 05:44 PM)
			":": ":",
			// the first day of the week (0 = Sunday, 1 = Monday, etc)
			firstDay: 0,
			days: {
				// full day names
				names: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
				// abbreviated day names
				namesAbbr: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
				// shortest day names
				namesShort: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ]
			},
			months: {
				// full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
				names: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "" ],
				// abbreviated month names
				namesAbbr: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "" ]
			},
			// AM and PM designators in one of these forms:
			// The usual view, and the upper and lower case versions
			//   [ standard, lowercase, uppercase ]
			// The culture does not use AM or PM (likely all standard date formats use 24 hour time)
			//   null
			AM: [ "AM", "am", "AM" ],
			PM: [ "PM", "pm", "PM" ],
			eras: [
				// eras in reverse chronological order.
				// name: the name of the era in this culture (e.g. A.D., C.E.)
				// start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.
				// offset: offset in years from gregorian calendar
				{
					"name": "A.D.",
					"start": null,
					"offset": 0
				}
			],
			// when a two digit year is given, it will never be parsed as a four digit
			// year greater than this year (in the appropriate era for the culture)
			// Set it as a full year (e.g. 2029) or use an offset format starting from
			// the current year: "+19" would correspond to 2029 if the current year 2010.
			twoDigitYearMax: 2029,
			// set of predefined date and time patterns used by the culture
			// these represent the format someone in this culture would expect
			// to see given the portions of the date that are shown.
			patterns: {
				// short date pattern
				d: "M/d/yyyy",
				// long date pattern
				D: "dddd, MMMM dd, yyyy",
				// short time pattern
				t: "h:mm tt",
				// long time pattern
				T: "h:mm:ss tt",
				// long date, short time pattern
				f: "dddd, MMMM dd, yyyy h:mm tt",
				// long date, long time pattern
				F: "dddd, MMMM dd, yyyy h:mm:ss tt",
				// month/day pattern
				M: "MMMM dd",
				// month/year pattern
				Y: "yyyy MMMM",
				// S is a sortable format that does not vary by culture
				S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss"
			}
			// optional fields for each calendar:
			/*
			monthsGenitive:
				Same as months but used when the day preceeds the month.
				Omit if the culture has no genitive distinction in month names.
				For an explaination of genitive months, see http://blogs.msdn.com/michkap/archive/2004/12/25/332259.aspx
			convert:
				Allows for the support of non-gregorian based calendars. This convert object is used to
				to convert a date to and from a gregorian calendar date to handle parsing and formatting.
				The two functions:
					fromGregorian( date )
						Given the date as a parameter, return an array with parts [ year, month, day ]
						corresponding to the non-gregorian based year, month, and day for the calendar.
					toGregorian( year, month, day )
						Given the non-gregorian year, month, and day, return a new Date() object
						set to the corresponding date in the gregorian calendar.
			*/
		}
	},
	// For localized strings
	messages: {}
};

Globalize.cultures[ "default" ].calendar = Globalize.cultures[ "default" ].calendars.standard;

Globalize.cultures.en = Globalize.cultures[ "default" ];

Globalize.cultureSelector = "en";

//
// private variables
//

regexHex = /^0x[a-f0-9]+$/i;
regexInfinity = /^[+\-]?infinity$/i;
regexParseFloat = /^[+\-]?\d*\.?\d*(e[+\-]?\d+)?$/;
regexTrim = /^\s+|\s+$/g;

//
// private JavaScript utility functions
//

arrayIndexOf = function( array, item ) {
	if ( array.indexOf ) {
		return array.indexOf( item );
	}
	for ( var i = 0, length = array.length; i < length; i++ ) {
		if ( array[i] === item ) {
			return i;
		}
	}
	return -1;
};

endsWith = function( value, pattern ) {
	return value.substr( value.length - pattern.length ) === pattern;
};

extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction(target) ) {
		target = {};
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( isObject(copy) || (copyIsArray = isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && isArray(src) ? src : [];

					} else {
						clone = src && isObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

isArray = Array.isArray || function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Array]";
};

isFunction = function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Function]";
};

isObject = function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Object]";
};

startsWith = function( value, pattern ) {
	return value.indexOf( pattern ) === 0;
};

trim = function( value ) {
	return ( value + "" ).replace( regexTrim, "" );
};

truncate = function( value ) {
	if ( isNaN( value ) ) {
		return NaN;
	}
	return Math[ value < 0 ? "ceil" : "floor" ]( value );
};

zeroPad = function( str, count, left ) {
	var l;
	for ( l = str.length; l < count; l += 1 ) {
		str = ( left ? ("0" + str) : (str + "0") );
	}
	return str;
};

//
// private Globalization utility functions
//

appendPreOrPostMatch = function( preMatch, strings ) {
	// appends pre- and post- token match strings while removing escaped characters.
	// Returns a single quote count which is used to determine if the token occurs
	// in a string literal.
	var quoteCount = 0,
		escaped = false;
	for ( var i = 0, il = preMatch.length; i < il; i++ ) {
		var c = preMatch.charAt( i );
		switch ( c ) {
			case "\'":
				if ( escaped ) {
					strings.push( "\'" );
				}
				else {
					quoteCount++;
				}
				escaped = false;
				break;
			case "\\":
				if ( escaped ) {
					strings.push( "\\" );
				}
				escaped = !escaped;
				break;
			default:
				strings.push( c );
				escaped = false;
				break;
		}
	}
	return quoteCount;
};

expandFormat = function( cal, format ) {
	// expands unspecified or single character date formats into the full pattern.
	format = format || "F";
	var pattern,
		patterns = cal.patterns,
		len = format.length;
	if ( len === 1 ) {
		pattern = patterns[ format ];
		if ( !pattern ) {
			throw "Invalid date format string \'" + format + "\'.";
		}
		format = pattern;
	}
	else if ( len === 2 && format.charAt(0) === "%" ) {
		// %X escape format -- intended as a custom format string that is only one character, not a built-in format.
		format = format.charAt( 1 );
	}
	return format;
};

formatDate = function( value, format, culture ) {
	var cal = culture.calendar,
		convert = cal.convert,
		ret;

	if ( !format || !format.length || format === "i" ) {
		if ( culture && culture.name.length ) {
			if ( convert ) {
				// non-gregorian calendar, so we cannot use built-in toLocaleString()
				ret = formatDate( value, cal.patterns.F, culture );
			}
			else {
				var eraDate = new Date( value.getTime() ),
					era = getEra( value, cal.eras );
				eraDate.setFullYear( getEraYear(value, cal, era) );
				ret = eraDate.toLocaleString();
			}
		}
		else {
			ret = value.toString();
		}
		return ret;
	}

	var eras = cal.eras,
		sortable = format === "s";
	format = expandFormat( cal, format );

	// Start with an empty string
	ret = [];
	var hour,
		zeros = [ "0", "00", "000" ],
		foundDay,
		checkedDay,
		dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,
		quoteCount = 0,
		tokenRegExp = getTokenRegExp(),
		converted;

	function padZeros( num, c ) {
		var r, s = num + "";
		if ( c > 1 && s.length < c ) {
			r = ( zeros[c - 2] + s);
			return r.substr( r.length - c, c );
		}
		else {
			r = s;
		}
		return r;
	}

	function hasDay() {
		if ( foundDay || checkedDay ) {
			return foundDay;
		}
		foundDay = dayPartRegExp.test( format );
		checkedDay = true;
		return foundDay;
	}

	function getPart( date, part ) {
		if ( converted ) {
			return converted[ part ];
		}
		switch ( part ) {
			case 0:
				return date.getFullYear();
			case 1:
				return date.getMonth();
			case 2:
				return date.getDate();
			default:
				throw "Invalid part value " + part;
		}
	}

	if ( !sortable && convert ) {
		converted = convert.fromGregorian( value );
	}

	for ( ; ; ) {
		// Save the current index
		var index = tokenRegExp.lastIndex,
			// Look for the next pattern
			ar = tokenRegExp.exec( format );

		// Append the text before the pattern (or the end of the string if not found)
		var preMatch = format.slice( index, ar ? ar.index : format.length );
		quoteCount += appendPreOrPostMatch( preMatch, ret );

		if ( !ar ) {
			break;
		}

		// do not replace any matches that occur inside a string literal.
		if ( quoteCount % 2 ) {
			ret.push( ar[0] );
			continue;
		}

		var current = ar[ 0 ],
			clength = current.length;

		switch ( current ) {
			case "ddd":
				//Day of the week, as a three-letter abbreviation
			case "dddd":
				// Day of the week, using the full name
				var names = ( clength === 3 ) ? cal.days.namesAbbr : cal.days.names;
				ret.push( names[value.getDay()] );
				break;
			case "d":
				// Day of month, without leading zero for single-digit days
			case "dd":
				// Day of month, with leading zero for single-digit days
				foundDay = true;
				ret.push(
					padZeros( getPart(value, 2), clength )
				);
				break;
			case "MMM":
				// Month, as a three-letter abbreviation
			case "MMMM":
				// Month, using the full name
				var part = getPart( value, 1 );
				ret.push(
					( cal.monthsGenitive && hasDay() ) ?
					( cal.monthsGenitive[ clength === 3 ? "namesAbbr" : "names" ][ part ] ) :
					( cal.months[ clength === 3 ? "namesAbbr" : "names" ][ part ] )
				);
				break;
			case "M":
				// Month, as digits, with no leading zero for single-digit months
			case "MM":
				// Month, as digits, with leading zero for single-digit months
				ret.push(
					padZeros( getPart(value, 1) + 1, clength )
				);
				break;
			case "y":
				// Year, as two digits, but with no leading zero for years less than 10
			case "yy":
				// Year, as two digits, with leading zero for years less than 10
			case "yyyy":
				// Year represented by four full digits
				part = converted ? converted[ 0 ] : getEraYear( value, cal, getEra(value, eras), sortable );
				if ( clength < 4 ) {
					part = part % 100;
				}
				ret.push(
					padZeros( part, clength )
				);
				break;
			case "h":
				// Hours with no leading zero for single-digit hours, using 12-hour clock
			case "hh":
				// Hours with leading zero for single-digit hours, using 12-hour clock
				hour = value.getHours() % 12;
				if ( hour === 0 ) hour = 12;
				ret.push(
					padZeros( hour, clength )
				);
				break;
			case "H":
				// Hours with no leading zero for single-digit hours, using 24-hour clock
			case "HH":
				// Hours with leading zero for single-digit hours, using 24-hour clock
				ret.push(
					padZeros( value.getHours(), clength )
				);
				break;
			case "m":
				// Minutes with no leading zero for single-digit minutes
			case "mm":
				// Minutes with leading zero for single-digit minutes
				ret.push(
					padZeros( value.getMinutes(), clength )
				);
				break;
			case "s":
				// Seconds with no leading zero for single-digit seconds
			case "ss":
				// Seconds with leading zero for single-digit seconds
				ret.push(
					padZeros( value.getSeconds(), clength )
				);
				break;
			case "t":
				// One character am/pm indicator ("a" or "p")
			case "tt":
				// Multicharacter am/pm indicator
				part = value.getHours() < 12 ? ( cal.AM ? cal.AM[0] : " " ) : ( cal.PM ? cal.PM[0] : " " );
				ret.push( clength === 1 ? part.charAt(0) : part );
				break;
			case "f":
				// Deciseconds
			case "ff":
				// Centiseconds
			case "fff":
				// Milliseconds
				ret.push(
					padZeros( value.getMilliseconds(), 3 ).substr( 0, clength )
				);
				break;
			case "z":
				// Time zone offset, no leading zero
			case "zz":
				// Time zone offset with leading zero
				hour = value.getTimezoneOffset() / 60;
				ret.push(
					( hour <= 0 ? "+" : "-" ) + padZeros( Math.floor(Math.abs(hour)), clength )
				);
				break;
			case "zzz":
				// Time zone offset with leading zero
				hour = value.getTimezoneOffset() / 60;
				ret.push(
					( hour <= 0 ? "+" : "-" ) + padZeros( Math.floor(Math.abs(hour)), 2 ) +
					// Hard coded ":" separator, rather than using cal.TimeSeparator
					// Repeated here for consistency, plus ":" was already assumed in date parsing.
					":" + padZeros( Math.abs(value.getTimezoneOffset() % 60), 2 )
				);
				break;
			case "g":
			case "gg":
				if ( cal.eras ) {
					ret.push(
						cal.eras[ getEra(value, eras) ].name
					);
				}
				break;
		case "/":
			ret.push( cal["/"] );
			break;
		default:
			throw "Invalid date format pattern \'" + current + "\'.";
		}
	}
	return ret.join( "" );
};

// formatNumber
(function() {
	var expandNumber;

	expandNumber = function( number, precision, formatInfo ) {
		var groupSizes = formatInfo.groupSizes,
			curSize = groupSizes[ 0 ],
			curGroupIndex = 1,
			factor = Math.pow( 10, precision ),
			rounded = Math.round( number * factor ) / factor;

		if ( !isFinite(rounded) ) {
			rounded = number;
		}
		number = rounded;

		var numberString = number+"",
			right = "",
			split = numberString.split( /e/i ),
			exponent = split.length > 1 ? parseInt( split[1], 10 ) : 0;
		numberString = split[ 0 ];
		split = numberString.split( "." );
		numberString = split[ 0 ];
		right = split.length > 1 ? split[ 1 ] : "";

		var l;
		if ( exponent > 0 ) {
			right = zeroPad( right, exponent, false );
			numberString += right.slice( 0, exponent );
			right = right.substr( exponent );
		}
		else if ( exponent < 0 ) {
			exponent = -exponent;
			numberString = zeroPad( numberString, exponent + 1, true );
			right = numberString.slice( -exponent, numberString.length ) + right;
			numberString = numberString.slice( 0, -exponent );
		}

		if ( precision > 0 ) {
			right = formatInfo[ "." ] +
				( (right.length > precision) ? right.slice(0, precision) : zeroPad(right, precision) );
		}
		else {
			right = "";
		}

		var stringIndex = numberString.length - 1,
			sep = formatInfo[ "," ],
			ret = "";

		while ( stringIndex >= 0 ) {
			if ( curSize === 0 || curSize > stringIndex ) {
				return numberString.slice( 0, stringIndex + 1 ) + ( ret.length ? (sep + ret + right) : right );
			}
			ret = numberString.slice( stringIndex - curSize + 1, stringIndex + 1 ) + ( ret.length ? (sep + ret) : "" );

			stringIndex -= curSize;

			if ( curGroupIndex < groupSizes.length ) {
				curSize = groupSizes[ curGroupIndex ];
				curGroupIndex++;
			}
		}

		return numberString.slice( 0, stringIndex + 1 ) + sep + ret + right;
	};

	formatNumber = function( value, format, culture ) {
		if ( !isFinite(value) ) {
			if ( value === Infinity ) {
				return culture.numberFormat.positiveInfinity;
			}
			if ( value === -Infinity ) {
				return culture.numberFormat.negativeInfinity;
			}
			return culture.numberFormat[ "NaN" ];
		}
		if ( !format || format === "i" ) {
			return culture.name.length ? value.toLocaleString() : value.toString();
		}
		format = format || "D";

		var nf = culture.numberFormat,
			number = Math.abs( value ),
			precision = -1,
			pattern;
		if ( format.length > 1 ) precision = parseInt( format.slice(1), 10 );

		var current = format.charAt( 0 ).toUpperCase(),
			formatInfo;

		switch ( current ) {
			case "D":
				pattern = "n";
				number = truncate( number );
				if ( precision !== -1 ) {
					number = zeroPad( "" + number, precision, true );
				}
				if ( value < 0 ) number = "-" + number;
				break;
			case "N":
				formatInfo = nf;
				/* falls through */
			case "C":
				formatInfo = formatInfo || nf.currency;
				/* falls through */
			case "P":
				formatInfo = formatInfo || nf.percent;
				pattern = value < 0 ? formatInfo.pattern[ 0 ] : ( formatInfo.pattern[1] || "n" );
				if ( precision === -1 ) precision = formatInfo.decimals;
				number = expandNumber( number * (current === "P" ? 100 : 1), precision, formatInfo );
				break;
			default:
				throw "Bad number format specifier: " + current;
		}

		var patternParts = /n|\$|-|%/g,
			ret = "";
		for ( ; ; ) {
			var index = patternParts.lastIndex,
				ar = patternParts.exec( pattern );

			ret += pattern.slice( index, ar ? ar.index : pattern.length );

			if ( !ar ) {
				break;
			}

			switch ( ar[0] ) {
				case "n":
					ret += number;
					break;
				case "$":
					ret += nf.currency.symbol;
					break;
				case "-":
					// don't make 0 negative
					if ( /[1-9]/.test(number) ) {
						ret += nf[ "-" ];
					}
					break;
				case "%":
					ret += nf.percent.symbol;
					break;
			}
		}

		return ret;
	};

}());

getTokenRegExp = function() {
	// regular expression for matching date and time tokens in format strings.
	return (/\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g);
};

getEra = function( date, eras ) {
	if ( !eras ) return 0;
	var start, ticks = date.getTime();
	for ( var i = 0, l = eras.length; i < l; i++ ) {
		start = eras[ i ].start;
		if ( start === null || ticks >= start ) {
			return i;
		}
	}
	return 0;
};

getEraYear = function( date, cal, era, sortable ) {
	var year = date.getFullYear();
	if ( !sortable && cal.eras ) {
		// convert normal gregorian year to era-shifted gregorian
		// year by subtracting the era offset
		year -= cal.eras[ era ].offset;
	}
	return year;
};

// parseExact
(function() {
	var expandYear,
		getDayIndex,
		getMonthIndex,
		getParseRegExp,
		outOfRange,
		toUpper,
		toUpperArray;

	expandYear = function( cal, year ) {
		// expands 2-digit year into 4 digits.
		if ( year < 100 ) {
			var now = new Date(),
				era = getEra( now ),
				curr = getEraYear( now, cal, era ),
				twoDigitYearMax = cal.twoDigitYearMax;
			twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt( twoDigitYearMax, 10 ) : twoDigitYearMax;
			year += curr - ( curr % 100 );
			if ( year > twoDigitYearMax ) {
				year -= 100;
			}
		}
		return year;
	};

	getDayIndex = function	( cal, value, abbr ) {
		var ret,
			days = cal.days,
			upperDays = cal._upperDays;
		if ( !upperDays ) {
			cal._upperDays = upperDays = [
				toUpperArray( days.names ),
				toUpperArray( days.namesAbbr ),
				toUpperArray( days.namesShort )
			];
		}
		value = toUpper( value );
		if ( abbr ) {
			ret = arrayIndexOf( upperDays[1], value );
			if ( ret === -1 ) {
				ret = arrayIndexOf( upperDays[2], value );
			}
		}
		else {
			ret = arrayIndexOf( upperDays[0], value );
		}
		return ret;
	};

	getMonthIndex = function( cal, value, abbr ) {
		var months = cal.months,
			monthsGen = cal.monthsGenitive || cal.months,
			upperMonths = cal._upperMonths,
			upperMonthsGen = cal._upperMonthsGen;
		if ( !upperMonths ) {
			cal._upperMonths = upperMonths = [
				toUpperArray( months.names ),
				toUpperArray( months.namesAbbr )
			];
			cal._upperMonthsGen = upperMonthsGen = [
				toUpperArray( monthsGen.names ),
				toUpperArray( monthsGen.namesAbbr )
			];
		}
		value = toUpper( value );
		var i = arrayIndexOf( abbr ? upperMonths[1] : upperMonths[0], value );
		if ( i < 0 ) {
			i = arrayIndexOf( abbr ? upperMonthsGen[1] : upperMonthsGen[0], value );
		}
		return i;
	};

	getParseRegExp = function( cal, format ) {
		// converts a format string into a regular expression with groups that
		// can be used to extract date fields from a date string.
		// check for a cached parse regex.
		var re = cal._parseRegExp;
		if ( !re ) {
			cal._parseRegExp = re = {};
		}
		else {
			var reFormat = re[ format ];
			if ( reFormat ) {
				return reFormat;
			}
		}

		// expand single digit formats, then escape regular expression characters.
		var expFormat = expandFormat( cal, format ).replace( /([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1" ),
			regexp = [ "^" ],
			groups = [],
			index = 0,
			quoteCount = 0,
			tokenRegExp = getTokenRegExp(),
			match;

		// iterate through each date token found.
		while ( (match = tokenRegExp.exec(expFormat)) !== null ) {
			var preMatch = expFormat.slice( index, match.index );
			index = tokenRegExp.lastIndex;

			// don't replace any matches that occur inside a string literal.
			quoteCount += appendPreOrPostMatch( preMatch, regexp );
			if ( quoteCount % 2 ) {
				regexp.push( match[0] );
				continue;
			}

			// add a regex group for the token.
			var m = match[ 0 ],
				len = m.length,
				add;
			switch ( m ) {
				case "dddd": case "ddd":
				case "MMMM": case "MMM":
				case "gg": case "g":
					add = "(\\D+)";
					break;
				case "tt": case "t":
					add = "(\\D*)";
					break;
				case "yyyy":
				case "fff":
				case "ff":
				case "f":
					add = "(\\d{" + len + "})";
					break;
				case "dd": case "d":
				case "MM": case "M":
				case "yy": case "y":
				case "HH": case "H":
				case "hh": case "h":
				case "mm": case "m":
				case "ss": case "s":
					add = "(\\d\\d?)";
					break;
				case "zzz":
					add = "([+-]?\\d\\d?:\\d{2})";
					break;
				case "zz": case "z":
					add = "([+-]?\\d\\d?)";
					break;
				case "/":
					add = "(\\/)";
					break;
				default:
					throw "Invalid date format pattern \'" + m + "\'.";
			}
			if ( add ) {
				regexp.push( add );
			}
			groups.push( match[0] );
		}
		appendPreOrPostMatch( expFormat.slice(index), regexp );
		regexp.push( "$" );

		// allow whitespace to differ when matching formats.
		var regexpStr = regexp.join( "" ).replace( /\s+/g, "\\s+" ),
			parseRegExp = { "regExp": regexpStr, "groups": groups };

		// cache the regex for this format.
		return re[ format ] = parseRegExp;
	};

	outOfRange = function( value, low, high ) {
		return value < low || value > high;
	};

	toUpper = function( value ) {
		// "he-IL" has non-breaking space in weekday names.
		return value.split( "\u00A0" ).join( " " ).toUpperCase();
	};

	toUpperArray = function( arr ) {
		var results = [];
		for ( var i = 0, l = arr.length; i < l; i++ ) {
			results[ i ] = toUpper( arr[i] );
		}
		return results;
	};

	parseExact = function( value, format, culture ) {
		// try to parse the date string by matching against the format string
		// while using the specified culture for date field names.
		value = trim( value );
		var cal = culture.calendar,
			// convert date formats into regular expressions with groupings.
			// use the regexp to determine the input format and extract the date fields.
			parseInfo = getParseRegExp( cal, format ),
			match = new RegExp( parseInfo.regExp ).exec( value );
		if ( match === null ) {
			return null;
		}
		// found a date format that matches the input.
		var groups = parseInfo.groups,
			era = null, year = null, month = null, date = null, weekDay = null,
			hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null,
			pmHour = false;
		// iterate the format groups to extract and set the date fields.
		for ( var j = 0, jl = groups.length; j < jl; j++ ) {
			var matchGroup = match[ j + 1 ];
			if ( matchGroup ) {
				var current = groups[ j ],
					clength = current.length,
					matchInt = parseInt( matchGroup, 10 );
				switch ( current ) {
					case "dd": case "d":
						// Day of month.
						date = matchInt;
						// check that date is generally in valid range, also checking overflow below.
						if ( outOfRange(date, 1, 31) ) return null;
						break;
					case "MMM": case "MMMM":
						month = getMonthIndex( cal, matchGroup, clength === 3 );
						if ( outOfRange(month, 0, 11) ) return null;
						break;
					case "M": case "MM":
						// Month.
						month = matchInt - 1;
						if ( outOfRange(month, 0, 11) ) return null;
						break;
					case "y": case "yy":
					case "yyyy":
						year = clength < 4 ? expandYear( cal, matchInt ) : matchInt;
						if ( outOfRange(year, 0, 9999) ) return null;
						break;
					case "h": case "hh":
						// Hours (12-hour clock).
						hour = matchInt;
						if ( hour === 12 ) hour = 0;
						if ( outOfRange(hour, 0, 11) ) return null;
						break;
					case "H": case "HH":
						// Hours (24-hour clock).
						hour = matchInt;
						if ( outOfRange(hour, 0, 23) ) return null;
						break;
					case "m": case "mm":
						// Minutes.
						min = matchInt;
						if ( outOfRange(min, 0, 59) ) return null;
						break;
					case "s": case "ss":
						// Seconds.
						sec = matchInt;
						if ( outOfRange(sec, 0, 59) ) return null;
						break;
					case "tt": case "t":
						// AM/PM designator.
						// see if it is standard, upper, or lower case PM. If not, ensure it is at least one of
						// the AM tokens. If not, fail the parse for this format.
						pmHour = cal.PM && ( matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2] );
						if (
							!pmHour && (
								!cal.AM || ( matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2] )
							)
						) return null;
						break;
					case "f":
						// Deciseconds.
					case "ff":
						// Centiseconds.
					case "fff":
						// Milliseconds.
						msec = matchInt * Math.pow( 10, 3 - clength );
						if ( outOfRange(msec, 0, 999) ) return null;
						break;
					case "ddd":
						// Day of week.
					case "dddd":
						// Day of week.
						weekDay = getDayIndex( cal, matchGroup, clength === 3 );
						if ( outOfRange(weekDay, 0, 6) ) return null;
						break;
					case "zzz":
						// Time zone offset in +/- hours:min.
						var offsets = matchGroup.split( /:/ );
						if ( offsets.length !== 2 ) return null;
						hourOffset = parseInt( offsets[0], 10 );
						if ( outOfRange(hourOffset, -12, 13) ) return null;
						var minOffset = parseInt( offsets[1], 10 );
						if ( outOfRange(minOffset, 0, 59) ) return null;
						tzMinOffset = ( hourOffset * 60 ) + ( startsWith(matchGroup, "-") ? -minOffset : minOffset );
						break;
					case "z": case "zz":
						// Time zone offset in +/- hours.
						hourOffset = matchInt;
						if ( outOfRange(hourOffset, -12, 13) ) return null;
						tzMinOffset = hourOffset * 60;
						break;
					case "g": case "gg":
						var eraName = matchGroup;
						if ( !eraName || !cal.eras ) return null;
						eraName = trim( eraName.toLowerCase() );
						for ( var i = 0, l = cal.eras.length; i < l; i++ ) {
							if ( eraName === cal.eras[i].name.toLowerCase() ) {
								era = i;
								break;
							}
						}
						// could not find an era with that name
						if ( era === null ) return null;
						break;
				}
			}
		}
		var result = new Date(), defaultYear, convert = cal.convert;
		defaultYear = convert ? convert.fromGregorian( result )[ 0 ] : result.getFullYear();
		if ( year === null ) {
			year = defaultYear;
		}
		else if ( cal.eras ) {
			// year must be shifted to normal gregorian year
			// but not if year was not specified, its already normal gregorian
			// per the main if clause above.
			year += cal.eras[( era || 0 )].offset;
		}
		// set default day and month to 1 and January, so if unspecified, these are the defaults
		// instead of the current day/month.
		if ( month === null ) {
			month = 0;
		}
		if ( date === null ) {
			date = 1;
		}
		// now have year, month, and date, but in the culture's calendar.
		// convert to gregorian if necessary
		if ( convert ) {
			result = convert.toGregorian( year, month, date );
			// conversion failed, must be an invalid match
			if ( result === null ) return null;
		}
		else {
			// have to set year, month and date together to avoid overflow based on current date.
			result.setFullYear( year, month, date );
			// check to see if date overflowed for specified month (only checked 1-31 above).
			if ( result.getDate() !== date ) return null;
			// invalid day of week.
			if ( weekDay !== null && result.getDay() !== weekDay ) {
				return null;
			}
		}
		// if pm designator token was found make sure the hours fit the 24-hour clock.
		if ( pmHour && hour < 12 ) {
			hour += 12;
		}
		result.setHours( hour, min, sec, msec );
		if ( tzMinOffset !== null ) {
			// adjust timezone to utc before applying local offset.
			var adjustedMin = result.getMinutes() - ( tzMinOffset + result.getTimezoneOffset() );
			// Safari limits hours and minutes to the range of -127 to 127.  We need to use setHours
			// to ensure both these fields will not exceed this range.	adjustedMin will range
			// somewhere between -1440 and 1500, so we only need to split this into hours.
			result.setHours( result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60 );
		}
		return result;
	};
}());

parseNegativePattern = function( value, nf, negativePattern ) {
	var neg = nf[ "-" ],
		pos = nf[ "+" ],
		ret;
	switch ( negativePattern ) {
		case "n -":
			neg = " " + neg;
			pos = " " + pos;
			/* falls through */
		case "n-":
			if ( endsWith(value, neg) ) {
				ret = [ "-", value.substr(0, value.length - neg.length) ];
			}
			else if ( endsWith(value, pos) ) {
				ret = [ "+", value.substr(0, value.length - pos.length) ];
			}
			break;
		case "- n":
			neg += " ";
			pos += " ";
			/* falls through */
		case "-n":
			if ( startsWith(value, neg) ) {
				ret = [ "-", value.substr(neg.length) ];
			}
			else if ( startsWith(value, pos) ) {
				ret = [ "+", value.substr(pos.length) ];
			}
			break;
		case "(n)":
			if ( startsWith(value, "(") && endsWith(value, ")") ) {
				ret = [ "-", value.substr(1, value.length - 2) ];
			}
			break;
	}
	return ret || [ "", value ];
};

//
// public instance functions
//

Globalize.prototype.findClosestCulture = function( cultureSelector ) {
	return Globalize.findClosestCulture.call( this, cultureSelector );
};

Globalize.prototype.format = function( value, format, cultureSelector ) {
	return Globalize.format.call( this, value, format, cultureSelector );
};

Globalize.prototype.localize = function( key, cultureSelector ) {
	return Globalize.localize.call( this, key, cultureSelector );
};

Globalize.prototype.parseInt = function( value, radix, cultureSelector ) {
	return Globalize.parseInt.call( this, value, radix, cultureSelector );
};

Globalize.prototype.parseFloat = function( value, radix, cultureSelector ) {
	return Globalize.parseFloat.call( this, value, radix, cultureSelector );
};

Globalize.prototype.culture = function( cultureSelector ) {
	return Globalize.culture.call( this, cultureSelector );
};

//
// public singleton functions
//

Globalize.addCultureInfo = function( cultureName, baseCultureName, info ) {

	var base = {},
		isNew = false;

	if ( typeof cultureName !== "string" ) {
		// cultureName argument is optional string. If not specified, assume info is first
		// and only argument. Specified info deep-extends current culture.
		info = cultureName;
		cultureName = this.culture().name;
		base = this.cultures[ cultureName ];
	} else if ( typeof baseCultureName !== "string" ) {
		// baseCultureName argument is optional string. If not specified, assume info is second
		// argument. Specified info deep-extends specified culture.
		// If specified culture does not exist, create by deep-extending default
		info = baseCultureName;
		isNew = ( this.cultures[ cultureName ] == null );
		base = this.cultures[ cultureName ] || this.cultures[ "default" ];
	} else {
		// cultureName and baseCultureName specified. Assume a new culture is being created
		// by deep-extending an specified base culture
		isNew = true;
		base = this.cultures[ baseCultureName ];
	}

	this.cultures[ cultureName ] = extend(true, {},
		base,
		info
	);
	// Make the standard calendar the current culture if it's a new culture
	if ( isNew ) {
		this.cultures[ cultureName ].calendar = this.cultures[ cultureName ].calendars.standard;
	}
};

Globalize.findClosestCulture = function( name ) {
	var match;
	if ( !name ) {
		return this.findClosestCulture( this.cultureSelector ) || this.cultures[ "default" ];
	}
	if ( typeof name === "string" ) {
		name = name.split( "," );
	}
	if ( isArray(name) ) {
		var lang,
			cultures = this.cultures,
			list = name,
			i, l = list.length,
			prioritized = [];
		for ( i = 0; i < l; i++ ) {
			name = trim( list[i] );
			var pri, parts = name.split( ";" );
			lang = trim( parts[0] );
			if ( parts.length === 1 ) {
				pri = 1;
			}
			else {
				name = trim( parts[1] );
				if ( name.indexOf("q=") === 0 ) {
					name = name.substr( 2 );
					pri = parseFloat( name );
					pri = isNaN( pri ) ? 0 : pri;
				}
				else {
					pri = 1;
				}
			}
			prioritized.push({ lang: lang, pri: pri });
		}
		prioritized.sort(function( a, b ) {
			if ( a.pri < b.pri ) {
				return 1;
			} else if ( a.pri > b.pri ) {
				return -1;
			}
			return 0;
		});
		// exact match
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			match = cultures[ lang ];
			if ( match ) {
				return match;
			}
		}

		// neutral language match
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			do {
				var index = lang.lastIndexOf( "-" );
				if ( index === -1 ) {
					break;
				}
				// strip off the last part. e.g. en-US => en
				lang = lang.substr( 0, index );
				match = cultures[ lang ];
				if ( match ) {
					return match;
				}
			}
			while ( 1 );
		}

		// last resort: match first culture using that language
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			for ( var cultureKey in cultures ) {
				var culture = cultures[ cultureKey ];
				if ( culture.language == lang ) {
					return culture;
				}
			}
		}
	}
	else if ( typeof name === "object" ) {
		return name;
	}
	return match || null;
};

Globalize.format = function( value, format, cultureSelector ) {
	var culture = this.findClosestCulture( cultureSelector );
	if ( value instanceof Date ) {
		value = formatDate( value, format, culture );
	}
	else if ( typeof value === "number" ) {
		value = formatNumber( value, format, culture );
	}
	return value;
};

Globalize.localize = function( key, cultureSelector ) {
	return this.findClosestCulture( cultureSelector ).messages[ key ] ||
		this.cultures[ "default" ].messages[ key ];
};

Globalize.parseDate = function( value, formats, culture ) {
	culture = this.findClosestCulture( culture );

	var date, prop, patterns;
	if ( formats ) {
		if ( typeof formats === "string" ) {
			formats = [ formats ];
		}
		if ( formats.length ) {
			for ( var i = 0, l = formats.length; i < l; i++ ) {
				var format = formats[ i ];
				if ( format ) {
					date = parseExact( value, format, culture );
					if ( date ) {
						break;
					}
				}
			}
		}
	} else {
		patterns = culture.calendar.patterns;
		for ( prop in patterns ) {
			date = parseExact( value, patterns[prop], culture );
			if ( date ) {
				break;
			}
		}
	}

	return date || null;
};

Globalize.parseInt = function( value, radix, cultureSelector ) {
	return truncate( Globalize.parseFloat(value, radix, cultureSelector) );
};

Globalize.parseFloat = function( value, radix, cultureSelector ) {
	// radix argument is optional
	if ( typeof radix !== "number" ) {
		cultureSelector = radix;
		radix = 10;
	}

	var culture = this.findClosestCulture( cultureSelector );
	var ret = NaN,
		nf = culture.numberFormat;

	if ( value.indexOf(culture.numberFormat.currency.symbol) > -1 ) {
		// remove currency symbol
		value = value.replace( culture.numberFormat.currency.symbol, "" );
		// replace decimal seperator
		value = value.replace( culture.numberFormat.currency["."], culture.numberFormat["."] );
	}

	//Remove percentage character from number string before parsing
	if ( value.indexOf(culture.numberFormat.percent.symbol) > -1){
		value = value.replace( culture.numberFormat.percent.symbol, "" );
	}

	// remove spaces: leading, trailing and between - and number. Used for negative currency pt-BR
	value = value.replace( / /g, "" );

	// allow infinity or hexidecimal
	if ( regexInfinity.test(value) ) {
		ret = parseFloat( value );
	}
	else if ( !radix && regexHex.test(value) ) {
		ret = parseInt( value, 16 );
	}
	else {

		// determine sign and number
		var signInfo = parseNegativePattern( value, nf, nf.pattern[0] ),
			sign = signInfo[ 0 ],
			num = signInfo[ 1 ];

		// #44 - try parsing as "(n)"
		if ( sign === "" && nf.pattern[0] !== "(n)" ) {
			signInfo = parseNegativePattern( value, nf, "(n)" );
			sign = signInfo[ 0 ];
			num = signInfo[ 1 ];
		}

		// try parsing as "-n"
		if ( sign === "" && nf.pattern[0] !== "-n" ) {
			signInfo = parseNegativePattern( value, nf, "-n" );
			sign = signInfo[ 0 ];
			num = signInfo[ 1 ];
		}

		sign = sign || "+";

		// determine exponent and number
		var exponent,
			intAndFraction,
			exponentPos = num.indexOf( "e" );
		if ( exponentPos < 0 ) exponentPos = num.indexOf( "E" );
		if ( exponentPos < 0 ) {
			intAndFraction = num;
			exponent = null;
		}
		else {
			intAndFraction = num.substr( 0, exponentPos );
			exponent = num.substr( exponentPos + 1 );
		}
		// determine decimal position
		var integer,
			fraction,
			decSep = nf[ "." ],
			decimalPos = intAndFraction.indexOf( decSep );
		if ( decimalPos < 0 ) {
			integer = intAndFraction;
			fraction = null;
		}
		else {
			integer = intAndFraction.substr( 0, decimalPos );
			fraction = intAndFraction.substr( decimalPos + decSep.length );
		}
		// handle groups (e.g. 1,000,000)
		var groupSep = nf[ "," ];
		integer = integer.split( groupSep ).join( "" );
		var altGroupSep = groupSep.replace( /\u00A0/g, " " );
		if ( groupSep !== altGroupSep ) {
			integer = integer.split( altGroupSep ).join( "" );
		}
		// build a natively parsable number string
		var p = sign + integer;
		if ( fraction !== null ) {
			p += "." + fraction;
		}
		if ( exponent !== null ) {
			// exponent itself may have a number patternd
			var expSignInfo = parseNegativePattern( exponent, nf, "-n" );
			p += "e" + ( expSignInfo[0] || "+" ) + expSignInfo[ 1 ];
		}
		if ( regexParseFloat.test(p) ) {
			ret = parseFloat( p );
		}
	}
	return ret;
};

Globalize.culture = function( cultureSelector ) {
	// setter
	if ( typeof cultureSelector !== "undefined" ) {
		this.cultureSelector = cultureSelector;
	}
	// getter
	return this.findClosestCulture( cultureSelector ) || this.cultures[ "default" ];
};

}( this ));

/*!
 * jQuery hashchange event - v1.3 - 7/21/2010
 * http://benalman.com/projects/jquery-hashchange-plugin/
 * 
 * Copyright (c) 2010 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */

// Script: jQuery hashchange event
//
// *Version: 1.3, Last updated: 7/21/2010*
// 
// Project Home - http://benalman.com/projects/jquery-hashchange-plugin/
// GitHub       - http://github.com/cowboy/jquery-hashchange/
// Source       - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.js
// (Minified)   - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.min.js (0.8kb gzipped)
// 
// About: License
// 
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
// 
// About: Examples
// 
// These working examples, complete with fully commented code, illustrate a few
// ways in which this plugin can be used.
// 
// hashchange event - http://benalman.com/code/projects/jquery-hashchange/examples/hashchange/
// document.domain - http://benalman.com/code/projects/jquery-hashchange/examples/document_domain/
// 
// About: Support and Testing
// 
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
// 
// jQuery Versions - 1.2.6, 1.3.2, 1.4.1, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-4, Chrome 5-6, Safari 3.2-5,
//                   Opera 9.6-10.60, iPhone 3.1, Android 1.6-2.2, BlackBerry 4.6-5.
// Unit Tests      - http://benalman.com/code/projects/jquery-hashchange/unit/
// 
// About: Known issues
// 
// While this jQuery hashchange event implementation is quite stable and
// robust, there are a few unfortunate browser bugs surrounding expected
// hashchange event-based behaviors, independent of any JavaScript
// window.onhashchange abstraction. See the following examples for more
// information:
// 
// Chrome: Back Button - http://benalman.com/code/projects/jquery-hashchange/examples/bug-chrome-back-button/
// Firefox: Remote XMLHttpRequest - http://benalman.com/code/projects/jquery-hashchange/examples/bug-firefox-remote-xhr/
// WebKit: Back Button in an Iframe - http://benalman.com/code/projects/jquery-hashchange/examples/bug-webkit-hash-iframe/
// Safari: Back Button from a different domain - http://benalman.com/code/projects/jquery-hashchange/examples/bug-safari-back-from-diff-domain/
// 
// Also note that should a browser natively support the window.onhashchange 
// event, but not report that it does, the fallback polling loop will be used.
// 
// About: Release History
// 
// 1.3   - (7/21/2010) Reorganized IE6/7 Iframe code to make it more
//         "removable" for mobile-only development. Added IE6/7 document.title
//         support. Attempted to make Iframe as hidden as possible by using
//         techniques from http://www.paciellogroup.com/blog/?p=604. Added 
//         support for the "shortcut" format $(window).hashchange( fn ) and
//         $(window).hashchange() like jQuery provides for built-in events.
//         Renamed jQuery.hashchangeDelay to <jQuery.fn.hashchange.delay> and
//         lowered its default value to 50. Added <jQuery.fn.hashchange.domain>
//         and <jQuery.fn.hashchange.src> properties plus document-domain.html
//         file to address access denied issues when setting document.domain in
//         IE6/7.
// 1.2   - (2/11/2010) Fixed a bug where coming back to a page using this plugin
//         from a page on another domain would cause an error in Safari 4. Also,
//         IE6/7 Iframe is now inserted after the body (this actually works),
//         which prevents the page from scrolling when the event is first bound.
//         Event can also now be bound before DOM ready, but it won't be usable
//         before then in IE6/7.
// 1.1   - (1/21/2010) Incorporated document.documentMode test to fix IE8 bug
//         where browser version is incorrectly reported as 8.0, despite
//         inclusion of the X-UA-Compatible IE=EmulateIE7 meta tag.
// 1.0   - (1/9/2010) Initial Release. Broke out the jQuery BBQ event.special
//         window.onhashchange functionality into a separate plugin for users
//         who want just the basic event & back button support, without all the
//         extra awesomeness that BBQ provides. This plugin will be included as
//         part of jQuery BBQ, but also be available separately.

(function($,window,undefined){
  '$:nomunge'; // Used by YUI compressor.
  
  // Reused string.
  var str_hashchange = 'hashchange',
    
    // Method / object references.
    doc = document,
    fake_onhashchange,
    special = $.event.special,
    
    // Does the browser support window.onhashchange? Note that IE8 running in
    // IE7 compatibility mode reports true for 'onhashchange' in window, even
    // though the event isn't supported, so also test document.documentMode.
    doc_mode = doc.documentMode,
    supports_onhashchange = 'on' + str_hashchange in window && ( doc_mode === undefined || doc_mode > 7 );
  
  // Get location.hash (or what you'd expect location.hash to be) sans any
  // leading #. Thanks for making this necessary, Firefox!
  function get_fragment( url ) {
    url = url || location.href;
    return '#' + url.replace( /^[^#]*#?(.*)$/, '$1' );
  };
  
  // Method: jQuery.fn.hashchange
  // 
  // Bind a handler to the window.onhashchange event or trigger all bound
  // window.onhashchange event handlers. This behavior is consistent with
  // jQuery's built-in event handlers.
  // 
  // Usage:
  // 
  // > jQuery(window).hashchange( [ handler ] );
  // 
  // Arguments:
  // 
  //  handler - (Function) Optional handler to be bound to the hashchange
  //    event. This is a "shortcut" for the more verbose form:
  //    jQuery(window).bind( 'hashchange', handler ). If handler is omitted,
  //    all bound window.onhashchange event handlers will be triggered. This
  //    is a shortcut for the more verbose
  //    jQuery(window).trigger( 'hashchange' ). These forms are described in
  //    the <hashchange event> section.
  // 
  // Returns:
  // 
  //  (jQuery) The initial jQuery collection of elements.
  
  // Allow the "shortcut" format $(elem).hashchange( fn ) for binding and
  // $(elem).hashchange() for triggering, like jQuery does for built-in events.
  $.fn[ str_hashchange ] = function( fn ) {
    return fn ? this.bind( str_hashchange, fn ) : this.trigger( str_hashchange );
  };
  
  // Property: jQuery.fn.hashchange.delay
  // 
  // The numeric interval (in milliseconds) at which the <hashchange event>
  // polling loop executes. Defaults to 50.
  
  // Property: jQuery.fn.hashchange.domain
  // 
  // If you're setting document.domain in your JavaScript, and you want hash
  // history to work in IE6/7, not only must this property be set, but you must
  // also set document.domain BEFORE jQuery is loaded into the page. This
  // property is only applicable if you are supporting IE6/7 (or IE8 operating
  // in "IE7 compatibility" mode).
  // 
  // In addition, the <jQuery.fn.hashchange.src> property must be set to the
  // path of the included "document-domain.html" file, which can be renamed or
  // modified if necessary (note that the document.domain specified must be the
  // same in both your main JavaScript as well as in this file).
  // 
  // Usage:
  // 
  // jQuery.fn.hashchange.domain = document.domain;
  
  // Property: jQuery.fn.hashchange.src
  // 
  // If, for some reason, you need to specify an Iframe src file (for example,
  // when setting document.domain as in <jQuery.fn.hashchange.domain>), you can
  // do so using this property. Note that when using this property, history
  // won't be recorded in IE6/7 until the Iframe src file loads. This property
  // is only applicable if you are supporting IE6/7 (or IE8 operating in "IE7
  // compatibility" mode).
  // 
  // Usage:
  // 
  // jQuery.fn.hashchange.src = 'path/to/file.html';
  
  $.fn[ str_hashchange ].delay = 50;
  /*
  $.fn[ str_hashchange ].domain = null;
  $.fn[ str_hashchange ].src = null;
  */
  
  // Event: hashchange event
  // 
  // Fired when location.hash changes. In browsers that support it, the native
  // HTML5 window.onhashchange event is used, otherwise a polling loop is
  // initialized, running every <jQuery.fn.hashchange.delay> milliseconds to
  // see if the hash has changed. In IE6/7 (and IE8 operating in "IE7
  // compatibility" mode), a hidden Iframe is created to allow the back button
  // and hash-based history to work.
  // 
  // Usage as described in <jQuery.fn.hashchange>:
  // 
  // > // Bind an event handler.
  // > jQuery(window).hashchange( function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // > 
  // > // Manually trigger the event handler.
  // > jQuery(window).hashchange();
  // 
  // A more verbose usage that allows for event namespacing:
  // 
  // > // Bind an event handler.
  // > jQuery(window).bind( 'hashchange', function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // > 
  // > // Manually trigger the event handler.
  // > jQuery(window).trigger( 'hashchange' );
  // 
  // Additional Notes:
  // 
  // * The polling loop and Iframe are not created until at least one handler
  //   is actually bound to the 'hashchange' event.
  // * If you need the bound handler(s) to execute immediately, in cases where
  //   a location.hash exists on page load, via bookmark or page refresh for
  //   example, use jQuery(window).hashchange() or the more verbose 
  //   jQuery(window).trigger( 'hashchange' ).
  // * The event can be bound before DOM ready, but since it won't be usable
  //   before then in IE6/7 (due to the necessary Iframe), recommended usage is
  //   to bind it inside a DOM ready handler.
  
  // Override existing $.event.special.hashchange methods (allowing this plugin
  // to be defined after jQuery BBQ in BBQ's source code).
  special[ str_hashchange ] = $.extend( special[ str_hashchange ], {
    
    // Called only when the first 'hashchange' event is bound to window.
    setup: function() {
      // If window.onhashchange is supported natively, there's nothing to do..
      if ( supports_onhashchange ) { return false; }
      
      // Otherwise, we need to create our own. And we don't want to call this
      // until the user binds to the event, just in case they never do, since it
      // will create a polling loop and possibly even a hidden Iframe.
      $( fake_onhashchange.start );
    },
    
    // Called only when the last 'hashchange' event is unbound from window.
    teardown: function() {
      // If window.onhashchange is supported natively, there's nothing to do..
      if ( supports_onhashchange ) { return false; }
      
      // Otherwise, we need to stop ours (if possible).
      $( fake_onhashchange.stop );
    }
    
  });
  
  // fake_onhashchange does all the work of triggering the window.onhashchange
  // event for browsers that don't natively support it, including creating a
  // polling loop to watch for hash changes and in IE 6/7 creating a hidden
  // Iframe to enable back and forward.
  fake_onhashchange = (function(){
    var self = {},
      timeout_id,
      
      // Remember the initial hash so it doesn't get triggered immediately.
      last_hash = get_fragment(),
      
      fn_retval = function(val){ return val; },
      history_set = fn_retval,
      history_get = fn_retval;
    
    // Start the polling loop.
    self.start = function() {
      timeout_id || poll();
    };
    
    // Stop the polling loop.
    self.stop = function() {
      timeout_id && clearTimeout( timeout_id );
      timeout_id = undefined;
    };
    
    // This polling loop checks every $.fn.hashchange.delay milliseconds to see
    // if location.hash has changed, and triggers the 'hashchange' event on
    // window when necessary.
    function poll() {
      var hash = get_fragment(),
        history_hash = history_get( last_hash );
      
      if ( hash !== last_hash ) {
        history_set( last_hash = hash, history_hash );
        
        $(window).trigger( str_hashchange );
        
      } else if ( history_hash !== last_hash ) {
        location.href = location.href.replace( /#.*/, '' ) + history_hash;
      }
      
      timeout_id = setTimeout( poll, $.fn[ str_hashchange ].delay );
    };
    
    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvv REMOVE IF NOT SUPPORTING IE6/7/8 vvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    $.browser.msie && !supports_onhashchange && (function(){
      // Not only do IE6/7 need the "magical" Iframe treatment, but so does IE8
      // when running in "IE7 compatibility" mode.
      
      var iframe,
        iframe_src;
      
      // When the event is bound and polling starts in IE 6/7, create a hidden
      // Iframe for history handling.
      self.start = function(){
        if ( !iframe ) {
          iframe_src = $.fn[ str_hashchange ].src;
          iframe_src = iframe_src && iframe_src + get_fragment();
          
          // Create hidden Iframe. Attempt to make Iframe as hidden as possible
          // by using techniques from http://www.paciellogroup.com/blog/?p=604.
          iframe = $('<iframe tabindex="-1" title="empty"/>').hide()
            
            // When Iframe has completely loaded, initialize the history and
            // start polling.
            .one( 'load', function(){
              iframe_src || history_set( get_fragment() );
              poll();
            })
            
            // Load Iframe src if specified, otherwise nothing.
            .attr( 'src', iframe_src || 'javascript:0' )
            
            // Append Iframe after the end of the body to prevent unnecessary
            // initial page scrolling (yes, this works).
            .insertAfter( 'body' )[0].contentWindow;
          
          // Whenever `document.title` changes, update the Iframe's title to
          // prettify the back/next history menu entries. Since IE sometimes
          // errors with "Unspecified error" the very first time this is set
          // (yes, very useful) wrap this with a try/catch block.
          doc.onpropertychange = function(){
            try {
              if ( event.propertyName === 'title' ) {
                iframe.document.title = doc.title;
              }
            } catch(e) {}
          };
          
        }
      };
      
      // Override the "stop" method since an IE6/7 Iframe was created. Even
      // if there are no longer any bound event handlers, the polling loop
      // is still necessary for back/next to work at all!
      self.stop = fn_retval;
      
      // Get history by looking at the hidden Iframe's location.hash.
      history_get = function() {
        return get_fragment( iframe.location.href );
      };
      
      // Set a new history item by opening and then closing the Iframe
      // document, *then* setting its location.hash. If document.domain has
      // been set, update that as well.
      history_set = function( hash, history_hash ) {
        var iframe_doc = iframe.document,
          domain = $.fn[ str_hashchange ].domain;
        
        if ( hash !== history_hash ) {
          // Update Iframe with any initial `document.title` that might be set.
          iframe_doc.title = doc.title;
          
          // Opening the Iframe's document after it has been closed is what
          // actually adds a history entry.
          iframe_doc.open();
          
          // Set document.domain for the Iframe document as well, if necessary.
          domain && iframe_doc.write( '<script>document.domain="' + domain + '"</script>' );
          
          iframe_doc.close();
          
          // Update the Iframe's hash, for great justice.
          iframe.location.hash = hash;
        }
      };
      
    })();
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^ REMOVE IF NOT SUPPORTING IE6/7/8 ^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    return self;
  })();
  
})(jQuery,this);

/*
    json2.js
    2012-10-08

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
  JSON = {};
}

(function () {
  'use strict';

  function f(n) {
    // Format integers to have at least two digits.
    return n < 10 ? '0' + n : n;
  }

  if (typeof Date.prototype.toJSON !== 'function') {

    Date.prototype.toJSON = function (key) {

      return isFinite(this.valueOf())
          ? this.getUTCFullYear() + '-' +
              f(this.getUTCMonth() + 1) + '-' +
              f(this.getUTCDate()) + 'T' +
              f(this.getUTCHours()) + ':' +
              f(this.getUTCMinutes()) + ':' +
              f(this.getUTCSeconds()) + 'Z'
          : null;
    };

    String.prototype.toJSON =
        Number.prototype.toJSON =
        Boolean.prototype.toJSON = function (key) {
          return this.valueOf();
        };
  }

  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      gap,
      indent,
      meta = {    // table of character substitutions
        '\b': '\\b',
        '\t': '\\t',
        '\n': '\\n',
        '\f': '\\f',
        '\r': '\\r',
        '"': '\\"',
        '\\': '\\\\'
      },
      rep;


  function quote(string) {

    // If the string contains no control characters, no quote characters, and no
    // backslash characters, then we can safely slap some quotes around it.
    // Otherwise we must also replace the offending characters with safe escape
    // sequences.

    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
      var c = meta[a];
      return typeof c === 'string'
          ? c
          : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
  }


  function str(key, holder) {

    // Produce a string from holder[key].

    var i,          // The loop counter.
        k,          // The member key.
        v,          // The member value.
        length,
        mind = gap,
        partial,
        value = holder[key];

    // If the value has a toJSON method, call it to obtain a replacement value.

    if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
      value = value.toJSON(key);
    }

    // If we were called with a replacer function, then call the replacer to
    // obtain a replacement value.

    if (typeof rep === 'function') {
      value = rep.call(holder, key, value);
    }

    // What happens next depends on the value's type.

    switch (typeof value) {
      case 'string':
        return quote(value);

      case 'number':

        // JSON numbers must be finite. Encode non-finite numbers as null.

        return isFinite(value) ? String(value) : 'null';

      case 'boolean':
      case 'null':

        // If the value is a boolean or null, convert it to a string. Note:
        // typeof null does not produce 'null'. The case is included here in
        // the remote chance that this gets fixed someday.

        return String(value);

        // If the type is 'object', we might be dealing with an object or an array or
        // null.

      case 'object':

        // Due to a specification blunder in ECMAScript, typeof null is 'object',
        // so watch out for that case.

        if (!value) {
          return 'null';
        }

        // Make an array to hold the partial results of stringifying this object value.

        gap += indent;
        partial = [];

        // Is the value an array?

        if (Object.prototype.toString.apply(value) === '[object Array]') {

          // The value is an array. Stringify every element. Use null as a placeholder
          // for non-JSON values.

          length = value.length;
          for (i = 0; i < length; i += 1) {
            partial[i] = str(i, value) || 'null';
          }

          // Join all of the elements together, separated with commas, and wrap them in
          // brackets.

          v = partial.length === 0
              ? '[]'
              : gap
              ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
              : '[' + partial.join(',') + ']';
          gap = mind;
          return v;
        }

        // If the replacer is an array, use it to select the members to be stringified.

        if (rep && typeof rep === 'object') {
          length = rep.length;
          for (i = 0; i < length; i += 1) {
            if (typeof rep[i] === 'string') {
              k = rep[i];
              v = str(k, value);
              if (v) {
                partial.push(quote(k) + (gap ? ': ' : ':') + v);
              }
            }
          }
        } else {

          // Otherwise, iterate through all of the keys in the object.

          for (k in value) {
            if (Object.prototype.hasOwnProperty.call(value, k)) {
              v = str(k, value);
              if (v) {
                partial.push(quote(k) + (gap ? ': ' : ':') + v);
              }
            }
          }
        }

        // Join all of the member texts together, separated with commas,
        // and wrap them in braces.

        v = partial.length === 0
            ? '{}'
            : gap
            ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
            : '{' + partial.join(',') + '}';
        gap = mind;
        return v;
    }
  }

  // If the JSON object does not yet have a stringify method, give it one.

  if (typeof JSON.stringify !== 'function') {
    JSON.stringify = function (value, replacer, space) {

      // The stringify method takes a value and an optional replacer, and an optional
      // space parameter, and returns a JSON text. The replacer can be a function
      // that can replace values, or an array of strings that will select the keys.
      // A default replacer method can be provided. Use of the space parameter can
      // produce text that is more easily readable.

      var i;
      gap = '';
      indent = '';

      // If the space parameter is a number, make an indent string containing that
      // many spaces.

      if (typeof space === 'number') {
        for (i = 0; i < space; i += 1) {
          indent += ' ';
        }

        // If the space parameter is a string, it will be used as the indent string.

      } else if (typeof space === 'string') {
        indent = space;
      }

      // If there is a replacer, it must be a function or an array.
      // Otherwise, throw an error.

      rep = replacer;
      if (replacer && typeof replacer !== 'function' &&
              (typeof replacer !== 'object' ||
              typeof replacer.length !== 'number')) {
        throw new Error('JSON.stringify');
      }

      // Make a fake root object containing our value under the key of ''.
      // Return the result of stringifying the value.

      return str('', { '': value });
    };
  }


  // If the JSON object does not yet have a parse method, give it one.

  if (typeof JSON.parse !== 'function') {
    JSON.parse = function (text, reviver) {

      // The parse method takes a text and an optional reviver function, and returns
      // a JavaScript value if the text is a valid JSON text.

      var j;

      function walk(holder, key) {

        // The walk method is used to recursively walk the resulting structure so
        // that modifications can be made.

        var k, v, value = holder[key];
        if (value && typeof value === 'object') {
          for (k in value) {
            if (Object.prototype.hasOwnProperty.call(value, k)) {
              v = walk(value, k);
              if (v !== undefined) {
                value[k] = v;
              } else {
                delete value[k];
              }
            }
          }
        }
        return reviver.call(holder, key, value);
      }


      // Parsing happens in four stages. In the first stage, we replace certain
      // Unicode characters with escape sequences. JavaScript handles many characters
      // incorrectly, either silently deleting them, or treating them as line endings.

      text = String(text);
      cx.lastIndex = 0;
      if (cx.test(text)) {
        text = text.replace(cx, function (a) {
          return '\\u' +
              ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        });
      }

      // In the second stage, we run the text against regular expressions that look
      // for non-JSON patterns. We are especially concerned with '()' and 'new'
      // because they can cause invocation, and '=' because it can cause mutation.
      // But just to be safe, we want to reject all unexpected forms.

      // We split the second stage into 4 regexp operations in order to work around
      // crippling inefficiencies in IE's and Safari's regexp engines. First we
      // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
      // replace all simple value tokens with ']' characters. Third, we delete all
      // open brackets that follow a colon or comma or that begin the text. Finally,
      // we look to see that the remaining characters are only whitespace or ']' or
      // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

      if (/^[\],:{}\s]*$/
              .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                  .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                  .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

        // In the third stage we use the eval function to compile the text into a
        // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
        // in JavaScript: it can begin a block or an object literal. We wrap the text
        // in parens to eliminate the ambiguity.

        j = eval('(' + text + ')');

        // In the optional fourth stage, we recursively walk the new structure, passing
        // each name/value pair to a reviver function for possible transformation.

        return typeof reviver === 'function'
            ? walk({ '': j }, '')
            : j;
      }

      // If the text is not JSON parseable, then a SyntaxError is thrown.

      throw new SyntaxError('JSON.parse');
    };
  }
}());

/*! JsRender v1.0pre: http://github.com/BorisMoore/jsrender */
/*
* Optimized version of jQuery Templates, for rendering to string.
* Does not require jQuery, or HTML DOM
* Integrates with JsViews (http://github.com/BorisMoore/jsviews)
* Copyright 2013, Boris Moore
* Released under the MIT License.
*/
// informal pre beta commit counter: 35 (Beta Candidate)

(function(global, jQuery, undefined) {
	// global is the this object, which is window when running in the usual browser environment.
	"use strict";

	if (jQuery && jQuery.views || global.jsviews) { return; } // JsRender is already loaded

	//========================== Top-level vars ==========================

	var versionNumber = "v1.0pre",

		$, jsvStoreName, rTag, rTmplString,
//TODO	tmplFnsCache = {},
		delimOpenChar0 = "{", delimOpenChar1 = "{", delimCloseChar0 = "}", delimCloseChar1 = "}", linkChar = "^",

		rPath = /^(?:null|true|false|\d[\d.]*|([\w$]+|\.|~([\w$]+)|#(view|([\w$]+))?)([\w$.^]*?)(?:[.[^]([\w$]+)\]?)?)$/g,
		//                                     object     helper    view  viewProperty pathTokens      leafToken

		rParams = /(\()(?=\s*\()|(?:([([])\s*)?(?:([#~]?[\w$.^]+)?\s*((\+\+|--)|\+|-|&&|\|\||===|!==|==|!=|<=|>=|[<>%*!:?\/]|(=))\s*|([#~]?[\w$.^]+)([([])?)|(,\s*)|(\(?)\\?(?:(')|("))|(?:\s*(([)\]])(?=\s*\.|\s*\^)|[)\]])([([]?))|(\s+)/g,
		//          lftPrn0        lftPrn                  path    operator err                                                eq          path2       prn    comma   lftPrn2   apos quot      rtPrn rtPrnDot                        prn2      space
		// (left paren? followed by (path? followed by operator) or (path followed by left paren?)) or comma or apos or quot or right paren or space

		rNewLine = /\s*\n/g,
		rUnescapeQuotes = /\\(['"])/g,
		// escape quotes and \ character
		rEscapeQuotes = /\\?(['"\\])/g,
		rBuildHash = /\x08(~)?([^\x08]+)\x08/g,
		rTestElseIf = /^if\s/,
		rFirstElem = /<(\w+)[>\s]/,
		rPrevElem = /<(\w+)[^>\/]*>[^>]*$/,
		rAttrEncode = /[><"'&]/g, // Includes > encoding since rConvertMarkers in JsViews does not skip > characters in attribute strings
		rHtmlEncode = /[><"'&]/g,
		autoTmplName = 0,
		viewId = 0,
		charEntities = {
			"&": "&amp;",
			"<": "&lt;",
			">": "&gt;",
			"\x00": "&#0;",
			"'": "&#39;",
			'"': "&#34;"
		},
		tmplAttr = "data-jsv-tmpl",
		slice = [].slice,

		$render = {},
		jsvStores = {
			template: {
				compile: compileTmpl
			},
			tag: {
				compile: compileTag
			},
			helper: {},
			converter: {}
		},

		// jsviews object ($.views if jQuery is loaded)
		$views = {
			jsviews: versionNumber,
			render: $render,
			settings: {
				delimiters: $viewsDelimiters,
				debugMode: true,
				tryCatch: true
			},
			sub: {
				// subscription, e.g. JsViews integration
				View: View,
				Error: JsViewsError,
				tmplFn: tmplFn,
				parse: parseParams,
				extend: $extend,
				error: error,
				syntaxError: syntaxError
//TODO			invoke: $invoke
			},
			_cnvt: convertVal,
			_tag: renderTag,

			// TODO provide better debug experience - e.g. support $.views.onError callback
			_err: function(e) {
			  // Place a breakpoint here to intercept template rendering errors
			  debugger;
				return $viewsSettings.debugMode ? ("Error: " + (e.message || e)) + ". " : '';
			}
		};

		function JsViewsError(message, object) {
			// Error exception type for JsViews/JsRender
			// Override of $.views.sub.Error is possible
			if (object && object.onError) {
				if (object.onError(message) === false) {
					return;
				}
			}
			this.name = "JsRender Error";
			this.message = message || "JsRender error";
		}

		function $extend(target, source) {
			var name;
			target = target || {};
			for (name in source) {
				target[name] = source[name];
			}
			return target;
		}

//TODO		function $invoke() {
//			try {
//				return arguments[1].apply(arguments[0], arguments[2]);
//			}
//			catch(e) {
//				throw new $views.sub.Error(e, arguments[0]);
//			}
//		}

		(JsViewsError.prototype = new Error()).constructor = JsViewsError;

	//========================== Top-level functions ==========================

	//===================
	// jsviews.delimiters
	//===================
	function $viewsDelimiters(openChars, closeChars, link) {
		// Set the tag opening and closing delimiters and 'link' character. Default is "{{", "}}" and "^"
		// openChars, closeChars: opening and closing strings, each with two characters

		if (!$viewsSub.rTag || arguments.length) {
			delimOpenChar0 = openChars ? openChars.charAt(0) : delimOpenChar0; // Escape the characters - since they could be regex special characters
			delimOpenChar1 = openChars ? openChars.charAt(1) : delimOpenChar1;
			delimCloseChar0 = closeChars ? closeChars.charAt(0) : delimCloseChar0;
			delimCloseChar1 = closeChars ? closeChars.charAt(1) : delimCloseChar1;
			linkChar = link || linkChar;
			openChars = "\\" + delimOpenChar0 + "(\\" + linkChar + ")?\\" + delimOpenChar1;  // Default is "{^{"
			closeChars = "\\" + delimCloseChar0 + "\\" + delimCloseChar1;                   // Default is "}}"
			// Build regex with new delimiters
			//          tag    (followed by / space or })   or cvtr+colon or html or code
			rTag = "(?:(?:(\\w+(?=[\\/\\s\\" + delimCloseChar0 + "]))|(?:(\\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\\*)))"
				+ "\\s*((?:[^\\" + delimCloseChar0 + "]|\\" + delimCloseChar0 + "(?!\\" + delimCloseChar1 + "))*?)";

			// make rTag available to JsViews (or other components) for parsing binding expressions
			$viewsSub.rTag = rTag + ")";

			rTag = new RegExp(openChars + rTag + "(\\/)?|(?:\\/(\\w+)))" + closeChars, "g");

			// Default:    bind           tag       converter colon html     comment            code      params            slash   closeBlock
			//           /{(\^)?{(?:(?:(\w+(?=[\/\s}]))|(?:(\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\*)))\s*((?:[^}]|}(?!}))*?)(\/)?|(?:\/(\w+)))}}/g

			rTmplString = new RegExp("<.*>|([^\\\\]|^)[{}]|" + openChars + ".*" + closeChars);
			// rTmplString looks for html tags or { or } char not preceded by \\, or JsRender tags {{xxx}}. Each of these strings are considered
			// NOT to be jQuery selectors
		}
		return [delimOpenChar0, delimOpenChar1, delimCloseChar0, delimCloseChar1, linkChar];
	}

	//=========
	// View.get
	//=========

	function getView(inner, type) { //view.get(inner, type)
		if (!type) {
			// view.get(type)
			type = inner;
			inner = undefined;
		}

		var views, i, l, found,
			view = this,
			root = !type || type === "root";
			// If type is undefined, returns root view (view under top view).

		if (inner) {
			// Go through views - this one, and all nested ones, depth-first - and return first one with given type.
			found = view.type === type ? view : undefined;
			if (!found) {
				views = view.views;
				if (view._.useKey) {
					for (i in views) {
						if (found = views[i].get(inner, type)) {
							break;
						}
					}
				} else for (i = 0, l = views.length; !found && i < l; i++) {
					found = views[i].get(inner, type);
				}
			}
		} else if (root) {
			// Find root view. (view whose parent is top view)
			while (view.parent.parent) {
				found = view = view.parent;
			}
		} else while (view && !found) {
			// Go through views - this one, and all parent ones - and return first one with given type.
			found = view.type === type ? view : undefined;
			view = view.parent;
		}
		return found;
	}

	function getIndex() {
		var view = this.get("item");
		return view ? view.index : undefined;
	}

	getIndex.depends = function() {
		return [this.get("item"), "index"];
	};

	//==========
	// View.hlp
	//==========

	function getHelper(helper) {
		// Helper method called as view.hlp(key) from compiled template, for helper functions or template parameters ~foo
		var wrapped,
			view = this,
			res = (view.ctx || {})[helper];

		res = res === undefined ? view.getRsc("helpers", helper) : res;

		if (res) {
			if (typeof res === "function") {
				wrapped = function() {
					// If it is of type function, we will wrap it so it gets called with view as 'this' context.
					// If the helper ~foo() was in a data-link expression, the view will have a 'temporary' linkCtx property too.
					// However note that helper functions on deeper paths will not have access to view and tagCtx.
					// For example, ~util.foo() will have the ~util object as 'this' pointer
					return res.apply(view, arguments);
				};
				$extend(wrapped, res);
			}
		}
		return wrapped || res;
	}

	//==============
	// jsviews._cnvt
	//==============

	function convertVal(converter, view, tagCtx) {
		// self is template object or linkCtx object
		var tmplConverter, tag, value,
			boundTagCtx = +tagCtx === tagCtx && tagCtx, // if value is an integer, then it is the key for the boundTagCtx
			linkCtx = view.linkCtx;

		if (boundTagCtx) {
			// Call compiled function which returns the tagCtxs for current data
			tagCtx = (boundTagCtx = view.tmpl.bnds[boundTagCtx-1])(view.data, view, $views);
		}

		value = tagCtx.args[0];

		if (converter || boundTagCtx) {
			tag = linkCtx && linkCtx.tag || {
				_: {
					inline: !linkCtx
				},
				tagName: converter + ":",
				flow: true,
				_is: "tag"
			};

			tag._.bnd = boundTagCtx;

			if (linkCtx) {
				linkCtx.tag = tag;
				tag.linkCtx = linkCtx;
				tagCtx.ctx = extendCtx(tagCtx.ctx, linkCtx.view.ctx);
			}
			tag.tagCtx = tagCtx;
			tagCtx.view = view;

			tag.ctx = tagCtx.ctx || {};
			delete tagCtx.ctx;
			// Provide this tag on view, for addBindingMarkers on bound tags to add the tag to view._.bnds, associated with the tag id,
			view._.tag = tag;

			converter = converter !== "true" && converter; // If there is a convertBack but no convert, converter will be "true"

			if (converter && ((tmplConverter = view.getRsc("converters", converter)) || error("Unknown converter: {{"+ converter + ":"))) {
				// A call to {{cnvt: ... }} or {^{cnvt: ... }} or data-link="{cnvt: ... }"
				tag.depends = tmplConverter.depends;
				value = tmplConverter.apply(tag, tagCtx.args);
			}
			// Call onRender (used by JsViews if present, to add binding annotations around rendered content)
			value = boundTagCtx && view._.onRender
				? view._.onRender(value, view, boundTagCtx)
				: value;
			view._.tag = undefined;
		}
		return value;
	}

	//=============
	// jsviews._tag
	//=============

	function getResource(resourceType, itemName) {
		var res,
			view = this,
			store = $views[resourceType];

		res = store && store[itemName];
		while ((res === undefined) && view) {
			store = view.tmpl[resourceType];
			res = store && store[itemName];
			view = view.parent;
		}
		return res;
	}

	function renderTag(tagName, parentView, tmpl, tagCtxs) {
		// Called from within compiled template function, to render a template tag
		// Returns the rendered tag

		var render, tag, tags, attr, isElse, parentTag, i, l, itemRet, tagCtx, tagCtxCtx, content, boundTagFn, tagDef,
			ret = "",
			boundTagKey = +tagCtxs === tagCtxs && tagCtxs, // if tagCtxs is an integer, then it is the boundTagKey
			linkCtx = parentView.linkCtx || 0,
			ctx = parentView.ctx,
			parentTmpl = tmpl || parentView.tmpl,
			parentView_ = parentView._;

		if (tagName._is === "tag") {
			tag = tagName;
			tagName = tag.tagName;
		}

		// Provide tagCtx, linkCtx and ctx access from tag
		if (boundTagKey) {
			// if tagCtxs is an integer, we are data binding
			// Call compiled function which returns the tagCtxs for current data
			tagCtxs = (boundTagFn = parentTmpl.bnds[boundTagKey-1])(parentView.data, parentView, $views);
		}

		l = tagCtxs.length;
		tag = tag || linkCtx.tag;
		for (i = 0; i < l; i++) {
			tagCtx = tagCtxs[i];

			// Set the tmpl property to the content of the block tag, unless set as an override property on the tag
			content = tagCtx.tmpl;
			content = tagCtx.content = content && parentTmpl.tmpls[content - 1];
			tmpl = tagCtx.props.tmpl;
			if (!i && (!tmpl || !tag)) {
				tagDef = parentView.getRsc("tags", tagName) || error("Unknown tag: {{"+ tagName + "}}");
			}
			tmpl = tmpl || !i && tagDef.template || content;
			tmpl = "" + tmpl === tmpl // if a string
				? parentView.getRsc("templates", tmpl) || $templates(tmpl)
				: tmpl;

			$extend( tagCtx, {
				tmpl: tmpl,
				render: renderContent,
				index: i,
				view: parentView,
				ctx: extendCtx(tagCtx.ctx, ctx) // Extend parentView.ctx
			}); // Extend parentView.ctx

			if (!tag) {
				// This will only be hit for initial tagCtx (not for {{else}}) - if the tag instance does not exist yet
				// Instantiate tag if it does not yet exist
				if (tagDef.init) {
					// If the tag has not already been instantiated, we will create a new instance.
					// ~tag will access the tag, even within the rendering of the template content of this tag.
					// From child/descendant tags, can access using ~tag.parent, or ~parentTags.tagName
//	TODO provide error handling owned by the tag - using tag.onError
//				try {
					tag = new tagDef.init(tagCtx, linkCtx, ctx);
//				}
//				catch(e) {
//					tagDef.onError(e);
//				}
					// Set attr on linkCtx to ensure outputting to the correct target attribute.
					tag.attr = tag.attr || tagDef.attr || undefined;
					// Setting either linkCtx.attr or this.attr in the init() allows per-instance choice of target attrib.
				} else {
					// This is a simple tag declared as a function. We won't instantiate a specific tag constructor - just a standard instance object.
					tag = {
						// tag instance object if no init constructor
						render: tagDef.render
					};
				}
				tag._ = {
					inline: !linkCtx
				};
				if (linkCtx) {
					// Set attr on linkCtx to ensure outputting to the correct target attribute.
					linkCtx.attr = tag.attr = linkCtx.attr || tag.attr;
					linkCtx.tag = tag;
					tag.linkCtx = linkCtx;
				}
				if (tag._.bnd = boundTagFn || linkCtx) {
					// Bound if {^{tag...}} or data-link="{tag...}"
					tag._.arrVws = {};
				}
				tag.tagName = tagName;
				tag.parent = parentTag = ctx && ctx.tag,
				tag._is = "tag";
				// Provide this tag on view, for addBindingMarkers on bound tags to add the tag to view._.bnds, associated with the tag id,
			}
			parentView_.tag = tag;
			tagCtx.tag = tag;
			tag.tagCtxs = tagCtxs;
			tag.rendering = {}; // Provide object for state during render calls to tag and elses. (Used by {{if}} and {{for}}...)

			if (!tag.flow) {
				tagCtxCtx = tagCtx.ctx = tagCtx.ctx || {};

				// tags hash: tag.ctx.tags, merged with parentView.ctx.tags,
				tags = tagCtxCtx.parentTags = ctx && extendCtx(tagCtxCtx.parentTags, ctx.parentTags) || {};
				if (parentTag) {
					tags[parentTag.tagName] = parentTag;
				}
				tagCtxCtx.tag = tag;
			}
		}
		for (i = 0; i < l; i++) {
			tagCtx = tag.tagCtx = tagCtxs[i];
			tag.ctx = tagCtx.ctx;

			if (render = tag.render) {
				itemRet = render.apply(tag, tagCtx.args);
			}
			ret += itemRet !== undefined
				? itemRet   // Return result of render function unless it is undefined, in which case return rendered template
				: tagCtx.tmpl
					// render template/content on the current data item
					? tagCtx.render()
					: ""; // No return value from render, and no template/content defined, so return ""
		}
		delete tag.rendering;

		tag.tagCtx = tag.tagCtxs[0];
		tag.ctx= tag.tagCtx.ctx;

		if (tag._.inline && (attr = tag.attr) && attr !== "html") {
			ret = attr === "text"
				? $converters.html(ret)
				: "";
		}
		return ret = boundTagKey && parentView._.onRender
			// Call onRender (used by JsViews if present, to add binding annotations around rendered content)
			? parentView._.onRender(ret, parentView, boundTagKey)
			: ret;
	}

	//=================
	// View constructor
	//=================

	function View(context, type, parentView, data, template, key, contentTmpl, onRender) {
		// Constructor for view object in view hierarchy. (Augmented by JsViews if JsViews is loaded)
		var views, parentView_, tag,
			isArray = type === "array",
			self_ = {
				key: 0,
				useKey: isArray ? 0 : 1,
				id: "" + viewId++,
				onRender: onRender,
				bnds: {}
			},
			self = {
				data: data,
				tmpl: template,
				content: contentTmpl,
				views: isArray ? [] : {},
				parent: parentView,
				ctx: context,
				type: type,
				// If the data is an array, this is an 'array view' with a views array for each child 'item view'
				// If the data is not an array, this is an 'item view' with a views 'map' object for any child nested views
				// ._.useKey is non zero if is not an 'array view' (owning a data array). Uuse this as next key for adding to child views map
				get: getView,
				getIndex: getIndex,
				getRsc: getResource,
				hlp: getHelper,
				_: self_,
				_is: "view"
		};
		if (parentView) {
			views = parentView.views;
			parentView_ = parentView._;
			if (parentView_.useKey) {
				// Parent is an 'item view'. Add this view to its views object
				// self._key = is the key in the parent view map
				views[self_.key = "_" + parentView_.useKey++] = self;
				tag = parentView_.tag;
				self_.bnd = isArray && (!tag || !!tag._.bnd && tag); // For array views that are data bound for collection change events, set the
				// view._.bnd property to true for top-level link() or data-link="{for}", or to the tag instance for a data- bound tag, e.g. {^{for ...}}
			} else {
				// Parent is an 'array view'. Add this view to its views array
				views.splice(
					// self._.key = self.index - the index in the parent view array
					self_.key = self.index =
						key !== undefined
							? key
							: views.length,
				0, self);
			}
			// If no context was passed in, use parent context
			// If context was passed in, it should have been merged already with parent context
			self.ctx = context || parentView.ctx;
		}
		return self;
	}

	//=============
	// Registration
	//=============

	function compileChildResources(parentTmpl) {
		var storeName, resources, resourceName, settings, compile;
		for (storeName in jsvStores) {
			settings = jsvStores[storeName];
			if ((compile = settings.compile) && (resources = parentTmpl[storeName + "s"])) {
				for (resourceName in resources) {
					// compile child resource declarations (templates, tags, converters or helpers)
					resources[resourceName] = compile(resourceName, resources[resourceName], parentTmpl, storeName, settings);
				}
			}
		}
	}

	function compileTag(name, item, parentTmpl) {
		var init, tmpl;
		if (typeof item === "function") {
			// Simple tag declared as function. No presenter instantation.
			item = {
				depends: item.depends,
				render: item
			};
		} else {
			// Tag declared as object, used as the prototype for tag instantiation (control/presenter)
			if (tmpl = item.template) {
				item.template = "" + tmpl === tmpl ? ($templates[tmpl] || $templates(tmpl)) : tmpl;
			}
			if (item.init !== false) {
				init = item.init = item.init || function(tagCtx) {};
				init.prototype = item;
				(init.prototype = item).constructor = init;
			}
		}
		if (parentTmpl) {
			item._parentTmpl = parentTmpl;
		}
//TODO	item.onError = function(e) {
//			var error;
//			if (error = this.prototype.onError) {
//				error.call(this, e);
//			} else {
//				throw e;
//			}
//		}
		return item;
	}

	function compileTmpl(name, tmpl, parentTmpl, storeName, storeSettings, options) {
		// tmpl is either a template object, a selector for a template script block, the name of a compiled template, or a template object

		//==== nested functions ====
		function tmplOrMarkupFromStr(value) {
			// If value is of type string - treat as selector, or name of compiled template
			// Return the template object, if already compiled, or the markup string

			if (("" + value === value) || value.nodeType > 0) {
				try {
					elem = value.nodeType > 0
					? value
					: !rTmplString.test(value)
					// If value is a string and does not contain HTML or tag content, then test as selector
						&& jQuery && jQuery(global.document).find(value)[0];
					// If selector is valid and returns at least one element, get first element
					// If invalid, jQuery will throw. We will stay with the original string.
				} catch (e) {}

				if (elem) {
					// Generally this is a script element.
					// However we allow it to be any element, so you can for example take the content of a div,
					// use it as a template, and replace it by the same content rendered against data.
					// e.g. for linking the content of a div to a container, and using the initial content as template:
					// $.link("#content", model, {tmpl: "#content"});

					value = elem.getAttribute(tmplAttr);
					name = name || value;
					value = $templates[value];
					if (!value) {
						// Not already compiled and cached, so compile and cache the name
						// Create a name for compiled template if none provided
						name = name || "_" + autoTmplName++;
						elem.setAttribute(tmplAttr, name);
						// Use tmpl as options
						value = $templates[name] = compileTmpl(name, elem.innerHTML, parentTmpl, storeName, storeSettings, options);
					}
				}
				return value;
			}
			// If value is not a string, return undefined
		}

		var tmplOrMarkup, elem;

		//==== Compile the template ====
		tmpl = tmpl || "";
		tmplOrMarkup = tmplOrMarkupFromStr(tmpl);

		// If options, then this was already compiled from a (script) element template declaration.
		// If not, then if tmpl is a template object, use it for options
		options = options || (tmpl.markup ? tmpl : {});
		options.tmplName = name;
		if (parentTmpl) {
			options._parentTmpl = parentTmpl;
		}
		// If tmpl is not a markup string or a selector string, then it must be a template object
		// In that case, get it from the markup property of the object
		if (!tmplOrMarkup && tmpl.markup && (tmplOrMarkup = tmplOrMarkupFromStr(tmpl.markup))) {
			if (tmplOrMarkup.fn && (tmplOrMarkup.debug !== tmpl.debug || tmplOrMarkup.allowCode !== tmpl.allowCode)) {
				// if the string references a compiled template object, but the debug or allowCode props are different, need to recompile
				tmplOrMarkup = tmplOrMarkup.markup;
			}
		}
		if (tmplOrMarkup !== undefined) {
			if (name && !parentTmpl) {
				$render[name] = function() {
					return tmpl.render.apply(tmpl, arguments);
				};
			}
			if (tmplOrMarkup.fn || tmpl.fn) {
				// tmpl is already compiled, so use it, or if different name is provided, clone it
				if (tmplOrMarkup.fn) {
					if (name && name !== tmplOrMarkup.tmplName) {
						tmpl = extendCtx(options, tmplOrMarkup);
					} else {
						tmpl = tmplOrMarkup;
					}
				}
			} else {
				// tmplOrMarkup is a markup string, not a compiled template
				// Create template object
				tmpl = TmplObject(tmplOrMarkup, options);
				// Compile to AST and then to compiled function
				tmplFn(tmplOrMarkup, tmpl);
			}
			compileChildResources(options);
			return tmpl;
		}
	}
	//==== /end of function compile ====

	function TmplObject(markup, options) {
		// Template object constructor
		var htmlTag,
			wrapMap = $viewsSettings.wrapMap || {},
			tmpl = $extend(
				{
					markup: markup,
					tmpls: [],
					links: {}, // Compiled functions for link expressions
					tags: {}, // Compiled functions for bound tag expressions
					bnds: [],
					_is: "template",
					render: renderContent
				},
				options
			);

		if (!options.htmlTag) {
			// Set tmpl.tag to the top-level HTML tag used in the template, if any...
			htmlTag = rFirstElem.exec(markup);
			tmpl.htmlTag = htmlTag ? htmlTag[1].toLowerCase() : "";
		}
		htmlTag = wrapMap[tmpl.htmlTag];
		if (htmlTag && htmlTag !== wrapMap.div) {
			// When using JsViews, we trim templates which are inserted into HTML contexts where text nodes are not rendered (i.e. not 'Phrasing Content').
			tmpl.markup = $.trim(tmpl.markup);
			tmpl._elCnt = true; // element content model (no rendered text nodes), not phrasing content model
		}

		return tmpl;
	}

	function registerStore(storeName, storeSettings) {

		function theStore(name, item, parentTmpl) {
			// The store is also the function used to add items to the store. e.g. $.templates, or $.views.tags

			// For store of name 'thing', Call as:
			//    $.views.things(items[, parentTmpl]),
			// or $.views.things(name, item[, parentTmpl])

			var onStore, compile, itemName, thisStore;

			if (name && "" + name !== name && !name.nodeType && !name.markup) {
				// Call to $.views.things(items[, parentTmpl]),

				// Adding items to the store
				// If name is a map, then item is parentTmpl. Iterate over map and call store for key.
				for (itemName in name) {
					theStore(itemName, name[itemName], item);
				}
				return $views;
			}
			// Adding a single unnamed item to the store
			if (item === undefined) {
				item = name;
				name = undefined;
			}
			if (name && "" + name !== name) { // name must be a string
				parentTmpl = item;
				item = name;
				name = undefined;
			}
			thisStore = parentTmpl ? parentTmpl[storeNames] = parentTmpl[storeNames] || {} : theStore;
			compile = storeSettings.compile;
			if (onStore = $viewsSub.onBeforeStoreItem) {
				// e.g. provide an external compiler or preprocess the item.
				compile = onStore(thisStore, name, item, compile) || compile;
			}
			if (!name) {
				item = compile(undefined, item);
			} else if (item === null) {
				// If item is null, delete this entry
				delete thisStore[name];
			} else {
				thisStore[name] = compile ? (item = compile(name, item, parentTmpl, storeName, storeSettings)) : item;
			}
			if (item) {
				item._is = storeName;
			}
			if (onStore = $viewsSub.onStoreItem) {
				// e.g. JsViews integration
				onStore(thisStore, name, item, compile);
			}
			return item;
		}

		var storeNames = storeName + "s";

		$views[storeNames] = theStore;
		jsvStores[storeName] = storeSettings;
	}

	//==============
	// renderContent
	//==============

	function renderContent(data, context, parentView, key, isLayout, onRender) {
		// Render template against data as a tree of subviews (nested rendered template instances), or as a string (top-level template).
		// If the data is the parent view, treat as layout template, re-render with the same data context.
		var i, l, dataItem, newView, childView, itemResult, swapContent, tagCtx, contentTmpl, tag_, outerOnRender, tmplName, tmpl,
			self = this,
			allowDataLink = !self.attr || self.attr === "html",
			result = "";

		if (key === true) {
			swapContent = true;
			key = 0;
		}
		if (self.tag) {
			// This is a call from renderTag or tagCtx.render()
			tagCtx = self;
			self = self.tag;
			tag_ = self._;
			tmplName = self.tagName;
			tmpl = tagCtx.tmpl;
			context = extendCtx(context, self.ctx);
			contentTmpl = tagCtx.content; // The wrapped content - to be added to views, below
			if ( tagCtx.props.link === false ) {
				// link=false setting on block tag
				// We will override inherited value of link by the explicit setting link=false taken from props
				// The child views of an unlinked view are also unlinked. So setting child back to true will not have any effect.
				context = context || {};
				context.link = false;
			}
			parentView = parentView || tagCtx.view;
			data = data === undefined ? parentView : data;
		} else {
			tmpl = self.jquery && (self[0] || error('Unknown template: "' + self.selector + '"')) // This is a call from $(selector).render
				|| self;
		}
		if (tmpl) {
			if (!parentView && data && data._is === "view") {
				parentView = data; // When passing in a view to render or link (and not passing in a parent view) use the passed in view as parentView
			}
			if (parentView) {
				contentTmpl = contentTmpl || parentView.content; // The wrapped content - to be added as #content property on views, below
				onRender = onRender || parentView._.onRender;
				if (data === parentView) {
					// Inherit the data from the parent view.
					// This may be the contents of an {{if}} block
					// Set isLayout = true so we don't iterate the if block if the data is an array.
					data = parentView.data;
					isLayout = true;
				}
				context = extendCtx(context, parentView.ctx);
			}
			if (!parentView || parentView.data === undefined) {
				(context = context || {}).root = data; // Provide ~root as shortcut to top-level data.
			}

			// Set additional context on views created here, (as modified context inherited from the parent, and to be inherited by child views)
			// Note: If no jQuery, $extend does not support chained copies - so limit extend() to two parameters

			if (!tmpl.fn) {
				tmpl = $templates[tmpl] || $templates(tmpl);
			}

			if (tmpl) {
				onRender = (context && context.link) !== false && allowDataLink && onRender;
				// If link===false, do not call onRender, so no data-linking marker nodes
				outerOnRender = onRender;
				if (onRender === true) {
					// Used by view.refresh(). Don't create a new wrapper view.
					outerOnRender = undefined;
					onRender = parentView._.onRender;
				}
				if ($.isArray(data) && !isLayout) {
					// Create a view for the array, whose child views correspond to each data item. (Note: if key and parentView are passed in
					// along with parent view, treat as insert -e.g. from view.addViews - so parentView is already the view item for array)
					newView = swapContent
						? parentView :
						(key !== undefined && parentView) || View(context, "array", parentView, data, tmpl, key, contentTmpl, onRender);
					for (i = 0, l = data.length; i < l; i++) {
						// Create a view for each data item.
						dataItem = data[i];
						childView = View(context, "item", newView, dataItem, tmpl, (key || 0) + i, contentTmpl, onRender);
						itemResult = tmpl.fn(dataItem, childView, $views);
						result += newView._.onRender ? newView._.onRender(itemResult, childView) : itemResult;
					}
				} else {
					// Create a view for singleton data object. The type of the view will be the tag name, e.g. "if" or "myTag" except for
					// "item", "array" and "data" views. A "data" view is from programatic render(object) against a 'singleton'.
					newView = swapContent ? parentView : View(context, tmplName||"data", parentView, data, tmpl, key, contentTmpl, onRender);
					if (tag_ && !self.flow) {
						newView.tag = self;
					}
					result += tmpl.fn(data, newView, $views);
				}
				return outerOnRender ? outerOnRender(result, newView) : result;
			}
		}
		return "";
	}

	//===========================
	// Build and compile template
	//===========================

	// Generate a reusable function that will serve to render a template against data
	// (Compile AST then build template function)

	function error(message) {
		if ($viewsSettings.debugMode) {
			throw new $views.sub.Error(message);
		}
	}

	function syntaxError(message) {
		error("Syntax error\n" + message);
	}

	function tmplFn(markup, tmpl, isLinkExpr, convertBack) {
		// Compile markup to AST (abtract syntax tree) then build the template function code from the AST nodes
		// Used for compiling templates, and also by JsViews to build functions for data link expressions

		//==== nested functions ====
		function pushprecedingContent(shift) {
			shift -= loc;
			if (shift) {
				content.push(markup.substr(loc, shift).replace(rNewLine, "\\n"));
			}
		}

		function blockTagCheck(tagName) {
			tagName && syntaxError('Unmatched or missing tag: "{{/' + tagName + '}}" in template:\n' + markup);
		}

		function parseTag(all, bind, tagName, converter, colon, html, comment, codeTag, params, slash, closeBlock, index) {

			//    bind         tag        converter colon html     comment            code      params            slash   closeBlock
			// /{(\^)?{(?:(?:(\w+(?=[\/\s}]))|(?:(\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\*)))\s*((?:[^}]|}(?!}))*?)(\/)?|(?:\/(\w+)))}}/g
			// Build abstract syntax tree (AST): [ tagName, converter, params, content, hash, bindings, contentMarkup ]
			if (html) {
				colon = ":";
				converter = "html";
			}
			slash = slash || isLinkExpr;
			var noError, current0,
				pathBindings = bind && [],
				code = "",
				hash = "",
				passedCtx = "",
				// Block tag if not self-closing and not {{:}} or {{>}} (special case) and not a data-link expression
				block = !slash && !colon && !comment;

			//==== nested helper function ====
			tagName = tagName || colon;
			pushprecedingContent(index);
			loc = index + all.length; // location marker - parsed up to here
			if (codeTag) {
				if (allowCode) {
					content.push(["*", "\n" + params.replace(rUnescapeQuotes, "$1") + "\n"]);
				}
			} else if (tagName) {
				if (tagName === "else") {
					if (rTestElseIf.test(params)) {
						syntaxError('for "{{else if expr}}" use "{{else expr}}"');
					}
					pathBindings = current[6];
					current[7] = markup.substring(current[7], index); // contentMarkup for block tag
					current = stack.pop();
					content = current[3];
					block = true;
				}
				if (params) {
					// remove newlines from the params string, to avoid compiled code errors for unterminated strings
					params = params.replace(rNewLine, " ");
					code = parseParams(params, pathBindings, tmpl)
						.replace(rBuildHash, function(all, isCtx, keyValue) {
							if (isCtx) {
								passedCtx += keyValue + ",";
							} else {
								hash += keyValue + ",";
							}
							return "";
						});
				}
				hash = hash.slice(0, -1);
				code = code.slice(0, -1);
				noError = hash && (hash.indexOf("noerror:true") + 1) && hash || "";

				newNode = [
						tagName,
						converter || !!convertBack || "",
						code,
						block && [],
						'params:"' + params + '",props:{' + hash + "}"
							+ (passedCtx ? ",ctx:{" + passedCtx.slice(0, -1) + "}" : ""),
						noError,
						pathBindings || 0
					];
				content.push(newNode);
				if (block) {
					stack.push(current);
					current = newNode;
					current[7] = loc; // Store current location of open tag, to be able to add contentMarkup when we reach closing tag
				}
			} else if (closeBlock) {
				current0 = current[0];
				blockTagCheck(closeBlock !== current0 && current0 !== "else" && closeBlock);
				current[7] = markup.substring(current[7], index); // contentMarkup for block tag
				current = stack.pop();
			}
			blockTagCheck(!current && closeBlock);
			content = current[3];
		}
		//==== /end of nested functions ====

		var newNode,
			allowCode = tmpl && tmpl.allowCode,
			astTop = [],
			loc = 0,
			stack = [],
			content = astTop,
			current = [, , , astTop];

		markup = markup.replace(rEscapeQuotes, "\\$1");

//TODO	result = tmplFnsCache[markup]; // Only cache if template is not named and markup length < ...,
//and there are no bindings or subtemplates?? Consider standard optimization for data-link="a.b.c"
//		if (result) {
//			tmpl.fn = result;
//		} else {

//		result = markup;

		blockTagCheck(stack[0] && stack[0][3].pop()[0]);

		// Build the AST (abstract syntax tree) under astTop
		markup.replace(rTag, parseTag);

		pushprecedingContent(markup.length);

		if (loc = astTop[astTop.length - 1]) {
			blockTagCheck("" + loc !== loc && (+loc[7] === loc[7]) && loc[0]);
		}
//			result = tmplFnsCache[markup] = buildCode(astTop, tmpl);
//		}
		return buildCode(astTop, isLinkExpr ? markup : tmpl, isLinkExpr);
	}

	function buildCode(ast, tmpl, isLinkExpr) {
		// Build the template function code from the AST nodes, and set as property on the passed-in template object
		// Used for compiling templates, and also by JsViews to build functions for data link expressions
		var i, node, tagName, converter, params, hash, hasTag, hasEncoder, getsVal, hasCnvt, useCnvt, tmplBindings, pathBindings, elseStartIndex, elseIndex,
			nestedTmpls, tmplName, nestedTmpl, tagAndElses, allowCode, content, markup, notElse, nextIsElse, oldCode, isElse, isGetVal, prm, tagCtxFn,
			tmplBindingKey = 0,
			code = "",
			noError = "",
			tmplOptions = {},
			l = ast.length;

		if ("" + tmpl === tmpl) {
			tmplName = isLinkExpr ? 'data-link="' + tmpl.replace(rNewLine, " ").slice(1, -1) + '"' : tmpl;
			tmpl = 0;
		} else {
			tmplName = tmpl.tmplName || "unnamed";
			if (allowCode = tmpl.allowCode) {
				tmplOptions.allowCode = true;
			}
			if (tmpl.debug) {
				tmplOptions.debug = true;
			}
			tmplBindings = tmpl.bnds;
			nestedTmpls = tmpl.tmpls;
		}
		for (i = 0; i < l; i++) {
			// AST nodes: [ tagName, converter, params, content, hash, noError, pathBindings, contentMarkup, link ]
			node = ast[i];

			// Add newline for each callout to t() c() etc. and each markup string
			if ("" + node === node) {
				// a markup string to be inserted
				code += '\nret+="' + node + '";';
			} else {
				// a compiled tag expression to be inserted
				tagName = node[0];
				if (tagName === "*") {
					// Code tag: {{* }}
					code += "" + node[1];
				} else {
					converter = node[1];
					params = node[2];
					content = node[3];
					hash = node[4];
					noError = node[5];
					markup = node[7];

					if (!(isElse = tagName === "else")) {
						tmplBindingKey = 0;
						if (tmplBindings && (pathBindings = node[6])) { // Array of paths, or false if not data-bound
							tmplBindingKey = tmplBindings.push(pathBindings);
						}
					}
					if (isGetVal = tagName === ":") {
						if (converter) {
							tagName = converter === "html" ? ">" : converter + tagName;
						}
						if (noError) {
							// If the tag includes noerror=true, we will do a try catch around expressions for named or unnamed parameters
							// passed to the tag, and return the empty string for each expression if it throws during evaluation
							//TODO This does not work for general case - supporting noError on multiple expressions, e.g. tag args and properties.
							//Consider replacing with try<a.b.c(p,q) + a.d, xxx> and return the value of the expression a.b.c(p,q) + a.d, or, if it throws, return xxx||'' (rather than always the empty string)
							prm = "prm" + i;
							noError = "try{var " + prm + "=[" + params + "][0];}catch(e){" + prm + '="";}\n';
							params = prm;
						}
					} else {
						if (content) {
							// Create template object for nested template
							nestedTmpl = TmplObject(markup, tmplOptions);
							nestedTmpl.tmplName = tmplName + "/" + tagName;
							// Compile to AST and then to compiled function
							buildCode(content, nestedTmpl);
							nestedTmpls.push(nestedTmpl);
						}

						if (!isElse) {
							// This is not an else tag.
							tagAndElses = tagName;
							// Switch to a new code string for this bound tag (and its elses, if it has any) - for returning the tagCtxs array
							oldCode = code;
							code = "";
							elseStartIndex = i;
						}
						nextIsElse = ast[i + 1];
						nextIsElse = nextIsElse && nextIsElse[0] === "else";
					}

//TODO consider passing in ret to c() and t() so they can look at the previous ret, and detect whether this is a jsrender tag _within_an_HTML_element_tag_
// and if so, don't insert marker nodes, add data-link attributes to the HTML element markup... No need for people to set link=false.

//TODO consider the following approach rather than noerror=true: params.replace(/data.try\([^]*\)/)

					hash += ",args:[" + params + "]}";

					if (isGetVal && pathBindings || converter && tagName !== ">") {
						// For convertVal we need a compiled function to return the new tagCtx(s)
						tagCtxFn = new Function("data,view,j,u", " // "
									+ tmplName + " " + tmplBindingKey + " " + tagName + "\n" + noError + "return {" + hash + ";");
						tagCtxFn.paths = pathBindings;
						tagCtxFn._ctxs = tagName;
						if (isLinkExpr) {
							return tagCtxFn;
						}
						useCnvt = 1;
					}

					code += (isGetVal
						? "\n" + (pathBindings ? "" : noError) + (isLinkExpr ? "return " : "ret+=") + (useCnvt // Call _cnvt if there is a converter: {{cnvt: ... }} or {^{cnvt: ... }}
							? (useCnvt = 0, hasCnvt = true, 'c("' + converter + '",view,' + (pathBindings
								? ((tmplBindings[tmplBindingKey - 1] = tagCtxFn), tmplBindingKey) // Store the compiled tagCtxFn in tmpl.bnds, and pass the key to convertVal()
								: "{" + hash) + ");")
							: tagName === ">"
								? (hasEncoder = true, "h(" + params + ");")
								: (getsVal = true, "(v=" + params + ")!=" + (isLinkExpr ? "=" : "") + 'u?v:"";') // Strict equality just for data-link="title{:expr}" so expr=null will remove title attribute 
						)
						: (hasTag = true, "{tmpl:" // Add this tagCtx to the compiled code for the tagCtxs to be passed to renderTag()
							+ (content ? nestedTmpls.length: "0") + "," // For block tags, pass in the key (nestedTmpls.length) to the nested content template
							+ hash + ","));

					if (tagAndElses && !nextIsElse) {
						code = "[" + code.slice(0, -1) + "]"; // This is a data-link expression or the last {{else}} of an inline bound tag. We complete the code for returning the tagCtxs array
						if (isLinkExpr || pathBindings) {
							// This is a bound tag (data-link expression or inline bound tag {^{tag ...}}) so we store a compiled tagCtxs function in tmp.bnds
							code = new Function("data,view,j,u", " // " + tmplName + " " + tmplBindingKey + " " + tagAndElses + "\nreturn " + code + ";");
							if (pathBindings) {
								(tmplBindings[tmplBindingKey - 1] = code).paths = pathBindings;
							}
							code._ctxs = tagName;
							if (isLinkExpr) {
								return code; // For a data-link expression we return the compiled tagCtxs function
							}
						}

						// This is the last {{else}} for an inline tag.
						// For a bound tag, pass the tagCtxs fn lookup key to renderTag.
						// For an unbound tag, include the code directly for evaluating tagCtxs array
						code = oldCode + '\nret+=t("' + tagAndElses + '",view,this,' + (tmplBindingKey || code) + ");";
						pathBindings = 0;
						tagAndElses = 0;
					}
				}
			}
		}
		// Include only the var references that are needed in the code
		code = "// " + tmplName
			+ "\nvar j=j||" + (jQuery ? "jQuery." : "js") + "views"
			+ (getsVal ? ",v" : "")                      // gets value
			+ (hasTag ? ",t=j._tag" : "")                // has tag
			+ (hasCnvt ? ",c=j._cnvt" : "")              // converter
			+ (hasEncoder ? ",h=j.converters.html" : "") // html converter
			+ (isLinkExpr ? ";\n" : ',ret="";\n')
			+ ($viewsSettings.tryCatch ? "try{\n" : "")
			+ (tmplOptions.debug ? "debugger;" : "")
			+ code + (isLinkExpr ? "\n" : "\nreturn ret;\n")
			+ ($viewsSettings.tryCatch ? "\n}catch(e){return j._err(e);}" : "");
		try {
			code = new Function("data,view,j,u", code);
		} catch (e) {
			syntaxError("Compiled template code:\n\n" + code, e);
		}
		if (tmpl) {
			tmpl.fn = code;
		}
		return code;
	}

	function parseParams(params, bindings, tmpl) {

		//function pushBindings() { // Consider structured path bindings
		//	if (bindings) {
		//		named ? bindings[named] = bindings.pop(): bindings.push(list = []);
		//	}
		//}

		function parseTokens(all, lftPrn0, lftPrn, path, operator, err, eq, path2, prn, comma, lftPrn2, apos, quot, rtPrn, rtPrnDot, prn2, space, index, full) {
			// rParams = /(\()(?=\s*\()|(?:([([])\s*)?(?:([#~]?[\w$.^]+)?\s*((\+\+|--)|\+|-|&&|\|\||===|!==|==|!=|<=|>=|[<>%*!:?\/]|(=))\s*|([#~]?[\w$.^]+)([([])?)|(,\s*)|(\(?)\\?(?:(')|("))|(?:\s*((\))(?=\s*\.|\s*\^)|\)|\])([([]?))|(\s+)/g,
			//          lftPrn        lftPrn2                 path    operator err                                                eq          path2       prn    comma   lftPrn2   apos quot      rtPrn rtPrnDot           prn2   space
			// (left paren? followed by (path? followed by operator) or (path followed by paren?)) or comma or apos or quot or right paren or space
			var expr;
			operator = operator || "";
			lftPrn = lftPrn || lftPrn0 || lftPrn2;
			path = path || path2;
			prn = prn || prn2 || "";

			function parsePath(all, object, helper, view, viewProperty, pathTokens, leafToken) {
				// rPath = /^(?:null|true|false|\d[\d.]*|([\w$]+|~([\w$]+)|#(view|([\w$]+))?)([\w$.^]*?)(?:[.[^]([\w$]+)\]?)?)$/g,
				//                                        object   helper    view  viewProperty pathTokens       leafToken
				if (object) {
					bindings && !isAlias && bindings.push(path); // Add path binding for paths on props and args,
//					bindings && !isAlias && list.push(path); // Add path binding for paths on props and args,
					// but not within foo=expr (named parameter) or ~foo=expr (passing in template parameter aliases).
//TODO Add opt-out for path binding {^{foo |expr1| b=|expr2|}
					if (object !== ".") {
						var ret = (helper
								? 'view.hlp("' + helper + '")'
								: view
									? "view"
									: "data")
							+ (leafToken
								? (viewProperty
									? "." + viewProperty
									: helper
										? ""
										: (view ? "" : "." + object)
									) + (pathTokens || "")
								: (leafToken = helper ? "" : view ? viewProperty || "" : object, ""));

						ret = ret + (leafToken ? "." + leafToken : "");

						return ret.slice(0, 9) === "view.data"
							? ret.slice(5) // convert #view.data... to data...
							: ret;
					}
				}
				return all;
			}

			if (err) {
				syntaxError(params);
			} else {
				if (bindings && rtPrnDot) {
					// TODO check for nested call ~foo(~bar().x).y
					// This is a binding to a path in which an object is returned by a helper/data function/expression, e.g. foo()^x.y or (a?b:c)^x.y
					// We create a compiled function to get the object instance (which will be called when the dependent data of the subexpression changes, to return the new object, and trigger re-binding of the subsequent path)
					expr = pathStart[parenDepth]
					if (full.length - 2 > index - expr) { // We need to compile a subexpression
						expr = full.slice(expr, index + 1);
						rtPrnDot = delimOpenChar1 + ":" + expr + delimCloseChar0; // The parameter or function subexpression
						rtPrnDot = tmplLinks[rtPrnDot] = tmplLinks[rtPrnDot] || tmplFn(delimOpenChar0 + rtPrnDot + delimCloseChar1, tmpl, true); // Compile the expression (or use cached copy already in tmpl.links)
						if (!rtPrnDot.paths) {
							parseParams(expr, rtPrnDot.paths = [], tmpl);
						}
						bindings.push({_jsvOb: rtPrnDot}); // Insert special object for in path bindings, to be used for binding the compiled sub expression ()
						//list.push({_jsvOb: rtPrnDot});
					}
				}
				return (aposed
					// within single-quoted string
					? (aposed = !apos, (aposed ? all : '"'))
					: quoted
					// within double-quoted string
						? (quoted = !quot, (quoted ? all : '"'))
						:
					(
						(lftPrn
								? (parenDepth++, pathStart[parenDepth] = index++, lftPrn)
								: "")
						+ (space
							? (parenDepth
								? ""
								//: (pushBindings(), named
								//	? (named = isAlias = false, "\b")
								//	: ",")
								: named
									? (named = isAlias = false, "\b")
									: ","
							)
							: eq
					// named param
					// Insert backspace \b (\x08) as separator for named params, used subsequently by rBuildHash
								? (parenDepth && syntaxError(params), named = path, /*pushBindings(),*/isAlias = path.charAt(0) === "~", '\b' + path + ':')
								: path
					// path
									? (path.split("^").join(".").replace(rPath, parsePath)
										+ (prn
											? (fnCall[++parenDepth] = true, path.charAt(0) !== "." && (pathStart[parenDepth] = index), prn)
											: operator)
									)
									: operator
										? operator
										: rtPrn
					// function
											? ((fnCall[parenDepth--] = false, rtPrn)
												+ (prn
													? (fnCall[++parenDepth] = true, prn)
													: "")
											)
											: comma
//TODO add support for top-level literals
												? (fnCall[parenDepth] || syntaxError(params), ",") // We don't allow top-level literal arrays or objects
												: lftPrn0
													? ""
													: (aposed = apos, quoted = quot, '"')
					))
				);
			}
		}

		var named, isAlias,// list,
			tmplLinks = tmpl.links,
			fnCall = {},
			pathStart = {0:-1},
			parenDepth = 0,
			quoted = false, // boolean for string content in double quotes
			aposed = false; // or in single quotes

		//pushBindings();

		return (params + " ").replace(rParams, parseTokens);
	}

	//==========
	// Utilities
	//==========

	// Merge objects, in particular contexts which inherit from parent contexts
	function extendCtx(context, parentContext) {
		// Return copy of parentContext, unless context is defined and is different, in which case return a new merged context
		// If neither context nor parentContext are undefined, return undefined
		return context && context !== parentContext
			? (parentContext
				? $extend($extend({}, parentContext), context)
				: context)
			: parentContext && $extend({}, parentContext);
	}

	//========================== Initialize ==========================

	for (jsvStoreName in jsvStores) {
		registerStore(jsvStoreName, jsvStores[jsvStoreName]);
	}

	var $templates = $views.templates,
		$converters = $views.converters,
		$helpers = $views.helpers,
		$tags = $views.tags,
		$viewsSub = $views.sub,
		$viewsSettings = $views.settings;

	if (jQuery) {
		////////////////////////////////////////////////////////////////////////////////////////////////
		// jQuery is loaded, so make $ the jQuery object
		$ = jQuery;
		$.fn.render = renderContent;

	} else {
		////////////////////////////////////////////////////////////////////////////////////////////////
		// jQuery is not loaded.

		$ = global.jsviews = {};

		$.isArray = Array && Array.isArray || function(obj) {
			return Object.prototype.toString.call(obj) === "[object Array]";
		};
	}

	$.render = $render;
	$.views = $views;
	$.templates = $templates = $views.templates;

	//========================== Register tags ==========================

	$tags({
		"else": function() {}, // Does nothing but ensures {{else}} tags are recognized as valid
		"if": {
			render: function(val) {
				// This function is called once for {{if}} and once for each {{else}}.
				// We will use the tag.rendering object for carrying rendering state across the calls.
				// If not done (a previous block has not been rendered), look at expression for this block and render the block if expression is truey
				// Otherwise return ""
				var self = this,
					ret = (self.rendering.done || !val && (arguments.length || !self.tagCtx.index))
						? ""
						: (self.rendering.done = true, self.selected = self.tagCtx.index,
							// Test is satisfied, so render content on current context. We call tagCtx.render() rather than return undefined
							// (which would also render the tmpl/content on the current context but would iterate if it is an array)
							self.tagCtx.render());
				return ret;
			},
			onUpdate: function(ev, eventArgs, tagCtxs) {
				var tci, prevArg, different;
				for (tci = 0; (prevArg = this.tagCtxs[tci]) && prevArg.args.length; tci++) {
					prevArg = prevArg.args[0];
					different = !prevArg !== !tagCtxs[tci].args[0];
					if (!!prevArg || different) {
						return different;
						// If newArg and prevArg are both truey, return false to cancel update. (Even if values on later elses are different, we still don't want to update, since rendered output would be unchanged)
						// If newArg and prevArg are different, return true, to update
						// If newArg and prevArg are both falsey, move to the next {{else ...}}
					}
				}
				// Boolean value of all args are unchanged (falsey), so return false to cancel update
				return false;
			},
			flow: true
		},
		"for": {
			render: function(val) {
				// This function is called once for {{for}} and once for each {{else}}.
				// We will use the tag.rendering object for carrying rendering state across the calls.
				var i, arg,
					self = this,
					tagCtx = self.tagCtx,
					noArg = !arguments.length,
					result = "",
					done = noArg || 0;

				if (!self.rendering.done) {
					if (noArg) {
						result = undefined;
					} else if (val !== undefined) {
						result += tagCtx.render(val);
						// {{for}} (or {{else}}) with no argument will render the block content
						done += $.isArray(val) ? val.length : 1;
					}
					if (self.rendering.done = done) {
						self.selected = tagCtx.index;
					}
					// If nothing was rendered we will look at the next {{else}}. Otherwise, we are done.
				}
				return result;
			},
			onUpdate: function(ev, eventArgs, tagCtxs) {
				//Consider adding filtering for perf optimization. However the below prevents update on some scenarios which _should_ update - namely when there is another array on which for also depends.
				//var i, l, tci, prevArg;
				//for (tci = 0; (prevArg = this.tagCtxs[tci]) && prevArg.args.length; tci++) {
				//	if (prevArg.args[0] !== tagCtxs[tci].args[0]) {
				//		return true;
				//	}
				//}
				//return false;
			},
			onArrayChange: function(ev, eventArgs) {
				var arrayView,
					self = this,
					change = eventArgs.change;
				if (this.tagCtxs[1] && (
						   change === "insert" && ev.target.length === eventArgs.items.length // inserting, and new length is same as inserted length, so going from 0 to n
						|| change === "remove" && !ev.target.length // removing , and new length 0, so going from n to 0
						|| change === "refresh" && !eventArgs.oldItems.length !== !ev.target.length // refreshing, and length is going from 0 to n or from n to 0
					)) {
					this.refresh();
				} else {
					for (arrayView in self._.arrVws) {
						arrayView = self._.arrVws[arrayView];
						if (arrayView.data === ev.target) {
							arrayView._.onArrayChange.apply(arrayView, arguments);
						}
					}
				}
				ev.done = true;
			},
			flow: true
		},
		include: {
			flow: true
		},
		"*": {
			// {{* code... }} - Ignored if template.allowCode is false. Otherwise include code in compiled template
			render: function(value) {
				return value; // Include the code.
			},
			flow: true
		}
	});

	//========================== Register global helpers ==========================

	//	$helpers({ // Global helper functions
	//		// TODO add any useful built-in helper functions
	//	});

	//========================== Register converters ==========================

	// Get character entity for HTML and Attribute encoding
	function getCharEntity(ch) {
		return charEntities[ch];
	}

	$converters({
		html: function(text) {
			// HTML encode: Replace < > & and ' and " by corresponding entities.
			return text != undefined ? String(text).replace(rHtmlEncode, getCharEntity) : ""; // null and undefined return ""
		},
		attr: function(text) {
			// Attribute encode: Replace < > & ' and " by corresponding entities.
			return text != undefined ? String(text).replace(rAttrEncode, getCharEntity) : text === null ? null : ""; // null returns null, e.g. to remove attribute. undefined returns ""
		},
		url: function(text) {
			// TODO - support chaining {{attr|url:....}} to protect against injection attacks from url parameters containing " or '.
			// URL encoding helper.
			return text != undefined ? encodeURI(String(text)) : text === null ? null : ""; // null returns null, e.g. to remove attribute. undefined returns ""
		}
	});

	//========================== Define default delimiters ==========================
	$viewsDelimiters();

})(this, this.jQuery);

// Knockout JavaScript library v2.2.1
// (c) Steven Sanderson - http://knockoutjs.com/
// License: MIT (http://www.opensource.org/licenses/mit-license.php)

(function () {
  var DEBUG = true;
  (function (window, document, navigator, jQuery, undefined) {
    !function (factory) {
      // Support three module loading scenarios
      if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {
        // [1] CommonJS/Node.js
        var target = module['exports'] || exports; // module.exports is for Node.js
        factory(target);
      } else if (typeof define === 'function' && define['amd']) {
        // [2] AMD anonymous module
        define(['exports'], factory);
      } else {
        // [3] No module loader (plain <script> tag) - put directly in global namespace
        factory(window['ko'] = {});
      }
    }(function (koExports) {
      // Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).
      // In the future, the following "ko" variable may be made distinct from "koExports" so that private objects are not externally reachable.
      var ko = typeof koExports !== 'undefined' ? koExports : {};
      // Google Closure Compiler helpers (used only to make the minified file smaller)
      ko.exportSymbol = function (koPath, object) {
        var tokens = koPath.split(".");

        // In the future, "ko" may become distinct from "koExports" (so that non-exported objects are not reachable)
        // At that point, "target" would be set to: (typeof koExports !== "undefined" ? koExports : ko)
        var target = ko;

        for (var i = 0; i < tokens.length - 1; i++)
          target = target[tokens[i]];
        target[tokens[tokens.length - 1]] = object;
      };
      ko.exportProperty = function (owner, publicName, object) {
        owner[publicName] = object;
      };
      ko.version = "2.2.1";

      ko.exportSymbol('version', ko.version);
      ko.utils = new (function () {
        var stringTrimRegex = /^(\s|\u00A0)+|(\s|\u00A0)+$/g;

        // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)
        var knownEvents = {}, knownEventTypesByEventName = {};
        var keyEventTypeName = /Firefox\/2/i.test(navigator.userAgent) ? 'KeyboardEvent' : 'UIEvents';
        knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];
        knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];
        for (var eventType in knownEvents) {
          var knownEventsForType = knownEvents[eventType];
          if (knownEventsForType.length) {
            for (var i = 0, j = knownEventsForType.length; i < j; i++)
              knownEventTypesByEventName[knownEventsForType[i]] = eventType;
          }
        }
        var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406

        // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)
        // Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.
        // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.
        // If there is a future need to detect specific versions of IE10+, we will amend this.
        var ieVersion = (function () {
          var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');

          // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment
          while (
              div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',
              iElems[0]
          );
          return version > 4 ? version : undefined;
        }());
        var isIe6 = ieVersion === 6,
            isIe7 = ieVersion === 7;

        function isClickOnCheckableElement(element, eventType) {
          if ((ko.utils.tagNameLower(element) !== "input") || !element.type) return false;
          if (eventType.toLowerCase() != "click") return false;
          var inputType = element.type;
          return (inputType == "checkbox") || (inputType == "radio");
        }

        return {
          fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],

          arrayForEach: function (array, action) {
            for (var i = 0, j = array.length; i < j; i++)
              action(array[i]);
          },

          arrayIndexOf: function (array, item) {
            if (typeof Array.prototype.indexOf == "function")
              return Array.prototype.indexOf.call(array, item);
            for (var i = 0, j = array.length; i < j; i++)
              if (array[i] === item)
                return i;
            return -1;
          },

          arrayFirst: function (array, predicate, predicateOwner) {
            for (var i = 0, j = array.length; i < j; i++)
              if (predicate.call(predicateOwner, array[i]))
                return array[i];
            return null;
          },

          arrayRemoveItem: function (array, itemToRemove) {
            var index = ko.utils.arrayIndexOf(array, itemToRemove);
            if (index >= 0)
              array.splice(index, 1);
          },

          arrayGetDistinctValues: function (array) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i < j; i++) {
              if (ko.utils.arrayIndexOf(result, array[i]) < 0)
                result.push(array[i]);
            }
            return result;
          },

          arrayMap: function (array, mapping) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i < j; i++)
              result.push(mapping(array[i]));
            return result;
          },

          arrayFilter: function (array, predicate) {
            array = array || [];
            var result = [];
            for (var i = 0, j = array.length; i < j; i++)
              if (predicate(array[i]))
                result.push(array[i]);
            return result;
          },

          arrayPushAll: function (array, valuesToPush) {
            if (valuesToPush instanceof Array)
              array.push.apply(array, valuesToPush);
            else
              for (var i = 0, j = valuesToPush.length; i < j; i++)
                array.push(valuesToPush[i]);
            return array;
          },

          extend: function (target, source) {
            if (source) {
              for (var prop in source) {
                if (source.hasOwnProperty(prop)) {
                  target[prop] = source[prop];
                }
              }
            }
            return target;
          },

          emptyDomNode: function (domNode) {
            while (domNode.firstChild) {
              ko.removeNode(domNode.firstChild);
            }
          },

          moveCleanedNodesToContainerElement: function (nodes) {
            // Ensure it's a real array, as we're about to reparent the nodes and
            // we don't want the underlying collection to change while we're doing that.
            var nodesArray = ko.utils.makeArray(nodes);

            var container = document.createElement('div');
            for (var i = 0, j = nodesArray.length; i < j; i++) {
              container.appendChild(ko.cleanNode(nodesArray[i]));
            }
            return container;
          },

          cloneNodes: function (nodesArray, shouldCleanNodes) {
            for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {
              var clonedNode = nodesArray[i].cloneNode(true);
              newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);
            }
            return newNodesArray;
          },

          setDomNodeChildren: function (domNode, childNodes) {
            ko.utils.emptyDomNode(domNode);
            if (childNodes) {
              for (var i = 0, j = childNodes.length; i < j; i++)
                domNode.appendChild(childNodes[i]);
            }
          },

          replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {
            var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;
            if (nodesToReplaceArray.length > 0) {
              var insertionPoint = nodesToReplaceArray[0];
              var parent = insertionPoint.parentNode;
              for (var i = 0, j = newNodesArray.length; i < j; i++)
                parent.insertBefore(newNodesArray[i], insertionPoint);
              for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {
                ko.removeNode(nodesToReplaceArray[i]);
              }
            }
          },

          setOptionNodeSelectionState: function (optionNode, isSelected) {
            // IE6 sometimes throws "unknown error" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.
            if (ieVersion < 7)
              optionNode.setAttribute("selected", isSelected);
            else
              optionNode.selected = isSelected;
          },

          stringTrim: function (string) {
            return (string || "").replace(stringTrimRegex, "");
          },

          stringTokenize: function (string, delimiter) {
            var result = [];
            var tokens = (string || "").split(delimiter);
            for (var i = 0, j = tokens.length; i < j; i++) {
              var trimmed = ko.utils.stringTrim(tokens[i]);
              if (trimmed !== "")
                result.push(trimmed);
            }
            return result;
          },

          stringStartsWith: function (string, startsWith) {
            string = string || "";
            if (startsWith.length > string.length)
              return false;
            return string.substring(0, startsWith.length) === startsWith;
          },

          domNodeIsContainedBy: function (node, containedByNode) {
            if (containedByNode.compareDocumentPosition)
              return (containedByNode.compareDocumentPosition(node) & 16) == 16;
            while (node != null) {
              if (node == containedByNode)
                return true;
              node = node.parentNode;
            }
            return false;
          },

          domNodeIsAttachedToDocument: function (node) {
            return ko.utils.domNodeIsContainedBy(node, node.ownerDocument);
          },

          tagNameLower: function (element) {
            // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.
            // Possible future optimization: If we know it's an element from an XHTML document (not HTML),
            // we don't need to do the .toLowerCase() as it will always be lower case anyway.
            return element && element.tagName && element.tagName.toLowerCase();
          },

          registerEventHandler: function (element, eventType, handler) {
            var mustUseAttachEvent = ieVersion && eventsThatMustBeRegisteredUsingAttachEvent[eventType];
            if (!mustUseAttachEvent && typeof jQuery != "undefined") {
              if (isClickOnCheckableElement(element, eventType)) {
                // For click events on checkboxes, jQuery interferes with the event handling in an awkward way:
                // it toggles the element checked state *after* the click event handlers run, whereas native
                // click events toggle the checked state *before* the event handler.
                // Fix this by intecepting the handler and applying the correct checkedness before it runs.
                var originalHandler = handler;
                handler = function (event, eventData) {
                  var jQuerySuppliedCheckedState = this.checked;
                  if (eventData)
                    this.checked = eventData.checkedStateBeforeEvent !== true;
                  originalHandler.call(this, event);
                  this.checked = jQuerySuppliedCheckedState; // Restore the state jQuery applied
                };
              }
              jQuery(element)['bind'](eventType, handler);
            } else if (!mustUseAttachEvent && typeof element.addEventListener == "function")
              element.addEventListener(eventType, handler, false);
            else if (typeof element.attachEvent != "undefined")
              element.attachEvent("on" + eventType, function (event) {
                handler.call(element, event);
              });
            else
              throw new Error("Browser doesn't support addEventListener or attachEvent");
          },

          triggerEvent: function (element, eventType) {
            if (!(element && element.nodeType))
              throw new Error("element must be a DOM node when calling triggerEvent");

            if (typeof jQuery != "undefined") {
              var eventData = [];
              if (isClickOnCheckableElement(element, eventType)) {
                // Work around the jQuery "click events on checkboxes" issue described above by storing the original checked state before triggering the handler
                eventData.push({ checkedStateBeforeEvent: element.checked });
              }
              jQuery(element)['trigger'](eventType, eventData);
            } else if (typeof document.createEvent == "function") {
              if (typeof element.dispatchEvent == "function") {
                var eventCategory = knownEventTypesByEventName[eventType] || "HTMLEvents";
                var event = document.createEvent(eventCategory);
                event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);
                element.dispatchEvent(event);
              }
              else
                throw new Error("The supplied element doesn't support dispatchEvent");
            } else if (typeof element.fireEvent != "undefined") {
              // Unlike other browsers, IE doesn't change the checked state of checkboxes/radiobuttons when you trigger their "click" event
              // so to make it consistent, we'll do it manually here
              if (isClickOnCheckableElement(element, eventType))
                element.checked = element.checked !== true;
              element.fireEvent("on" + eventType);
            }
            else
              throw new Error("Browser doesn't support triggering events");
          },

          unwrapObservable: function (value) {
            return ko.isObservable(value) ? value() : value;
          },

          peekObservable: function (value) {
            return ko.isObservable(value) ? value.peek() : value;
          },

          toggleDomNodeCssClass: function (node, classNames, shouldHaveClass) {
            if (classNames) {
              var cssClassNameRegex = /[\w-]+/g,
                  currentClassNames = node.className.match(cssClassNameRegex) || [];
              ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function (className) {
                var indexOfClass = ko.utils.arrayIndexOf(currentClassNames, className);
                if (indexOfClass >= 0) {
                  if (!shouldHaveClass)
                    currentClassNames.splice(indexOfClass, 1);
                } else {
                  if (shouldHaveClass)
                    currentClassNames.push(className);
                }
              });
              node.className = currentClassNames.join(" ");
            }
          },

          setTextContent: function (element, textContent) {
            var value = ko.utils.unwrapObservable(textContent);
            if ((value === null) || (value === undefined))
              value = "";

            if (element.nodeType === 3) {
              element.data = value;
            } else {
              // We need there to be exactly one child: a text node.
              // If there are no children, more than one, or if it's not a text node,
              // we'll clear everything and create a single text node.
              var innerTextNode = ko.virtualElements.firstChild(element);
              if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {
                ko.virtualElements.setDomNodeChildren(element, [document.createTextNode(value)]);
              } else {
                innerTextNode.data = value;
              }

              ko.utils.forceRefresh(element);
            }
          },

          setElementName: function (element, name) {
            element.name = name;

            // Workaround IE 6/7 issue
            // - https://github.com/SteveSanderson/knockout/issues/197
            // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/
            if (ieVersion <= 7) {
              try {
                element.mergeAttributes(document.createElement("<input name='" + element.name + "'/>"), false);
              }
              catch (e) { } // For IE9 with doc mode "IE9 Standards" and browser mode "IE9 Compatibility View"
            }
          },

          forceRefresh: function (node) {
            // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209
            if (ieVersion >= 9) {
              // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container
              var elem = node.nodeType == 1 ? node : node.parentNode;
              if (elem.style)
                elem.style.zoom = elem.style.zoom;
            }
          },

          ensureSelectElementIsRenderedCorrectly: function (selectElement) {
            // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.
            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)
            if (ieVersion >= 9) {
              var originalWidth = selectElement.style.width;
              selectElement.style.width = 0;
              selectElement.style.width = originalWidth;
            }
          },

          range: function (min, max) {
            min = ko.utils.unwrapObservable(min);
            max = ko.utils.unwrapObservable(max);
            var result = [];
            for (var i = min; i <= max; i++)
              result.push(i);
            return result;
          },

          makeArray: function (arrayLikeObject) {
            var result = [];
            for (var i = 0, j = arrayLikeObject.length; i < j; i++) {
              result.push(arrayLikeObject[i]);
            };
            return result;
          },

          isIe6: isIe6,
          isIe7: isIe7,
          ieVersion: ieVersion,

          getFormFields: function (form, fieldName) {
            var fields = ko.utils.makeArray(form.getElementsByTagName("input")).concat(ko.utils.makeArray(form.getElementsByTagName("textarea")));
            var isMatchingField = (typeof fieldName == 'string')
                ? function (field) { return field.name === fieldName }
                : function (field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate
            var matches = [];
            for (var i = fields.length - 1; i >= 0; i--) {
              if (isMatchingField(fields[i]))
                matches.push(fields[i]);
            };
            return matches;
          },

          parseJson: function (jsonString) {
            if (typeof jsonString == "string") {
              jsonString = ko.utils.stringTrim(jsonString);
              if (jsonString) {
                if (window.JSON && window.JSON.parse) // Use native parsing where available
                  return window.JSON.parse(jsonString);
                return (new Function("return " + jsonString))(); // Fallback on less safe parsing for older browsers
              }
            }
            return null;
          },

          stringifyJson: function (data, replacer, space) {   // replacer and space are optional
            if ((typeof JSON == "undefined") || (typeof JSON.stringify == "undefined"))
              throw new Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");
            return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);
          },

          postJson: function (urlOrForm, data, options) {
            options = options || {};
            var params = options['params'] || {};
            var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;
            var url = urlOrForm;

            // If we were given a form, use its 'action' URL and pick out any requested field values
            if ((typeof urlOrForm == 'object') && (ko.utils.tagNameLower(urlOrForm) === "form")) {
              var originalForm = urlOrForm;
              url = originalForm.action;
              for (var i = includeFields.length - 1; i >= 0; i--) {
                var fields = ko.utils.getFormFields(originalForm, includeFields[i]);
                for (var j = fields.length - 1; j >= 0; j--)
                  params[fields[j].name] = fields[j].value;
              }
            }

            data = ko.utils.unwrapObservable(data);
            var form = document.createElement("form");
            form.style.display = "none";
            form.action = url;
            form.method = "post";
            for (var key in data) {
              var input = document.createElement("input");
              input.name = key;
              input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));
              form.appendChild(input);
            }
            for (var key in params) {
              var input = document.createElement("input");
              input.name = key;
              input.value = params[key];
              form.appendChild(input);
            }
            document.body.appendChild(form);
            options['submitter'] ? options['submitter'](form) : form.submit();
            setTimeout(function () { form.parentNode.removeChild(form); }, 0);
          }
        }
      })();

      ko.exportSymbol('utils', ko.utils);
      ko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);
      ko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);
      ko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);
      ko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);
      ko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);
      ko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);
      ko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);
      ko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);
      ko.exportSymbol('utils.extend', ko.utils.extend);
      ko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);
      ko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);
      ko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);
      ko.exportSymbol('utils.postJson', ko.utils.postJson);
      ko.exportSymbol('utils.parseJson', ko.utils.parseJson);
      ko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);
      ko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);
      ko.exportSymbol('utils.range', ko.utils.range);
      ko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);
      ko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);
      ko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);

      if (!Function.prototype['bind']) {
        // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)
        // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js
        Function.prototype['bind'] = function (object) {
          var originalFunction = this, args = Array.prototype.slice.call(arguments), object = args.shift();
          return function () {
            return originalFunction.apply(object, args.concat(Array.prototype.slice.call(arguments)));
          };
        };
      }

      ko.utils.domData = new (function () {
        var uniqueId = 0;
        var dataStoreKeyExpandoPropertyName = "__ko__" + (new Date).getTime();
        var dataStore = {};
        return {
          get: function (node, key) {
            var allDataForNode = ko.utils.domData.getAll(node, false);
            return allDataForNode === undefined ? undefined : allDataForNode[key];
          },
          set: function (node, key, value) {
            if (value === undefined) {
              // Make sure we don't actually create a new domData key if we are actually deleting a value
              if (ko.utils.domData.getAll(node, false) === undefined)
                return;
            }
            var allDataForNode = ko.utils.domData.getAll(node, true);
            allDataForNode[key] = value;
          },
          getAll: function (node, createIfNotFound) {
            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];
            var hasExistingDataStore = dataStoreKey && (dataStoreKey !== "null") && dataStore[dataStoreKey];
            if (!hasExistingDataStore) {
              if (!createIfNotFound)
                return undefined;
              dataStoreKey = node[dataStoreKeyExpandoPropertyName] = "ko" + uniqueId++;
              dataStore[dataStoreKey] = {};
            }
            return dataStore[dataStoreKey];
          },
          clear: function (node) {
            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];
            if (dataStoreKey) {
              delete dataStore[dataStoreKey];
              node[dataStoreKeyExpandoPropertyName] = null;
              return true; // Exposing "did clean" flag purely so specs can infer whether things have been cleaned up as intended
            }
            return false;
          }
        }
      })();

      ko.exportSymbol('utils.domData', ko.utils.domData);
      ko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully

      ko.utils.domNodeDisposal = new (function () {
        var domDataKey = "__ko_domNodeDisposal__" + (new Date).getTime();
        var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document
        var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document

        function getDisposeCallbacksCollection(node, createIfNotFound) {
          var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);
          if ((allDisposeCallbacks === undefined) && createIfNotFound) {
            allDisposeCallbacks = [];
            ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);
          }
          return allDisposeCallbacks;
        }
        function destroyCallbacksCollection(node) {
          ko.utils.domData.set(node, domDataKey, undefined);
        }

        function cleanSingleNode(node) {
          // Run all the dispose callbacks
          var callbacks = getDisposeCallbacksCollection(node, false);
          if (callbacks) {
            callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)
            for (var i = 0; i < callbacks.length; i++)
              callbacks[i](node);
          }

          // Also erase the DOM data
          ko.utils.domData.clear(node);

          // Special support for jQuery here because it's so commonly used.
          // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData
          // so notify it to tear down any resources associated with the node & descendants here.
          if ((typeof jQuery == "function") && (typeof jQuery['cleanData'] == "function"))
            jQuery['cleanData']([node]);

          // Also clear any immediate-child comment nodes, as these wouldn't have been found by
          // node.getElementsByTagName("*") in cleanNode() (comment nodes aren't elements)
          if (cleanableNodeTypesWithDescendants[node.nodeType])
            cleanImmediateCommentTypeChildren(node);
        }

        function cleanImmediateCommentTypeChildren(nodeWithChildren) {
          var child, nextChild = nodeWithChildren.firstChild;
          while (child = nextChild) {
            nextChild = child.nextSibling;
            if (child.nodeType === 8)
              cleanSingleNode(child);
          }
        }

        return {
          addDisposeCallback: function (node, callback) {
            if (typeof callback != "function")
              throw new Error("Callback must be a function");
            getDisposeCallbacksCollection(node, true).push(callback);
          },

          removeDisposeCallback: function (node, callback) {
            var callbacksCollection = getDisposeCallbacksCollection(node, false);
            if (callbacksCollection) {
              ko.utils.arrayRemoveItem(callbacksCollection, callback);
              if (callbacksCollection.length == 0)
                destroyCallbacksCollection(node);
            }
          },

          cleanNode: function (node) {
            // First clean this node, where applicable
            if (cleanableNodeTypes[node.nodeType]) {
              cleanSingleNode(node);

              // ... then its descendants, where applicable
              if (cleanableNodeTypesWithDescendants[node.nodeType]) {
                // Clone the descendants list in case it changes during iteration
                var descendants = [];
                ko.utils.arrayPushAll(descendants, node.getElementsByTagName("*"));
                for (var i = 0, j = descendants.length; i < j; i++)
                  cleanSingleNode(descendants[i]);
              }
            }
            return node;
          },

          removeNode: function (node) {
            ko.cleanNode(node);
            if (node.parentNode)
              node.parentNode.removeChild(node);
          }
        }
      })();
      ko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience
      ko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience
      ko.exportSymbol('cleanNode', ko.cleanNode);
      ko.exportSymbol('removeNode', ko.removeNode);
      ko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);
      ko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);
      ko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);
      (function () {
        var leadingCommentRegex = /^(\s*)<!--(.*?)-->/;

        function simpleHtmlParse(html) {
          // Based on jQuery's "clean" function, but only accounting for table-related elements.
          // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's "clean" function directly

          // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of
          // a descendant node. For example: "<div><!-- mycomment -->abc</div>" will get parsed as "<div>abc</div>"
          // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node
          // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.

          // Trim whitespace, otherwise indexOf won't work as expected
          var tags = ko.utils.stringTrim(html).toLowerCase(), div = document.createElement("div");

          // Finds the first match from the left column, and returns the corresponding "wrap" data from the right column
          var wrap = tags.match(/^<(thead|tbody|tfoot)/) && [1, "<table>", "</table>"] ||
                     !tags.indexOf("<tr") && [2, "<table><tbody>", "</tbody></table>"] ||
                     (!tags.indexOf("<td") || !tags.indexOf("<th")) && [3, "<table><tbody><tr>", "</tr></tbody></table>"] ||
                     /* anything else */[0, "", ""];

          // Go to html and back, then peel off extra wrappers
          // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.
          var markup = "ignored<div>" + wrap[1] + html + wrap[2] + "</div>";
          if (typeof window['innerShiv'] == "function") {
            div.appendChild(window['innerShiv'](markup));
          } else {
            div.innerHTML = markup;
          }

          // Move to the right depth
          while (wrap[0]--)
            div = div.lastChild;

          return ko.utils.makeArray(div.lastChild.childNodes);
        }

        function jQueryHtmlParse(html) {
          // jQuery's "parseHTML" function was introduced in jQuery 1.8.0 and is a documented public API.
          if (jQuery['parseHTML']) {
            return jQuery['parseHTML'](html);
          } else {
            // For jQuery < 1.8.0, we fall back on the undocumented internal "clean" function.
            var elems = jQuery['clean']([html]);

            // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.
            // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.
            // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.
            if (elems && elems[0]) {
              // Find the top-most parent element that's a direct child of a document fragment
              var elem = elems[0];
              while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)
                elem = elem.parentNode;
              // ... then detach it
              if (elem.parentNode)
                elem.parentNode.removeChild(elem);
            }

            return elems;
          }
        }

        ko.utils.parseHtmlFragment = function (html) {
          return typeof jQuery != 'undefined' ? jQueryHtmlParse(html)   // As below, benefit from jQuery's optimisations where possible
                                              : simpleHtmlParse(html);  // ... otherwise, this simple logic will do in most common cases.
        };

        ko.utils.setHtml = function (node, html) {
          ko.utils.emptyDomNode(node);

          // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it
          html = ko.utils.unwrapObservable(html);

          if ((html !== null) && (html !== undefined)) {
            if (typeof html != 'string')
              html = html.toString();

            // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,
            // for example <tr> elements which are not normally allowed to exist on their own.
            // If you've referenced jQuery we'll use that rather than duplicating its code.
            if (typeof jQuery != 'undefined') {
              jQuery(node)['html'](html);
            } else {
              // ... otherwise, use KO's own parsing logic.
              var parsedNodes = ko.utils.parseHtmlFragment(html);
              for (var i = 0; i < parsedNodes.length; i++)
                node.appendChild(parsedNodes[i]);
            }
          }
        };
      })();

      ko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);
      ko.exportSymbol('utils.setHtml', ko.utils.setHtml);

      ko.memoization = (function () {
        var memos = {};

        function randomMax8HexChars() {
          return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);
        }
        function generateRandomId() {
          return randomMax8HexChars() + randomMax8HexChars();
        }
        function findMemoNodes(rootNode, appendToArray) {
          if (!rootNode)
            return;
          if (rootNode.nodeType == 8) {
            var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);
            if (memoId != null)
              appendToArray.push({ domNode: rootNode, memoId: memoId });
          } else if (rootNode.nodeType == 1) {
            for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)
              findMemoNodes(childNodes[i], appendToArray);
          }
        }

        return {
          memoize: function (callback) {
            if (typeof callback != "function")
              throw new Error("You can only pass a function to ko.memoization.memoize()");
            var memoId = generateRandomId();
            memos[memoId] = callback;
            return "<!--[ko_memo:" + memoId + "]-->";
          },

          unmemoize: function (memoId, callbackParams) {
            var callback = memos[memoId];
            if (callback === undefined)
              throw new Error("Couldn't find any memo with ID " + memoId + ". Perhaps it's already been unmemoized.");
            try {
              callback.apply(null, callbackParams || []);
              return true;
            }
            finally { delete memos[memoId]; }
          },

          unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {
            var memos = [];
            findMemoNodes(domNode, memos);
            for (var i = 0, j = memos.length; i < j; i++) {
              var node = memos[i].domNode;
              var combinedParams = [node];
              if (extraCallbackParamsArray)
                ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);
              ko.memoization.unmemoize(memos[i].memoId, combinedParams);
              node.nodeValue = ""; // Neuter this node so we don't try to unmemoize it again
              if (node.parentNode)
                node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)
            }
          },

          parseMemoText: function (memoText) {
            var match = memoText.match(/^\[ko_memo\:(.*?)\]$/);
            return match ? match[1] : null;
          }
        };
      })();

      ko.exportSymbol('memoization', ko.memoization);
      ko.exportSymbol('memoization.memoize', ko.memoization.memoize);
      ko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);
      ko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);
      ko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);
      ko.extenders = {
        'throttle': function (target, timeout) {
          // Throttling means two things:

          // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies
          //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate
          target['throttleEvaluation'] = timeout;

          // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*
          //     so the target cannot change value synchronously or faster than a certain rate
          var writeTimeoutInstance = null;
          return ko.dependentObservable({
            'read': target,
            'write': function (value) {
              clearTimeout(writeTimeoutInstance);
              writeTimeoutInstance = setTimeout(function () {
                target(value);
              }, timeout);
            }
          });
        },

        'notify': function (target, notifyWhen) {
          target["equalityComparer"] = notifyWhen == "always"
              ? function () { return false } // Treat all values as not equal
              : ko.observable["fn"]["equalityComparer"];
          return target;
        }
      };

      function applyExtenders(requestedExtenders) {
        var target = this;
        if (requestedExtenders) {
          for (var key in requestedExtenders) {
            var extenderHandler = ko.extenders[key];
            if (typeof extenderHandler == 'function') {
              target = extenderHandler(target, requestedExtenders[key]);
            }
          }
        }
        return target;
      }

      ko.exportSymbol('extenders', ko.extenders);

      ko.subscription = function (target, callback, disposeCallback) {
        this.target = target;
        this.callback = callback;
        this.disposeCallback = disposeCallback;
        ko.exportProperty(this, 'dispose', this.dispose);
      };
      ko.subscription.prototype.dispose = function () {
        this.isDisposed = true;
        this.disposeCallback();
      };

      ko.subscribable = function () {
        this._subscriptions = {};

        ko.utils.extend(this, ko.subscribable['fn']);
        ko.exportProperty(this, 'subscribe', this.subscribe);
        ko.exportProperty(this, 'extend', this.extend);
        ko.exportProperty(this, 'getSubscriptionsCount', this.getSubscriptionsCount);
      }

      var defaultEvent = "change";

      ko.subscribable['fn'] = {
        subscribe: function (callback, callbackTarget, event) {
          event = event || defaultEvent;
          var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;

          var subscription = new ko.subscription(this, boundCallback, function () {
            ko.utils.arrayRemoveItem(this._subscriptions[event], subscription);
          }.bind(this));

          if (!this._subscriptions[event])
            this._subscriptions[event] = [];
          this._subscriptions[event].push(subscription);
          return subscription;
        },

        "notifySubscribers": function (valueToNotify, event) {
          event = event || defaultEvent;
          if (this._subscriptions[event]) {
            ko.dependencyDetection.ignore(function () {
              ko.utils.arrayForEach(this._subscriptions[event].slice(0), function (subscription) {
                // In case a subscription was disposed during the arrayForEach cycle, check
                // for isDisposed on each subscription before invoking its callback
                if (subscription && (subscription.isDisposed !== true))
                  subscription.callback(valueToNotify);
              });
            }, this);
          }
        },

        getSubscriptionsCount: function () {
          var total = 0;
          for (var eventName in this._subscriptions) {
            if (this._subscriptions.hasOwnProperty(eventName))
              total += this._subscriptions[eventName].length;
          }
          return total;
        },

        extend: applyExtenders
      };


      ko.isSubscribable = function (instance) {
        return typeof instance.subscribe == "function" && typeof instance["notifySubscribers"] == "function";
      };

      ko.exportSymbol('subscribable', ko.subscribable);
      ko.exportSymbol('isSubscribable', ko.isSubscribable);

      ko.dependencyDetection = (function () {
        var _frames = [];

        return {
          begin: function (callback) {
            _frames.push({ callback: callback, distinctDependencies: [] });
          },

          end: function () {
            _frames.pop();
          },

          registerDependency: function (subscribable) {
            if (!ko.isSubscribable(subscribable))
              throw new Error("Only subscribable things can act as dependencies");
            if (_frames.length > 0) {
              var topFrame = _frames[_frames.length - 1];
              if (!topFrame || ko.utils.arrayIndexOf(topFrame.distinctDependencies, subscribable) >= 0)
                return;
              topFrame.distinctDependencies.push(subscribable);
              topFrame.callback(subscribable);
            }
          },

          ignore: function (callback, callbackTarget, callbackArgs) {
            try {
              _frames.push(null);
              return callback.apply(callbackTarget, callbackArgs || []);
            } finally {
              _frames.pop();
            }
          }
        };
      })();
      var primitiveTypes = { 'undefined': true, 'boolean': true, 'number': true, 'string': true };

      ko.observable = function (initialValue) {
        var _latestValue = initialValue;

        function observable() {
          if (arguments.length > 0) {
            // Write

            // Ignore writes if the value hasn't changed
            if ((!observable['equalityComparer']) || !observable['equalityComparer'](_latestValue, arguments[0])) {
              observable.valueWillMutate();
              _latestValue = arguments[0];
              if (DEBUG) observable._latestValue = _latestValue;
              observable.valueHasMutated();
            }
            return this; // Permits chained assignments
          }
          else {
            // Read
            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a "read" operation
            return _latestValue;
          }
        }
        if (DEBUG) observable._latestValue = _latestValue;
        ko.subscribable.call(observable);
        observable.peek = function () { return _latestValue };
        observable.valueHasMutated = function () { observable["notifySubscribers"](_latestValue); }
        observable.valueWillMutate = function () { observable["notifySubscribers"](_latestValue, "beforeChange"); }
        ko.utils.extend(observable, ko.observable['fn']);

        ko.exportProperty(observable, 'peek', observable.peek);
        ko.exportProperty(observable, "valueHasMutated", observable.valueHasMutated);
        ko.exportProperty(observable, "valueWillMutate", observable.valueWillMutate);

        return observable;
      }

      ko.observable['fn'] = {
        "equalityComparer": function valuesArePrimitiveAndEqual(a, b) {
          var oldValueIsPrimitive = (a === null) || (typeof (a) in primitiveTypes);
          return oldValueIsPrimitive ? (a === b) : false;
        }
      };

      var protoProperty = ko.observable.protoProperty = "__ko_proto__";
      ko.observable['fn'][protoProperty] = ko.observable;

      ko.hasPrototype = function (instance, prototype) {
        if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;
        if (instance[protoProperty] === prototype) return true;
        return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain
      };

      ko.isObservable = function (instance) {
        return ko.hasPrototype(instance, ko.observable);
      }
      ko.isWriteableObservable = function (instance) {
        // Observable
        if ((typeof instance == "function") && instance[protoProperty] === ko.observable)
          return true;
        // Writeable dependent observable
        if ((typeof instance == "function") && (instance[protoProperty] === ko.dependentObservable) && (instance.hasWriteFunction))
          return true;
        // Anything else
        return false;
      }


      ko.exportSymbol('observable', ko.observable);
      ko.exportSymbol('isObservable', ko.isObservable);
      ko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);
      ko.observableArray = function (initialValues) {
        if (arguments.length == 0) {
          // Zero-parameter constructor initializes to empty array
          initialValues = [];
        }
        if ((initialValues !== null) && (initialValues !== undefined) && !('length' in initialValues))
          throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");

        var result = ko.observable(initialValues);
        ko.utils.extend(result, ko.observableArray['fn']);
        return result;
      }

      ko.observableArray['fn'] = {
        'remove': function (valueOrPredicate) {
          var underlyingArray = this.peek();
          var removedValues = [];
          var predicate = typeof valueOrPredicate == "function" ? valueOrPredicate : function (value) { return value === valueOrPredicate; };
          for (var i = 0; i < underlyingArray.length; i++) {
            var value = underlyingArray[i];
            if (predicate(value)) {
              if (removedValues.length === 0) {
                this.valueWillMutate();
              }
              removedValues.push(value);
              underlyingArray.splice(i, 1);
              i--;
            }
          }
          if (removedValues.length) {
            this.valueHasMutated();
          }
          return removedValues;
        },

        'removeAll': function (arrayOfValues) {
          // If you passed zero args, we remove everything
          if (arrayOfValues === undefined) {
            var underlyingArray = this.peek();
            var allValues = underlyingArray.slice(0);
            this.valueWillMutate();
            underlyingArray.splice(0, underlyingArray.length);
            this.valueHasMutated();
            return allValues;
          }
          // If you passed an arg, we interpret it as an array of entries to remove
          if (!arrayOfValues)
            return [];
          return this['remove'](function (value) {
            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;
          });
        },

        'destroy': function (valueOrPredicate) {
          var underlyingArray = this.peek();
          var predicate = typeof valueOrPredicate == "function" ? valueOrPredicate : function (value) { return value === valueOrPredicate; };
          this.valueWillMutate();
          for (var i = underlyingArray.length - 1; i >= 0; i--) {
            var value = underlyingArray[i];
            if (predicate(value))
              underlyingArray[i]["_destroy"] = true;
          }
          this.valueHasMutated();
        },

        'destroyAll': function (arrayOfValues) {
          // If you passed zero args, we destroy everything
          if (arrayOfValues === undefined)
            return this['destroy'](function () { return true });

          // If you passed an arg, we interpret it as an array of entries to destroy
          if (!arrayOfValues)
            return [];
          return this['destroy'](function (value) {
            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;
          });
        },

        'indexOf': function (item) {
          var underlyingArray = this();
          return ko.utils.arrayIndexOf(underlyingArray, item);
        },

        'replace': function (oldItem, newItem) {
          var index = this['indexOf'](oldItem);
          if (index >= 0) {
            this.valueWillMutate();
            this.peek()[index] = newItem;
            this.valueHasMutated();
          }
        }
      }

      // Populate ko.observableArray.fn with read/write functions from native arrays
      // Important: Do not add any additional functions here that may reasonably be used to *read* data from the array
      // because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale
      ko.utils.arrayForEach(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function (methodName) {
        ko.observableArray['fn'][methodName] = function () {
          // Use "peek" to avoid creating a subscription in any computed that we're executing in the context of
          // (for consistency with mutating regular observables)
          var underlyingArray = this.peek();
          this.valueWillMutate();
          var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);
          this.valueHasMutated();
          return methodCallResult;
        };
      });

      // Populate ko.observableArray.fn with read-only functions from native arrays
      ko.utils.arrayForEach(["slice"], function (methodName) {
        ko.observableArray['fn'][methodName] = function () {
          var underlyingArray = this();
          return underlyingArray[methodName].apply(underlyingArray, arguments);
        };
      });

      ko.exportSymbol('observableArray', ko.observableArray);
      ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {
        var _latestValue,
            _hasBeenEvaluated = false,
            _isBeingEvaluated = false,
            readFunction = evaluatorFunctionOrOptions;

        if (readFunction && typeof readFunction == "object") {
          // Single-parameter syntax - everything is on this "options" param
          options = readFunction;
          readFunction = options["read"];
        } else {
          // Multi-parameter syntax - construct the options according to the params passed
          options = options || {};
          if (!readFunction)
            readFunction = options["read"];
        }
        if (typeof readFunction != "function")
          throw new Error("Pass a function that returns the value of the ko.computed");

        function addSubscriptionToDependency(subscribable) {
          _subscriptionsToDependencies.push(subscribable.subscribe(evaluatePossiblyAsync));
        }

        function disposeAllSubscriptionsToDependencies() {
          ko.utils.arrayForEach(_subscriptionsToDependencies, function (subscription) {
            subscription.dispose();
          });
          _subscriptionsToDependencies = [];
        }

        function evaluatePossiblyAsync() {
          var throttleEvaluationTimeout = dependentObservable['throttleEvaluation'];
          if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {
            clearTimeout(evaluationTimeoutInstance);
            evaluationTimeoutInstance = setTimeout(evaluateImmediate, throttleEvaluationTimeout);
          } else
            evaluateImmediate();
        }

        function evaluateImmediate() {
          if (_isBeingEvaluated) {
            // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.
            // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost
            // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing
            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387
            return;
          }

          // Don't dispose on first evaluation, because the "disposeWhen" callback might
          // e.g., dispose when the associated DOM element isn't in the doc, and it's not
          // going to be in the doc until *after* the first evaluation
          if (_hasBeenEvaluated && disposeWhen()) {
            dispose();
            return;
          }

          _isBeingEvaluated = true;
          try {
            // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).
            // Then, during evaluation, we cross off any that are in fact still being used.
            var disposalCandidates = ko.utils.arrayMap(_subscriptionsToDependencies, function (item) { return item.target; });

            ko.dependencyDetection.begin(function (subscribable) {
              var inOld;
              if ((inOld = ko.utils.arrayIndexOf(disposalCandidates, subscribable)) >= 0)
                disposalCandidates[inOld] = undefined; // Don't want to dispose this subscription, as it's still being used
              else
                addSubscriptionToDependency(subscribable); // Brand new subscription - add it
            });

            var newValue = readFunction.call(evaluatorFunctionTarget);

            // For each subscription no longer being used, remove it from the active subscriptions list and dispose it
            for (var i = disposalCandidates.length - 1; i >= 0; i--) {
              if (disposalCandidates[i])
                _subscriptionsToDependencies.splice(i, 1)[0].dispose();
            }
            _hasBeenEvaluated = true;

            dependentObservable["notifySubscribers"](_latestValue, "beforeChange");
            _latestValue = newValue;
            if (DEBUG) dependentObservable._latestValue = _latestValue;
          } finally {
            ko.dependencyDetection.end();
          }

          dependentObservable["notifySubscribers"](_latestValue);
          _isBeingEvaluated = false;
          if (!_subscriptionsToDependencies.length)
            dispose();
        }

        function dependentObservable() {
          if (arguments.length > 0) {
            if (typeof writeFunction === "function") {
              // Writing a value
              writeFunction.apply(evaluatorFunctionTarget, arguments);
            } else {
              throw new Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");
            }
            return this; // Permits chained assignments
          } else {
            // Reading the value
            if (!_hasBeenEvaluated)
              evaluateImmediate();
            ko.dependencyDetection.registerDependency(dependentObservable);
            return _latestValue;
          }
        }

        function peek() {
          if (!_hasBeenEvaluated)
            evaluateImmediate();
          return _latestValue;
        }

        function isActive() {
          return !_hasBeenEvaluated || _subscriptionsToDependencies.length > 0;
        }

        // By here, "options" is always non-null
        var writeFunction = options["write"],
            disposeWhenNodeIsRemoved = options["disposeWhenNodeIsRemoved"] || options.disposeWhenNodeIsRemoved || null,
            disposeWhen = options["disposeWhen"] || options.disposeWhen || function () { return false; },
            dispose = disposeAllSubscriptionsToDependencies,
            _subscriptionsToDependencies = [],
            evaluationTimeoutInstance = null;

        if (!evaluatorFunctionTarget)
          evaluatorFunctionTarget = options["owner"];

        dependentObservable.peek = peek;
        dependentObservable.getDependenciesCount = function () { return _subscriptionsToDependencies.length; };
        dependentObservable.hasWriteFunction = typeof options["write"] === "function";
        dependentObservable.dispose = function () { dispose(); };
        dependentObservable.isActive = isActive;

        ko.subscribable.call(dependentObservable);
        ko.utils.extend(dependentObservable, ko.dependentObservable['fn']);

        ko.exportProperty(dependentObservable, 'peek', dependentObservable.peek);
        ko.exportProperty(dependentObservable, 'dispose', dependentObservable.dispose);
        ko.exportProperty(dependentObservable, 'isActive', dependentObservable.isActive);
        ko.exportProperty(dependentObservable, 'getDependenciesCount', dependentObservable.getDependenciesCount);

        // Evaluate, unless deferEvaluation is true
        if (options['deferEvaluation'] !== true)
          evaluateImmediate();

        // Build "disposeWhenNodeIsRemoved" and "disposeWhenNodeIsRemovedCallback" option values.
        // But skip if isActive is false (there will never be any dependencies to dispose).
        // (Note: "disposeWhenNodeIsRemoved" option both proactively disposes as soon as the node is removed using ko.removeNode(),
        // plus adds a "disposeWhen" callback that, on each evaluation, disposes if the node was removed by some other means.)
        if (disposeWhenNodeIsRemoved && isActive()) {
          dispose = function () {
            ko.utils.domNodeDisposal.removeDisposeCallback(disposeWhenNodeIsRemoved, arguments.callee);
            disposeAllSubscriptionsToDependencies();
          };
          ko.utils.domNodeDisposal.addDisposeCallback(disposeWhenNodeIsRemoved, dispose);
          var existingDisposeWhenFunction = disposeWhen;
          disposeWhen = function () {
            return !ko.utils.domNodeIsAttachedToDocument(disposeWhenNodeIsRemoved) || existingDisposeWhenFunction();
          }
        }

        return dependentObservable;
      };

      ko.isComputed = function (instance) {
        return ko.hasPrototype(instance, ko.dependentObservable);
      };

      var protoProp = ko.observable.protoProperty; // == "__ko_proto__"
      ko.dependentObservable[protoProp] = ko.observable;

      ko.dependentObservable['fn'] = {};
      ko.dependentObservable['fn'][protoProp] = ko.dependentObservable;

      ko.exportSymbol('dependentObservable', ko.dependentObservable);
      ko.exportSymbol('computed', ko.dependentObservable); // Make "ko.computed" an alias for "ko.dependentObservable"
      ko.exportSymbol('isComputed', ko.isComputed);

      (function () {
        var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)

        ko.toJS = function (rootObject) {
          if (arguments.length == 0)
            throw new Error("When calling ko.toJS, pass the object you want to convert.");

          // We just unwrap everything at every level in the object graph
          return mapJsObjectGraph(rootObject, function (valueToMap) {
            // Loop because an observable's value might in turn be another observable wrapper
            for (var i = 0; ko.isObservable(valueToMap) && (i < maxNestedObservableDepth) ; i++)
              valueToMap = valueToMap();
            return valueToMap;
          });
        };

        ko.toJSON = function (rootObject, replacer, space) {     // replacer and space are optional
          var plainJavaScriptObject = ko.toJS(rootObject);
          return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);
        };

        function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {
          visitedObjects = visitedObjects || new objectLookup();

          rootObject = mapInputCallback(rootObject);
          var canHaveProperties = (typeof rootObject == "object") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof Date));
          if (!canHaveProperties)
            return rootObject;

          var outputProperties = rootObject instanceof Array ? [] : {};
          visitedObjects.save(rootObject, outputProperties);

          visitPropertiesOrArrayEntries(rootObject, function (indexer) {
            var propertyValue = mapInputCallback(rootObject[indexer]);

            switch (typeof propertyValue) {
              case "boolean":
              case "number":
              case "string":
              case "function":
                outputProperties[indexer] = propertyValue;
                break;
              case "object":
              case "undefined":
                var previouslyMappedValue = visitedObjects.get(propertyValue);
                outputProperties[indexer] = (previouslyMappedValue !== undefined)
                    ? previouslyMappedValue
                    : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);
                break;
            }
          });

          return outputProperties;
        }

        function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {
          if (rootObject instanceof Array) {
            for (var i = 0; i < rootObject.length; i++)
              visitorCallback(i);

            // For arrays, also respect toJSON property for custom mappings (fixes #278)
            if (typeof rootObject['toJSON'] == 'function')
              visitorCallback('toJSON');
          } else {
            for (var propertyName in rootObject)
              visitorCallback(propertyName);
          }
        };

        function objectLookup() {
          var keys = [];
          var values = [];
          this.save = function (key, value) {
            var existingIndex = ko.utils.arrayIndexOf(keys, key);
            if (existingIndex >= 0)
              values[existingIndex] = value;
            else {
              keys.push(key);
              values.push(value);
            }
          };
          this.get = function (key) {
            var existingIndex = ko.utils.arrayIndexOf(keys, key);
            return (existingIndex >= 0) ? values[existingIndex] : undefined;
          };
        };
      })();

      ko.exportSymbol('toJS', ko.toJS);
      ko.exportSymbol('toJSON', ko.toJSON);
      (function () {
        var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';

        // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values
        // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values
        // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.
        ko.selectExtensions = {
          readValue: function (element) {
            switch (ko.utils.tagNameLower(element)) {
              case 'option':
                if (element[hasDomDataExpandoProperty] === true)
                  return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);
                return ko.utils.ieVersion <= 7
                    ? (element.getAttributeNode('value').specified ? element.value : element.text)
                    : element.value;
              case 'select':
                return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;
              default:
                return element.value;
            }
          },

          writeValue: function (element, value) {
            switch (ko.utils.tagNameLower(element)) {
              case 'option':
                switch (typeof value) {
                  case "string":
                    ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);
                    if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node
                      delete element[hasDomDataExpandoProperty];
                    }
                    element.value = value;
                    break;
                  default:
                    // Store arbitrary object using DomData
                    ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);
                    element[hasDomDataExpandoProperty] = true;

                    // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.
                    element.value = typeof value === "number" ? value : "";
                    break;
                }
                break;
              case 'select':
                for (var i = element.options.length - 1; i >= 0; i--) {
                  if (ko.selectExtensions.readValue(element.options[i]) == value) {
                    element.selectedIndex = i;
                    break;
                  }
                }
                break;
              default:
                if ((value === null) || (value === undefined))
                  value = "";
                element.value = value;
                break;
            }
          }
        };
      })();

      ko.exportSymbol('selectExtensions', ko.selectExtensions);
      ko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);
      ko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);
      ko.expressionRewriting = (function () {
        var restoreCapturedTokensRegex = /\@ko_token_(\d+)\@/g;
        var javaScriptReservedWords = ["true", "false"];

        // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor
        // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).
        var javaScriptAssignmentTarget = /^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i;

        function restoreTokens(string, tokens) {
          var prevValue = null;
          while (string != prevValue) { // Keep restoring tokens until it no longer makes a difference (they may be nested)
            prevValue = string;
            string = string.replace(restoreCapturedTokensRegex, function (match, tokenIndex) {
              return tokens[tokenIndex];
            });
          }
          return string;
        }

        function getWriteableValue(expression) {
          if (ko.utils.arrayIndexOf(javaScriptReservedWords, ko.utils.stringTrim(expression).toLowerCase()) >= 0)
            return false;
          var match = expression.match(javaScriptAssignmentTarget);
          return match === null ? false : match[1] ? ('Object(' + match[1] + ')' + match[2]) : expression;
        }

        function ensureQuoted(key) {
          var trimmedKey = ko.utils.stringTrim(key);
          switch (trimmedKey.length && trimmedKey.charAt(0)) {
            case "'":
            case '"':
              return key;
            default:
              return "'" + trimmedKey + "'";
          }
        }

        return {
          bindingRewriteValidators: [],

          parseObjectLiteral: function (objectLiteralString) {
            // A full tokeniser+lexer would add too much weight to this library, so here's a simple parser
            // that is sufficient just to split an object literal string into a set of top-level key-value pairs

            var str = ko.utils.stringTrim(objectLiteralString);
            if (str.length < 3)
              return [];
            if (str.charAt(0) === "{")// Ignore any braces surrounding the whole object literal
              str = str.substring(1, str.length - 1);

            // Pull out any string literals and regex literals
            var tokens = [];
            var tokenStart = null, tokenEndChar;
            for (var position = 0; position < str.length; position++) {
              var c = str.charAt(position);
              if (tokenStart === null) {
                switch (c) {
                  case '"':
                  case "'":
                  case "/":
                    tokenStart = position;
                    tokenEndChar = c;
                    break;
                }
              } else if ((c == tokenEndChar) && (str.charAt(position - 1) !== "\\")) {
                var token = str.substring(tokenStart, position + 1);
                tokens.push(token);
                var replacement = "@ko_token_" + (tokens.length - 1) + "@";
                str = str.substring(0, tokenStart) + replacement + str.substring(position + 1);
                position -= (token.length - replacement.length);
                tokenStart = null;
              }
            }

            // Next pull out balanced paren, brace, and bracket blocks
            tokenStart = null;
            tokenEndChar = null;
            var tokenDepth = 0, tokenStartChar = null;
            for (var position = 0; position < str.length; position++) {
              var c = str.charAt(position);
              if (tokenStart === null) {
                switch (c) {
                  case "{": tokenStart = position; tokenStartChar = c;
                    tokenEndChar = "}";
                    break;
                  case "(": tokenStart = position; tokenStartChar = c;
                    tokenEndChar = ")";
                    break;
                  case "[": tokenStart = position; tokenStartChar = c;
                    tokenEndChar = "]";
                    break;
                }
              }

              if (c === tokenStartChar)
                tokenDepth++;
              else if (c === tokenEndChar) {
                tokenDepth--;
                if (tokenDepth === 0) {
                  var token = str.substring(tokenStart, position + 1);
                  tokens.push(token);
                  var replacement = "@ko_token_" + (tokens.length - 1) + "@";
                  str = str.substring(0, tokenStart) + replacement + str.substring(position + 1);
                  position -= (token.length - replacement.length);
                  tokenStart = null;
                }
              }
            }

            // Now we can safely split on commas to get the key/value pairs
            var result = [];
            var keyValuePairs = str.split(",");
            for (var i = 0, j = keyValuePairs.length; i < j; i++) {
              var pair = keyValuePairs[i];
              var colonPos = pair.indexOf(":");
              if ((colonPos > 0) && (colonPos < pair.length - 1)) {
                var key = pair.substring(0, colonPos);
                var value = pair.substring(colonPos + 1);
                result.push({ 'key': restoreTokens(key, tokens), 'value': restoreTokens(value, tokens) });
              } else {
                result.push({ 'unknown': restoreTokens(pair, tokens) });
              }
            }
            return result;
          },

          preProcessBindings: function (objectLiteralStringOrKeyValueArray) {
            var keyValueArray = typeof objectLiteralStringOrKeyValueArray === "string"
                ? ko.expressionRewriting.parseObjectLiteral(objectLiteralStringOrKeyValueArray)
                : objectLiteralStringOrKeyValueArray;
            var resultStrings = [], propertyAccessorResultStrings = [];

            var keyValueEntry;
            for (var i = 0; keyValueEntry = keyValueArray[i]; i++) {
              if (resultStrings.length > 0)
                resultStrings.push(",");

              if (keyValueEntry['key']) {
                var quotedKey = ensureQuoted(keyValueEntry['key']), val = keyValueEntry['value'];
                resultStrings.push(quotedKey);
                resultStrings.push(":");
                resultStrings.push(val);

                if (val = getWriteableValue(ko.utils.stringTrim(val))) {
                  if (propertyAccessorResultStrings.length > 0)
                    propertyAccessorResultStrings.push(", ");
                  propertyAccessorResultStrings.push(quotedKey + " : function(__ko_value) { " + val + " = __ko_value; }");
                }
              } else if (keyValueEntry['unknown']) {
                resultStrings.push(keyValueEntry['unknown']);
              }
            }

            var combinedResult = resultStrings.join("");
            if (propertyAccessorResultStrings.length > 0) {
              var allPropertyAccessors = propertyAccessorResultStrings.join("");
              combinedResult = combinedResult + ", '_ko_property_writers' : { " + allPropertyAccessors + " } ";
            }

            return combinedResult;
          },

          keyValueArrayContainsKey: function (keyValueArray, key) {
            for (var i = 0; i < keyValueArray.length; i++)
              if (ko.utils.stringTrim(keyValueArray[i]['key']) == key)
                return true;
            return false;
          },

          // Internal, private KO utility for updating model properties from within bindings
          // property:            If the property being updated is (or might be) an observable, pass it here
          //                      If it turns out to be a writable observable, it will be written to directly
          // allBindingsAccessor: All bindings in the current execution context.
          //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable
          // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'
          // value:               The value to be written
          // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if
          //                      it is !== existing value on that writable observable
          writeValueToProperty: function (property, allBindingsAccessor, key, value, checkIfDifferent) {
            if (!property || !ko.isWriteableObservable(property)) {
              var propWriters = allBindingsAccessor()['_ko_property_writers'];
              if (propWriters && propWriters[key])
                propWriters[key](value);
            } else if (!checkIfDifferent || property.peek() !== value) {
              property(value);
            }
          }
        };
      })();

      ko.exportSymbol('expressionRewriting', ko.expressionRewriting);
      ko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);
      ko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);
      ko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);

      // For backward compatibility, define the following aliases. (Previously, these function names were misleading because
      // they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)
      ko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);
      ko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings); (function () {
        // "Virtual elements" is an abstraction on top of the usual DOM API which understands the notion that comment nodes
        // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).
        // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state
        // of that virtual hierarchy
        //
        // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)
        // without having to scatter special cases all over the binding and templating code.

        // IE 9 cannot reliably read the "nodeValue" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)
        // but it does give them a nonstandard alternative property called "text" that it can read reliably. Other browsers don't have that property.
        // So, use node.text where available, and node.nodeValue elsewhere
        var commentNodesHaveTextProperty = document.createComment("test").text === "<!--test-->";

        var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\s*ko(?:\s+(.+\s*\:[\s\S]*))?\s*-->$/ : /^\s*ko(?:\s+(.+\s*\:[\s\S]*))?\s*$/;
        var endCommentRegex = commentNodesHaveTextProperty ? /^<!--\s*\/ko\s*-->$/ : /^\s*\/ko\s*$/;
        var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };

        function isStartComment(node) {
          return (node.nodeType == 8) && (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);
        }

        function isEndComment(node) {
          return (node.nodeType == 8) && (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(endCommentRegex);
        }

        function getVirtualChildren(startComment, allowUnbalanced) {
          var currentNode = startComment;
          var depth = 1;
          var children = [];
          while (currentNode = currentNode.nextSibling) {
            if (isEndComment(currentNode)) {
              depth--;
              if (depth === 0)
                return children;
            }

            children.push(currentNode);

            if (isStartComment(currentNode))
              depth++;
          }
          if (!allowUnbalanced)
            throw new Error("Cannot find closing comment tag to match: " + startComment.nodeValue);
          return null;
        }

        function getMatchingEndComment(startComment, allowUnbalanced) {
          var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);
          if (allVirtualChildren) {
            if (allVirtualChildren.length > 0)
              return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;
            return startComment.nextSibling;
          } else
            return null; // Must have no matching end comment, and allowUnbalanced is true
        }

        function getUnbalancedChildTags(node) {
          // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>
          //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->
          var childNode = node.firstChild, captureRemaining = null;
          if (childNode) {
            do {
              if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes
                captureRemaining.push(childNode);
              else if (isStartComment(childNode)) {
                var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);
                if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set
                  childNode = matchingEndComment;
                else
                  captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point
              } else if (isEndComment(childNode)) {
                captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing
              }
            } while (childNode = childNode.nextSibling);
          }
          return captureRemaining;
        }

        ko.virtualElements = {
          allowedBindings: {},

          childNodes: function (node) {
            return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;
          },

          emptyNode: function (node) {
            if (!isStartComment(node))
              ko.utils.emptyDomNode(node);
            else {
              var virtualChildren = ko.virtualElements.childNodes(node);
              for (var i = 0, j = virtualChildren.length; i < j; i++)
                ko.removeNode(virtualChildren[i]);
            }
          },

          setDomNodeChildren: function (node, childNodes) {
            if (!isStartComment(node))
              ko.utils.setDomNodeChildren(node, childNodes);
            else {
              ko.virtualElements.emptyNode(node);
              var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children
              for (var i = 0, j = childNodes.length; i < j; i++)
                endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);
            }
          },

          prepend: function (containerNode, nodeToPrepend) {
            if (!isStartComment(containerNode)) {
              if (containerNode.firstChild)
                containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);
              else
                containerNode.appendChild(nodeToPrepend);
            } else {
              // Start comments must always have a parent and at least one following sibling (the end comment)
              containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);
            }
          },

          insertAfter: function (containerNode, nodeToInsert, insertAfterNode) {
            if (!insertAfterNode) {
              ko.virtualElements.prepend(containerNode, nodeToInsert);
            } else if (!isStartComment(containerNode)) {
              // Insert after insertion point
              if (insertAfterNode.nextSibling)
                containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);
              else
                containerNode.appendChild(nodeToInsert);
            } else {
              // Children of start comments must always have a parent and at least one following sibling (the end comment)
              containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);
            }
          },

          firstChild: function (node) {
            if (!isStartComment(node))
              return node.firstChild;
            if (!node.nextSibling || isEndComment(node.nextSibling))
              return null;
            return node.nextSibling;
          },

          nextSibling: function (node) {
            if (isStartComment(node))
              node = getMatchingEndComment(node);
            if (node.nextSibling && isEndComment(node.nextSibling))
              return null;
            return node.nextSibling;
          },

          virtualNodeBindingValue: function (node) {
            var regexMatch = isStartComment(node);
            return regexMatch ? regexMatch[1] : null;
          },

          normaliseVirtualElementDomStructure: function (elementVerified) {
            // Workaround for https://github.com/SteveSanderson/knockout/issues/155
            // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes
            // that are direct descendants of <ul> into the preceding <li>)
            if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])
              return;

            // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags
            // must be intended to appear *after* that child, so move them there.
            var childNode = elementVerified.firstChild;
            if (childNode) {
              do {
                if (childNode.nodeType === 1) {
                  var unbalancedTags = getUnbalancedChildTags(childNode);
                  if (unbalancedTags) {
                    // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child
                    var nodeToInsertBefore = childNode.nextSibling;
                    for (var i = 0; i < unbalancedTags.length; i++) {
                      if (nodeToInsertBefore)
                        elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);
                      else
                        elementVerified.appendChild(unbalancedTags[i]);
                    }
                  }
                }
              } while (childNode = childNode.nextSibling);
            }
          }
        };
      })();
      ko.exportSymbol('virtualElements', ko.virtualElements);
      ko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);
      ko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);
      //ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified
      ko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);
      //ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified
      ko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);
      ko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);
      (function () {
        var defaultBindingAttributeName = "data-bind";

        ko.bindingProvider = function () {
          this.bindingCache = {};
        };

        ko.utils.extend(ko.bindingProvider.prototype, {
          'nodeHasBindings': function (node) {
            switch (node.nodeType) {
              case 1: return node.getAttribute(defaultBindingAttributeName) != null;   // Element
              case 8: return ko.virtualElements.virtualNodeBindingValue(node) != null; // Comment node
              default: return false;
            }
          },

          'getBindings': function (node, bindingContext) {
            var bindingsString = this['getBindingsString'](node, bindingContext);
            return bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;
          },

          // The following function is only used internally by this default provider.
          // It's not part of the interface definition for a general binding provider.
          'getBindingsString': function (node, bindingContext) {
            switch (node.nodeType) {
              case 1: return node.getAttribute(defaultBindingAttributeName);   // Element
              case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node
              default: return null;
            }
          },

          // The following function is only used internally by this default provider.
          // It's not part of the interface definition for a general binding provider.
          'parseBindingsString': function (bindingsString, bindingContext, node) {
            try {
              var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache);
              return bindingFunction(bindingContext, node);
            } catch (ex) {
              throw new Error("Unable to parse bindings.\nMessage: " + ex + ";\nBindings value: " + bindingsString);
            }
          }
        });

        ko.bindingProvider['instance'] = new ko.bindingProvider();

        function createBindingsStringEvaluatorViaCache(bindingsString, cache) {
          var cacheKey = bindingsString;
          return cache[cacheKey]
              || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString));
        }

        function createBindingsStringEvaluator(bindingsString) {
          // Build the source for a function that evaluates "expression"
          // For each scope variable, add an extra level of "with" nesting
          // Example result: with(sc1) { with(sc0) { return (expression) } }
          var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString),
              functionBody = "with($context){with($data||{}){return{" + rewrittenBindings + "}}}";
          return new Function("$context", "$element", functionBody);
        }
      })();

      ko.exportSymbol('bindingProvider', ko.bindingProvider);
      (function () {
        ko.bindingHandlers = {};

        ko.bindingContext = function (dataItem, parentBindingContext, dataItemAlias) {
          if (parentBindingContext) {
            ko.utils.extend(this, parentBindingContext); // Inherit $root and any custom properties
            this['$parentContext'] = parentBindingContext;
            this['$parent'] = parentBindingContext['$data'];
            this['$parents'] = (parentBindingContext['$parents'] || []).slice(0);
            this['$parents'].unshift(this['$parent']);
          } else {
            this['$parents'] = [];
            this['$root'] = dataItem;
            // Export 'ko' in the binding context so it will be available in bindings and templates
            // even if 'ko' isn't exported as a global, such as when using an AMD loader.
            // See https://github.com/SteveSanderson/knockout/issues/490
            this['ko'] = ko;
          }
          this['$data'] = dataItem;
          if (dataItemAlias)
            this[dataItemAlias] = dataItem;
        }
        ko.bindingContext.prototype['createChildContext'] = function (dataItem, dataItemAlias) {
          return new ko.bindingContext(dataItem, this, dataItemAlias);
        };
        ko.bindingContext.prototype['extend'] = function (properties) {
          var clone = ko.utils.extend(new ko.bindingContext(), this);
          return ko.utils.extend(clone, properties);
        };

        function validateThatBindingIsAllowedForVirtualElements(bindingName) {
          var validator = ko.virtualElements.allowedBindings[bindingName];
          if (!validator)
            throw new Error("The binding '" + bindingName + "' cannot be used with virtual elements")
        }

        function applyBindingsToDescendantsInternal(viewModel, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {
          var currentChild, nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);
          while (currentChild = nextInQueue) {
            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position
            nextInQueue = ko.virtualElements.nextSibling(currentChild);
            applyBindingsToNodeAndDescendantsInternal(viewModel, currentChild, bindingContextsMayDifferFromDomParentElement);
          }
        }

        function applyBindingsToNodeAndDescendantsInternal(viewModel, nodeVerified, bindingContextMayDifferFromDomParentElement) {
          var shouldBindDescendants = true;

          // Perf optimisation: Apply bindings only if...
          // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)
          //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those
          // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)
          var isElement = (nodeVerified.nodeType === 1);
          if (isElement) // Workaround IE <= 8 HTML parsing weirdness
            ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);

          var shouldApplyBindings = (isElement && bindingContextMayDifferFromDomParentElement)             // Case (1)
                                 || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);       // Case (2)
          if (shouldApplyBindings)
            shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, viewModel, bindingContextMayDifferFromDomParentElement).shouldBindDescendants;

          if (shouldBindDescendants) {
            // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,
            //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,
            //    hence bindingContextsMayDifferFromDomParentElement is false
            //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may
            //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,
            //    hence bindingContextsMayDifferFromDomParentElement is true
            applyBindingsToDescendantsInternal(viewModel, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);
          }
        }

        function applyBindingsToNodeInternal(node, bindings, viewModelOrBindingContext, bindingContextMayDifferFromDomParentElement) {
          // Need to be sure that inits are only run once, and updates never run until all the inits have been run
          var initPhase = 0; // 0 = before all inits, 1 = during inits, 2 = after all inits

          // Each time the dependentObservable is evaluated (after data changes),
          // the binding attribute is reparsed so that it can pick out the correct
          // model properties in the context of the changed data.
          // DOM event callbacks need to be able to access this changed data,
          // so we need a single parsedBindings variable (shared by all callbacks
          // associated with this node's bindings) that all the closures can access.
          var parsedBindings;
          function makeValueAccessor(bindingKey) {
            return function () { return parsedBindings[bindingKey] }
          }
          function parsedBindingsAccessor() {
            return parsedBindings;
          }

          var bindingHandlerThatControlsDescendantBindings;
          ko.dependentObservable(
              function () {
                // Ensure we have a nonnull binding context to work with
                var bindingContextInstance = viewModelOrBindingContext && (viewModelOrBindingContext instanceof ko.bindingContext)
                    ? viewModelOrBindingContext
                    : new ko.bindingContext(ko.utils.unwrapObservable(viewModelOrBindingContext));
                var viewModel = bindingContextInstance['$data'];

                // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because
                // we can easily recover it just by scanning up the node's ancestors in the DOM
                // (note: here, parent node means "real DOM parent" not "virtual parent", as there's no O(1) way to find the virtual parent)
                if (bindingContextMayDifferFromDomParentElement)
                  ko.storedBindingContextForNode(node, bindingContextInstance);

                // Use evaluatedBindings if given, otherwise fall back on asking the bindings provider to give us some bindings
                var evaluatedBindings = (typeof bindings == "function") ? bindings(bindingContextInstance, node) : bindings;
                parsedBindings = evaluatedBindings || ko.bindingProvider['instance']['getBindings'](node, bindingContextInstance);

                if (parsedBindings) {
                  // First run all the inits, so bindings can register for notification on changes
                  if (initPhase === 0) {
                    initPhase = 1;
                    for (var bindingKey in parsedBindings) {
                      var binding = ko.bindingHandlers[bindingKey];
                      if (binding && node.nodeType === 8)
                        validateThatBindingIsAllowedForVirtualElements(bindingKey);

                      if (binding && typeof binding["init"] == "function") {
                        var handlerInitFn = binding["init"];
                        var initResult = handlerInitFn(node, makeValueAccessor(bindingKey), parsedBindingsAccessor, viewModel, bindingContextInstance);

                        // If this binding handler claims to control descendant bindings, make a note of this
                        if (initResult && initResult['controlsDescendantBindings']) {
                          if (bindingHandlerThatControlsDescendantBindings !== undefined)
                            throw new Error("Multiple bindings (" + bindingHandlerThatControlsDescendantBindings + " and " + bindingKey + ") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");
                          bindingHandlerThatControlsDescendantBindings = bindingKey;
                        }
                      }
                    }
                    initPhase = 2;
                  }

                  // ... then run all the updates, which might trigger changes even on the first evaluation
                  if (initPhase === 2) {
                    for (var bindingKey in parsedBindings) {
                      var binding = ko.bindingHandlers[bindingKey];
                      if (binding && typeof binding["update"] == "function") {
                        var handlerUpdateFn = binding["update"];
                        handlerUpdateFn(node, makeValueAccessor(bindingKey), parsedBindingsAccessor, viewModel, bindingContextInstance);
                      }
                    }
                  }
                }
              },
              null,
              { disposeWhenNodeIsRemoved: node }
          );

          return {
            shouldBindDescendants: bindingHandlerThatControlsDescendantBindings === undefined
          };
        };

        var storedBindingContextDomDataKey = "__ko_bindingContext__";
        ko.storedBindingContextForNode = function (node, bindingContext) {
          if (arguments.length == 2)
            ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);
          else
            return ko.utils.domData.get(node, storedBindingContextDomDataKey);
        }

        ko.applyBindingsToNode = function (node, bindings, viewModel) {
          if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness
            ko.virtualElements.normaliseVirtualElementDomStructure(node);
          return applyBindingsToNodeInternal(node, bindings, viewModel, true);
        };

        ko.applyBindingsToDescendants = function (viewModel, rootNode) {
          if (rootNode.nodeType === 1 || rootNode.nodeType === 8)
            applyBindingsToDescendantsInternal(viewModel, rootNode, true);
        };

        ko.applyBindings = function (viewModel, rootNode) {
          if (rootNode && (rootNode.nodeType !== 1) && (rootNode.nodeType !== 8))
            throw new Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");
          rootNode = rootNode || window.document.body; // Make "rootNode" parameter optional

          applyBindingsToNodeAndDescendantsInternal(viewModel, rootNode, true);
        };

        // Retrieving binding context from arbitrary nodes
        ko.contextFor = function (node) {
          // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)
          switch (node.nodeType) {
            case 1:
            case 8:
              var context = ko.storedBindingContextForNode(node);
              if (context) return context;
              if (node.parentNode) return ko.contextFor(node.parentNode);
              break;
          }
          return undefined;
        };
        ko.dataFor = function (node) {
          var context = ko.contextFor(node);
          return context ? context['$data'] : undefined;
        };

        ko.exportSymbol('bindingHandlers', ko.bindingHandlers);
        ko.exportSymbol('applyBindings', ko.applyBindings);
        ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);
        ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);
        ko.exportSymbol('contextFor', ko.contextFor);
        ko.exportSymbol('dataFor', ko.dataFor);
      })();
      var attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };
      ko.bindingHandlers['attr'] = {
        'update': function (element, valueAccessor, allBindingsAccessor) {
          var value = ko.utils.unwrapObservable(valueAccessor()) || {};
          for (var attrName in value) {
            if (typeof attrName == "string") {
              var attrValue = ko.utils.unwrapObservable(value[attrName]);

              // To cover cases like "attr: { checked:someProp }", we want to remove the attribute entirely
              // when someProp is a "no value"-like value (strictly null, false, or undefined)
              // (because the absence of the "checked" attr is how to mark an element as not checked, etc.)
              var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);
              if (toRemove)
                element.removeAttribute(attrName);

              // In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the
              // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,
              // but instead of figuring out the mode, we'll just set the attribute through the Javascript
              // property for IE <= 8.
              if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavascriptMap) {
                attrName = attrHtmlToJavascriptMap[attrName];
                if (toRemove)
                  element.removeAttribute(attrName);
                else
                  element[attrName] = attrValue;
              } else if (!toRemove) {
                element.setAttribute(attrName, attrValue.toString());
              }

              // Treat "name" specially - although you can think of it as an attribute, it also needs
              // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)
              // Deliberately being case-sensitive here because XHTML would regard "Name" as a different thing
              // entirely, and there's no strong reason to allow for such casing in HTML.
              if (attrName === "name") {
                ko.utils.setElementName(element, toRemove ? "" : attrValue.toString());
              }
            }
          }
        }
      };
      ko.bindingHandlers['checked'] = {
        'init': function (element, valueAccessor, allBindingsAccessor) {
          var updateHandler = function () {
            var valueToWrite;
            if (element.type == "checkbox") {
              valueToWrite = element.checked;
            } else if ((element.type == "radio") && (element.checked)) {
              valueToWrite = element.value;
            } else {
              return; // "checked" binding only responds to checkboxes and selected radio buttons
            }

            var modelValue = valueAccessor(), unwrappedValue = ko.utils.unwrapObservable(modelValue);
            if ((element.type == "checkbox") && (unwrappedValue instanceof Array)) {
              // For checkboxes bound to an array, we add/remove the checkbox value to that array
              // This works for both observable and non-observable arrays
              var existingEntryIndex = ko.utils.arrayIndexOf(unwrappedValue, element.value);
              if (element.checked && (existingEntryIndex < 0))
                modelValue.push(element.value);
              else if ((!element.checked) && (existingEntryIndex >= 0))
                modelValue.splice(existingEntryIndex, 1);
            } else {
              ko.expressionRewriting.writeValueToProperty(modelValue, allBindingsAccessor, 'checked', valueToWrite, true);
            }
          };
          ko.utils.registerEventHandler(element, "click", updateHandler);

          // IE 6 won't allow radio buttons to be selected unless they have a name
          if ((element.type == "radio") && !element.name)
            ko.bindingHandlers['uniqueName']['init'](element, function () { return true });
        },
        'update': function (element, valueAccessor) {
          var value = ko.utils.unwrapObservable(valueAccessor());

          if (element.type == "checkbox") {
            if (value instanceof Array) {
              // When bound to an array, the checkbox being checked represents its value being present in that array
              element.checked = ko.utils.arrayIndexOf(value, element.value) >= 0;
            } else {
              // When bound to anything other value (not an array), the checkbox being checked represents the value being trueish
              element.checked = value;
            }
          } else if (element.type == "radio") {
            element.checked = (element.value == value);
          }
        }
      };
      var classesWrittenByBindingKey = '__ko__cssValue';
      ko.bindingHandlers['css'] = {
        'update': function (element, valueAccessor) {
          var value = ko.utils.unwrapObservable(valueAccessor());
          if (typeof value == "object") {
            for (var className in value) {
              var shouldHaveClass = ko.utils.unwrapObservable(value[className]);
              ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);
            }
          } else {
            value = String(value || ''); // Make sure we don't try to store or set a non-string value
            ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);
            element[classesWrittenByBindingKey] = value;
            ko.utils.toggleDomNodeCssClass(element, value, true);
          }
        }
      };
      ko.bindingHandlers['enable'] = {
        'update': function (element, valueAccessor) {
          var value = ko.utils.unwrapObservable(valueAccessor());
          if (value && element.disabled)
            element.removeAttribute("disabled");
          else if ((!value) && (!element.disabled))
            element.disabled = true;
        }
      };

      ko.bindingHandlers['disable'] = {
        'update': function (element, valueAccessor) {
          ko.bindingHandlers['enable']['update'](element, function () { return !ko.utils.unwrapObservable(valueAccessor()) });
        }
      };
      // For certain common events (currently just 'click'), allow a simplified data-binding syntax
      // e.g. click:handler instead of the usual full-length event:{click:handler}
      function makeEventHandlerShortcut(eventName) {
        ko.bindingHandlers[eventName] = {
          'init': function (element, valueAccessor, allBindingsAccessor, viewModel) {
            var newValueAccessor = function () {
              var result = {};
              result[eventName] = valueAccessor();
              return result;
            };
            return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindingsAccessor, viewModel);
          }
        }
      }

      ko.bindingHandlers['event'] = {
        'init': function (element, valueAccessor, allBindingsAccessor, viewModel) {
          var eventsToHandle = valueAccessor() || {};
          for (var eventNameOutsideClosure in eventsToHandle) {
            (function () {
              var eventName = eventNameOutsideClosure; // Separate variable to be captured by event handler closure
              if (typeof eventName == "string") {
                ko.utils.registerEventHandler(element, eventName, function (event) {
                  var handlerReturnValue;
                  var handlerFunction = valueAccessor()[eventName];
                  if (!handlerFunction)
                    return;
                  var allBindings = allBindingsAccessor();

                  try {
                    // Take all the event args, and prefix with the viewmodel
                    var argsForHandler = ko.utils.makeArray(arguments);
                    argsForHandler.unshift(viewModel);
                    handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);
                  } finally {
                    if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.
                      if (event.preventDefault)
                        event.preventDefault();
                      else
                        event.returnValue = false;
                    }
                  }

                  var bubble = allBindings[eventName + 'Bubble'] !== false;
                  if (!bubble) {
                    event.cancelBubble = true;
                    if (event.stopPropagation)
                      event.stopPropagation();
                  }
                });
              }
            })();
          }
        }
      };
      // "foreach: someExpression" is equivalent to "template: { foreach: someExpression }"
      // "foreach: { data: someExpression, afterAdd: myfn }" is equivalent to "template: { foreach: someExpression, afterAdd: myfn }"
      ko.bindingHandlers['foreach'] = {
        makeTemplateValueAccessor: function (valueAccessor) {
          return function () {
            var modelValue = valueAccessor(),
                unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here

            // If unwrappedValue is the array, pass in the wrapped value on its own
            // The value will be unwrapped and tracked within the template binding
            // (See https://github.com/SteveSanderson/knockout/issues/523)
            if ((!unwrappedValue) || typeof unwrappedValue.length == "number")
              return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };

            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates
            ko.utils.unwrapObservable(modelValue);
            return {
              'foreach': unwrappedValue['data'],
              'as': unwrappedValue['as'],
              'includeDestroyed': unwrappedValue['includeDestroyed'],
              'afterAdd': unwrappedValue['afterAdd'],
              'beforeRemove': unwrappedValue['beforeRemove'],
              'afterRender': unwrappedValue['afterRender'],
              'beforeMove': unwrappedValue['beforeMove'],
              'afterMove': unwrappedValue['afterMove'],
              'templateEngine': ko.nativeTemplateEngine.instance
            };
          };
        },
        'init': function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
          return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));
        },
        'update': function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
          return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindingsAccessor, viewModel, bindingContext);
        }
      };
      ko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings
      ko.virtualElements.allowedBindings['foreach'] = true;
      var hasfocusUpdatingProperty = '__ko_hasfocusUpdating';
      ko.bindingHandlers['hasfocus'] = {
        'init': function (element, valueAccessor, allBindingsAccessor) {
          var handleElementFocusChange = function (isFocused) {
            // Where possible, ignore which event was raised and determine focus state using activeElement,
            // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.
            // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,
            // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus
            // from calling 'blur()' on the element when it loses focus.
            // Discussion at https://github.com/SteveSanderson/knockout/pull/352
            element[hasfocusUpdatingProperty] = true;
            var ownerDoc = element.ownerDocument;
            if ("activeElement" in ownerDoc) {
              isFocused = (ownerDoc.activeElement === element);
            }
            var modelValue = valueAccessor();
            ko.expressionRewriting.writeValueToProperty(modelValue, allBindingsAccessor, 'hasfocus', isFocused, true);
            element[hasfocusUpdatingProperty] = false;
          };
          var handleElementFocusIn = handleElementFocusChange.bind(null, true);
          var handleElementFocusOut = handleElementFocusChange.bind(null, false);

          ko.utils.registerEventHandler(element, "focus", handleElementFocusIn);
          ko.utils.registerEventHandler(element, "focusin", handleElementFocusIn); // For IE
          ko.utils.registerEventHandler(element, "blur", handleElementFocusOut);
          ko.utils.registerEventHandler(element, "focusout", handleElementFocusOut); // For IE
        },
        'update': function (element, valueAccessor) {
          var value = ko.utils.unwrapObservable(valueAccessor());
          if (!element[hasfocusUpdatingProperty]) {
            value ? element.focus() : element.blur();
            ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? "focusin" : "focusout"]); // For IE, which doesn't reliably fire "focus" or "blur" events synchronously
          }
        }
      };
      ko.bindingHandlers['html'] = {
        'init': function () {
          // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)
          return { 'controlsDescendantBindings': true };
        },
        'update': function (element, valueAccessor) {
          // setHtml will unwrap the value if needed
          ko.utils.setHtml(element, valueAccessor());
        }
      };
      var withIfDomDataKey = '__ko_withIfBindingData';
      // Makes a binding like with or if
      function makeWithIfBinding(bindingKey, isWith, isNot, makeContextCallback) {
        ko.bindingHandlers[bindingKey] = {
          'init': function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            ko.utils.domData.set(element, withIfDomDataKey, {});
            return { 'controlsDescendantBindings': true };
          },
          'update': function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var withIfData = ko.utils.domData.get(element, withIfDomDataKey),
                dataValue = ko.utils.unwrapObservable(valueAccessor()),
                shouldDisplay = !isNot !== !dataValue, // equivalent to isNot ? !dataValue : !!dataValue
                isFirstRender = !withIfData.savedNodes,
                needsRefresh = isFirstRender || isWith || (shouldDisplay !== withIfData.didDisplayOnLastUpdate);

            if (needsRefresh) {
              if (isFirstRender) {
                withIfData.savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);
              }

              if (shouldDisplay) {
                if (!isFirstRender) {
                  ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(withIfData.savedNodes));
                }
                ko.applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext, dataValue) : bindingContext, element);
              } else {
                ko.virtualElements.emptyNode(element);
              }

              withIfData.didDisplayOnLastUpdate = shouldDisplay;
            }
          }
        };
        ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings
        ko.virtualElements.allowedBindings[bindingKey] = true;
      }

      // Construct the actual binding handlers
      makeWithIfBinding('if');
      makeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);
      makeWithIfBinding('with', true /* isWith */, false /* isNot */,
          function (bindingContext, dataValue) {
            return bindingContext['createChildContext'](dataValue);
          }
      );
      function ensureDropdownSelectionIsConsistentWithModelValue(element, modelValue, preferModelValue) {
        if (preferModelValue) {
          if (modelValue !== ko.selectExtensions.readValue(element))
            ko.selectExtensions.writeValue(element, modelValue);
        }

        // No matter which direction we're syncing in, we want the end result to be equality between dropdown value and model value.
        // If they aren't equal, either we prefer the dropdown value, or the model value couldn't be represented, so either way,
        // change the model value to match the dropdown.
        if (modelValue !== ko.selectExtensions.readValue(element))
          ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, "change"]);
      };

      ko.bindingHandlers['options'] = {
        'update': function (element, valueAccessor, allBindingsAccessor) {
          if (ko.utils.tagNameLower(element) !== "select")
            throw new Error("options binding applies only to SELECT elements");

          var selectWasPreviouslyEmpty = element.length == 0;
          var previousSelectedValues = ko.utils.arrayMap(ko.utils.arrayFilter(element.childNodes, function (node) {
            return node.tagName && (ko.utils.tagNameLower(node) === "option") && node.selected;
          }), function (node) {
            return ko.selectExtensions.readValue(node) || node.innerText || node.textContent;
          });
          var previousScrollTop = element.scrollTop;

          var value = ko.utils.unwrapObservable(valueAccessor());
          var selectedValue = element.value;

          // Remove all existing <option>s.
          // Need to use .remove() rather than .removeChild() for <option>s otherwise IE behaves oddly (https://github.com/SteveSanderson/knockout/issues/134)
          while (element.length > 0) {
            ko.cleanNode(element.options[0]);
            element.remove(0);
          }

          if (value) {
            var allBindings = allBindingsAccessor(),
                includeDestroyed = allBindings['optionsIncludeDestroyed'];

            if (typeof value.length != "number")
              value = [value];
            if (allBindings['optionsCaption']) {
              var option = document.createElement("option");
              ko.utils.setHtml(option, allBindings['optionsCaption']);
              ko.selectExtensions.writeValue(option, undefined);
              element.appendChild(option);
            }

            for (var i = 0, j = value.length; i < j; i++) {
              // Skip destroyed items
              var arrayEntry = value[i];
              if (arrayEntry && arrayEntry['_destroy'] && !includeDestroyed)
                continue;

              var option = document.createElement("option");

              function applyToObject(object, predicate, defaultValue) {
                var predicateType = typeof predicate;
                if (predicateType == "function")    // Given a function; run it against the data value
                  return predicate(object);
                else if (predicateType == "string") // Given a string; treat it as a property name on the data value
                  return object[predicate];
                else                                // Given no optionsText arg; use the data value itself
                  return defaultValue;
              }

              // Apply a value to the option element
              var optionValue = applyToObject(arrayEntry, allBindings['optionsValue'], arrayEntry);
              ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));

              // Apply some text to the option element
              var optionText = applyToObject(arrayEntry, allBindings['optionsText'], optionValue);
              ko.utils.setTextContent(option, optionText);

              element.appendChild(option);
            }

            // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.
            // That's why we first added them without selection. Now it's time to set the selection.
            var newOptions = element.getElementsByTagName("option");
            var countSelectionsRetained = 0;
            for (var i = 0, j = newOptions.length; i < j; i++) {
              if (ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[i])) >= 0) {
                ko.utils.setOptionNodeSelectionState(newOptions[i], true);
                countSelectionsRetained++;
              }
            }

            element.scrollTop = previousScrollTop;

            if (selectWasPreviouslyEmpty && ('value' in allBindings)) {
              // Ensure consistency between model value and selected option.
              // If the dropdown is being populated for the first time here (or was otherwise previously empty),
              // the dropdown selection state is meaningless, so we preserve the model value.
              ensureDropdownSelectionIsConsistentWithModelValue(element, ko.utils.peekObservable(allBindings['value']), /* preferModelValue */ true);
            }

            // Workaround for IE9 bug
            ko.utils.ensureSelectElementIsRenderedCorrectly(element);
          }
        }
      };
      ko.bindingHandlers['options'].optionValueDomDataKey = '__ko.optionValueDomData__';
      ko.bindingHandlers['selectedOptions'] = {
        'init': function (element, valueAccessor, allBindingsAccessor) {
          ko.utils.registerEventHandler(element, "change", function () {
            var value = valueAccessor(), valueToWrite = [];
            ko.utils.arrayForEach(element.getElementsByTagName("option"), function (node) {
              if (node.selected)
                valueToWrite.push(ko.selectExtensions.readValue(node));
            });
            ko.expressionRewriting.writeValueToProperty(value, allBindingsAccessor, 'value', valueToWrite);
          });
        },
        'update': function (element, valueAccessor) {
          if (ko.utils.tagNameLower(element) != "select")
            throw new Error("values binding applies only to SELECT elements");

          var newValue = ko.utils.unwrapObservable(valueAccessor());
          if (newValue && typeof newValue.length == "number") {
            ko.utils.arrayForEach(element.getElementsByTagName("option"), function (node) {
              var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0;
              ko.utils.setOptionNodeSelectionState(node, isSelected);
            });
          }
        }
      };
      ko.bindingHandlers['style'] = {
        'update': function (element, valueAccessor) {
          var value = ko.utils.unwrapObservable(valueAccessor() || {});
          for (var styleName in value) {
            if (typeof styleName == "string") {
              var styleValue = ko.utils.unwrapObservable(value[styleName]);
              element.style[styleName] = styleValue || ""; // Empty string removes the value, whereas null/undefined have no effect
            }
          }
        }
      };
      ko.bindingHandlers['submit'] = {
        'init': function (element, valueAccessor, allBindingsAccessor, viewModel) {
          if (typeof valueAccessor() != "function")
            throw new Error("The value for a submit binding must be a function");
          ko.utils.registerEventHandler(element, "submit", function (event) {
            var handlerReturnValue;
            var value = valueAccessor();
            try { handlerReturnValue = value.call(viewModel, element); }
            finally {
              if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.
                if (event.preventDefault)
                  event.preventDefault();
                else
                  event.returnValue = false;
              }
            }
          });
        }
      };
      ko.bindingHandlers['text'] = {
        'update': function (element, valueAccessor) {
          ko.utils.setTextContent(element, valueAccessor());
        }
      };
      ko.virtualElements.allowedBindings['text'] = true;
      ko.bindingHandlers['uniqueName'] = {
        'init': function (element, valueAccessor) {
          if (valueAccessor()) {
            var name = "ko_unique_" + (++ko.bindingHandlers['uniqueName'].currentIndex);
            ko.utils.setElementName(element, name);
          }
        }
      };
      ko.bindingHandlers['uniqueName'].currentIndex = 0;
      ko.bindingHandlers['value'] = {
        'init': function (element, valueAccessor, allBindingsAccessor) {
          // Always catch "change" event; possibly other events too if asked
          var eventsToCatch = ["change"];
          var requestedEventsToCatch = allBindingsAccessor()["valueUpdate"];
          var propertyChangedFired = false;
          if (requestedEventsToCatch) {
            if (typeof requestedEventsToCatch == "string") // Allow both individual event names, and arrays of event names
              requestedEventsToCatch = [requestedEventsToCatch];
            ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);
            eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);
          }

          var valueUpdateHandler = function () {
            propertyChangedFired = false;
            var modelValue = valueAccessor();
            var elementValue = ko.selectExtensions.readValue(element);
            ko.expressionRewriting.writeValueToProperty(modelValue, allBindingsAccessor, 'value', elementValue);
          }

          // Workaround for https://github.com/SteveSanderson/knockout/issues/122
          // IE doesn't fire "change" events on textboxes if the user selects a value from its autocomplete list
          var ieAutoCompleteHackNeeded = ko.utils.ieVersion && element.tagName.toLowerCase() == "input" && element.type == "text"
                                         && element.autocomplete != "off" && (!element.form || element.form.autocomplete != "off");
          if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, "propertychange") == -1) {
            ko.utils.registerEventHandler(element, "propertychange", function () { propertyChangedFired = true });
            ko.utils.registerEventHandler(element, "blur", function () {
              if (propertyChangedFired) {
                valueUpdateHandler();
              }
            });
          }

          ko.utils.arrayForEach(eventsToCatch, function (eventName) {
            // The syntax "after<eventname>" means "run the handler asynchronously after the event"
            // This is useful, for example, to catch "keydown" events after the browser has updated the control
            // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)
            var handler = valueUpdateHandler;
            if (ko.utils.stringStartsWith(eventName, "after")) {
              handler = function () { setTimeout(valueUpdateHandler, 0) };
              eventName = eventName.substring("after".length);
            }
            ko.utils.registerEventHandler(element, eventName, handler);
          });
        },
        'update': function (element, valueAccessor) {
          var valueIsSelectOption = ko.utils.tagNameLower(element) === "select";
          var newValue = ko.utils.unwrapObservable(valueAccessor());
          var elementValue = ko.selectExtensions.readValue(element);
          var valueHasChanged = (newValue != elementValue);

          // JavaScript's 0 == "" behavious is unfortunate here as it prevents writing 0 to an empty text box (loose equality suggests the values are the same).
          // We don't want to do a strict equality comparison as that is more confusing for developers in certain cases, so we specifically special case 0 != "" here.
          if ((newValue === 0) && (elementValue !== 0) && (elementValue !== "0"))
            valueHasChanged = true;

          if (valueHasChanged) {
            var applyValueAction = function () { ko.selectExtensions.writeValue(element, newValue); };
            applyValueAction();

            // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread
            // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread
            // to apply the value as well.
            var alsoApplyAsynchronously = valueIsSelectOption;
            if (alsoApplyAsynchronously)
              setTimeout(applyValueAction, 0);
          }

          // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,
          // because you're not allowed to have a model value that disagrees with a visible UI selection.
          if (valueIsSelectOption && (element.length > 0))
            ensureDropdownSelectionIsConsistentWithModelValue(element, newValue, /* preferModelValue */ false);
        }
      };
      ko.bindingHandlers['visible'] = {
        'update': function (element, valueAccessor) {
          var value = ko.utils.unwrapObservable(valueAccessor());
          var isCurrentlyVisible = !(element.style.display == "none");
          if (value && !isCurrentlyVisible)
            element.style.display = "";
          else if ((!value) && isCurrentlyVisible)
            element.style.display = "none";
        }
      };
      // 'click' is just a shorthand for the usual full-length event:{click:handler}
      makeEventHandlerShortcut('click');
      // If you want to make a custom template engine,
      //
      // [1] Inherit from this class (like ko.nativeTemplateEngine does)
      // [2] Override 'renderTemplateSource', supplying a function with this signature:
      //
      //        function (templateSource, bindingContext, options) {
      //            // - templateSource.text() is the text of the template you should render
      //            // - bindingContext.$data is the data you should pass into the template
      //            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,
      //            //     and bindingContext.$root available in the template too
      //            // - options gives you access to any other properties set on "data-bind: { template: options }"
      //            //
      //            // Return value: an array of DOM nodes
      //        }
      //
      // [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:
      //
      //        function (script) {
      //            // Return value: Whatever syntax means "Evaluate the JavaScript statement 'script' and output the result"
      //            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'
      //        }
      //
      //     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.
      //     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)
      //     and then you don't need to override 'createJavaScriptEvaluatorBlock'.

      ko.templateEngine = function () { };

      ko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options) {
        throw new Error("Override renderTemplateSource");
      };

      ko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {
        throw new Error("Override createJavaScriptEvaluatorBlock");
      };

      ko.templateEngine.prototype['makeTemplateSource'] = function (template, templateDocument) {
        // Named template
        if (typeof template == "string") {
          templateDocument = templateDocument || document;
          var elem = templateDocument.getElementById(template);
          if (!elem)
            throw new Error("Cannot find template with ID " + template);
          return new ko.templateSources.domElement(elem);
        } else if ((template.nodeType == 1) || (template.nodeType == 8)) {
          // Anonymous template
          return new ko.templateSources.anonymousTemplate(template);
        } else
          throw new Error("Unknown template type: " + template);
      };

      ko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {
        var templateSource = this['makeTemplateSource'](template, templateDocument);
        return this['renderTemplateSource'](templateSource, bindingContext, options);
      };

      ko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {
        // Skip rewriting if requested
        if (this['allowTemplateRewriting'] === false)
          return true;
        return this['makeTemplateSource'](template, templateDocument)['data']("isRewritten");
      };

      ko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {
        var templateSource = this['makeTemplateSource'](template, templateDocument);
        var rewritten = rewriterCallback(templateSource['text']());
        templateSource['text'](rewritten);
        templateSource['data']("isRewritten", true);
      };

      ko.exportSymbol('templateEngine', ko.templateEngine);

      ko.templateRewriting = (function () {
        var memoizeDataBindingAttributeSyntaxRegex = /(<[a-z]+\d*(\s+(?!data-bind=)[a-z0-9\-]+(=(\"[^\"]*\"|\'[^\']*\'))?)*\s+)data-bind=(["'])([\s\S]*?)\5/gi;
        var memoizeVirtualContainerBindingSyntaxRegex = /<!--\s*ko\b\s*([\s\S]*?)\s*-->/g;

        function validateDataBindValuesForRewriting(keyValueArray) {
          var allValidators = ko.expressionRewriting.bindingRewriteValidators;
          for (var i = 0; i < keyValueArray.length; i++) {
            var key = keyValueArray[i]['key'];
            if (allValidators.hasOwnProperty(key)) {
              var validator = allValidators[key];

              if (typeof validator === "function") {
                var possibleErrorMessage = validator(keyValueArray[i]['value']);
                if (possibleErrorMessage)
                  throw new Error(possibleErrorMessage);
              } else if (!validator) {
                throw new Error("This template engine does not support the '" + key + "' binding within its templates");
              }
            }
          }
        }

        function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, templateEngine) {
          var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);
          validateDataBindValuesForRewriting(dataBindKeyValueArray);
          var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray);

          // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional
          // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this
          // extra indirection.
          var applyBindingsToNextSiblingScript =
              "ko.__tr_ambtns(function($context,$element){return(function(){return{ " + rewrittenDataBindAttributeValue + " } })()})";
          return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;
        }

        return {
          ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {
            if (!templateEngine['isTemplateRewritten'](template, templateDocument))
              templateEngine['rewriteTemplate'](template, function (htmlString) {
                return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);
              }, templateDocument);
          },

          memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {
            return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {
              return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[6], /* tagToRetain: */ arguments[1], templateEngine);
            }).replace(memoizeVirtualContainerBindingSyntaxRegex, function () {
              return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ "<!-- ko -->", templateEngine);
            });
          },

          applyMemoizedBindingsToNextSibling: function (bindings) {
            return ko.memoization.memoize(function (domNode, bindingContext) {
              if (domNode.nextSibling)
                ko.applyBindingsToNode(domNode.nextSibling, bindings, bindingContext);
            });
          }
        }
      })();


      // Exported only because it has to be referenced by string lookup from within rewritten template
      ko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);
      (function () {
        // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving
        // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)
        //
        // Two are provided by default:
        //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element
        //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but
        //                                           without reading/writing the actual element text content, since it will be overwritten
        //                                           with the rendered template output.
        // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.
        // Template sources need to have the following functions:
        //   text() 			- returns the template text from your storage location
        //   text(value)		- writes the supplied template text to your storage location
        //   data(key)			- reads values stored using data(key, value) - see below
        //   data(key, value)	- associates "value" with this template and the key "key". Is used to store information like "isRewritten".
        //
        // Optionally, template sources can also have the following functions:
        //   nodes()            - returns a DOM element containing the nodes of this template, where available
        //   nodes(value)       - writes the given DOM element to your storage location
        // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()
        // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().
        //
        // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were
        // using and overriding "makeTemplateSource" to return an instance of your custom template source.

        ko.templateSources = {};

        // ---- ko.templateSources.domElement -----

        ko.templateSources.domElement = function (element) {
          this.domElement = element;
        }

        ko.templateSources.domElement.prototype['text'] = function (/* valueToWrite */) {
          var tagNameLower = ko.utils.tagNameLower(this.domElement),
              elemContentsProperty = tagNameLower === "script" ? "text"
                                   : tagNameLower === "textarea" ? "value"
                                   : "innerHTML";

          if (arguments.length == 0) {
            return this.domElement[elemContentsProperty];
          } else {
            var valueToWrite = arguments[0];
            if (elemContentsProperty === "innerHTML")
              ko.utils.setHtml(this.domElement, valueToWrite);
            else
              this.domElement[elemContentsProperty] = valueToWrite;
          }
        };

        ko.templateSources.domElement.prototype['data'] = function (key /*, valueToWrite */) {
          if (arguments.length === 1) {
            return ko.utils.domData.get(this.domElement, "templateSourceData_" + key);
          } else {
            ko.utils.domData.set(this.domElement, "templateSourceData_" + key, arguments[1]);
          }
        };

        // ---- ko.templateSources.anonymousTemplate -----
        // Anonymous templates are normally saved/retrieved as DOM nodes through "nodes".
        // For compatibility, you can also read "text"; it will be serialized from the nodes on demand.
        // Writing to "text" is still supported, but then the template data will not be available as DOM nodes.

        var anonymousTemplatesDomDataKey = "__ko_anon_template__";
        ko.templateSources.anonymousTemplate = function (element) {
          this.domElement = element;
        }
        ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();
        ko.templateSources.anonymousTemplate.prototype['text'] = function (/* valueToWrite */) {
          if (arguments.length == 0) {
            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};
            if (templateData.textData === undefined && templateData.containerData)
              templateData.textData = templateData.containerData.innerHTML;
            return templateData.textData;
          } else {
            var valueToWrite = arguments[0];
            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, { textData: valueToWrite });
          }
        };
        ko.templateSources.domElement.prototype['nodes'] = function (/* valueToWrite */) {
          if (arguments.length == 0) {
            var templateData = ko.utils.domData.get(this.domElement, anonymousTemplatesDomDataKey) || {};
            return templateData.containerData;
          } else {
            var valueToWrite = arguments[0];
            ko.utils.domData.set(this.domElement, anonymousTemplatesDomDataKey, { containerData: valueToWrite });
          }
        };

        ko.exportSymbol('templateSources', ko.templateSources);
        ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);
        ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);
      })();
      (function () {
        var _templateEngine;
        ko.setTemplateEngine = function (templateEngine) {
          if ((templateEngine != undefined) && !(templateEngine instanceof ko.templateEngine))
            throw new Error("templateEngine must inherit from ko.templateEngine");
          _templateEngine = templateEngine;
        }

        function invokeForEachNodeOrCommentInContinuousRange(firstNode, lastNode, action) {
          var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);
          while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {
            nextInQueue = ko.virtualElements.nextSibling(node);
            if (node.nodeType === 1 || node.nodeType === 8)
              action(node);
          }
        }

        function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {
          // To be used on any nodes that have been rendered by a template and have been inserted into some parent element
          // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because
          // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,
          // (1) Does a regular "applyBindings" to associate bindingContext with this node and to activate any non-memoized bindings
          // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)

          if (continuousNodeArray.length) {
            var firstNode = continuousNodeArray[0], lastNode = continuousNodeArray[continuousNodeArray.length - 1];

            // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)
            // whereas a regular applyBindings won't introduce new memoized nodes
            invokeForEachNodeOrCommentInContinuousRange(firstNode, lastNode, function (node) {
              ko.applyBindings(bindingContext, node);
            });
            invokeForEachNodeOrCommentInContinuousRange(firstNode, lastNode, function (node) {
              ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);
            });
          }
        }

        function getFirstNodeFromPossibleArray(nodeOrNodeArray) {
          return nodeOrNodeArray.nodeType ? nodeOrNodeArray
                                          : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]
                                          : null;
        }

        function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {
          options = options || {};
          var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);
          var templateDocument = firstTargetNode && firstTargetNode.ownerDocument;
          var templateEngineToUse = (options['templateEngine'] || _templateEngine);
          ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);
          var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);

          // Loosely check result is an array of DOM nodes
          if ((typeof renderedNodesArray.length != "number") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != "number"))
            throw new Error("Template engine must return an array of DOM nodes");

          var haveAddedNodesToParent = false;
          switch (renderMode) {
            case "replaceChildren":
              ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);
              haveAddedNodesToParent = true;
              break;
            case "replaceNode":
              ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);
              haveAddedNodesToParent = true;
              break;
            case "ignoreTargetNode": break;
            default:
              throw new Error("Unknown renderMode: " + renderMode);
          }

          if (haveAddedNodesToParent) {
            activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);
            if (options['afterRender'])
              ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext['$data']]);
          }

          return renderedNodesArray;
        }

        ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {
          options = options || {};
          if ((options['templateEngine'] || _templateEngine) == undefined)
            throw new Error("Set a template engine before calling renderTemplate");
          renderMode = renderMode || "replaceChildren";

          if (targetNodeOrNodeArray) {
            var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);

            var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)
            var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == "replaceNode") ? firstTargetNode.parentNode : firstTargetNode;

            return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes
                function () {
                  // Ensure we've got a proper binding context to work with
                  var bindingContext = (dataOrBindingContext && (dataOrBindingContext instanceof ko.bindingContext))
                      ? dataOrBindingContext
                      : new ko.bindingContext(ko.utils.unwrapObservable(dataOrBindingContext));

                  // Support selecting template as a function of the data being rendered
                  var templateName = typeof (template) == 'function' ? template(bindingContext['$data'], bindingContext) : template;

                  var renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);
                  if (renderMode == "replaceNode") {
                    targetNodeOrNodeArray = renderedNodesArray;
                    firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);
                  }
                },
                null,
                { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }
            );
          } else {
            // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node
            return ko.memoization.memoize(function (domNode) {
              ko.renderTemplate(template, dataOrBindingContext, options, domNode, "replaceNode");
            });
          }
        };

        ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {
          // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then
          // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.
          var arrayItemContext;

          // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode
          var executeTemplateForArrayItem = function (arrayValue, index) {
            // Support selecting template as a function of the data being rendered
            arrayItemContext = parentBindingContext['createChildContext'](ko.utils.unwrapObservable(arrayValue), options['as']);
            arrayItemContext['$index'] = index;
            var templateName = typeof (template) == 'function' ? template(arrayValue, arrayItemContext) : template;
            return executeTemplate(null, "ignoreTargetNode", templateName, arrayItemContext, options);
          }

          // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode
          var activateBindingsCallback = function (arrayValue, addedNodesArray, index) {
            activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);
            if (options['afterRender'])
              options['afterRender'](addedNodesArray, arrayValue);
          };

          return ko.dependentObservable(function () {
            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];
            if (typeof unwrappedArray.length == "undefined") // Coerce single value into array
              unwrappedArray = [unwrappedArray];

            // Filter out any entries marked as destroyed
            var filteredArray = ko.utils.arrayFilter(unwrappedArray, function (item) {
              return options['includeDestroyed'] || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);
            });

            // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).
            // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.
            ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback]);

          }, null, { disposeWhenNodeIsRemoved: targetNode });
        };

        var templateComputedDomDataKey = '__ko__templateComputedDomDataKey__';
        function disposeOldComputedAndStoreNewOne(element, newComputed) {
          var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);
          if (oldComputed && (typeof (oldComputed.dispose) == 'function'))
            oldComputed.dispose();
          ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed && newComputed.isActive()) ? newComputed : undefined);
        }

        ko.bindingHandlers['template'] = {
          'init': function (element, valueAccessor) {
            // Support anonymous templates
            var bindingValue = ko.utils.unwrapObservable(valueAccessor());
            if ((typeof bindingValue != "string") && (!bindingValue['name']) && (element.nodeType == 1 || element.nodeType == 8)) {
              // It's an anonymous template - store the element contents, then clear the element
              var templateNodes = element.nodeType == 1 ? element.childNodes : ko.virtualElements.childNodes(element),
                  container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent
              new ko.templateSources.anonymousTemplate(element)['nodes'](container);
            }
            return { 'controlsDescendantBindings': true };
          },
          'update': function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var templateName = ko.utils.unwrapObservable(valueAccessor()),
                options = {},
                shouldDisplay = true,
                dataValue,
                templateComputed = null;

            if (typeof templateName != "string") {
              options = templateName;
              templateName = options['name'];

              // Support "if"/"ifnot" conditions
              if ('if' in options)
                shouldDisplay = ko.utils.unwrapObservable(options['if']);
              if (shouldDisplay && 'ifnot' in options)
                shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);

              dataValue = ko.utils.unwrapObservable(options['data']);
            }

            if ('foreach' in options) {
              // Render once for each data point (treating data set as empty if shouldDisplay==false)
              var dataArray = (shouldDisplay && options['foreach']) || [];
              templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);
            } else if (!shouldDisplay) {
              ko.virtualElements.emptyNode(element);
            } else {
              // Render once for this single data point (or use the viewModel if no data was provided)
              var innerBindingContext = ('data' in options) ?
                  bindingContext['createChildContext'](dataValue, options['as']) :  // Given an explitit 'data' value, we create a child binding context for it
                  bindingContext;                                                        // Given no explicit 'data' value, we retain the same binding context
              templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);
            }

            // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)
            disposeOldComputedAndStoreNewOne(element, templateComputed);
          }
        };

        // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.
        ko.expressionRewriting.bindingRewriteValidators['template'] = function (bindingValue) {
          var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);

          if ((parsedBindingValue.length == 1) && parsedBindingValue[0]['unknown'])
            return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)

          if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, "name"))
            return null; // Named templates can be rewritten, so return "no error"
          return "This template engine does not support anonymous templates nested within its templates";
        };

        ko.virtualElements.allowedBindings['template'] = true;
      })();

      ko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);
      ko.exportSymbol('renderTemplate', ko.renderTemplate);

      ko.utils.compareArrays = (function () {
        var statusNotInOld = 'added', statusNotInNew = 'deleted';

        // Simple calculation based on Levenshtein distance.
        function compareArrays(oldArray, newArray, dontLimitMoves) {
          oldArray = oldArray || [];
          newArray = newArray || [];

          if (oldArray.length <= newArray.length)
            return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, dontLimitMoves);
          else
            return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, dontLimitMoves);
        }

        function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, dontLimitMoves) {
          var myMin = Math.min,
              myMax = Math.max,
              editDistanceMatrix = [],
              smlIndex, smlIndexMax = smlArray.length,
              bigIndex, bigIndexMax = bigArray.length,
              compareRange = (bigIndexMax - smlIndexMax) || 1,
              maxDistance = smlIndexMax + bigIndexMax + 1,
              thisRow, lastRow,
              bigIndexMaxForRow, bigIndexMinForRow;

          for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {
            lastRow = thisRow;
            editDistanceMatrix.push(thisRow = []);
            bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);
            bigIndexMinForRow = myMax(0, smlIndex - 1);
            for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {
              if (!bigIndex)
                thisRow[bigIndex] = smlIndex + 1;
              else if (!smlIndex)  // Top row - transform empty array into new array via additions
                thisRow[bigIndex] = bigIndex + 1;
              else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])
                thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)
              else {
                var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)
                var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)
                thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;
              }
            }
          }

          var editScript = [], meMinusOne, notInSml = [], notInBig = [];
          for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {
            meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;
            if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex - 1]) {
              notInSml.push(editScript[editScript.length] = {     // added
                'status': statusNotInSml,
                'value': bigArray[--bigIndex],
                'index': bigIndex
              });
            } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {
              notInBig.push(editScript[editScript.length] = {     // deleted
                'status': statusNotInBig,
                'value': smlArray[--smlIndex],
                'index': smlIndex
              });
            } else {
              editScript.push({
                'status': "retained",
                'value': bigArray[--bigIndex]
              });
              --smlIndex;
            }
          }

          if (notInSml.length && notInBig.length) {
            // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of
            // smlIndexMax keeps the time complexity of this algorithm linear.
            var limitFailedCompares = smlIndexMax * 10, failedCompares,
                a, d, notInSmlItem, notInBigItem;
            // Go through the items that have been added and deleted and try to find matches between them.
            for (failedCompares = a = 0; (dontLimitMoves || failedCompares < limitFailedCompares) && (notInSmlItem = notInSml[a]) ; a++) {
              for (d = 0; notInBigItem = notInBig[d]; d++) {
                if (notInSmlItem['value'] === notInBigItem['value']) {
                  notInSmlItem['moved'] = notInBigItem['index'];
                  notInBigItem['moved'] = notInSmlItem['index'];
                  notInBig.splice(d, 1);       // This item is marked as moved; so remove it from notInBig list
                  failedCompares = d = 0;     // Reset failed compares count because we're checking for consecutive failures
                  break;
                }
              }
              failedCompares += d;
            }
          }
          return editScript.reverse();
        }

        return compareArrays;
      })();

      ko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);

      (function () {
        // Objective:
        // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,
        //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node
        // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node
        //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we
        //   previously mapped - retain those nodes, and just insert/delete other ones

        // "callbackAfterAddingNodes" will be invoked after any "mapping"-generated nodes are inserted into the container node
        // You can use this, for example, to activate bindings on those nodes.

        function fixUpNodesToBeMovedOrRemoved(contiguousNodeArray) {
          // Before moving, deleting, or replacing a set of nodes that were previously outputted by the "map" function, we have to reconcile
          // them against what is in the DOM right now. It may be that some of the nodes have already been removed from the document,
          // or that new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been
          // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.
          // So, this function translates the old "map" output array into its best guess of what set of current DOM nodes should be removed.
          //
          // Rules:
          //   [A] Any leading nodes that aren't in the document any more should be ignored
          //       These most likely correspond to memoization nodes that were already removed during binding
          //       See https://github.com/SteveSanderson/knockout/pull/440
          //   [B] We want to output a contiguous series of nodes that are still in the document. So, ignore any nodes that
          //       have already been removed, and include any nodes that have been inserted among the previous collection

          // Rule [A]
          while (contiguousNodeArray.length && !ko.utils.domNodeIsAttachedToDocument(contiguousNodeArray[0]))
            contiguousNodeArray.splice(0, 1);

          // Rule [B]
          if (contiguousNodeArray.length > 1) {
            // Build up the actual new contiguous node set
            var current = contiguousNodeArray[0], last = contiguousNodeArray[contiguousNodeArray.length - 1], newContiguousSet = [current];
            while (current !== last) {
              current = current.nextSibling;
              if (!current) // Won't happen, except if the developer has manually removed some DOM elements (then we're in an undefined scenario)
                return;
              newContiguousSet.push(current);
            }

            // ... then mutate the input array to match this.
            // (The following line replaces the contents of contiguousNodeArray with newContiguousSet)
            Array.prototype.splice.apply(contiguousNodeArray, [0, contiguousNodeArray.length].concat(newContiguousSet));
          }
          return contiguousNodeArray;
        }

        function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {
          // Map this array value inside a dependentObservable so we re-map when any dependency changes
          var mappedNodes = [];
          var dependentObservable = ko.dependentObservable(function () {
            var newMappedNodes = mapping(valueToMap, index) || [];

            // On subsequent evaluations, just replace the previously-inserted DOM nodes
            if (mappedNodes.length > 0) {
              ko.utils.replaceDomNodes(fixUpNodesToBeMovedOrRemoved(mappedNodes), newMappedNodes);
              if (callbackAfterAddingNodes)
                ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);
            }

            // Replace the contents of the mappedNodes array, thereby updating the record
            // of which nodes would be deleted if valueToMap was itself later removed
            mappedNodes.splice(0, mappedNodes.length);
            ko.utils.arrayPushAll(mappedNodes, newMappedNodes);
          }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function () { return (mappedNodes.length == 0) || !ko.utils.domNodeIsAttachedToDocument(mappedNodes[0]) } });
          return { mappedNodes: mappedNodes, dependentObservable: (dependentObservable.isActive() ? dependentObservable : undefined) };
        }

        var lastMappingResultDomDataKey = "setDomNodeChildrenFromArrayMapping_lastMappingResult";

        ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {
          // Compare the provided array against the previous one
          array = array || [];
          options = options || {};
          var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;
          var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];
          var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });
          var editScript = ko.utils.compareArrays(lastArray, array);

          // Build the new mapping result
          var newMappingResult = [];
          var lastMappingResultIndex = 0;
          var newMappingResultIndex = 0;

          var nodesToDelete = [];
          var itemsToProcess = [];
          var itemsForBeforeRemoveCallbacks = [];
          var itemsForMoveCallbacks = [];
          var itemsForAfterAddCallbacks = [];
          var mapData;

          function itemMovedOrRetained(editScriptIndex, oldPosition) {
            mapData = lastMappingResult[oldPosition];
            if (newMappingResultIndex !== oldPosition)
              itemsForMoveCallbacks[editScriptIndex] = mapData;
            // Since updating the index might change the nodes, do so before calling fixUpNodesToBeMovedOrRemoved
            mapData.indexObservable(newMappingResultIndex++);
            fixUpNodesToBeMovedOrRemoved(mapData.mappedNodes);
            newMappingResult.push(mapData);
            itemsToProcess.push(mapData);
          }

          function callCallback(callback, items) {
            if (callback) {
              for (var i = 0, n = items.length; i < n; i++) {
                if (items[i]) {
                  ko.utils.arrayForEach(items[i].mappedNodes, function (node) {
                    callback(node, i, items[i].arrayEntry);
                  });
                }
              }
            }
          }

          for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {
            movedIndex = editScriptItem['moved'];
            switch (editScriptItem['status']) {
              case "deleted":
                if (movedIndex === undefined) {
                  mapData = lastMappingResult[lastMappingResultIndex];

                  // Stop tracking changes to the mapping for these nodes
                  if (mapData.dependentObservable)
                    mapData.dependentObservable.dispose();

                  // Queue these nodes for later removal
                  nodesToDelete.push.apply(nodesToDelete, fixUpNodesToBeMovedOrRemoved(mapData.mappedNodes));
                  if (options['beforeRemove']) {
                    itemsForBeforeRemoveCallbacks[i] = mapData;
                    itemsToProcess.push(mapData);
                  }
                }
                lastMappingResultIndex++;
                break;

              case "retained":
                itemMovedOrRetained(i, lastMappingResultIndex++);
                break;

              case "added":
                if (movedIndex !== undefined) {
                  itemMovedOrRetained(i, movedIndex);
                } else {
                  mapData = { arrayEntry: editScriptItem['value'], indexObservable: ko.observable(newMappingResultIndex++) };
                  newMappingResult.push(mapData);
                  itemsToProcess.push(mapData);
                  if (!isFirstExecution)
                    itemsForAfterAddCallbacks[i] = mapData;
                }
                break;
            }
          }

          // Call beforeMove first before any changes have been made to the DOM
          callCallback(options['beforeMove'], itemsForMoveCallbacks);

          // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)
          ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);

          // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)
          for (var i = 0, nextNode = ko.virtualElements.firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {
            // Get nodes for newly added items
            if (!mapData.mappedNodes)
              ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));

            // Put nodes in the right place if they aren't there already
            for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {
              if (node !== nextNode)
                ko.virtualElements.insertAfter(domNode, node, lastNode);
            }

            // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)
            if (!mapData.initialized && callbackAfterAddingNodes) {
              callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);
              mapData.initialized = true;
            }
          }

          // If there's a beforeRemove callback, call it after reordering.
          // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using
          // some sort of animation, which is why we first reorder the nodes that will be removed. If the
          // callback instead removes the nodes right away, it would be more efficient to skip reordering them.
          // Perhaps we'll make that change in the future if this scenario becomes more common.
          callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);

          // Finally call afterMove and afterAdd callbacks
          callCallback(options['afterMove'], itemsForMoveCallbacks);
          callCallback(options['afterAdd'], itemsForAfterAddCallbacks);

          // Store a copy of the array items we just considered so we can difference it next time
          ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);
        }
      })();

      ko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);
      ko.nativeTemplateEngine = function () {
        this['allowTemplateRewriting'] = false;
      }

      ko.nativeTemplateEngine.prototype = new ko.templateEngine();
      ko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options) {
        var useNodesIfAvailable = !(ko.utils.ieVersion < 9), // IE<9 cloneNode doesn't work properly
            templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,
            templateNodes = templateNodesFunc ? templateSource['nodes']() : null;

        if (templateNodes) {
          return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);
        } else {
          var templateText = templateSource['text']();
          return ko.utils.parseHtmlFragment(templateText);
        }
      };

      ko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();
      ko.setTemplateEngine(ko.nativeTemplateEngine.instance);

      ko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);
      (function () {
        ko.jqueryTmplTemplateEngine = function () {
          // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl
          // doesn't expose a version number, so we have to infer it.
          // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,
          // which KO internally refers to as version "2", so older versions are no longer detected.
          var jQueryTmplVersion = this.jQueryTmplVersion = (function () {
            if ((typeof (jQuery) == "undefined") || !(jQuery['tmpl']))
              return 0;
            // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.
            try {
              if (jQuery['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {
                // Since 1.0.0pre, custom tags should append markup to an array called "__"
                return 2; // Final version of jquery.tmpl
              }
            } catch (ex) { /* Apparently not the version we were looking for */ }

            return 1; // Any older version that we don't support
          })();

          function ensureHasReferencedJQueryTemplates() {
            if (jQueryTmplVersion < 2)
              throw new Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");
          }

          function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {
            return jQuery['tmpl'](compiledTemplate, data, jQueryTemplateOptions);
          }

          this['renderTemplateSource'] = function (templateSource, bindingContext, options) {
            options = options || {};
            ensureHasReferencedJQueryTemplates();

            // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)
            var precompiled = templateSource['data']('precompiled');
            if (!precompiled) {
              var templateText = templateSource['text']() || "";
              // Wrap in "with($whatever.koBindingContext) { ... }"
              templateText = "{{ko_with $item.koBindingContext}}" + templateText + "{{/ko_with}}";

              precompiled = jQuery['template'](null, templateText);
              templateSource['data']('precompiled', precompiled);
            }

            var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays
            var jQueryTemplateOptions = jQuery['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);

            var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);
            resultNodes['appendTo'](document.createElement("div")); // Using "appendTo" forces jQuery/jQuery.tmpl to perform necessary cleanup work

            jQuery['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders
            return resultNodes;
          };

          this['createJavaScriptEvaluatorBlock'] = function (script) {
            return "{{ko_code ((function() { return " + script + " })()) }}";
          };

          this['addTemplate'] = function (templateName, templateMarkup) {
            document.write("<script type='text/html' id='" + templateName + "'>" + templateMarkup + "</script>");
          };

          if (jQueryTmplVersion > 0) {
            jQuery['tmpl']['tag']['ko_code'] = {
              open: "__.push($1 || '');"
            };
            jQuery['tmpl']['tag']['ko_with'] = {
              open: "with($1) {",
              close: "} "
            };
          }
        };

        ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();

        // Use this one by default *only if jquery.tmpl is referenced*
        var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();
        if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0)
          ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);

        ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);
      })();
    });
  })(window, document, navigator, window["jQuery"]);
})();

//http://www.knockmeout.net/2012/11/revisit-event-delegation-in-knockout-js.html
//knockout-delegatedEvents v0.1.1 | (c) 2012 Ryan Niemeyer | http://www.opensource.org/licenses/mit-license
//http://borismoore.github.io/jsrender/demos/variants/accessing-templates/05_template-composition-templateobjects.html
(function (factory) {
  //CommonJS
  if (typeof require === "function" && typeof exports === "object" && typeof module === "object") {
    factory(require("knockout"), exports);
    //AMD
  } else if (typeof define === "function" && define.amd) {
    define(["knockout", "exports"], factory);
    //normal script tag
  } else {
    factory(ko, ko.actions = {});
  }
}(function (ko, actions) {
  var prefix = "ko_delegated_";
  var createDelegatedHandler = function (eventName, root) {
    return function (event) {
      var data, method, action, owner, matchingParent, command, result,
          el = event.target || event.srcElement,
          context = ko.contextFor(el),
          attr = "data-" + eventName,
          key = prefix + eventName;

      if (context) {
        //loop until we either find an action, run out of elements, or hit the root element that has our delegated handler
        while (!method && el) {
          method = el.getAttribute(attr) || ko.utils.domData.get(el, key);
          if (!method) {
            el = el !== root ? el.parentElement : null;
          }
        }

        if (method) {
          //get context of the element that actually held the action

          context = ko.contextFor(el);

          if (context) {
            data = context.$data;

            if (typeof method === "string") {
              //check defined actions
              if (method in actions) {
                command = actions[method];
                if (command) {
                  action = typeof command === "function" ? command : command.action;
                  owner = command.owner || data;
                }
              }
                //search for the action
              else if (data && data[method] && typeof data[method] === "function") {
                action = data[method];
                owner = data;
              }

              //search parents for the action
              if (!action) {
                matchingParent = ko.utils.arrayFirst(context.$parents, function (parent) {
                  return parent[method] && typeof parent[method] === "function";
                });

                action = matchingParent && matchingParent[method];
                owner = matchingParent;
              }
            }
              //a binding handler was used to associate the element with a function
            else if (typeof method === "function") {
              action = method;
              owner = data;
            }
          }

          //execute the action as KO normally would
          if (action) {
            //result = action.call(owner, data, event); 
            result = action.call(owner, data, el.getAttribute('data-delegate-index'), event); //LM PATCH

            //prevent default action, if handler returns true
            if (result !== true) {
              if (event.preventDefault) {
                event.preventDefault();
              }
              else {
                event.returnValue = false;
              }
            }
          }
        }
      }
    };
  };

  //create a binding for an event to associate a function with the element
  var createDelegatedBinding = function (event) {
    var bindingName;
    if (event) {
      //capitalize first letter
      bindingName = "delegated" + event.substr(0, 1).toUpperCase() + event.slice(1);
    }

    //create the binding, if it does not exist
    if (!ko.bindingHandlers[bindingName]) {
      ko.bindingHandlers[bindingName] = {
        init: function (element, valueAccessor) {
          var action = valueAccessor();
          ko.utils.domData.set(element, prefix + event, action);
        }
      };
    }
  };

  //add a handler on a parent element that responds to events from the children
  ko.bindingHandlers.delegatedHandler = {
    init: function (element, valueAccessor) {
      var events = ko.utils.unwrapObservable(valueAccessor()) || [];

      if (typeof events === "string") {
        events = [events];
      }

      ko.utils.arrayForEach(events, function (event) {
        createDelegatedBinding(event);
        ko.utils.registerEventHandler(element, event, createDelegatedHandler(event, element));
      });
    }
  };
}));

//     Underscore.js 1.4.3
//     http://underscorejs.org
//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      concat           = ArrayProto.concat,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.4.3';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    return _.filter(obj, function(value, index, list) {
      return !iterator.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    return _.map(obj, function(value) {
      return (_.isFunction(method) ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // with specific `key:value` pairs.
  _.where = function(obj, attrs) {
    if (_.isEmpty(attrs)) return [];
    return _.filter(obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See: https://bugs.webkit.org/show_bug.cgi?id=80797
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity, value: -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity, value: Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        index : index,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index < right.index ? -1 : 1;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(obj, value, context, behavior) {
    var result = {};
    var iterator = lookupIterator(value || _.identity);
    each(obj, function(value, index) {
      var key = iterator.call(context, value, index, obj);
      behavior(result, key, value);
    });
    return result;
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
    });
  };

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key) {
      if (!_.has(result, key)) result[key] = 0;
      result[key]++;
    });
  };

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    each(input, function(value) {
      if (_.isArray(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(concat.apply(ArrayProto, arguments));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(args, "" + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, l = list.length; i < l; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, l = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < l; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Binding with arguments is also known as `curry`.
  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.
  // We check for `func.bind` first, to fail fast when `func` is undefined.
  _.bind = function(func, context) {
    var args, bound;
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length == 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time.
  _.throttle = function(func, wait) {
    var context, args, timeout, result;
    var previous = 0;
    var later = function() {
      previous = new Date;
      timeout = null;
      result = func.apply(context, args);
    };
    return function() {
      var now = new Date;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
      } else if (!timeout) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var values = [];
    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var pairs = [];
    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] == null) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent, but `Object`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
        return false;
      }
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(n);
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + (0 | Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named property is a function then invoke it;
  // otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return null;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = '' + ++idCounter;
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);

/// <reference path="../../jsd/jquery.d.ts" />
/// <reference path="../../jsd/knockout.d.ts" />
/// <reference path="../../jsd/jsrender.d.ts" />
/// <reference path="../utils.ts" />
//https://github.com/WTK/ko.mustache.js/blob/master/ko.mustache.js
//http://www.knockmeout.net/2011/03/quick-tip-dynamically-changing.html
var JsRenderTemplateEngine;
(function (JsRenderTemplateEngine) {
    function makeTemplateSource(templateName, templateDocument) {
        return templateName;
    }
    JsRenderTemplateEngine.makeTemplateSource = makeTemplateSource;
    function renderTemplateSource(templateText, bindingContext, options) {
        var data = bindingContext.$data;
        var htmlResult = tmpl(templateText).render(data);
        Debug.trace_jsrender(htmlResult);
        return anyKo.utils.parseHtmlFragment(htmlResult);
    }
    JsRenderTemplateEngine.renderTemplateSource = renderTemplateSource;
    JsRenderTemplateEngine.allowTemplateRewriting = false;
    JsRenderTemplateEngine.version = '0.9.0';
    var templCache = [];
    function tmpl(id) {
        id = id.toLowerCase();
        var tmpl = templCache[id];
        if(tmpl == null) {
            var t = $('#' + id);
            var txt = t.html();
            if(!txt) {
                alert("cannot read template " + id);
            }
            t.remove();
            try  {
                tmpl = $.templates(txt);
            } catch (msg) {
                alert("cannot compile template " + id);
                throw msg;
            }
            templCache[id] = tmpl;
        }
        return tmpl;
    }
    JsRenderTemplateEngine.tmpl = tmpl;
    var anyKo = ko;
    anyKo.setTemplateEngine(ko.utils.extend(new anyKo.templateEngine(), JsRenderTemplateEngine));
    $.views.helpers({
        tmpl: JsRenderTemplateEngine.tmpl,
        T: JsRenderTemplateEngine.tmpl
    });
})(JsRenderTemplateEngine || (JsRenderTemplateEngine = {}));
///#DEBUG
var Debug;
(function (Debug) {
    function trace_jsrender(msg) {
        Debug.trace("jsrender", msg);
    }
    Debug.trace_jsrender = trace_jsrender;
})(Debug || (Debug = {}));
///#ENDDEBUG
var jsrender_noop = null;

/* ===================================================
 * bootstrap-transition.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#transitions
 * ===================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


  /* CSS TRANSITION SUPPORT (http://www.modernizr.com/)
   * ======================================================= */

  $(function () {

    $.support.transition = (function () {

      var transitionEnd = (function () {

        var el = document.createElement('bootstrap')
          , transEndEventNames = {
               'WebkitTransition' : 'webkitTransitionEnd'
            ,  'MozTransition'    : 'transitionend'
            ,  'OTransition'      : 'oTransitionEnd otransitionend'
            ,  'transition'       : 'transitionend'
            }
          , name

        for (name in transEndEventNames){
          if (el.style[name] !== undefined) {
            return transEndEventNames[name]
          }
        }

      }())

      return transitionEnd && {
        end: transitionEnd
      }

    })()

  })

}(window.jQuery);
/* =========================================================
 * bootstrap-modal.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#modals
 * =========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */


!function ($) {

  "use strict"; // jshint ;_;


 /* MODAL CLASS DEFINITION
  * ====================== */

  var Modal = function (element, options) {
    this.options = options
    this.$element = $(element)
      .delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this))
    this.options.remote && this.$element.find('.modal-body').load(this.options.remote)
  }

  Modal.prototype = {

      constructor: Modal

    , toggle: function () {
        return this[!this.isShown ? 'show' : 'hide']()
      }

    , show: function () {
        var that = this
          , e = $.Event('show')

        this.$element.trigger(e)

        if (this.isShown || e.isDefaultPrevented()) return

        this.isShown = true

        this.escape()

        this.backdrop(function () {
          var transition = $.support.transition && that.$element.hasClass('fade')

          if (!that.$element.parent().length) {
            that.$element.appendTo(document.body) //don't move modals dom position
          }

          that.$element
            .show()

          if (transition) {
            that.$element[0].offsetWidth // force reflow
          }

          that.$element
            .addClass('in')
            .attr('aria-hidden', false)

          that.enforceFocus()

          transition ?
            that.$element.one($.support.transition.end, function () { that.$element.focus().trigger('shown') }) :
            that.$element.focus().trigger('shown')

        })
      }

    , hide: function (e) {
        e && e.preventDefault()

        var that = this

        e = $.Event('hide')

        this.$element.trigger(e)

        if (!this.isShown || e.isDefaultPrevented()) return

        this.isShown = false

        this.escape()

        $(document).off('focusin.modal')

        this.$element
          .removeClass('in')
          .attr('aria-hidden', true)

        $.support.transition && this.$element.hasClass('fade') ?
          this.hideWithTransition() :
          this.hideModal()
      }

    , enforceFocus: function () {
        var that = this
        $(document).on('focusin.modal', function (e) {
          if (that.$element[0] !== e.target && !that.$element.has(e.target).length) {
            that.$element.focus()
          }
        })
      }

    , escape: function () {
        var that = this
        if (this.isShown && this.options.keyboard) {
          this.$element.on('keyup.dismiss.modal', function ( e ) {
            e.which == 27 && that.hide()
          })
        } else if (!this.isShown) {
          this.$element.off('keyup.dismiss.modal')
        }
      }

    , hideWithTransition: function () {
        var that = this
          , timeout = setTimeout(function () {
              that.$element.off($.support.transition.end)
              that.hideModal()
            }, 500)

        this.$element.one($.support.transition.end, function () {
          clearTimeout(timeout)
          that.hideModal()
        })
      }

    , hideModal: function (that) {
        this.$element
          .hide()
          .trigger('hidden')

        this.backdrop()
      }

    , removeBackdrop: function () {
        this.$backdrop.remove()
        this.$backdrop = null
      }

    , backdrop: function (callback) {
        var that = this
          , animate = this.$element.hasClass('fade') ? 'fade' : ''

        if (this.isShown && this.options.backdrop) {
          var doAnimate = $.support.transition && animate

          this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
            .appendTo(document.body)

          this.$backdrop.click(
            this.options.backdrop == 'static' ?
              $.proxy(this.$element[0].focus, this.$element[0])
            : $.proxy(this.hide, this)
          )

          if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

          this.$backdrop.addClass('in')

          doAnimate ?
            this.$backdrop.one($.support.transition.end, callback) :
            callback()

        } else if (!this.isShown && this.$backdrop) {
          this.$backdrop.removeClass('in')

          $.support.transition && this.$element.hasClass('fade')?
            this.$backdrop.one($.support.transition.end, $.proxy(this.removeBackdrop, this)) :
            this.removeBackdrop()

        } else if (callback) {
          callback()
        }
      }
  }


 /* MODAL PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.modal

  $.fn.modal = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('modal')
        , options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option)
      if (!data) $this.data('modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option]()
      else if (options.show) data.show()
    })
  }

  $.fn.modal.defaults = {
      backdrop: true
    , keyboard: true
    , show: true
  }

  $.fn.modal.Constructor = Modal


 /* MODAL NO CONFLICT
  * ================= */

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


 /* MODAL DATA-API
  * ============== */

  $(document).on('click.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this)
      , href = $this.attr('href')
      , $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
      , option = $target.data('modal') ? 'toggle' : $.extend({ remote:!/#/.test(href) && href }, $target.data(), $this.data())

    e.preventDefault()

    $target
      .modal(option)
      .one('hide', function () {
        $this.focus()
      })
  })

}(window.jQuery);

/* ============================================================
 * bootstrap-dropdown.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#dropdowns
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function ($) {

  "use strict"; // jshint ;_;


 /* DROPDOWN CLASS DEFINITION
  * ========================= */

  var toggle = '[data-toggle=dropdown]'
    , Dropdown = function (element) {
        var $el = $(element).on('click.dropdown.data-api', this.toggle)
        $('html').on('click.dropdown.data-api', function () {
          $el.parent().removeClass('open')
        })
      }

  Dropdown.prototype = {

    constructor: Dropdown

  , toggle: function (e) {
      var $this = $(this)
        , $parent
        , isActive

      if ($this.is('.disabled, :disabled')) return

      $parent = getParent($this)

      isActive = $parent.hasClass('open')

      clearMenus()

      if (!isActive) {
        $parent.toggleClass('open')
      }

      $this.focus()

      return false
    }

  , keydown: function (e) {
      var $this
        , $items
        , $active
        , $parent
        , isActive
        , index

      if (!/(38|40|27)/.test(e.keyCode)) return

      $this = $(this)

      e.preventDefault()
      e.stopPropagation()

      if ($this.is('.disabled, :disabled')) return

      $parent = getParent($this)

      isActive = $parent.hasClass('open')

      if (!isActive || (isActive && e.keyCode == 27)) return $this.click()

      $items = $('[role=menu] li:not(.divider):visible a', $parent)

      if (!$items.length) return

      index = $items.index($items.filter(':focus'))

      if (e.keyCode == 38 && index > 0) index--                                        // up
      if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
      if (!~index) index = 0

      $items
        .eq(index)
        .focus()
    }

  }

  function clearMenus() {
    $(toggle).each(function () {
      getParent($(this)).removeClass('open')
    })
  }

  function getParent($this) {
    var selector = $this.attr('data-target')
      , $parent

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    $parent = $(selector)
    $parent.length || ($parent = $this.parent())

    return $parent
  }


  /* DROPDOWN PLUGIN DEFINITION
   * ========================== */

  var old = $.fn.dropdown

  $.fn.dropdown = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('dropdown')
      if (!data) $this.data('dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.dropdown.Constructor = Dropdown


 /* DROPDOWN NO CONFLICT
  * ==================== */

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  /* APPLY TO STANDARD DROPDOWN ELEMENTS
   * =================================== */

  $(document)
    .on('click.dropdown.data-api touchstart.dropdown.data-api', clearMenus)
    .on('click.dropdown touchstart.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('touchstart.dropdown.data-api', '.dropdown-menu', function (e) { e.stopPropagation() })
    .on('click.dropdown.data-api touchstart.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.dropdown.data-api touchstart.dropdown.data-api', toggle + ', [role=menu]', Dropdown.prototype.keydown);

  //$(document).delegate(toggle, "singletap", Dropdown.prototype.toggle);


}(window.jQuery);
/* =============================================================
 * bootstrap-scrollspy.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#scrollspy
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* SCROLLSPY CLASS DEFINITION
  * ========================== */

  function ScrollSpy(element, options) {
    var process = $.proxy(this.process, this)
      , $element = $(element).is('body') ? $(window) : $(element)
      , href
    this.options = $.extend({}, $.fn.scrollspy.defaults, options)
    this.$scrollElement = $element.on('scroll.scroll-spy.data-api', process)
    this.selector = (this.options.target
      || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      || '') + ' .nav li > a'
    this.$body = $('body')
    this.refresh()
    this.process()
  }

  ScrollSpy.prototype = {

      constructor: ScrollSpy

    , refresh: function () {
        var self = this
          , $targets

        this.offsets = $([])
        this.targets = $([])

        $targets = this.$body
          .find(this.selector)
          .map(function () {
            var $el = $(this)
              , href = $el.data('target') || $el.attr('href')
              , $href = /^#\w/.test(href) && $(href)
            return ( $href
              && $href.length
              && [[ $href.position().top + self.$scrollElement.scrollTop(), href ]] ) || null
          })
          .sort(function (a, b) { return a[0] - b[0] })
          .each(function () {
            self.offsets.push(this[0])
            self.targets.push(this[1])
          })
      }

    , process: function () {
        var scrollTop = this.$scrollElement.scrollTop() + this.options.offset
          , scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
          , maxScroll = scrollHeight - this.$scrollElement.height()
          , offsets = this.offsets
          , targets = this.targets
          , activeTarget = this.activeTarget
          , i

        if (scrollTop >= maxScroll) {
          return activeTarget != (i = targets.last()[0])
            && this.activate ( i )
        }

        for (i = offsets.length; i--;) {
          activeTarget != targets[i]
            && scrollTop >= offsets[i]
            && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
            && this.activate( targets[i] )
        }
      }

    , activate: function (target) {
        var active
          , selector

        this.activeTarget = target

        $(this.selector)
          .parent('.active')
          .removeClass('active')

        selector = this.selector
          + '[data-target="' + target + '"],'
          + this.selector + '[href="' + target + '"]'

        active = $(selector)
          .parent('li')
          .addClass('active')

        if (active.parent('.dropdown-menu').length)  {
          active = active.closest('li.dropdown').addClass('active')
        }

        active.trigger('activate')
      }

  }


 /* SCROLLSPY PLUGIN DEFINITION
  * =========================== */

  var old = $.fn.scrollspy

  $.fn.scrollspy = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('scrollspy')
        , options = typeof option == 'object' && option
      if (!data) $this.data('scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.scrollspy.Constructor = ScrollSpy

  $.fn.scrollspy.defaults = {
    offset: 10
  }


 /* SCROLLSPY NO CONFLICT
  * ===================== */

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


 /* SCROLLSPY DATA-API
  * ================== */

  $(window).on('load', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      $spy.scrollspy($spy.data())
    })
  })

}(window.jQuery);
/* ========================================================
 * bootstrap-tab.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#tabs
 * ========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* TAB CLASS DEFINITION
  * ==================== */

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.prototype = {

    constructor: Tab

  , show: function () {
      var $this = this.element
        , $ul = $this.closest('ul:not(.dropdown-menu)')
        , selector = $this.attr('data-target')
        , previous
        , $target
        , e

      if (!selector) {
        selector = $this.attr('href')
        selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
      }

      if ( $this.parent('li').hasClass('active') ) return

      previous = $ul.find('.active:last a')[0]

      e = $.Event('show', {
        relatedTarget: previous
      })

      $this.trigger(e)

      if (e.isDefaultPrevented()) return

      $target = $(selector)

      this.activate($this.parent('li'), $ul)
      this.activate($target, $target.parent(), function () {
        $this.trigger({
          type: 'shown'
        , relatedTarget: previous
        })
      })
    }

  , activate: function ( element, container, callback) {
      var $active = container.find('> .active')
        , transition = callback
            && $.support.transition
            && $active.hasClass('fade')

      function next() {
        $active
          .removeClass('active')
          .find('> .dropdown-menu > .active')
          .removeClass('active')

        element.addClass('active')

        if (transition) {
          element[0].offsetWidth // reflow for transition
          element.addClass('in')
        } else {
          element.removeClass('fade')
        }

        if ( element.parent('.dropdown-menu') ) {
          element.closest('li.dropdown').addClass('active')
        }

        callback && callback()
      }

      transition ?
        $active.one($.support.transition.end, next) :
        next()

      $active.removeClass('in')
    }
  }


 /* TAB PLUGIN DEFINITION
  * ===================== */

  var old = $.fn.tab

  $.fn.tab = function ( option ) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('tab')
      if (!data) $this.data('tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tab.Constructor = Tab


 /* TAB NO CONFLICT
  * =============== */

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


 /* TAB DATA-API
  * ============ */

  $(document).on('click.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    $(this).tab('show')
  })

}(window.jQuery);
/* ===========================================================
 * bootstrap-tooltip.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#tooltips
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* TOOLTIP PUBLIC CLASS DEFINITION
  * =============================== */

  var Tooltip = function (element, options) {
    this.init('tooltip', element, options)
  }

  Tooltip.prototype = {

    constructor: Tooltip

  , init: function (type, element, options) {
      var eventIn
        , eventOut

      this.type = type
      this.$element = $(element)
      this.options = this.getOptions(options)
      this.enabled = true

      if (this.options.trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (this.options.trigger != 'manual') {
        eventIn = this.options.trigger == 'hover' ? 'mouseenter' : 'focus'
        eventOut = this.options.trigger == 'hover' ? 'mouseleave' : 'blur'
        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }

      this.options.selector ?
        (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
        this.fixTitle()
    }

  , getOptions: function (options) {
      options = $.extend({}, $.fn[this.type].defaults, options, this.$element.data())

      if (options.delay && typeof options.delay == 'number') {
        options.delay = {
          show: options.delay
        , hide: options.delay
        }
      }

      return options
    }

  , enter: function (e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type)

      if (!self.options.delay || !self.options.delay.show) return self.show()

      clearTimeout(this.timeout)
      self.hoverState = 'in'
      this.timeout = setTimeout(function() {
        if (self.hoverState == 'in') self.show()
      }, self.options.delay.show)
    }

  , leave: function (e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type)

      if (this.timeout) clearTimeout(this.timeout)
      if (!self.options.delay || !self.options.delay.hide) return self.hide()

      self.hoverState = 'out'
      this.timeout = setTimeout(function() {
        if (self.hoverState == 'out') self.hide()
      }, self.options.delay.hide)
    }

  , show: function () {
      var $tip
        , inside
        , pos
        , actualWidth
        , actualHeight
        , placement
        , tp

      if (this.hasContent() && this.enabled) {
        $tip = this.tip()
        this.setContent()

        if (this.options.animation) {
          $tip.addClass('fade')
        }

        placement = typeof this.options.placement == 'function' ?
          this.options.placement.call(this, $tip[0], this.$element[0]) :
          this.options.placement

        inside = /in/.test(placement)

        $tip
          .detach()
          .css({ top: 0, left: 0, display: 'block' })
          .insertAfter(this.$element)

        pos = this.getPosition(inside)

        actualWidth = $tip[0].offsetWidth
        actualHeight = $tip[0].offsetHeight

        switch (inside ? placement.split(' ')[1] : placement) {
          case 'bottom':
            tp = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2}
            break
          case 'top':
            tp = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2}
            break
          case 'left':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth}
            break
          case 'right':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width}
            break
        }

        $tip
          .offset(tp)
          .addClass(placement)
          .addClass('in')
      }
    }

  , setContent: function () {
      var $tip = this.tip()
        , title = this.getTitle()

      $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
      $tip.removeClass('fade in top bottom left right')
    }

  , hide: function () {
      var that = this
        , $tip = this.tip()

      $tip.removeClass('in')

      function removeWithAnimation() {
        var timeout = setTimeout(function () {
          $tip.off($.support.transition.end).detach()
        }, 500)

        $tip.one($.support.transition.end, function () {
          clearTimeout(timeout)
          $tip.detach()
        })
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        removeWithAnimation() :
        $tip.detach()

      return this
    }

  , fixTitle: function () {
      var $e = this.$element
      if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
        $e.attr('data-original-title', $e.attr('title') || '').removeAttr('title')
      }
    }

  , hasContent: function () {
      return this.getTitle()
    }

  , getPosition: function (inside) {
      return $.extend({}, (inside ? {top: 0, left: 0} : this.$element.offset()), {
        width: this.$element[0].offsetWidth
      , height: this.$element[0].offsetHeight
      })
    }

  , getTitle: function () {
      var title
        , $e = this.$element
        , o = this.options

      title = $e.attr('data-original-title')
        || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

      return title
    }

  , tip: function () {
      return this.$tip = this.$tip || $(this.options.template)
    }

  , validate: function () {
      if (!this.$element[0].parentNode) {
        this.hide()
        this.$element = null
        this.options = null
      }
    }

  , enable: function () {
      this.enabled = true
    }

  , disable: function () {
      this.enabled = false
    }

  , toggleEnabled: function () {
      this.enabled = !this.enabled
    }

  , toggle: function (e) {
      var self = $(e.currentTarget)[this.type](this._options).data(this.type)
      self[self.tip().hasClass('in') ? 'hide' : 'show']()
    }

  , destroy: function () {
      this.hide().$element.off('.' + this.type).removeData(this.type)
    }

  }


 /* TOOLTIP PLUGIN DEFINITION
  * ========================= */

  var old = $.fn.tooltip

  $.fn.tooltip = function ( option ) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('tooltip')
        , options = typeof option == 'object' && option
      if (!data) $this.data('tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.tooltip.Constructor = Tooltip

  $.fn.tooltip.defaults = {
    animation: true
  , placement: 'top'
  , selector: false
  , template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
  , trigger: 'hover'
  , title: ''
  , delay: 0
  , html: false
  }


 /* TOOLTIP NO CONFLICT
  * =================== */

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(window.jQuery);
/* ===========================================================
 * bootstrap-popover.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#popovers
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* POPOVER PUBLIC CLASS DEFINITION
  * =============================== */

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }


  /* NOTE: POPOVER EXTENDS BOOTSTRAP-TOOLTIP.js
     ========================================== */

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype, {

    constructor: Popover

  , setContent: function () {
      var $tip = this.tip()
        , title = this.getTitle()
        , content = this.getContent()

      $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
      $tip.find('.popover-content')[this.options.html ? 'html' : 'text'](content)

      $tip.removeClass('fade top bottom left right in')
    }

  , hasContent: function () {
      return this.getTitle() || this.getContent()
    }

  , getContent: function () {
      var content
        , $e = this.$element
        , o = this.options

      content = $e.attr('data-content')
        || (typeof o.content == 'function' ? o.content.call($e[0]) :  o.content)

      return content
    }

  , tip: function () {
      if (!this.$tip) {
        this.$tip = $(this.options.template)
      }
      return this.$tip
    }

  , destroy: function () {
      this.hide().$element.off('.' + this.type).removeData(this.type)
    }

  })


 /* POPOVER PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.popover

  $.fn.popover = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('popover')
        , options = typeof option == 'object' && option
      if (!data) $this.data('popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.popover.Constructor = Popover

  $.fn.popover.defaults = $.extend({} , $.fn.tooltip.defaults, {
    placement: 'right'
  , trigger: 'click'
  , content: ''
  , template: '<div class="popover"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"></div></div></div>'
  })


 /* POPOVER NO CONFLICT
  * =================== */

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(window.jQuery);
/* ==========================================================
 * bootstrap-affix.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#affix
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* AFFIX CLASS DEFINITION
  * ====================== */

  var Affix = function (element, options) {
    this.options = $.extend({}, $.fn.affix.defaults, options)
    this.$window = $(window)
      .on('scroll.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.affix.data-api',  $.proxy(function () { setTimeout($.proxy(this.checkPosition, this), 1) }, this))
    this.$element = $(element)
    this.checkPosition()
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var scrollHeight = $(document).height()
      , scrollTop = this.$window.scrollTop()
      , position = this.$element.offset()
      , offset = this.options.offset
      , offsetBottom = offset.bottom
      , offsetTop = offset.top
      , reset = 'affix affix-top affix-bottom'
      , affix

    if (typeof offset != 'object') offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function') offsetTop = offset.top()
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom()

    affix = this.unpin != null && (scrollTop + this.unpin <= position.top) ?
      false    : offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ?
      'bottom' : offsetTop != null && scrollTop <= offsetTop ?
      'top'    : false

    if (this.affixed === affix) return

    this.affixed = affix
    this.unpin = affix == 'bottom' ? position.top - scrollTop : null

    this.$element.removeClass(reset).addClass('affix' + (affix ? '-' + affix : ''))
  }


 /* AFFIX PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.affix

  $.fn.affix = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('affix')
        , options = typeof option == 'object' && option
      if (!data) $this.data('affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.affix.Constructor = Affix

  $.fn.affix.defaults = {
    offset: 0
  }


 /* AFFIX NO CONFLICT
  * ================= */

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


 /* AFFIX DATA-API
  * ============== */

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
        , data = $spy.data()

      data.offset = data.offset || {}

      data.offsetBottom && (data.offset.bottom = data.offsetBottom)
      data.offsetTop && (data.offset.top = data.offsetTop)

      $spy.affix(data)
    })
  })


}(window.jQuery);
/* ==========================================================
 * bootstrap-alert.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#alerts
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* ALERT CLASS DEFINITION
  * ====================== */

  var dismiss = '[data-dismiss="alert"]'
    , Alert = function (el) {
        $(el).on('click', dismiss, this.close)
      }

  Alert.prototype.close = function (e) {
    var $this = $(this)
      , selector = $this.attr('data-target')
      , $parent

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
    }

    $parent = $(selector)

    e && e.preventDefault()

    $parent.length || ($parent = $this.hasClass('alert') ? $this : $this.parent())

    $parent.trigger(e = $.Event('close'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      $parent
        .trigger('closed')
        .remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent.on($.support.transition.end, removeElement) :
      removeElement()
  }


 /* ALERT PLUGIN DEFINITION
  * ======================= */

  var old = $.fn.alert

  $.fn.alert = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('alert')
      if (!data) $this.data('alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  $.fn.alert.Constructor = Alert


 /* ALERT NO CONFLICT
  * ================= */

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


 /* ALERT DATA-API
  * ============== */

  $(document).on('click.alert.data-api', dismiss, Alert.prototype.close)

}(window.jQuery);
/* ============================================================
 * bootstrap-button.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#buttons
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function ($) {

  "use strict"; // jshint ;_;


 /* BUTTON PUBLIC CLASS DEFINITION
  * ============================== */

  var Button = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.button.defaults, options)
  }

  Button.prototype.setState = function (state) {
    var d = 'disabled'
      , $el = this.$element
      , data = $el.data()
      , val = $el.is('input') ? 'val' : 'html'

    state = state + 'Text'
    data.resetText || $el.data('resetText', $el[val]())

    $el[val](data[state] || this.options[state])

    // push to event loop to allow forms to submit
    setTimeout(function () {
      state == 'loadingText' ?
        $el.addClass(d).attr(d, d) :
        $el.removeClass(d).removeAttr(d)
    }, 0)
  }

  Button.prototype.toggle = function () {
    var $parent = this.$element.closest('[data-toggle="buttons-radio"]')

    $parent && $parent
      .find('.active')
      .removeClass('active')

    this.$element.toggleClass('active')
  }


 /* BUTTON PLUGIN DEFINITION
  * ======================== */

  var old = $.fn.button

  $.fn.button = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('button')
        , options = typeof option == 'object' && option
      if (!data) $this.data('button', (data = new Button(this, options)))
      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  $.fn.button.defaults = {
    loadingText: 'loading...'
  }

  $.fn.button.Constructor = Button


 /* BUTTON NO CONFLICT
  * ================== */

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


 /* BUTTON DATA-API
  * =============== */

  $(document).on('click.button.data-api', '[data-toggle^=button]', function (e) {
    var $btn = $(e.target)
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
    $btn.button('toggle')
  })

}(window.jQuery);
/* =============================================================
 * bootstrap-collapse.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#collapse
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function ($) {

  "use strict"; // jshint ;_;


 /* COLLAPSE PUBLIC CLASS DEFINITION
  * ================================ */

  var Collapse = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.collapse.defaults, options)

    if (this.options.parent) {
      this.$parent = $(this.options.parent)
    }

    this.options.toggle && this.toggle()
  }

  Collapse.prototype = {

    constructor: Collapse

  , dimension: function () {
      var hasWidth = this.$element.hasClass('width')
      return hasWidth ? 'width' : 'height'
    }

  , show: function () {
      var dimension
        , scroll
        , actives
        , hasData

      if (this.transitioning) return

      dimension = this.dimension()
      scroll = $.camelCase(['scroll', dimension].join('-'))
      //actives = this.$parent && this.$parent.find('> .accordion-group > .in')
      actives = $('.in');

      if (actives && actives.length) {
        hasData = actives.data('collapse')
        if (hasData && hasData.transitioning) return
        actives.collapse('hide')
        hasData || actives.data('collapse', null)
      }

      this.$element[dimension](0)
      this.transition('addClass', $.Event('show'), 'shown')
      $.support.transition && this.$element[dimension](this.$element[0][scroll])
    }

  , hide: function () {
      var dimension
      if (this.transitioning) return
      dimension = this.dimension()
      this.reset(this.$element[dimension]())
      this.transition('removeClass', $.Event('hide'), 'hidden')
      this.$element[dimension](0)
    }

  , reset: function (size) {
      var dimension = this.dimension()

      this.$element
        .removeClass('collapse')
        [dimension](size || 'auto')
        [0].offsetWidth

      this.$element[size !== null ? 'addClass' : 'removeClass']('collapse')

      return this
    }

  , transition: function (method, startEvent, completeEvent) {
      var that = this
        , complete = function () {
            if (startEvent.type == 'show') that.reset()
            that.transitioning = 0
            that.$element.trigger(completeEvent)
          }

      this.$element.trigger(startEvent)

      if (startEvent.isDefaultPrevented()) return

      this.transitioning = 1

      this.$element[method]('in')

      $.support.transition && this.$element.hasClass('collapse') ?
        this.$element.one($.support.transition.end, complete) :
        complete()
    }

  , toggle: function () {
      this[this.$element.hasClass('in') ? 'hide' : 'show']()
    }

  }


 /* COLLAPSE PLUGIN DEFINITION
  * ========================== */

  var old = $.fn.collapse

  $.fn.collapse = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('collapse')
        , options = typeof option == 'object' && option
      if (!data) $this.data('collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.collapse.defaults = {
    toggle: true
  }

  $.fn.collapse.Constructor = Collapse


 /* COLLAPSE NO CONFLICT
  * ==================== */

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


 /* COLLAPSE DATA-API
  * ================= */

  $(document).on('click.collapse.data-api', '[data-toggle=collapse]', function (e) {
    var $this = $(this), href
      , target = $this.attr('data-target')
        || e.preventDefault()
        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
      , option = $(target).data('collapse') ? 'toggle' : $this.data()
    $this[$(target).hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    $(target).collapse(option)
  })

}(window.jQuery);
/* ==========================================================
 * bootstrap-carousel.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#carousel
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */


!function ($) {

  "use strict"; // jshint ;_;


 /* CAROUSEL CLASS DEFINITION
  * ========================= */

  var Carousel = function (element, options) {
    this.$element = $(element)
    this.options = options
    this.options.pause == 'hover' && this.$element
      .on('mouseenter', $.proxy(this.pause, this))
      .on('mouseleave', $.proxy(this.cycle, this))
  }

  Carousel.prototype = {

    cycle: function (e) {
      if (!e) this.paused = false
      this.options.interval
        && !this.paused
        && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))
      return this
    }

  , to: function (pos) {
      var $active = this.$element.find('.item.active')
        , children = $active.parent().children()
        , activePos = children.index($active)
        , that = this

      if (pos > (children.length - 1) || pos < 0) return

      if (this.sliding) {
        return this.$element.one('slid', function () {
          that.to(pos)
        })
      }

      if (activePos == pos) {
        return this.pause().cycle()
      }

      return this.slide(pos > activePos ? 'next' : 'prev', $(children[pos]))
    }

  , pause: function (e) {
      if (!e) this.paused = true
      if (this.$element.find('.next, .prev').length && $.support.transition.end) {
        this.$element.trigger($.support.transition.end)
        this.cycle()
      }
      clearInterval(this.interval)
      this.interval = null
      return this
    }

  , next: function () {
      if (this.sliding) return
      return this.slide('next')
    }

  , prev: function () {
      if (this.sliding) return
      return this.slide('prev')
    }

  , slide: function (type, next) {
      var $active = this.$element.find('.item.active')
        , $next = next || $active[type]()
        , isCycling = this.interval
        , direction = type == 'next' ? 'left' : 'right'
        , fallback  = type == 'next' ? 'first' : 'last'
        , that = this
        , e

      this.sliding = true

      isCycling && this.pause()

      $next = $next.length ? $next : this.$element.find('.item')[fallback]()

      e = $.Event('slide', {
        relatedTarget: $next[0]
      })

      if ($next.hasClass('active')) return

      if ($.support.transition && this.$element.hasClass('slide')) {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $next.addClass(type)
        $next[0].offsetWidth // force reflow
        $active.addClass(direction)
        $next.addClass(direction)
        this.$element.one($.support.transition.end, function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () { that.$element.trigger('slid') }, 0)
        })
      } else {
        this.$element.trigger(e)
        if (e.isDefaultPrevented()) return
        $active.removeClass('active')
        $next.addClass('active')
        this.sliding = false
        this.$element.trigger('slid')
      }

      isCycling && this.cycle()

      return this
    }

  }


 /* CAROUSEL PLUGIN DEFINITION
  * ========================== */

  var old = $.fn.carousel

  $.fn.carousel = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('carousel')
        , options = $.extend({}, $.fn.carousel.defaults, typeof option == 'object' && option)
        , action = typeof option == 'string' ? option : options.slide
      if (!data) $this.data('carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.cycle()
    })
  }

  $.fn.carousel.defaults = {
    interval: 5000
  , pause: 'hover'
  }

  $.fn.carousel.Constructor = Carousel


 /* CAROUSEL NO CONFLICT
  * ==================== */

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }

 /* CAROUSEL DATA-API
  * ================= */

  $(document).on('click.carousel.data-api', '[data-slide]', function (e) {
    var $this = $(this), href
      , $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
      , options = $.extend({}, $target.data(), $this.data())
    $target.carousel(options)
    e.preventDefault()
  })

}(window.jQuery);
/* =============================================================
 * bootstrap-typeahead.js v2.2.2
 * http://twitter.github.com/bootstrap/javascript.html#typeahead
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */


!function($){

  "use strict"; // jshint ;_;


 /* TYPEAHEAD PUBLIC CLASS DEFINITION
  * ================================= */

  var Typeahead = function (element, options) {
    this.$element = $(element)
    this.options = $.extend({}, $.fn.typeahead.defaults, options)
    this.matcher = this.options.matcher || this.matcher
    this.sorter = this.options.sorter || this.sorter
    this.highlighter = this.options.highlighter || this.highlighter
    this.updater = this.options.updater || this.updater
    this.source = this.options.source
    this.$menu = $(this.options.menu)
    this.shown = false
    this.listen()
  }

  Typeahead.prototype = {

    constructor: Typeahead

  , select: function () {
      var val = this.$menu.find('.active').attr('data-value')
      this.$element
        .val(this.updater(val))
        .change()
      return this.hide()
    }

  , updater: function (item) {
      return item
    }

  , show: function () {
      var pos = $.extend({}, this.$element.position(), {
        height: this.$element[0].offsetHeight
      })

      this.$menu
        .insertAfter(this.$element)
        .css({
          top: pos.top + pos.height
        , left: pos.left
        })
        .show()

      this.shown = true
      return this
    }

  , hide: function () {
      this.$menu.hide()
      this.shown = false
      return this
    }

  , lookup: function (event) {
      var items

      this.query = this.$element.val()

      if (!this.query || this.query.length < this.options.minLength) {
        return this.shown ? this.hide() : this
      }

      items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source

      return items ? this.process(items) : this
    }

  , process: function (items) {
      var that = this

      items = $.grep(items, function (item) {
        return that.matcher(item)
      })

      items = this.sorter(items)

      if (!items.length) {
        return this.shown ? this.hide() : this
      }

      return this.render(items.slice(0, this.options.items)).show()
    }

  , matcher: function (item) {
      return ~item.toLowerCase().indexOf(this.query.toLowerCase())
    }

  , sorter: function (items) {
      var beginswith = []
        , caseSensitive = []
        , caseInsensitive = []
        , item

      while (item = items.shift()) {
        if (!item.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item)
        else if (~item.indexOf(this.query)) caseSensitive.push(item)
        else caseInsensitive.push(item)
      }

      return beginswith.concat(caseSensitive, caseInsensitive)
    }

  , highlighter: function (item) {
      var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')
      return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
        return '<strong>' + match + '</strong>'
      })
    }

  , render: function (items) {
      var that = this

      items = $(items).map(function (i, item) {
        i = $(that.options.item).attr('data-value', item)
        i.find('a').html(that.highlighter(item))
        return i[0]
      })

      items.first().addClass('active')
      this.$menu.html(items)
      return this
    }

  , next: function (event) {
      var active = this.$menu.find('.active').removeClass('active')
        , next = active.next()

      if (!next.length) {
        next = $(this.$menu.find('li')[0])
      }

      next.addClass('active')
    }

  , prev: function (event) {
      var active = this.$menu.find('.active').removeClass('active')
        , prev = active.prev()

      if (!prev.length) {
        prev = this.$menu.find('li').last()
      }

      prev.addClass('active')
    }

  , listen: function () {
      this.$element
        .on('blur',     $.proxy(this.blur, this))
        .on('keypress', $.proxy(this.keypress, this))
        .on('keyup',    $.proxy(this.keyup, this))

      if (this.eventSupported('keydown')) {
        this.$element.on('keydown', $.proxy(this.keydown, this))
      }

      this.$menu
        .on('click', $.proxy(this.click, this))
        .on('mouseenter', 'li', $.proxy(this.mouseenter, this))
    }

  , eventSupported: function(eventName) {
      var isSupported = eventName in this.$element
      if (!isSupported) {
        this.$element.setAttribute(eventName, 'return;')
        isSupported = typeof this.$element[eventName] === 'function'
      }
      return isSupported
    }

  , move: function (e) {
      if (!this.shown) return

      switch(e.keyCode) {
        case 9: // tab
        case 13: // enter
        case 27: // escape
          e.preventDefault()
          break

        case 38: // up arrow
          e.preventDefault()
          this.prev()
          break

        case 40: // down arrow
          e.preventDefault()
          this.next()
          break
      }

      e.stopPropagation()
    }

  , keydown: function (e) {
      this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40,38,9,13,27])
      this.move(e)
    }

  , keypress: function (e) {
      if (this.suppressKeyPressRepeat) return
      this.move(e)
    }

  , keyup: function (e) {
      switch(e.keyCode) {
        case 40: // down arrow
        case 38: // up arrow
        case 16: // shift
        case 17: // ctrl
        case 18: // alt
          break

        case 9: // tab
        case 13: // enter
          if (!this.shown) return
          this.select()
          break

        case 27: // escape
          if (!this.shown) return
          this.hide()
          break

        default:
          this.lookup()
      }

      e.stopPropagation()
      e.preventDefault()
  }

  , blur: function (e) {
      var that = this
      setTimeout(function () { that.hide() }, 150)
    }

  , click: function (e) {
      e.stopPropagation()
      e.preventDefault()
      this.select()
    }

  , mouseenter: function (e) {
      this.$menu.find('.active').removeClass('active')
      $(e.currentTarget).addClass('active')
    }

  }


  /* TYPEAHEAD PLUGIN DEFINITION
   * =========================== */

  var old = $.fn.typeahead

  $.fn.typeahead = function (option) {
    return this.each(function () {
      var $this = $(this)
        , data = $this.data('typeahead')
        , options = typeof option == 'object' && option
      if (!data) $this.data('typeahead', (data = new Typeahead(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  $.fn.typeahead.defaults = {
    source: []
  , items: 8
  , menu: '<ul class="typeahead dropdown-menu"></ul>'
  , item: '<li><a href="#"></a></li>'
  , minLength: 1
  }

  $.fn.typeahead.Constructor = Typeahead


 /* TYPEAHEAD NO CONFLICT
  * =================== */

  $.fn.typeahead.noConflict = function () {
    $.fn.typeahead = old
    return this
  }


 /* TYPEAHEAD DATA-API
  * ================== */

  $(document).on('focus.typeahead.data-api', '[data-provide="typeahead"]', function (e) {
    var $this = $(this)
    if ($this.data('typeahead')) return
    e.preventDefault()
    $this.typeahead($this.data())
  })

}(window.jQuery);

if(typeof (goog) == "undefined") {
    var goog = {
        now: function () {
            return +new Date();
        },
        isDef: function (val) {
            return val !== undefined;
        }
    };
}
var gCrypt;
(function (gCrypt) {
    function isArray(obj) {
        return obj.toString() === "[object Array]";
    }
    gCrypt.isArray = isArray;
    /**
    * Turns a string into an array of bytes; a "byte" being a JS number in the
    * range 0-255.
    * @param {string} str String value to arrify.
    * @return {Array.<number>} Array of numbers corresponding to the
    *     UCS character codes of each character in str.
    */
    function stringToByteArray(str) {
        var output = [], p = 0;
        for(var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            while(c > 0xff) {
                output[p++] = c & 0xff;
                c >>= 8;
            }
            output[p++] = c;
        }
        return output;
    }
    gCrypt.stringToByteArray = stringToByteArray;
    /**
    * Turns an array of numbers into the string given by the concatenation of the
    * characters to which the numbers correspond.
    * @param {Array} array Array of numbers representing characters.
    * @return {string} Stringification of the array.
    */
    function byteArrayToString(arr) {
        return String.fromCharCode.apply(String, arr);
    }
    gCrypt.byteArrayToString = byteArrayToString;
    /**
    * Converts a JS string to a UTF-8 "byte" array.
    * @param {string} str 16-bit unicode string.
    * @return {Array.<number>} UTF-8 byte array.
    */
    function stringToUtf8ByteArray(str) {
        // TODO(user): Use native implementations if/when available
        str = str.replace(/\r\n/g, '\n');
        var out = [], p = 0;
        for(var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if(c < 128) {
                out[p++] = c;
            } else if(c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            } else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    }
    gCrypt.stringToUtf8ByteArray = stringToUtf8ByteArray;
    /**
    * Converts a UTF-8 byte array to JavaScript's 16-bit Unicode.
    * @param {Array.<number>} bytes UTF-8 byte array.
    * @return {string} 16-bit Unicode string.
    */
    function utf8ByteArrayToString(bytes) {
        // TODO(user): Use native implementations if/when available
                var out = [], pos = 0, c = 0;
        while(pos < bytes.length) {
            var c1 = bytes[pos++];
            if(c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            } else if(c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
            } else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
            }
        }
        return out.join('');
    }
    gCrypt.utf8ByteArrayToString = utf8ByteArrayToString;
})(gCrypt || (gCrypt = {}));
var gBase64;
(function (gBase64) {
    function LMencodeString(byteArray) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if(typeof (window.btoa) == 'function') {
            return window.btoa(gCrypt.byteArrayToString(byteArray));
        }
        return encodeByteArray(byteArray, false);
    }
    gBase64.LMencodeString = LMencodeString;
    //return byte array
    function LMdecodeString(input) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if(typeof (window.atob) == 'function') {
            return gCrypt.stringToByteArray(window.atob(input));
        }
        return decodeStringToByteArray(input, false);
    }
    gBase64.LMdecodeString = LMdecodeString;
    /**
    * Maps bytes to characters.
    * @type {Object}
    * @private
    */
    var byteToCharMap_ = null;
    /**
    * Maps characters to bytes.
    * @type {Object}
    * @private
    */
    var charToByteMap_ = null;
    /**
    * Maps bytes to websafe characters.
    * @type {Object}
    * @private
    */
    var byteToCharMapWebSafe_ = null;
    /**
    * Maps websafe characters to bytes.
    * @type {Object}
    * @private
    */
    var charToByteMapWebSafe_ = null;
    /**
    * Our default alphabet, shared between
    * ENCODED_VALS and ENCODED_VALS_WEBSAFE
    * @type {string}
    */
    var ENCODED_VALS_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789';
    /**
    * Our default alphabet. Value 64 (=) is special; it means "nothing."
    * @type {string}
    */
    var ENCODED_VALS = ENCODED_VALS_BASE + '+/=';
    /**
    * Our websafe alphabet.
    * @type {string}
    */
    var ENCODED_VALS_WEBSAFE = ENCODED_VALS_BASE + '-_.';
    /**
    * Whether this browser supports the atob and btoa functions. This extension
    * started at Mozilla but is now implemented by many browsers. We use the
    * ASSUME_* variables to avoid pulling in the full useragent detection library
    * but still allowing the standard per-browser compilations.
    *
    * @type {boolean}
    */
    var HAS_NATIVE_SUPPORT = false;
    /*HAS_NATIVE_SUPPORT = goog.userAgent.GECKO ||
    goog.userAgent.WEBKIT ||
    goog.userAgent.OPERA ||
    typeof(goog.global.atob) == 'function';*/
    /**
    * Base64-encode an array of bytes.
    *
    * @param {Array.<number>} input An array of bytes (numbers with value in
    *     [0, 255]) to encode.
    * @param {boolean=} opt_webSafe Boolean indicating we should use the
    *     alternative alphabet.
    * @return {string} The base64 encoded string.
    */
    function encodeByteArray(input, opt_webSafe) {
        //if (!goog.isArrayLike(input)) {
        //throw Error('encodeByteArray takes an array as a parameter');
        //}
        init_();
        var byteToCharMap = opt_webSafe ? byteToCharMapWebSafe_ : byteToCharMap_;
        var output = [];
        for(var i = 0; i < input.length; i += 3) {
            var byte1 = input[i];
            var haveByte2 = i + 1 < input.length;
            var byte2 = haveByte2 ? input[i + 1] : 0;
            var haveByte3 = i + 2 < input.length;
            var byte3 = haveByte3 ? input[i + 2] : 0;
            var outByte1 = byte1 >> 2;
            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
            var outByte3 = ((byte2 & 0x0F) << 2) | (byte3 >> 6);
            var outByte4 = byte3 & 0x3F;
            if(!haveByte3) {
                outByte4 = 64;
                if(!haveByte2) {
                    outByte3 = 64;
                }
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    }
    gBase64.encodeByteArray = encodeByteArray;
    /**
    * Base64-encode a string.
    *
    * @param {string} input A string to encode.
    * @param {boolean=} opt_webSafe If true, we should use the
    *     alternative alphabet.
    * @return {string} The base64 encoded string.
    */
    function encodeString(input, opt_webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if(typeof (window.btoa) === 'function' && !opt_webSafe) {
            return window.btoa(input);
        }
        return encodeByteArray(gCrypt.stringToByteArray(input), opt_webSafe);
    }
    /**
    * Base64-decode a string.
    *
    * @param {string} input to decode.
    * @param {boolean=} opt_webSafe True if we should use the
    *     alternative alphabet.
    * @return {string} string representing the decoded value.
    */
    function decodeString(input, opt_webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if(typeof (window.atob) === 'function' && !opt_webSafe) {
            return window.atob(input);
        }
        return gCrypt.byteArrayToString(decodeStringToByteArray(input, opt_webSafe));
    }
    /**
    * Base64-decode a string.
    *
    * @param {string} input to decode (length not required to be a multiple of 4).
    * @param {boolean=} opt_webSafe True if we should use the
    *     alternative alphabet.
    * @return {Array} bytes representing the decoded value.
    */
    function decodeStringToByteArray(input, opt_webSafe) {
        init_();
        var charToByteMap = opt_webSafe ? charToByteMapWebSafe_ : charToByteMap_;
        var output = [];
        for(var i = 0; i < input.length; ) {
            var byte1 = charToByteMap[input.charAt(i++)];
            var haveByte2 = i < input.length;
            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte3 = i < input.length;
            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte4 = i < input.length;
            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            if(byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                throw Error();
            }
            var outByte1 = (byte1 << 2) | (byte2 >> 4);
            output.push(outByte1);
            if(byte3 != 64) {
                var outByte2 = ((byte2 << 4) & 0xF0) | (byte3 >> 2);
                output.push(outByte2);
                if(byte4 != 64) {
                    var outByte3 = ((byte3 << 6) & 0xC0) | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    }
    gBase64.decodeStringToByteArray = decodeStringToByteArray;
    /**
    * Lazy static initialization function. Called before
    * accessing any of the static map variables.
    * @private
    */
    function init_() {
        if(!byteToCharMap_) {
            byteToCharMap_ = {
            };
            charToByteMap_ = {
            };
            byteToCharMapWebSafe_ = {
            };
            charToByteMapWebSafe_ = {
            };
            // We want quick mappings back and forth, so we precompute two maps.
            for(var i = 0; i < ENCODED_VALS.length; i++) {
                byteToCharMap_[i] = ENCODED_VALS.charAt(i);
                charToByteMap_[byteToCharMap_[i]] = i;
                byteToCharMapWebSafe_[i] = ENCODED_VALS_WEBSAFE.charAt(i);
                charToByteMapWebSafe_[byteToCharMapWebSafe_[i]] = i;
            }
        }
    }
})(gBase64 || (gBase64 = {}));

if(typeof (goog) == "undefined") {
    var goog = {
        now: function () {
            return +new Date();
        },
        isDef: function (val) {
            return val !== undefined;
        }
    };
}
var gCookie;
(function (gCookie) {
    // Copyright 2006 The Closure Library Authors. All Rights Reserved.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    //      http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS-IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    /**
    * @fileoverview Functions for setting, getting and deleting cookies.
    *
    * @author arv@google.com (Erik Arvidsson)
    */
    /**
    * A class for handling browser cookies.
    * @param {Document} context The context document to get/set cookies on.
    * @constructor
    */
    /**
    * Static constant for the size of cookies. Per the spec, there's a 4K limit
    * to the size of a cookie. To make sure users can't break this limit, we
    * should truncate long cookies at 3950 bytes, to be extra careful with dumb
    * browsers/proxies that interpret 4K as 4000 rather than 4096.
    * @type {number}
    */
    var MAX_COOKIE_LENGTH = 3950;
    /**
    * RegExp used to split the cookies string.
    * @type {RegExp}
    * @private
    */
    var SPLIT_RE_ = /\s*;\s*/;
    /**
    * We do not allow '=', ';', or white space in the name.
    *
    * NOTE: The following are allowed by this method, but should be avoided for
    * cookies handled by the server.
    * - any name starting with '$'
    * - 'Comment'
    * - 'Domain'
    * - 'Expires'
    * - 'Max-Age'
    * - 'Path'
    * - 'Secure'
    * - 'Version'
    *
    * @param {string} name Cookie name.
    * @return {boolean} Whether name is valid.
    *
    * @see <a href="http://tools.ietf.org/html/rfc2109">RFC 2109</a>
    * @see <a href="http://tools.ietf.org/html/rfc2965">RFC 2965</a>
    */
    function isValidName(name) {
        return !(/[;=\s]/.test(name));
    }
    ;
    /**
    * We do not allow ';' or line break in the value.
    *
    * Spec does not mention any illegal characters, but in practice semi-colons
    * break parsing and line breaks truncate the name.
    *
    * @param {string} value Cookie value.
    * @return {boolean} Whether value is valid.
    *
    * @see <a href="http://tools.ietf.org/html/rfc2109">RFC 2109</a>
    * @see <a href="http://tools.ietf.org/html/rfc2965">RFC 2965</a>
    */
    function isValidValue(value) {
        return !(/[;\r\n]/.test(value));
    }
    ;
    /**
    * Sets a cookie.  The max_age can be -1 to set a session cookie. To remove and
    * expire cookies, use remove() instead.
    *
    * Neither the {@code name} nor the {@code value} are encoded in any way. It is
    * up to the callers of {@code get} and {@code set} (as well as all the other
    * methods) to handle any possible encoding and decoding.
    *
    * @throws {!Error} If the {@code name} fails #goog.net.cookies.isValidName.
    * @throws {!Error} If the {@code value} fails #goog.net.cookies.isValidValue.
    *
    * @param {string} name  The cookie name.
    * @param {string} value  The cookie value.
    * @param {number=} opt_maxAge  The max age in seconds (from now). Use -1 to
    *     set a session cookie. If not provided, the default is -1
    *     (i.e. set a session cookie).
    * @param {?string=} opt_path  The path of the cookie. If not present then this
    *     uses the full request path.
    * @param {?string=} opt_domain  The domain of the cookie, or null to not
    *     specify a domain attribute (browser will use the full request host name).
    *     If not provided, the default is null (i.e. let browser use full request
    *     host name).
    * @param {boolean=} opt_secure Whether the cookie should only be sent over
    *     a secure channel.
    */
    function setCookie(name, value, opt_maxAge, opt_path, opt_domain, opt_secure) {
        if (typeof opt_maxAge === "undefined") { opt_maxAge = -1; }
        if (typeof opt_path === "undefined") { opt_path = ''; }
        if (typeof opt_domain === "undefined") { opt_domain = ''; }
        if (typeof opt_secure === "undefined") { opt_secure = ''; }
        if(!isValidName(name)) {
            throw Error('Invalid cookie name "' + name + '"');
        }
        if(!isValidValue(value)) {
            throw Error('Invalid cookie value "' + value + '"');
        }
        if(!goog.isDef(opt_maxAge)) {
            opt_maxAge = -1;
        }
        var domainStr = opt_domain ? ';domain=' + opt_domain : '';
        var pathStr = opt_path ? ';path=' + opt_path : '';
        var secureStr = opt_secure ? ';secure' : '';
        var expiresStr;
        // Case 1: Set a session cookie.
        if(opt_maxAge < 0) {
            expiresStr = '';
            // Case 2: Expire the cookie.
            // Note: We don't tell people about this option in the function doc because
            // we prefer people to use ExpireCookie() to expire cookies.
                    } else if(opt_maxAge == 0) {
            // Note: Don't use Jan 1, 1970 for date because NS 4.76 will try to convert
            // it to local time, and if the local time is before Jan 1, 1970, then the
            // browser will ignore the Expires attribute altogether.
            var pastDate = new Date(1970, 1/*Feb*/ , 1);// Feb 1, 1970
            
            expiresStr = ';expires=' + pastDate.toUTCString();
            // Case 3: Set a persistent cookie.
                    } else {
            var futureDate = new Date(goog.now() + opt_maxAge * 1000);
            expiresStr = ';expires=' + futureDate.toUTCString();
        }
        setCookie_(name + '=' + value + domainStr + pathStr + expiresStr + secureStr);
    }
    gCookie.setCookie = setCookie;
    ;
    /**
    * Returns the value for the first cookie with the given name.
    * @param {string} name  The name of the cookie to get.
    * @param {string=} opt_default  If not found this is returned instead.
    * @return {string|undefined}  The value of the cookie. If no cookie is set this
    *     returns opt_default or undefined if opt_default is not provided.
    */
    function getCookie(name, opt_default) {
        if (typeof opt_default === "undefined") { opt_default = ""; }
        var nameEq = name + '=';
        var parts = getParts_();
        for(var i = 0, part; part = parts[i]; i++) {
            if(part.indexOf(nameEq) == 0) {
                return part.substr(nameEq.length);
            }
            if(part == name) {
                return '';
            }
        }
        return opt_default;
    }
    gCookie.getCookie = getCookie;
    ;
    /**
    * Removes and expires a cookie.
    * @param {string} name  The cookie name.
    * @param {string=} opt_path  The path of the cookie, or null to expire a cookie
    *     set at the full request path. If not provided, the default is '/'
    *     (i.e. path=/).
    * @param {string=} opt_domain  The domain of the cookie, or null to expire a
    *     cookie set at the full request host name. If not provided, the default is
    *     null (i.e. cookie at full request host name).
    * @return {boolean} Whether the cookie existed before it was removed.
    */
    function remove(name, opt_path, opt_domain) {
        if (typeof opt_path === "undefined") { opt_path = ''; }
        if (typeof opt_domain === "undefined") { opt_domain = ''; }
        var rv = containsKey(name);
        setCookie(name, '', 0, opt_path, opt_domain);
        return rv;
    }
    gCookie.remove = remove;
    ;
    /**
    * Gets the names for all the cookies.
    * @return {Array.<string>} An array with the names of the cookies.
    */
    function getKeys() {
        return getKeyValues_().keys;
    }
    ;
    /**
    * Gets the values for all the cookies.
    * @return {Array.<string>} An array with the values of the cookies.
    */
    function getValues() {
        return getKeyValues_().values;
    }
    ;
    /**
    * @return {boolean} Whether there are any cookies for this document.
    */
    function isEmpty() {
        return !getCookie_();
    }
    ;
    /**
    * @return {number} The number of cookies for this document.
    */
    function getCount() {
        var cookie = getCookie_();
        if(!cookie) {
            return 0;
        }
        return getParts_().length;
    }
    ;
    /**
    * Returns whether there is a cookie with the given name.
    * @param {string} key The name of the cookie to test for.
    * @return {boolean} Whether there is a cookie by that name.
    */
    function containsKey(key) {
        // substring will return empty string if the key is not found, so the get
        // function will only return undefined
        return goog.isDef(getCookie(key));
    }
    ;
    /**
    * Returns whether there is a cookie with the given value. (This is an O(n)
    * operation.)
    * @param {string} value  The value to check for.
    * @return {boolean} Whether there is a cookie with that value.
    */
    function containsValue(value) {
        // this O(n) in any case so lets do the trivial thing.
        var values = getKeyValues_().values;
        for(var i = 0; i < values.length; i++) {
            if(values[i] == value) {
                return true;
            }
        }
        return false;
    }
    ;
    /**
    * Removes all cookies for this document.  Note that this will only remove
    * cookies from the current path and domain.  If there are cookies set using a
    * subpath and/or another domain these will still be there.
    */
    function clear() {
        var keys = getKeyValues_().keys;
        for(var i = keys.length - 1; i >= 0; i--) {
            remove(keys[i]);
        }
    }
    ;
    /**
    * Private helper function to allow testing cookies without depending on the
    * browser.
    * @param {string} s The cookie string to set.
    * @private
    */
    function setCookie_(s) {
        document.cookie = s;
    }
    ;
    /**
    * Private helper function to allow testing cookies without depending on the
    * browser. IE6 can return null here.
    * @return {?string} Returns the {@code document.cookie}.
    * @private
    */
    function getCookie_() {
        return document.cookie;
    }
    ;
    /**
    * @return {!Array.<string>} The cookie split on semi colons.
    * @private
    */
    function getParts_() {
        return (getCookie_() || '').split(SPLIT_RE_);
    }
    ;
    /**
    * Gets the names and values for all the cookies.
    * @return {Object} An object with keys and values.
    * @private
    */
    function getKeyValues_() {
        var parts = getParts_();
        var keys = [], values = [], index, part;
        for(var i = 0; part = parts[i]; i++) {
            index = part.indexOf('=');
            if(index == -1) {
                // empty name
                keys.push('');
                values.push(part);
            } else {
                keys.push(part.substring(0, index));
                values.push(part.substring(index + 1));
            }
        }
        return {
            keys: keys,
            values: values
        };
    }
    ;
})(gCookie || (gCookie = {}));

var LMComLib;
(function (LMComLib) {
    (function (CookieIds) {
        CookieIds._map = [];
        CookieIds.lang = 0;
        CookieIds.LMTicket = 1;
        CookieIds.schools_info = 2;
        CookieIds.lms_licence = 3;
        CookieIds.subsite = 4;
        CookieIds.returnUrl = 5;
        CookieIds.oauth = 6;
        CookieIds.loginEMail = 7;
        CookieIds.loginLogin = 8;
    })(LMComLib.CookieIds || (LMComLib.CookieIds = {}));
    var CookieIds = LMComLib.CookieIds;
    (function (CourseIds) {
        CourseIds._map = [];
        CourseIds.no = 0;
        CourseIds.English = 1;
        CourseIds.German = 2;
        CourseIds.Spanish = 3;
        CourseIds.Italian = 4;
        CourseIds.French = 5;
        CourseIds.Chinese = 6;
        CourseIds.Russian = 7;
        CourseIds.KurzTest = 8;
        CourseIds.Vyspa1 = 9;
        CourseIds.Vyspa2 = 10;
        CourseIds.Vyspa3 = 11;
        CourseIds.Vyspa4 = 12;
        CourseIds.Vyspa5 = 13;
        CourseIds.Vyspa6 = 14;
        CourseIds.Vyspa7 = 15;
        CourseIds.Vyspa8 = 16;
        CourseIds.Vyspa9 = 17;
        CourseIds.Vyspa10 = 18;
        CourseIds.Vyspa11 = 19;
        CourseIds.Vyspa12 = 20;
        CourseIds.Vyspa13 = 21;
        CourseIds.Vyspa = 22;
        CourseIds.NNOUcto = 23;
        CourseIds.ZSAJ61 = 24;
        CourseIds.ZSAJ71 = 25;
        CourseIds.ZSAJ81 = 26;
        CourseIds.ZSAJ91 = 27;
        CourseIds.ZSNJ61 = 28;
        CourseIds.ZSNJ71 = 29;
        CourseIds.ZSNJ81 = 30;
        CourseIds.ZSNJ91 = 31;
        CourseIds.ZSAJ62 = 32;
        CourseIds.ZSAJ72 = 33;
        CourseIds.ZSAJ82 = 34;
        CourseIds.ZSAJ92 = 35;
        CourseIds.ZSNJ62 = 36;
        CourseIds.ZSNJ72 = 37;
        CourseIds.ZSNJ82 = 38;
        CourseIds.ZSNJ92 = 39;
        CourseIds.MVAJtesty = 40;
        CourseIds.MVSPtesty = 41;
        CourseIds.MVFRtesty = 42;
        CourseIds.MVRJtesty = 43;
        CourseIds.MVtesty = 44;
        CourseIds.EuroEnglish = 45;
    })(LMComLib.CourseIds || (LMComLib.CourseIds = {}));
    var CourseIds = LMComLib.CourseIds;
    (function (Domains) {
        Domains._map = [];
        Domains.no = 0;
        Domains.cz = 1;
        Domains.com = 2;
        Domains.sz = 3;
        Domains.el = 4;
        Domains.org = 5;
        Domains.sk = 6;
        Domains.gopas = 7;
        Domains.site = 99;
    })(LMComLib.Domains || (LMComLib.Domains = {}));
    var Domains = LMComLib.Domains;
    (function (errorId) {
        errorId._map = [];
        errorId.no = 0;
        errorId.missingLicence = 1;
        errorId.licRead = 2;
        errorId.licFormat = 3;
        errorId.wrongDemoModules = 4;
        errorId.wrongHost = 5;
        errorId.wrongSpace = 6;
        errorId.noMoodle = 7;
        errorId.expiredAll = 8;
        errorId.expiredServices = 9;
        errorId.notLogged = 10;
        errorId.notLoggedTrial = 11;
    })(LMComLib.errorId || (LMComLib.errorId = {}));
    var errorId = LMComLib.errorId;
    (function (Langs) {
        Langs._map = [];
        Langs.no = 0;
        Langs.lang = 1;
        Langs.cs_cz = 2;
        Langs.en_gb = 3;
        Langs.de_de = 4;
        Langs.sk_sk = 5;
        Langs.fr_fr = 6;
        Langs.it_it = 7;
        Langs.sp_sp = 8;
        Langs.ru_ru = 9;
        Langs.vi_vn = 10;
        Langs.es_es = 11;
        Langs.fi_fi = 12;
        Langs.sv_se = 13;
        Langs.da_dk = 14;
        Langs.nb_no = 15;
        Langs.af_za = 16;
        Langs.sq_al = 17;
        Langs.ar_sa = 18;
        Langs.hy_am = 19;
        Langs.as_in = 20;
        Langs.az_latn_az = 21;
        Langs.eu_es = 22;
        Langs.bn_in = 23;
        Langs.be_by = 24;
        Langs.pt_br = 25;
        Langs.br_fr = 26;
        Langs.bg_bg = 27;
        Langs.fr_ca = 28;
        Langs.zh_hk = 29;
        Langs.ca_es = 30;
        Langs.co_fr = 31;
        Langs.hr_hr = 32;
        Langs.nl_nl = 34;
        Langs.en_us = 35;
        Langs.et_ee = 36;
        Langs.gl_es = 37;
        Langs.ka_ge = 38;
        Langs.el_gr = 39;
        Langs.gu_in = 40;
        Langs.ha_latn_ng = 41;
        Langs.he_il = 42;
        Langs.hi_in = 43;
        Langs.hu_hu = 44;
        Langs.zh_cn = 45;
        Langs.is_is = 46;
        Langs.ig_ng = 47;
        Langs.id_id = 48;
        Langs.ga_ie = 49;
        Langs.ja_jp = 50;
        Langs.kn_in = 51;
        Langs.km_kh = 52;
        Langs.ky_kg = 53;
        Langs.ko_kr = 54;
        Langs.lo_la = 55;
        Langs.es_mx = 56;
        Langs.lv_lv = 57;
        Langs.lt_lt = 58;
        Langs.mk_mk = 59;
        Langs.ms_my = 60;
        Langs.ml_in = 61;
        Langs.mt_mt = 62;
        Langs.mi_nz = 63;
        Langs.mr_in = 64;
        Langs.mn_mn = 65;
        Langs.ne_np = 66;
        Langs.oc_fr = 67;
        Langs.ps_af = 68;
        Langs.fa_ir = 69;
        Langs.pl_pl = 70;
        Langs.pt_pt = 71;
        Langs.pa_in = 72;
        Langs.quz_pe = 73;
        Langs.ro_ro = 74;
        Langs.sr_latn_cs = 75;
        Langs.nso_za = 76;
        Langs.si_lk = 77;
        Langs.sl_si = 78;
        Langs.sw_ke = 79;
        Langs.ta_in = 80;
        Langs.te_in = 81;
        Langs.th_th = 82;
        Langs.bo_cn = 83;
        Langs.tn_za = 84;
        Langs.tr_tr = 85;
        Langs.uk_ua = 86;
        Langs.ur_pk = 87;
        Langs.uz_latn_uz = 88;
        Langs.cy_gb = 89;
        Langs.xh_za = 90;
        Langs.yo_ng = 91;
        Langs.zu_za = 92;
        Langs.en_nz = 94;
        Langs.LMPage_GetLang = 999;
    })(LMComLib.Langs || (LMComLib.Langs = {}));
    var Langs = LMComLib.Langs;
    (function (LMSSize) {
        LMSSize._map = [];
        LMSSize.no = 0;
        LMSSize.self = 1;
        LMSSize.blend = 2;
    })(LMComLib.LMSSize || (LMComLib.LMSSize = {}));
    var LMSSize = LMComLib.LMSSize;
    (function (LMSType) {
        LMSType._map = [];
        LMSType.no = 0;
        LMSType.NewEE = 1;
        LMSType.EE = 2;
        LMSType.LMCom = 3;
        LMSType.Moodle = 4;
        LMSType.SlNewEE = 5;
    })(LMComLib.LMSType || (LMComLib.LMSType = {}));
    var LMSType = LMComLib.LMSType;
    (function (OtherType) {
        OtherType._map = [];
        OtherType.no = 0;
        OtherType.Seznam = 1;
        OtherType.Facebook = 2;
        OtherType.Google = 3;
        OtherType.Moodle = 4;
        OtherType.Yahoo = 5;
        OtherType.MyOpenId = 6;
        OtherType.eTestMeId = 7;
        OtherType.Microsoft = 8;
        OtherType.LinkedIn = 9;
        OtherType.LANGMaster = 10;
        OtherType.LANGMasterNoEMail = 11;
    })(LMComLib.OtherType || (LMComLib.OtherType = {}));
    var OtherType = LMComLib.OtherType;
    (function (SubDomains) {
        SubDomains._map = [];
        SubDomains.no = 0;
        SubDomains.com = 1;
        SubDomains.com_pl = 2;
        SubDomains.com_cz = 3;
        SubDomains.com_RuMarket = 4;
        SubDomains.com_lt = 5;
        SubDomains.com_sk = 6;
        SubDomains.com_vi = 7;
        SubDomains.com_tr = 8;
        SubDomains.com_LondonBusinessEnglish = 9;
        SubDomains.com_Test = 10;
        SubDomains.com_bg = 11;
        SubDomains.com_FakeFirst = 199;
        SubDomains.com_Commest = 200;
        SubDomains.com_LanguageTraining = 201;
        SubDomains.com_CactusLanguageTraining = 202;
        SubDomains.com_Spevacek = 203;
        SubDomains.com_EducationFirst = 204;
        SubDomains.com_GlobalLT = 205;
        SubDomains.com_MHCBusinessLanguageTraining = 206;
        SubDomains.com_Linguarama = 207;
        SubDomains.com_LanguageDirect = 208;
        SubDomains.com_Eurospeak = 209;
        SubDomains.com_Lingua = 210;
        SubDomains.com_LanguageTrainers = 211;
        SubDomains.com_InternationalHouseBarcelona = 212;
        SubDomains.com_Netlanguages = 213;
        SubDomains.com_InternationalHouseLondon = 214;
        SubDomains.com_InlinguaMuenchen = 215;
        SubDomains.com_NovyiDisk = 216;
        SubDomains.com_Lingea = 217;
        SubDomains.com_Skrivanek = 218;
        SubDomains.com_NacionalinisSvietimoCentras = 219;
        SubDomains.com_UnitedTeachers = 220;
        SubDomains.com_SageAcademyOnline = 221;
        SubDomains.com_InternationalLanguageSchool = 222;
        SubDomains.com_AvanquestGermany = 223;
        SubDomains.com_EuroTalk = 224;
        SubDomains.com_Agemsoft = 225;
        SubDomains.com_Grafia = 226;
        SubDomains.com_Pragoeduca = 227;
        SubDomains.com_AvanquestFrance = 228;
        SubDomains.com_AvanquestUK = 229;
        SubDomains.com_Inlingua = 230;
        SubDomains.com_Oxygen = 231;
        SubDomains.com_Tutor = 232;
        SubDomains.com_Megalanguage = 233;
        SubDomains.com_Anchortrain = 234;
        SubDomains.com_MCLanguages = 235;
        SubDomains.com_BKCInternationalHouse = 236;
        SubDomains.com_GlobusInt = 237;
        SubDomains.com_SpeakUP = 238;
        SubDomains.com_Adrian = 239;
        SubDomains.com_SpeakPlus = 240;
        SubDomains.com_MasterKlass = 241;
        SubDomains.com_PrimeSchool = 242;
        SubDomains.com_LinguaConsult = 243;
        SubDomains.com_AccentCenter = 244;
        SubDomains.com_CDCInterTraining = 245;
        SubDomains.com_GeneralLinguistic = 246;
        SubDomains.com_CREF = 247;
        SubDomains.com_Alibra = 248;
        SubDomains.com_SpeakUPRu = 249;
        SubDomains.com_MichaHesseFremdsprachenunterricht = 250;
        SubDomains.com_BoaLingua = 251;
        SubDomains.com_Sprachschule4U = 252;
        SubDomains.com_GLSSprachenzentrum = 253;
        SubDomains.com_LINGUAFRANCASprachschule = 254;
        SubDomains.com_Dialogica = 255;
        SubDomains.com_WallStreetInstitute = 256;
        SubDomains.com_CarlDuisberg = 257;
        SubDomains.com_idiom = 258;
        SubDomains.com_Sprachcoach = 259;
        SubDomains.com_AcademiaLuzern = 260;
        SubDomains.com_HBSSprachschule = 261;
        SubDomains.com_SprachschuleSchneider = 262;
        SubDomains.com_Biku = 263;
        SubDomains.com_NewEnglishTeaching = 264;
        SubDomains.com_LinguaramaIt = 265;
        SubDomains.com_AccademicaBritannica = 266;
        SubDomains.com_EuropeanSchool = 267;
        SubDomains.com_LondonLanguageServices = 268;
        SubDomains.com_Enforex = 269;
        SubDomains.com_BCNLanguages = 270;
        SubDomains.com_FyneFormacion = 271;
        SubDomains.com_TheBritishHouse = 272;
        SubDomains.com_LinguaramaSP = 273;
        SubDomains.com_HeadwayLanguageServices = 274;
        SubDomains.com_Altissia = 275;
        SubDomains.com_ABCHumboldt = 276;
        SubDomains.com_EscuelaParla = 277;
        SubDomains.com_ICLIdiomas = 278;
        SubDomains.com_CambioIdiomas = 279;
        SubDomains.com_Moose = 280;
        SubDomains.com_ProfiLingua = 281;
        SubDomains.com_BusinessRepublic = 282;
        SubDomains.com_TFLS = 283;
        SubDomains.com_IHWorld = 284;
        SubDomains.com_KlubschuleMigros = 285;
        SubDomains.com_CLLLanguageCentres = 286;
        SubDomains.com_F9Languages = 287;
        SubDomains.com_VerbaScripta = 288;
        SubDomains.com_OneTwoSpeak = 289;
        SubDomains.com_LanguageConnexion = 290;
        SubDomains.com_Amideast = 291;
        SubDomains.com_ActivLangues = 292;
        SubDomains.com_CapitoleFormation = 293;
        SubDomains.com_ADomlingua = 294;
        SubDomains.com_PartnerLanguageSchool = 295;
        SubDomains.com_PartnerLanguageSchoolDE = 296;
        SubDomains.com_PartnerLanguageSchoolSP = 297;
        SubDomains.com_PartnerLanguageSchoolIT = 298;
        SubDomains.com_PartnerLanguageSchoolFR = 299;
        SubDomains.com_PartnerLanguageSchoolRU = 300;
        SubDomains.com_InlinguaFrance = 301;
        SubDomains.com_InlinguaItaly = 302;
        SubDomains.com_InlinguaSpain = 303;
        SubDomains.com_InlinguaGermany = 304;
        SubDomains.com_SPEEXX = 305;
        SubDomains.com_AnglictinaNepravidelnaSlovesa = 306;
        SubDomains.com_EVC = 307;
        SubDomains.com_OnlineJazyky = 308;
        SubDomains.com_InternationalHouseSpain = 309;
        SubDomains.com_InternationalHouseGermany = 310;
        SubDomains.com_InternationalHouseItaly = 311;
        SubDomains.com_InternationalHouseRussia = 312;
        SubDomains.com_InternationalHouseEngland = 313;
        SubDomains.com_Digiakademie = 314;
        SubDomains.com_PRE = 315;
        SubDomains.com_OxfordSchool = 316;
        SubDomains.com_JJN = 317;
        SubDomains.com_Oversea = 318;
        SubDomains.com_UPAEP = 319;
        SubDomains.com_Letsolutions = 320;
        SubDomains.com_Presto = 321;
        SubDomains.com_Kontis = 322;
        SubDomains.com_vnu = 323;
        SubDomains.com_vnuhcm = 324;
        SubDomains.com_hueuni = 325;
        SubDomains.com_tnu = 326;
        SubDomains.com_ud = 327;
        SubDomains.com_ctu = 328;
        SubDomains.com_vinhuni = 329;
        SubDomains.com_taynguyenuni = 330;
        SubDomains.com_qnu = 331;
        SubDomains.com_hut = 332;
        SubDomains.com_dhcd = 333;
        SubDomains.com_haui = 334;
        SubDomains.com_cntp = 335;
        SubDomains.com_hup = 336;
        SubDomains.com_pvu = 337;
        SubDomains.com_epu = 338;
        SubDomains.com_dthu = 339;
        SubDomains.com_hanu = 340;
        SubDomains.com_vimaru = 341;
        SubDomains.com_hau = 342;
        SubDomains.com_hcmuarc = 343;
        SubDomains.com_neu = 344;
        SubDomains.com_ueh = 345;
        SubDomains.com_uct = 346;
        SubDomains.com_hcmutrans = 347;
        SubDomains.com_ulsa = 348;
        SubDomains.com_hlu = 349;
        SubDomains.com_hcmulaw = 350;
        SubDomains.com_vfu = 351;
        SubDomains.com_humg = 352;
        SubDomains.com_buh = 353;
        SubDomains.com_ftu = 354;
        SubDomains.com_ntu = 355;
        SubDomains.com_hcmuaf = 356;
        SubDomains.com_hua = 357;
        SubDomains.com_hnue = 358;
        SubDomains.com_hpu2 = 359;
        SubDomains.com_utehy = 360;
        SubDomains.com_hcmute = 361;
        SubDomains.com_nute = 362;
        SubDomains.com_spktvinh = 363;
        SubDomains.com_hcmup = 364;
        SubDomains.com_vcu = 365;
        SubDomains.com_huc = 366;
        SubDomains.com_hcmuc = 367;
        SubDomains.com_nuce = 368;
        SubDomains.com_yds = 369;
        SubDomains.com_hmu = 370;
        SubDomains.com_hpmu = 371;
        SubDomains.com_dhhp = 372;
        SubDomains.com_dlu = 373;
        SubDomains.com_hou = 374;
        SubDomains.com_hvtc = 375;
        SubDomains.com_hvnh = 376;
        SubDomains.com_Simpleway = 377;
        SubDomains.com_Spolchemie = 378;
        SubDomains.com_OlivegroveGroup = 379;
        SubDomains.com_Vox = 380;
        SubDomains.com_Chip = 381;
        SubDomains.com_iDnes = 382;
        SubDomains.com_iHned = 383;
        SubDomains.com_JobsCZ = 384;
        SubDomains.com_Lidovky = 385;
        SubDomains.com_SkodaAuto = 386;
        SubDomains.com_SPrace = 387;
        SubDomains.com_UceniOnline = 388;
        SubDomains.com_VSEM = 389;
        SubDomains.com_PCHelp = 390;
        SubDomains.com_Manpower = 391;
        SubDomains.com_HofmannPersonal = 392;
        SubDomains.com_CeskyTrhPrace = 393;
        SubDomains.com_PracaSMESK = 394;
        SubDomains.com_StartPeople = 395;
        SubDomains.com_ProfesiaSK = 396;
        SubDomains.com_KarieraSK = 397;
        SubDomains.com_PracaKarieraSK = 398;
        SubDomains.com_GraftonSK = 399;
        SubDomains.com_TopjobsSK = 400;
        SubDomains.com_MonsterSK = 401;
        SubDomains.com_ProstaffSK = 402;
        SubDomains.com_MojaPracaSK = 403;
        SubDomains.com_GraftonCZ = 404;
        SubDomains.com_MonsterCZ = 405;
        SubDomains.com_ProfesiaCZ = 406;
        SubDomains.com_Profeskontakt = 407;
        SubDomains.com_Anex = 408;
        SubDomains.com_RobertHalf = 409;
        SubDomains.com_HorizonsLanguageJobs = 410;
        SubDomains.com_Pragma = 411;
        SubDomains.com_SudentAgency = 412;
        SubDomains.com_AktualneCZ = 413;
        SubDomains.com_LMC = 414;
        SubDomains.com_CNPIEC = 415;
        SubDomains.com_EduCloud = 416;
        SubDomains.com_Demo1 = 417;
        SubDomains.com_Demo2 = 418;
        SubDomains.com_Demo3 = 419;
        SubDomains.com_Demo4 = 420;
        SubDomains.com_Demo5 = 421;
        SubDomains.com_Demo6 = 422;
        SubDomains.com_Demo7 = 423;
        SubDomains.com_Demo8 = 424;
        SubDomains.com_Demo9 = 425;
        SubDomains.com_Demo10 = 426;
        SubDomains.com_Demo11 = 427;
        SubDomains.com_Demo12 = 428;
        SubDomains.com_Demo13 = 429;
        SubDomains.com_Demo14 = 430;
        SubDomains.com_Demo15 = 431;
        SubDomains.com_Demo16 = 432;
        SubDomains.com_Demo17 = 433;
        SubDomains.com_Demo18 = 434;
        SubDomains.com_Demo19 = 435;
        SubDomains.com_Demo20 = 436;
        SubDomains.com_Demo21 = 437;
        SubDomains.com_Demo22 = 438;
        SubDomains.com_Demo23 = 439;
        SubDomains.com_Demo24 = 440;
        SubDomains.com_Demo25 = 441;
        SubDomains.com_Demo26 = 442;
        SubDomains.com_Demo27 = 443;
        SubDomains.com_Demo28 = 444;
        SubDomains.com_Demo29 = 445;
        SubDomains.com_Demo30 = 446;
        SubDomains.com_Demo31 = 447;
        SubDomains.com_Demo32 = 448;
        SubDomains.com_Demo33 = 449;
        SubDomains.com_Demo34 = 450;
        SubDomains.com_Demo35 = 451;
        SubDomains.com_Demo36 = 452;
        SubDomains.com_Demo37 = 453;
        SubDomains.com_Demo38 = 454;
        SubDomains.com_Demo39 = 455;
        SubDomains.com_Demo40 = 456;
        SubDomains.com_Demo41 = 457;
        SubDomains.com_Demo42 = 458;
        SubDomains.com_Demo43 = 459;
        SubDomains.com_Demo44 = 460;
        SubDomains.com_Demo45 = 461;
        SubDomains.com_Demo46 = 462;
        SubDomains.com_Demo47 = 463;
        SubDomains.com_Demo48 = 464;
        SubDomains.com_Demo49 = 465;
        SubDomains.com_Demo50 = 466;
    })(LMComLib.SubDomains || (LMComLib.SubDomains = {}));
    var SubDomains = LMComLib.SubDomains;
    (function (LineIds) {
        LineIds._map = [];
        LineIds.no = 0;
        LineIds.English = 1;
        LineIds.German = 2;
        LineIds.Spanish = 3;
        LineIds.Italian = 4;
        LineIds.French = 5;
        LineIds.Chinese = 6;
        LineIds.Russian = 7;
        LineIds.Other = 8;
        LineIds.MSWord = 9;
        LineIds.MSExcel = 10;
        LineIds.MSOutlook = 11;
        LineIds.MSAccess = 12;
        LineIds.MSPowerPoint = 13;
        LineIds.MSVista = 14;
        LineIds.MSOffice = 15;
        LineIds.MSEcdl = 16;
        LineIds.Ucto = 17;
        LineIds.Fotografie = 18;
        LineIds.BranaVedeni = 19;
        LineIds.Afrikaans = 20;
        LineIds.Albanian = 21;
        LineIds.Arabic = 22;
        LineIds.Armenian = 23;
        LineIds.Assamese = 24;
        LineIds.Azeri = 25;
        LineIds.Basque = 26;
        LineIds.Bengali = 27;
        LineIds.Breton = 28;
        LineIds.Bulgarian = 29;
        LineIds.Cantonese = 30;
        LineIds.Catalan = 31;
        LineIds.Corsican = 32;
        LineIds.Croatian = 33;
        LineIds.Czech = 34;
        LineIds.Danish = 35;
        LineIds.Dutch = 36;
        LineIds.Estonian = 37;
        LineIds.Finnish = 38;
        LineIds.Galician = 39;
        LineIds.Georgian = 40;
        LineIds.Greek = 41;
        LineIds.Hausa = 42;
        LineIds.Hebrew = 43;
        LineIds.Hungarian = 44;
        LineIds.Chinese_Mandarin = 45;
        LineIds.Icelandic = 46;
        LineIds.Igbo = 47;
        LineIds.Indonesian = 48;
        LineIds.Irish = 49;
        LineIds.Japanese = 50;
        LineIds.Khmer = 51;
        LineIds.Kirghiz = 52;
        LineIds.Korean = 53;
        LineIds.Latvian = 54;
        LineIds.Lithuanian = 55;
        LineIds.Macedonian = 56;
        LineIds.Malay = 57;
        LineIds.Malayalam = 58;
        LineIds.Maltese = 59;
        LineIds.Maori = 60;
        LineIds.Mongolian = 61;
        LineIds.Norwegian = 62;
        LineIds.Occitan = 63;
        LineIds.Pashto = 64;
        LineIds.Persian = 65;
        LineIds.Polish = 66;
        LineIds.Portuguese = 67;
        LineIds.Portuguese_Brazilian = 68;
        LineIds.Quechua = 69;
        LineIds.Romanian = 70;
        LineIds.Serbian = 71;
        LineIds.Sesotho = 72;
        LineIds.Slovak = 73;
        LineIds.Slovenian = 74;
        LineIds.Swahili = 75;
        LineIds.Swedish = 76;
        LineIds.Thai = 77;
        LineIds.Tibetan = 78;
        LineIds.Tswana = 79;
        LineIds.Turkish = 80;
        LineIds.Ukrainian = 81;
        LineIds.Urdu = 82;
        LineIds.Uzbek = 83;
        LineIds.Vietnamese = 84;
        LineIds.Xhosa = 85;
        LineIds.Yoruba = 86;
        LineIds.Zulu = 87;
    })(LMComLib.LineIds || (LMComLib.LineIds = {}));
    var LineIds = LMComLib.LineIds;
    LMComLib.CmdEMail_Type = 'LMComLib.CmdEMail';
    function CmdEMail_Create(From, To, Cc, Subject, Html, isForgotPassword, isAtt, attFile, attContent, attContentType) {
        return {
            From: From,
            To: To,
            Cc: Cc,
            Subject: Subject,
            Html: Html,
            isForgotPassword: isForgotPassword,
            isAtt: isAtt,
            attFile: attFile,
            attContent: attContent,
            attContentType: attContentType
        };
    }
    LMComLib.CmdEMail_Create = CmdEMail_Create;
    LMComLib.LMCookieJS_Type = 'LMComLib.LMCookieJS';
    function LMCookieJS_Create(id, EMail, Login, LoginEMail, Type, TypeId, FirstName, LastName) {
        return {
            id: id,
            EMail: EMail,
            Login: Login,
            LoginEMail: LoginEMail,
            Type: Type,
            TypeId: TypeId,
            FirstName: FirstName,
            LastName: LastName
        };
    }
    LMComLib.LMCookieJS_Create = LMCookieJS_Create;
    LMComLib.LangToLine = [
        0, 
        0, 
        34, 
        1, 
        2, 
        73, 
        5, 
        4, 
        3, 
        7, 
        84, 
        0, 
        38, 
        76, 
        35, 
        62, 
        20, 
        21, 
        22, 
        23, 
        24, 
        25, 
        26, 
        27, 
        0, 
        68, 
        28, 
        29, 
        0, 
        30, 
        31, 
        32, 
        33, 
        0, 
        36, 
        0, 
        37, 
        39, 
        40, 
        41, 
        0, 
        42, 
        43, 
        0, 
        44, 
        45, 
        46, 
        47, 
        48, 
        49, 
        50, 
        0, 
        51, 
        52, 
        53, 
        0, 
        0, 
        54, 
        55, 
        56, 
        57, 
        58, 
        59, 
        60, 
        0, 
        61, 
        0, 
        63, 
        64, 
        65, 
        66, 
        67, 
        0, 
        69, 
        70, 
        71, 
        72, 
        0, 
        74, 
        75, 
        0, 
        0, 
        77, 
        78, 
        79, 
        80, 
        81, 
        82, 
        83, 
        0, 
        85, 
        86, 
        87, 
        0
    ];
    LMComLib.LineToLang = [
        0, 
        3, 
        4, 
        8, 
        7, 
        6, 
        0, 
        9, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        16, 
        17, 
        18, 
        19, 
        20, 
        21, 
        22, 
        23, 
        26, 
        27, 
        29, 
        30, 
        31, 
        32, 
        2, 
        14, 
        34, 
        36, 
        12, 
        37, 
        38, 
        39, 
        41, 
        42, 
        44, 
        45, 
        46, 
        47, 
        48, 
        49, 
        50, 
        52, 
        53, 
        54, 
        57, 
        58, 
        59, 
        60, 
        61, 
        62, 
        63, 
        65, 
        15, 
        67, 
        68, 
        69, 
        70, 
        71, 
        25, 
        73, 
        74, 
        75, 
        76, 
        5, 
        78, 
        79, 
        13, 
        82, 
        83, 
        84, 
        85, 
        86, 
        87, 
        88, 
        10, 
        90, 
        91, 
        92
    ];
    LMComLib.LangToEADir = {
        '2': 'comcz',
        '3': 'comen',
        '4': 'comde',
        '5': 'comsk',
        '6': 'comfr',
        '7': 'comit',
        '8': 'comes',
        '9': 'comru',
        '10': 'comvi',
        '11': 'comes',
        '27': 'combg',
        '29': 'comth',
        '45': 'comcn',
        '54': 'comko',
        '58': 'comlt',
        '70': 'compl',
        '82': 'comhk',
        '85': 'comtr'
    };
})(LMComLib || (LMComLib = {}));

/// <reference path="../jsd/jquery.d.ts" />
/// <reference path="../../JsLib/jsd/underscore.d.ts" />
var Gui2;
(function (Gui2) {
    var cancelTouch = function (ev, t) {
        if(ev != null) {
            (ev).originalEvent = null;
            ev.preventDefault();
            ev.stopPropagation();
        }
        t.removeClass("lm-click");
    };
    $(document).delegate(".lm-clickable", "tapstart tapend mousedown mouseup", function (ev) {
        //console.log(ev.type);
        switch(ev.type) {
            case "tapstart":
            case "mousedown":
                var t = $(ev.currentTarget);
                if(t.is('.disabled')) {
                    return;
                }
                t.addClass("lm-click");
                setTimeout(function () {
                    return cancelTouch(ev, t);
                }, 800);
                return true;
                break;
            case "tapend":
            case "mouseup":
                cancelTouch(ev, $(ev.currentTarget));
                break;
        }
    });
})(Gui2 || (Gui2 = {}));
var Gui;
(function (Gui) {
    function cancelTouch(ev, t) {
        if(ev != null) {
            (ev).originalEvent = null;
            ev.preventDefault();
            ev.stopPropagation();
        }
        t.removeClass("lmdown");
        $(t.find(".bar")).removeClass("lmdown");
    }
    function Init() {
        //"tapstart tapend tap singletap doubletap taphold swipe swipeup swiperight swipedown swipeleft scrollstart scrollend orientationchange"
        $(function () {
            $("body").delegate(".lmcollapsed-heading,.lmbtn,.lmprogress-header,.lmprogress, .lm-btn", "tapstart tapend", function (ev) {
                //console.log(ev.type);
                switch(ev.type) {
                    case "tapstart":
                        //close button
                        var t = $(ev.target).closest(".lmbtn-close");
                        if(t.length > 0) {
                            t.addClass("lmdown");
                            setTimeout(function () {
                                return cancelTouch(ev, t);
                            }, 500);
                            return;
                        }
                        //default
                        t = $(ev.currentTarget);
                        t.addClass("lmdown");
                        $(t.find(".bar")).addClass("lmdown");
                        setTimeout(function () {
                            return cancelTouch(ev, t);
                        }, 800);
                        break;
                    case "tapend":
                        cancelTouch(ev, $(ev.currentTarget));
                        break;
                }
            });
            $('.lmbtn-close').hover(function () {
                $(this).parent().addClass("lmbtn-child-hover");
            }, function () {
                $(this).parent().removeClass("lmbtn-child-hover");
            });
        });
    }
    function Init2() {
        var swapBkgnd = function (t, isAct) {
            var bk = t.data(isAct ? "active-bkgnd" : "bkgnd");//v datech jsou ulozeny background-position pro active a noactive stav
            
            if(bk) {
                t.css("background-position", bk);
            }
        };
        var cancelTouch = function (ev, t) {
            if(ev != null) {
                (ev).originalEvent = null;
                ev.preventDefault();
                ev.stopPropagation();
            }
            t.removeClass("btnex-down");
            swapBkgnd(t, false);
        };
        //"tapstart tapend tap singletap doubletap taphold swipe swipeup swiperight swipedown swipeleft scrollstart scrollend orientationchange"
        $(function () {
            $("body").delegate(".btnex", "tapstart tapend mousedown mouseup", function (ev) {
                //console.log(ev.type);
                switch(ev.type) {
                    case "tapstart":
                    case "mousedown":
                        var t = $(ev.currentTarget);
                        if(t.is('.disabled')) {
                            return;
                        }
                        t.addClass("btnex-down");
                        swapBkgnd(t, true);
                        setTimeout(function () {
                            return cancelTouch(ev, t);
                        }, 800);
                        return true;
                        break;
                    case "tapend":
                    case "mouseup":
                        cancelTouch(ev, $(ev.currentTarget));
                        break;
                }
            });
            $(document).keypress(function (e) {
                if(e.which != 13) {
                    return;
                }
                $(".btnex-default:first").trigger("click");
            });
        });
    }
    Init();
    Init2();
})(Gui || (Gui = {}));
//resizeEx event pro vsechny elementy.
//vyuziva budto window.resize: bind("resizeEx",true,) eventu nebo timeru: bind("resizeEx",false,), kdy se porovnava stara a nova velikost
var Resizer;
(function (Resizer) {
    var eventName = "resizeEx";
    var actions = function (el) {
        return void [];
    };//evidence Action name => akce
    
    var items = [];//vsechny atomicke element x akce
    
    Resizer.progress = "progress";
    actions[Resizer.progress] = doProgress;
    Resizer.height = "height";
    actions[Resizer.height] = doHeight;
    Resizer.width = "width";
    actions[Resizer.width] = doWidth;
    function dummy() {
    }
    //Registrace akci
    function on() {
        var pars = [];
        for (var _i = 0; _i < (arguments.length - 0); _i++) {
            pars[_i] = arguments[_i + 0];
        }
        //registruj akce
        _.each(pars, function (p) {
            return _.each(p.actions, function (act) {
                return _.each($(p.selector), function (el) {
                    var it = {
                        el: $(el),
                        action: act,
                        onResize: p.onResize
                    };
                    items.push(it);
                });
            });
        });
        //prirad elementum specialni event
        _.each(_.uniq(_.map(items, function (it) {
            return it.el[0];
        })), function (el) {
            return $(el).bind(eventName, dummy);
        });
        //init
        onWindowResize();
        onTimerResize();
    }
    Resizer.on = on;
    /******************* AKCE **************************************/
    //Progress bar, realizovany pomoci vhodne napozicovane background-url
    //nastavuje background-position-x dle hodnoty data-progress atributu(= procenta progress baru)
    //<div class="progress" id="p1" data-progress="48">XXX<br />YYY</div>
    //.progress { background: url(Color.png) repeat-y; }
    //$(function () { Resizer.adjutsBackgroundProgressBar("#p1", true); }
    function doProgress(el) {
        var prog = parseInt(el.data().progress);
        if(prog == null) {
            return;
        }
        var val = parseInt((el.outerWidth(true) * prog / 100).toString());
        var bk = (val).toString() + "px 0px";
        el.css("background-position", bk);
        el.data("bkgnd", bk);
        el.data("active-bkgnd", (val + 1).toString() + "px 0px");
    }
    function doHeight(el) {
        var max = 0;
        var childs = el.find(".gui-height").map(function () {
            var el = $(this), h = el.outerHeight();
            max = Math.max(max, h);
            return {
                el: el,
                maxh: h
            };
        });
        //console.log("max=" + max.toString());
        _.each(childs, function (ch) {
            var h = max - (ch.maxh - ch.el.height());
            ch.el.height(h);
            if(ch.el.is(".dropdown-toggle")) {
                ch.el.css("line-height", h.toString() + "px");
            }
        });
    }
    function doWidth(el) {
        //seber informae z data-width
        var widths = el.find(".gui-width").map(function () {
            var $e = $(this), s = $e.data("width");
            if(s == null) {
                return {
                    el: $e,
                    isPixel: true,
                    w: $e.outerWidth()
                };
            }
            return s.length == 2 && s.charAt(1) == "*" ? {
                el: $e,
                isPixel: false,
                w: parseInt(s.charAt(0))
            } : {
                el: $e,
                isPixel: true,
                w: parseInt(s)
            };
        });
        //nastav vysku na auto
        _.each(widths, function (w) {
            w.el.height("auto");
            if(w.el.is(".dropdown-toggle")) {
                w.el.css("line-height", "10px");
            }
        });
        //_.each(widths, (w: IWidthData) => console.log(w.el.outerHeight()));
        //spocti prispevek jedne hvezdy
        var starSum = 0;
        var pixelSum = 0;
        var lastStar = null;
        _.each(widths, function (w) {
            if(w.isPixel) {
                pixelSum += w.w;
            } else {
                starSum += w.w;
            }
        });
        var oneStar = parseInt(((el.innerWidth() - pixelSum) / starSum).toString());
        //console.log(el.innerWidth());
        //zmen sirku
        _.each(widths, function (w) {
            var dif = w.el.outerWidth(true) - w.el.width();
            if(w.isPixel) {
                w.el.width(w.w - dif);
            } else {
                w.el.width(w.w * oneStar - dif);
            }
        });
    }
    /*************************** resizer aparat ******************************/
    function onResize(withWinResize) {
        _.each([
            Resizer.width, 
            Resizer.height, 
            Resizer.progress
        ], function (act) {
            _.each(items, function (it) {
                if(it.action == act && it.onResize === withWinResize) {
                    actions[it.action](it.el);
                }
            });
        });
    }
    ;
    function onWindowResize() {
        onResize(true);
    }
    function onTimerResize() {
        onResize(false);
    }
    function adjustResizers() {
        var isTimer = false;
        var isResize = false;
        _.each(items, function (it) {
            isTimer = isTimer || !it.onResize;
            isResize = isResize || it.onResize;
        });
        if(isTimer && timerHandle == 0) {
            timerHandle = setTimeout(onTimerResize, 250);
        }
        if(!isTimer && timerHandle != 0) {
            clearTimeout(timerHandle);
            timerHandle = null;
        }
        if(isResize && !onResizeAssigner) {
            onResizeAssigner = true;
            $(window).bind("resize", onWindowResize);
        }
        if(!isResize && onResizeAssigner) {
            onResizeAssigner = false;
            $(window).unbind("resize");
        }
    }
    var timerHandle = 0;
    var onResizeAssigner = false;
    function setup() {
        adjustResizers();
    }
    function teardown() {
        items = _.filter(items, function (it) {
            return it.el[0] == this;
        });
        $(this).removeData(eventName);
        adjustResizers();
    }
    (function ($) {
        $.event.special.resizeEx = /*=eventName*/ {
            setup: setup,
            teardown: teardown
        };
    })(jQuery);
})(Resizer || (Resizer = {}));

var startTrace = true;
///////////////////////////////////////////////////////////////////////////////
//
//  Silverlight.js   			version 5.0.61118.0
//
//  This file is provided by Microsoft as a helper file for websites that
//  incorporate Silverlight Objects. This file is provided under the Microsoft
//  Public License available at 
//  http://code.msdn.microsoft.com/silverlightjs/Project/License.aspx.  
//  You may not use or distribute this file or the code in this file except as 
//  expressly permitted under that license.
// 
//  Copyright (c) Microsoft Corporation. All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

if (!window.Silverlight)
{
    window.Silverlight = { };
}

//////////////////////////////////////////////////////////////////
//
// _silverlightCount:
//
// Counter of globalized event handlers
//
//////////////////////////////////////////////////////////////////
Silverlight._silverlightCount = 0;

//////////////////////////////////////////////////////////////////
//
// __onSilverlightInstalledCalled:
//
// Prevents onSilverlightInstalled from being called multiple 
// times
//
//////////////////////////////////////////////////////////////////
Silverlight.__onSilverlightInstalledCalled = false;

//////////////////////////////////////////////////////////////////
//
// fwlinkRoot:
//
// Prefix for fwlink URL's
//
//////////////////////////////////////////////////////////////////
Silverlight.fwlinkRoot='http://go2.microsoft.com/fwlink/?LinkID=';

//////////////////////////////////////////////////////////////////
//
// __installationEventFired:
//
// Ensures that only one Installation State event is fired.
//
//////////////////////////////////////////////////////////////////
Silverlight.__installationEventFired = false;

//////////////////////////////////////////////////////////////////
//  
// onGetSilverlight:
//
// Called by Silverlight.GetSilverlight to notify the page that a user
// has requested the Silverlight installer
//
//////////////////////////////////////////////////////////////////
Silverlight.onGetSilverlight = null;

//////////////////////////////////////////////////////////////////
//
// onSilverlightInstalled:
//
// Called by Silverlight.WaitForInstallCompletion when the page detects
// that Silverlight has been installed. The event handler is not called
// in upgrade scenarios.
//
//////////////////////////////////////////////////////////////////
Silverlight.onSilverlightInstalled = function () {window.location.reload(false);};

//////////////////////////////////////////////////////////////////
//
// isInstalled:
//
// Checks to see if the correct version is installed
//
//////////////////////////////////////////////////////////////////
Silverlight.isInstalled = function(version)
{
    if (version == undefined)
        version = null;
        
    var isVersionSupported = false;
    var container = null;

    try
    {
        var control = null;
        var tryNS = false;

        if (window.ActiveXObject)
        {
            try
            {
                control = new ActiveXObject('AgControl.AgControl');
                if (version === null)
                {
                    isVersionSupported = true;
                }
                else if (control.IsVersionSupported(version))
                {
                    isVersionSupported = true;
                }
                control = null;
            }
            catch (e)
            {
                tryNS = true;
            }
        }
        else
        {
            tryNS = true;
        }
        if (tryNS)
        {
            var plugin = navigator.plugins["Silverlight Plug-In"];
            if (plugin)
            {
                if (version === null)
                {
                    isVersionSupported = true;
                }
                else
                {
                    var actualVer = plugin.description;
                    if (actualVer === "1.0.30226.2")
                        actualVer = "2.0.30226.2";
                    var actualVerArray = actualVer.split(".");
                    while (actualVerArray.length > 3)
                    {
                        actualVerArray.pop();
                    }
                    while (actualVerArray.length < 4)
                    {
                        actualVerArray.push(0);
                    }
                    var reqVerArray = version.split(".");
                    while (reqVerArray.length > 4)
                    {
                        reqVerArray.pop();
                    }

                    var requiredVersionPart;
                    var actualVersionPart;
                    var index = 0;


                    do
                    {
                        requiredVersionPart = parseInt(reqVerArray[index]);
                        actualVersionPart = parseInt(actualVerArray[index]);
                        index++;
                    }
                    while (index < reqVerArray.length && requiredVersionPart === actualVersionPart);

                    if (requiredVersionPart <= actualVersionPart && !isNaN(requiredVersionPart))
                    {
                        isVersionSupported = true;
                    }
                }
            }
        }
    }
    catch (e)
    {
        isVersionSupported = false;
    }
    
    return isVersionSupported;
};
//////////////////////////////////////////////////////////////////
//
// WaitForInstallCompletion:
//
// Occasionally checks for Silverlight installation status. If it
// detects that Silverlight has been installed then it calls
// Silverlight.onSilverlightInstalled();. This is only supported
// if Silverlight was not previously installed on this computer.
//
//////////////////////////////////////////////////////////////////
Silverlight.WaitForInstallCompletion = function()
{
    if ( ! Silverlight.isBrowserRestartRequired && Silverlight.onSilverlightInstalled )
    {
        try
        {
            navigator.plugins.refresh();
        }
        catch(e)
        {
        }
        if (Silverlight.isInstalled(null) && !Silverlight.__onSilverlightInstalledCalled)
        {
            Silverlight.onSilverlightInstalled();
            Silverlight.__onSilverlightInstalledCalled = true;
        }
        else
        {
              setTimeout(Silverlight.WaitForInstallCompletion, 3000);
        }    
    }
};
//////////////////////////////////////////////////////////////////
//
// __startup:
//
// Performs startup tasks. 
//////////////////////////////////////////////////////////////////
Silverlight.__startup = function()
{
    navigator.plugins.refresh();
    Silverlight.isBrowserRestartRequired = Silverlight.isInstalled(null);
    if (!Silverlight.isBrowserRestartRequired)
    {
        Silverlight.WaitForInstallCompletion();
        if (!Silverlight.__installationEventFired)
        {
            Silverlight.onInstallRequired();
            Silverlight.__installationEventFired = true;
        }
    }
    else if (window.navigator.mimeTypes)
    {
        var mimeSL2 =   navigator.mimeTypes["application/x-silverlight-2"];
        var mimeSL2b2 = navigator.mimeTypes["application/x-silverlight-2-b2"];
        var mimeSL2b1 = navigator.mimeTypes["application/x-silverlight-2-b1"];
        var mimeHighestBeta = mimeSL2b1;
        if (mimeSL2b2)
            mimeHighestBeta = mimeSL2b2;
            
        if (!mimeSL2 && (mimeSL2b1 || mimeSL2b2))
        {
            if (!Silverlight.__installationEventFired)
            {
                Silverlight.onUpgradeRequired();
                Silverlight.__installationEventFired = true;
            }
        }
        else if (mimeSL2 && mimeHighestBeta)
        {
            if (mimeSL2.enabledPlugin &&
                mimeHighestBeta.enabledPlugin)
            {
                if (mimeSL2.enabledPlugin.description !=
                    mimeHighestBeta.enabledPlugin.description)
                {
                    if (!Silverlight.__installationEventFired)
                    {
                        Silverlight.onRestartRequired();
                        Silverlight.__installationEventFired = true;
                    }
                }
            }
        }
    }
    if (!Silverlight.disableAutoStartup)
    {
        if (window.removeEventListener)
        {
            window.removeEventListener('load', Silverlight.__startup, false);
        }
        else
        {
            window.detachEvent('onload', Silverlight.__startup);
        }
    }
};

///////////////////////////////////////////////////////////////////////////////
//
// This block wires up Silverlight.__startup to be executed once the page
// loads. This is the desired behavior for most sites. If, however, a site
// prefers to control the timing of the Silverlight.__startup call then it should
// put the following block of javascript into the webpage before this file is
// included:
//
//    <script type="text/javascript">
//        if (!window.Silverlight)
//        {
//            window.Silverlight = {};
//        }
//        Silverlight.disableAutoStartup = true;
//    </script> 
//
/////////////////////////////////////////////////////////////////////////////////

if (!Silverlight.disableAutoStartup)
{
    if (window.addEventListener)
    {
        window.addEventListener('load', Silverlight.__startup, false);
    }
    else
    {
        window.attachEvent('onload', Silverlight.__startup);
    }
}

///////////////////////////////////////////////////////////////////////////////
// createObject:
//
// Inserts a Silverlight <object> tag or installation experience into the HTML
// DOM based on the current installed state of Silverlight. 
//
/////////////////////////////////////////////////////////////////////////////////

Silverlight.createObject = function(source, parentElement, id, properties, events, initParams, userContext)
{
    var slPluginHelper = new Object();
    var slProperties = properties;
    var slEvents = events;
    
    slPluginHelper.version = slProperties.version;
    slProperties.source = source;    
    slPluginHelper.alt = slProperties.alt;
    
    //rename properties to their tag property names. For bacwards compatibility
    //with Silverlight.js version 1.0
    if ( initParams )
        slProperties.initParams = initParams;
    if ( slProperties.isWindowless && !slProperties.windowless)
        slProperties.windowless = slProperties.isWindowless;
    if ( slProperties.framerate && !slProperties.maxFramerate)
        slProperties.maxFramerate = slProperties.framerate;
    if ( id && !slProperties.id)
        slProperties.id = id;
    
    // remove elements which are not to be added to the instantiation tag
    delete slProperties.ignoreBrowserVer;
    delete slProperties.inplaceInstallPrompt;
    delete slProperties.version;
    delete slProperties.isWindowless;
    delete slProperties.framerate;
    delete slProperties.data;
    delete slProperties.src;
    delete slProperties.alt;


    // detect that the correct version of Silverlight is installed, else display install

    if (Silverlight.isInstalled(slPluginHelper.version))
    {
        //move unknown events to the slProperties array
        for (var name in slEvents)
        {
            if ( slEvents[name])
            {
                if ( name == "onLoad" && typeof slEvents[name] == "function" && slEvents[name].length != 1 )
                {
                    var onLoadHandler = slEvents[name];
                    slEvents[name]=function (sender){ return onLoadHandler(document.getElementById(id), userContext, sender)};
                }
                var handlerName = Silverlight.__getHandlerName(slEvents[name]);
                if ( handlerName != null )
                {
                    slProperties[name] = handlerName;
                    slEvents[name] = null;
                }
                else
                {
                    throw "typeof events."+name+" must be 'function' or 'string'";
                }
            }
        }
        slPluginHTML = Silverlight.buildHTML(slProperties);
    }
    //The control could not be instantiated. Show the installation prompt
    else 
    {
        slPluginHTML = Silverlight.buildPromptHTML(slPluginHelper);
    }

    // insert or return the HTML
    if(parentElement)
    {
        parentElement.innerHTML = slPluginHTML;
    }
    else
    {
        return slPluginHTML;
    }

};

///////////////////////////////////////////////////////////////////////////////
//
//  buildHTML:
//
//  create HTML that instantiates the control
//
///////////////////////////////////////////////////////////////////////////////
Silverlight.buildHTML = function( slProperties)
{
    var htmlBuilder = [];

    htmlBuilder.push('<object type=\"application/x-silverlight\" data="data:application/x-silverlight,"');
    if ( slProperties.id != null )
    {
        htmlBuilder.push(' id="' + Silverlight.HtmlAttributeEncode(slProperties.id) + '"');
    }
    if ( slProperties.width != null )
    {
        htmlBuilder.push(' width="' + slProperties.width+ '"');
    }
    if ( slProperties.height != null )
    {
        htmlBuilder.push(' height="' + slProperties.height + '"');
    }
    htmlBuilder.push(' >');
    
    delete slProperties.id;
    delete slProperties.width;
    delete slProperties.height;
    
    for (var name in slProperties)
    {
        if (slProperties[name])
        {
            htmlBuilder.push('<param name="'+Silverlight.HtmlAttributeEncode(name)+'" value="'+Silverlight.HtmlAttributeEncode(slProperties[name])+'" />');
        }
    }
    htmlBuilder.push('<\/object>');
    return htmlBuilder.join('');
};



//////////////////////////////////////////////////////////////////
//
// createObjectEx:
//
// takes a single parameter of all createObject 
// parameters enclosed in {}
//
//////////////////////////////////////////////////////////////////

Silverlight.createObjectEx = function(params)
{
    var parameters = params;
    var html = Silverlight.createObject(parameters.source, parameters.parentElement, parameters.id, parameters.properties, parameters.events, parameters.initParams, parameters.context);
    if (parameters.parentElement == null)
    {
        return html;
    }
};

///////////////////////////////////////////////////////////////////////////////////////////////
//
// buildPromptHTML
//
// Builds the HTML to prompt the user to download and install Silverlight
//
///////////////////////////////////////////////////////////////////////////////////////////////
Silverlight.buildPromptHTML = function(slPluginHelper)
{
    var slPluginHTML = "";
    var urlRoot = Silverlight.fwlinkRoot;
    var version = slPluginHelper.version ;
    if ( slPluginHelper.alt )
    {
        slPluginHTML = slPluginHelper.alt;
    }
    else
    {
        if (! version)
        {
            version="";
        }
        slPluginHTML = "<a href='javascript:Silverlight.getSilverlight(\"{1}\");' style='text-decoration: none;'><img src='{2}' alt='Get Microsoft Silverlight' style='border-style: none'/></a>";
        slPluginHTML = slPluginHTML.replace('{1}', version);
        slPluginHTML = slPluginHTML.replace('{2}', urlRoot + '161376');
    }
    
    return slPluginHTML;
};

///////////////////////////////////////////////////////////////////////////////////////////////
//
// getSilverlight:
//
// Navigates the browser to the appropriate Silverlight installer
//
///////////////////////////////////////////////////////////////////////////////////////////////
Silverlight.getSilverlight = function(version)
{
    if (Silverlight.onGetSilverlight )
    {
        Silverlight.onGetSilverlight();
    }
    
    var shortVer = "";
    var reqVerArray = String(version).split(".");
    if (reqVerArray.length > 1)
    {
        var majorNum = parseInt(reqVerArray[0] );
        if ( isNaN(majorNum) || majorNum < 2 )
        {
            shortVer = "1.0";
        }
        else
        {
            shortVer = reqVerArray[0]+'.'+reqVerArray[1];
        }
    }
    
    var verArg = "";
    
    if (shortVer.match(/^\d+\056\d+$/) )
    {
        verArg = "&v="+shortVer;
    }
    
    Silverlight.followFWLink("149156" + verArg);
};


///////////////////////////////////////////////////////////////////////////////////////////////
//
// followFWLink:
//
// Navigates to a url based on fwlinkid
//
///////////////////////////////////////////////////////////////////////////////////////////////
Silverlight.followFWLink = function(linkid)
{
    top.location=Silverlight.fwlinkRoot+String(linkid);
};

///////////////////////////////////////////////////////////////////////////////////////////////
//
// HtmlAttributeEncode:
//
// Encodes special characters in input strings as charcodes
//
///////////////////////////////////////////////////////////////////////////////////////////////
Silverlight.HtmlAttributeEncode = function( strInput )
{
      var c;
      var retVal = '';

    if(strInput == null)
      {
          return null;
    }
      
      for(var cnt = 0; cnt < strInput.length; cnt++)
      {
            c = strInput.charCodeAt(cnt);

            if (( ( c > 96 ) && ( c < 123 ) ) ||
                  ( ( c > 64 ) && ( c < 91 ) ) ||
                  ( ( c > 43 ) && ( c < 58 ) && (c!=47)) ||
                  ( c == 95 ))
            {
                  retVal = retVal + String.fromCharCode(c);
            }
            else
            {
                  retVal = retVal + '&#' + c + ';';
            }
      }
      
      return retVal;
};
///////////////////////////////////////////////////////////////////////////////
//
//  default_error_handler:
//
//  Default error handling function 
//
///////////////////////////////////////////////////////////////////////////////

Silverlight.default_error_handler = function (sender, args)
{
    var iErrorCode;
    var errorType = args.ErrorType;

    iErrorCode = args.ErrorCode;

    var errMsg = "\nSilverlight error message     \n" ;

    errMsg += "ErrorCode: "+ iErrorCode + "\n";


    errMsg += "ErrorType: " + errorType + "       \n";
    errMsg += "Message: " + args.ErrorMessage + "     \n";

    if (errorType == "ParserError")
    {
        errMsg += "XamlFile: " + args.xamlFile + "     \n";
        errMsg += "Line: " + args.lineNumber + "     \n";
        errMsg += "Position: " + args.charPosition + "     \n";
    }
    else if (errorType == "RuntimeError")
    {
        if (args.lineNumber != 0)
        {
            errMsg += "Line: " + args.lineNumber + "     \n";
            errMsg += "Position: " +  args.charPosition + "     \n";
        }
        errMsg += "MethodName: " + args.methodName + "     \n";
    }
    alert (errMsg);
};

///////////////////////////////////////////////////////////////////////////////////////////////
//
// __cleanup:
//
// Releases event handler resources when the page is unloaded
//
///////////////////////////////////////////////////////////////////////////////////////////////
Silverlight.__cleanup = function ()
{
    for (var i = Silverlight._silverlightCount - 1; i >= 0; i--) {
        window['__slEvent' + i] = null;
    }
    Silverlight._silverlightCount = 0;
    if (window.removeEventListener) { 
       window.removeEventListener('unload', Silverlight.__cleanup , false);
    }
    else { 
        window.detachEvent('onunload', Silverlight.__cleanup );
    }
};

///////////////////////////////////////////////////////////////////////////////////////////////
//
// __getHandlerName:
//
// Generates named event handlers for delegates.
//
///////////////////////////////////////////////////////////////////////////////////////////////
Silverlight.__getHandlerName = function (handler)
{
    var handlerName = "";
    if ( typeof handler == "string")
    {
        handlerName = handler;
    }
    else if ( typeof handler == "function" )
    {
        if (Silverlight._silverlightCount == 0)
        {
            if (window.addEventListener) 
            {
                window.addEventListener('unload', Silverlight.__cleanup , false);
            }
            else 
            {
                window.attachEvent('onunload', Silverlight.__cleanup );
            }
        }
        var count = Silverlight._silverlightCount++;
        handlerName = "__slEvent"+count;
        
        window[handlerName]=handler;
    }
    else
    {
        handlerName = null;
    }
    return handlerName;
};
//////////////////////////////////////////////////////////////////
//  
// onRequiredVersionAvailable:
//
// Called by version  verification control to notify the page that
// an appropriate build of Silverlight is available. The page 
// should respond by injecting the appropriate Silverlight control
//
//////////////////////////////////////////////////////////////////
Silverlight.onRequiredVersionAvailable = function() 
{

};
//////////////////////////////////////////////////////////////////
//  
// onRestartRequired:
//
// Called by version verification control to notify the page that
// an appropriate build of Silverlight is installed but not loaded. 
// The page should respond by injecting a clear and visible 
// "Thanks for installing. Please restart your browser and return
// to mysite.com" or equivalent into the browser DOM
//
//////////////////////////////////////////////////////////////////
Silverlight.onRestartRequired = function() 
{

};
//////////////////////////////////////////////////////////////////
//  
// onUpgradeRequired:
//
// Called by version verification control to notify the page that
// Silverlight must be upgraded. The page should respond by 
// injecting a clear, visible, and actionable upgrade message into
// the DOM. The message must inform the user that they need to 
// upgrade Silverlight to use the page. They are already somewhat
// familiar with the Silverlight product when they encounter this.
// Silverlight should be mentioned so the user expects to see that
// string in the installer UI. However, the Silverlight-powered
// application should be the focus of the solicitation. The user
// wants the app. Silverlight is a means to the app.
// 
// The upgrade solicitation will have a button that directs 
// the user to the Silverlight installer. Upon click the button
// should both kick off a download of the installer URL and replace
// the Upgrade text with "Thanks for downloading. When the upgarde
// is complete please restart your browser and return to 
// mysite.com" or equivalent.
//
// Note: For a more interesting upgrade UX we can use Silverlight
// 1.0-style XAML for this upgrade experience. Contact PiotrP for
// details.
//
//////////////////////////////////////////////////////////////////
Silverlight.onUpgradeRequired = function() 
{

};
//////////////////////////////////////////////////////////////////
//  
// onInstallRequired:
//
// Called by Silverlight.checkInstallStatus to notify the page
// that Silverlight has not been installed by this user.
// The page should respond by 
// injecting a clear, visible, and actionable upgrade message into
// the DOM. The message must inform the user that they need to 
// download and install components needed to use the page. 
// Silverlight should be mentioned so the user expects to see that
// string in the installer UI. However, the Silverlight-powered
// application should be the focus of the solicitation. The user
// wants the app. Silverlight is a means to the app.
// 
// The installation solicitation will have a button that directs 
// the user to the Silverlight installer. Upon click the button
// should both kick off a download of the installer URL and replace
// the Upgrade text with "Thanks for downloading. When installation
// is complete you may need to refresh the page to view this 
// content" or equivalent.
//
//////////////////////////////////////////////////////////////////
Silverlight.onInstallRequired = function() 
{

};

//////////////////////////////////////////////////////////////////
//  
// IsVersionAvailableOnError:
//
// This function should be called at the beginning of a web page's
// Silverlight error handler. It will determine if the required 
// version of Silverlight is installed and available in the 
// current process.
//
// During its execution the function will trigger one of the 
// Silverlight installation state events, if appropriate.
//
// Sender and Args should be passed through from  the calling
// onError handler's parameters. 
//
// The associated Sivlerlight <object> tag must have
// minRuntimeVersion set and should have autoUpgrade set to false.
//
//////////////////////////////////////////////////////////////////
Silverlight.IsVersionAvailableOnError = function(sender, args)
{
    var retVal = false;
    try
    {
        if (args.ErrorCode == 8001 && !Silverlight.__installationEventFired)
        {
            Silverlight.onUpgradeRequired();
            Silverlight.__installationEventFired = true;
        }
        else if (args.ErrorCode == 8002 && !Silverlight.__installationEventFired)
        {
            Silverlight.onRestartRequired();
            Silverlight.__installationEventFired = true;
        }
        // this handles upgrades from 1.0. That control did not
        // understand the minRuntimeVerison parameter. It also
        // did not know how to parse XAP files, so would throw
        // Parse Error (5014). A Beta 2 control may throw 2106
        else if (args.ErrorCode == 5014 || args.ErrorCode == 2106)
        {
            if (Silverlight.__verifySilverlight2UpgradeSuccess(args.getHost()))
            {
                retVal = true;
            }
        }
        else
        {
            retVal = true;
        }
    }
    catch (e)
    {
    }
    return retVal;
};
//////////////////////////////////////////////////////////////////
//  
// IsVersionAvailableOnLoad:
//
// This function should be called at the beginning of a web page's
// Silverlight onLoad handler. It will determine if the required 
// version of Silverlight is installed and available in the 
// current process.
//
// During its execution the function will trigger one of the 
// Silverlight installation state events, if appropriate.
//
// Sender should be passed through from  the calling
// onError handler's parameters. 
//
// The associated Sivlerlight <object> tag must have
// minRuntimeVersion set and should have autoUpgrade set to false.
//
//////////////////////////////////////////////////////////////////
Silverlight.IsVersionAvailableOnLoad = function(sender)
{
    var retVal = false;
    try
    {
        if (Silverlight.__verifySilverlight2UpgradeSuccess(sender.getHost()))
        {
            retVal = true;
        }
    }
    catch (e)
    {
    }
    return retVal;
};
//////////////////////////////////////////////////////////////////
//
// __verifySilverlight2UpgradeSuccess:
//
// This internal function helps identify installation state by
// taking advantage of behavioral differences between the
// 1.0 and 2.0 releases of Silverlight. 
//
//////////////////////////////////////////////////////////////////
Silverlight.__verifySilverlight2UpgradeSuccess = function(host)
{
    var retVal = false;
    var version = "4.0.50401";
    var installationEvent = null;

    try
    {
        if (host.IsVersionSupported(version + ".99"))
        {
            installationEvent = Silverlight.onRequiredVersionAvailable;
            retVal = true;
        }
        else if (host.IsVersionSupported(version + ".0"))
        {
            installationEvent = Silverlight.onRestartRequired;
        }
        else
        {
            installationEvent = Silverlight.onUpgradeRequired;
        }

        if (installationEvent && !Silverlight.__installationEventFired)
        {
            installationEvent();
            Silverlight.__installationEventFired = true;
        }
    }
    catch (e)
    {
    }
    return retVal;
};
//v1.7
// Flash Player Version Detection
// Detect Client Browser type
// Copyright 2005-2007 Adobe Systems Incorporated.  All rights reserved.
var isIE  = (navigator.appVersion.indexOf("MSIE") != -1) ? true : false;
var isWin = (navigator.appVersion.toLowerCase().indexOf("win") != -1) ? true : false;
var isOpera = (navigator.userAgent.indexOf("Opera") != -1) ? true : false;

function ControlVersion()
{
	var version;
	var axo;
	var e;

	// NOTE : new ActiveXObject(strFoo) throws an exception if strFoo isn't in the registry

	try {
		// version will be set for 7.X or greater players
		axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
		version = axo.GetVariable("$version");
	} catch (e) {
	}

	if (!version)
	{
		try {
			// version will be set for 6.X players only
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
			
			// installed player is some revision of 6.0
			// GetVariable("$version") crashes for versions 6.0.22 through 6.0.29,
			// so we have to be careful. 
			
			// default to the first public version
			version = "WIN 6,0,21,0";

			// throws if AllowScripAccess does not exist (introduced in 6.0r47)		
			axo.AllowScriptAccess = "always";

			// safe to call for 6.0r47 or greater
			version = axo.GetVariable("$version");

		} catch (e) {
		}
	}

	if (!version)
	{
		try {
			// version will be set for 4.X or 5.X player
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
			version = axo.GetVariable("$version");
		} catch (e) {
		}
	}

	if (!version)
	{
		try {
			// version will be set for 3.X player
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
			version = "WIN 3,0,18,0";
		} catch (e) {
		}
	}

	if (!version)
	{
		try {
			// version will be set for 2.X player
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
			version = "WIN 2,0,0,11";
		} catch (e) {
			version = -1;
		}
	}
	
	return version;
}

// JavaScript helper required to detect Flash Player PlugIn version information
function GetSwfVer(){
	// NS/Opera version >= 3 check for Flash plugin in plugin array
	var flashVer = -1;
	
	if (navigator.plugins != null && navigator.plugins.length > 0) {
		if (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]) {
			var swVer2 = navigator.plugins["Shockwave Flash 2.0"] ? " 2.0" : "";
			var flashDescription = navigator.plugins["Shockwave Flash" + swVer2].description;
			var descArray = flashDescription.split(" ");
			var tempArrayMajor = descArray[2].split(".");			
			var versionMajor = tempArrayMajor[0];
			var versionMinor = tempArrayMajor[1];
			var versionRevision = descArray[3];
			if (versionRevision == "") {
				versionRevision = descArray[4];
			}
			if (versionRevision[0] == "d") {
				versionRevision = versionRevision.substring(1);
			} else if (versionRevision[0] == "r") {
				versionRevision = versionRevision.substring(1);
				if (versionRevision.indexOf("d") > 0) {
					versionRevision = versionRevision.substring(0, versionRevision.indexOf("d"));
				}
			}
			var flashVer = versionMajor + "." + versionMinor + "." + versionRevision;
		}
	}
	// MSN/WebTV 2.6 supports Flash 4
	else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.6") != -1) flashVer = 4;
	// WebTV 2.5 supports Flash 3
	else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.5") != -1) flashVer = 3;
	// older WebTV supports Flash 2
	else if (navigator.userAgent.toLowerCase().indexOf("webtv") != -1) flashVer = 2;
	else if ( isIE && isWin && !isOpera ) {
		flashVer = ControlVersion();
	}	
	return flashVer;
}

// When called with reqMajorVer, reqMinorVer, reqRevision returns true if that version or greater is available
function DetectFlashVer(reqMajorVer, reqMinorVer, reqRevision)
{
	versionStr = GetSwfVer();
	if (versionStr == -1 ) {
		return false;
	} else if (versionStr != 0) {
		if(isIE && isWin && !isOpera) {
			// Given "WIN 2,0,0,11"
			tempArray         = versionStr.split(" "); 	// ["WIN", "2,0,0,11"]
			tempString        = tempArray[1];			// "2,0,0,11"
			versionArray      = tempString.split(",");	// ['2', '0', '0', '11']
		} else {
			versionArray      = versionStr.split(".");
		}
		var versionMajor      = versionArray[0];
		var versionMinor      = versionArray[1];
		var versionRevision   = versionArray[2];

        	// is the major.revision >= requested major.revision AND the minor version >= requested minor
		if (versionMajor > parseFloat(reqMajorVer)) {
			return true;
		} else if (versionMajor == parseFloat(reqMajorVer)) {
			if (versionMinor > parseFloat(reqMinorVer))
				return true;
			else if (versionMinor == parseFloat(reqMinorVer)) {
				if (versionRevision >= parseFloat(reqRevision))
					return true;
			}
		}
		return false;
	}
}

function AC_AddExtension(src, ext)
{
  if (src.indexOf('?') != -1)
    return src.replace(/\?/, ext+'?'); 
  else
    return src + ext;
}

function AC_Generateobj(objAttrs, params, embedAttrs) 
{ 
  var str = '<div style="position:absolute; top:-10px;">';
  if (isIE && isWin && !isOpera)
  {
    str += '<object ';
    for (var i in objAttrs)
    {
      str += i + '="' + objAttrs[i] + '" ';
    }
    str += '>';
    for (var i in params)
    {
      str += '<param name="' + i + '" value="' + params[i] + '" /> ';
    }
    str += '</object>';
  }
  else
  {
    str += '<embed ';
    for (var i in embedAttrs)
    {
      str += i + '="' + embedAttrs[i] + '" ';
    }
    str += '> </embed>';
  }
  str += '</div>';  
  return str;
}

function AC_FL_RunContent(){
  var ret = 
    AC_GetArgs
    (  arguments, ".swf", "movie", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
     , "application/x-shockwave-flash"
    );
  return AC_Generateobj(ret.objAttrs, ret.params, ret.embedAttrs);
}

function AC_GetArgs(args, ext, srcParamName, classid, mimeType){
  var ret = new Object();
  ret.embedAttrs = new Object();
  ret.params = new Object();
  ret.objAttrs = new Object();
  for (var i=0; i < args.length; i=i+2){
    var currArg = args[i].toLowerCase();    

    switch (currArg){	
      case "classid":
        break;
      case "pluginspage":
        ret.embedAttrs[args[i]] = args[i+1];
        break;
      case "src":
      case "movie":	
        args[i+1] = AC_AddExtension(args[i+1], ext);
        ret.embedAttrs["src"] = args[i+1];
        ret.params[srcParamName] = args[i+1];
        break;
      case "onafterupdate":
      case "onbeforeupdate":
      case "onblur":
      case "oncellchange":
      case "onclick":
      case "ondblclick":
      case "ondrag":
      case "ondragend":
      case "ondragenter":
      case "ondragleave":
      case "ondragover":
      case "ondrop":
      case "onfinish":
      case "onfocus":
      case "onhelp":
      case "onmousedown":
      case "onmouseup":
      case "onmouseover":
      case "onmousemove":
      case "onmouseout":
      case "onkeypress":
      case "onkeydown":
      case "onkeyup":
      case "onload":
      case "onlosecapture":
      case "onpropertychange":
      case "onreadystatechange":
      case "onrowsdelete":
      case "onrowenter":
      case "onrowexit":
      case "onrowsinserted":
      case "onstart":
      case "onscroll":
      case "onbeforeeditfocus":
      case "onactivate":
      case "onbeforedeactivate":
      case "ondeactivate":
      case "type":
      case "codebase":
      case "id":
        ret.objAttrs[args[i]] = args[i+1];
        break;
      case "width":
      case "height":
      case "align":
      case "vspace": 
      case "hspace":
      case "class":
      case "title":
      case "accesskey":
      case "name":
      case "tabindex":
        ret.embedAttrs[args[i]] = ret.objAttrs[args[i]] = args[i+1];
        break;
      default:
        ret.embedAttrs[args[i]] = ret.params[args[i]] = args[i+1];
    }
  }
  ret.objAttrs["classid"] = classid;
  if (mimeType) ret.embedAttrs["type"] = mimeType;
  return ret;
}

Function.__typeName="Function";Function.__class=true;Function.createCallback=function(b,a){return function(){var e=arguments.length;if(e>0){var d=[];for(var c=0;c<e;c++)d[c]=arguments[c];d[e]=a;return b.apply(this,d)}return b.call(this,a)}};Function.createDelegate=function(a,b){return function(){return b.apply(a,arguments)}};Function.emptyFunction=Function.emptyMethod=function(){};Function._validateParams=function(e,c){var a;a=Function._validateParameterCount(e,c);if(a){a.popStackFrame();return a}for(var b=0;b<e.length;b++){var d=c[Math.min(b,c.length-1)],f=d.name;if(d.parameterArray)f+="["+(b-c.length+1)+"]";a=Function._validateParameter(e[b],d,f);if(a){a.popStackFrame();return a}}return null};Function._validateParameterCount=function(e,a){var c=a.length,d=0;for(var b=0;b<a.length;b++)if(a[b].parameterArray)c=Number.MAX_VALUE;else if(!a[b].optional)d++;if(e.length<d||e.length>c){var f=Error.parameterCount();f.popStackFrame();return f}return null};Function._validateParameter=function(c,a,h){var b,g=a.type,l=!!a.integer,k=!!a.domElement,m=!!a.mayBeNull;b=Function._validateParameterType(c,g,l,k,m,h);if(b){b.popStackFrame();return b}var e=a.elementType,f=!!a.elementMayBeNull;if(g===Array&&typeof c!=="undefined"&&c!==null&&(e||!f)){var j=!!a.elementInteger,i=!!a.elementDomElement;for(var d=0;d<c.length;d++){var n=c[d];b=Function._validateParameterType(n,e,j,i,f,h+"["+d+"]");if(b){b.popStackFrame();return b}}}return null};Function._validateParameterType=function(a,c,n,m,k,d){var b;if(typeof a==="undefined")if(k)return null;else{b=Error.argumentUndefined(d);b.popStackFrame();return b}if(a===null)if(k)return null;else{b=Error.argumentNull(d);b.popStackFrame();return b}if(c&&c.__enum){if(typeof a!=="number"){b=Error.argumentType(d,Object.getType(a),c);b.popStackFrame();return b}if(a%1===0){var e=c.prototype;if(!c.__flags||a===0){for(var i in e)if(e[i]===a)return null}else{var l=a;for(var i in e){var f=e[i];if(f===0)continue;if((f&a)===f)l-=f;if(l===0)return null}}}b=Error.argumentOutOfRange(d,a,String.format(Sys.Res.enumInvalidValue,a,c.getName()));b.popStackFrame();return b}if(m){var h;if(typeof a.nodeType!=="number"){var g=a.ownerDocument||a.document||a;if(g!=a){var j=g.defaultView||g.parentWindow;h=j!=a&&!(j.document&&a.document&&j.document===a.document)}else h=typeof g.body==="undefined"}else h=a.nodeType===3;if(h){b=Error.argument(d,Sys.Res.argumentDomElement);b.popStackFrame();return b}}if(c&&!c.isInstanceOfType(a)){b=Error.argumentType(d,Object.getType(a),c);b.popStackFrame();return b}if(c===Number&&n)if(a%1!==0){b=Error.argumentOutOfRange(d,a,Sys.Res.argumentInteger);b.popStackFrame();return b}return null};Error.__typeName="Error";Error.__class=true;Error.create=function(d,b){var a=new Error(d);a.message=d;if(b)for(var c in b)a[c]=b[c];a.popStackFrame();return a};Error.argument=function(a,c){var b="Sys.ArgumentException: "+(c?c:Sys.Res.argument);if(a)b+="\n"+String.format(Sys.Res.paramName,a);var d=Error.create(b,{name:"Sys.ArgumentException",paramName:a});d.popStackFrame();return d};Error.argumentNull=function(a,c){var b="Sys.ArgumentNullException: "+(c?c:Sys.Res.argumentNull);if(a)b+="\n"+String.format(Sys.Res.paramName,a);var d=Error.create(b,{name:"Sys.ArgumentNullException",paramName:a});d.popStackFrame();return d};Error.argumentOutOfRange=function(c,a,d){var b="Sys.ArgumentOutOfRangeException: "+(d?d:Sys.Res.argumentOutOfRange);if(c)b+="\n"+String.format(Sys.Res.paramName,c);if(typeof a!=="undefined"&&a!==null)b+="\n"+String.format(Sys.Res.actualValue,a);var e=Error.create(b,{name:"Sys.ArgumentOutOfRangeException",paramName:c,actualValue:a});e.popStackFrame();return e};Error.argumentType=function(d,c,b,e){var a="Sys.ArgumentTypeException: ";if(e)a+=e;else if(c&&b)a+=String.format(Sys.Res.argumentTypeWithTypes,c.getName(),b.getName());else a+=Sys.Res.argumentType;if(d)a+="\n"+String.format(Sys.Res.paramName,d);var f=Error.create(a,{name:"Sys.ArgumentTypeException",paramName:d,actualType:c,expectedType:b});f.popStackFrame();return f};Error.argumentUndefined=function(a,c){var b="Sys.ArgumentUndefinedException: "+(c?c:Sys.Res.argumentUndefined);if(a)b+="\n"+String.format(Sys.Res.paramName,a);var d=Error.create(b,{name:"Sys.ArgumentUndefinedException",paramName:a});d.popStackFrame();return d};Error.format=function(a){var c="Sys.FormatException: "+(a?a:Sys.Res.format),b=Error.create(c,{name:"Sys.FormatException"});b.popStackFrame();return b};Error.invalidOperation=function(a){var c="Sys.InvalidOperationException: "+(a?a:Sys.Res.invalidOperation),b=Error.create(c,{name:"Sys.InvalidOperationException"});b.popStackFrame();return b};Error.notImplemented=function(a){var c="Sys.NotImplementedException: "+(a?a:Sys.Res.notImplemented),b=Error.create(c,{name:"Sys.NotImplementedException"});b.popStackFrame();return b};Error.parameterCount=function(a){var c="Sys.ParameterCountException: "+(a?a:Sys.Res.parameterCount),b=Error.create(c,{name:"Sys.ParameterCountException"});b.popStackFrame();return b};Error.prototype.popStackFrame=function(){if(typeof this.stack==="undefined"||this.stack===null||typeof this.fileName==="undefined"||this.fileName===null||typeof this.lineNumber==="undefined"||this.lineNumber===null)return;var a=this.stack.split("\n"),c=a[0],e=this.fileName+":"+this.lineNumber;while(typeof c!=="undefined"&&c!==null&&c.indexOf(e)===-1){a.shift();c=a[0]}var d=a[1];if(typeof d==="undefined"||d===null)return;var b=d.match(/@(.*):(\d+)$/);if(typeof b==="undefined"||b===null)return;this.fileName=b[1];this.lineNumber=parseInt(b[2]);a.shift();this.stack=a.join("\n")};Object.__typeName="Object";Object.__class=true;Object.getType=function(b){var a=b.constructor;if(!a||typeof a!=="function"||!a.__typeName||a.__typeName==="Object")return Object;return a};Object.getTypeName=function(a){return Object.getType(a).getName()};String.__typeName="String";String.__class=true;String.prototype.endsWith=function(a){return this.substr(this.length-a.length)===a};String.prototype.startsWith=function(a){return this.substr(0,a.length)===a};String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")};String.prototype.trimEnd=function(){return this.replace(/\s+$/,"")};String.prototype.trimStart=function(){return this.replace(/^\s+/,"")};String.format=function(){return String._toFormattedString(false,arguments)};String.localeFormat=function(){return String._toFormattedString(true,arguments)};String._toFormattedString=function(l,j){var c="",e=j[0];for(var a=0;true;){var f=e.indexOf("{",a),d=e.indexOf("}",a);if(f<0&&d<0){c+=e.slice(a);break}if(d>0&&(d<f||f<0)){c+=e.slice(a,d+1);a=d+2;continue}c+=e.slice(a,f);a=f+1;if(e.charAt(a)==="{"){c+="{";a++;continue}if(d<0)break;var h=e.substring(a,d),g=h.indexOf(":"),k=parseInt(g<0?h:h.substring(0,g),10)+1,i=g<0?"":h.substring(g+1),b=j[k];if(typeof b==="undefined"||b===null)b="";if(b.toFormattedString)c+=b.toFormattedString(i);else if(l&&b.localeFormat)c+=b.localeFormat(i);else if(b.format)c+=b.format(i);else c+=b.toString();a=d+1}return c};Boolean.__typeName="Boolean";Boolean.__class=true;Boolean.parse=function(b){var a=b.trim().toLowerCase();if(a==="false")return false;if(a==="true")return true};Date.__typeName="Date";Date.__class=true;Date._appendPreOrPostMatch=function(e,b){var d=0,a=false;for(var c=0,g=e.length;c<g;c++){var f=e.charAt(c);switch(f){case "'":if(a)b.append("'");else d++;a=false;break;case "\\":if(a)b.append("\\");a=!a;break;default:b.append(f);a=false}}return d};Date._expandFormat=function(a,b){if(!b)b="F";if(b.length===1)switch(b){case "d":return a.ShortDatePattern;case "D":return a.LongDatePattern;case "t":return a.ShortTimePattern;case "T":return a.LongTimePattern;case "F":return a.FullDateTimePattern;case "M":case "m":return a.MonthDayPattern;case "s":return a.SortableDateTimePattern;case "Y":case "y":return a.YearMonthPattern;default:throw Error.format(Sys.Res.formatInvalidString)}return b};Date._expandYear=function(c,a){if(a<100){var b=(new Date).getFullYear();a+=b-b%100;if(a>c.Calendar.TwoDigitYearMax)return a-100}return a};Date._getParseRegExp=function(b,e){if(!b._parseRegExp)b._parseRegExp={};else if(b._parseRegExp[e])return b._parseRegExp[e];var c=Date._expandFormat(b,e);c=c.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g,"\\\\$1");var a=new Sys.StringBuilder("^"),j=[],f=0,i=0,h=Date._getTokenRegExp(),d;while((d=h.exec(c))!==null){var l=c.slice(f,d.index);f=h.lastIndex;i+=Date._appendPreOrPostMatch(l,a);if(i%2===1){a.append(d[0]);continue}switch(d[0]){case "dddd":case "ddd":case "MMMM":case "MMM":a.append("(\\D+)");break;case "tt":case "t":a.append("(\\D*)");break;case "yyyy":a.append("(\\d{4})");break;case "fff":a.append("(\\d{3})");break;case "ff":a.append("(\\d{2})");break;case "f":a.append("(\\d)");break;case "dd":case "d":case "MM":case "M":case "yy":case "y":case "HH":case "H":case "hh":case "h":case "mm":case "m":case "ss":case "s":a.append("(\\d\\d?)");break;case "zzz":a.append("([+-]?\\d\\d?:\\d{2})");break;case "zz":case "z":a.append("([+-]?\\d\\d?)")}Array.add(j,d[0])}Date._appendPreOrPostMatch(c.slice(f),a);a.append("$");var k=a.toString().replace(/\s+/g,"\\s+"),g={"regExp":k,"groups":j};b._parseRegExp[e]=g;return g};Date._getTokenRegExp=function(){return /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z/g};Date.parseLocale=function(a){return Date._parse(a,Sys.CultureInfo.CurrentCulture,arguments)};Date.parseInvariant=function(a){return Date._parse(a,Sys.CultureInfo.InvariantCulture,arguments)};Date._parse=function(g,c,h){var e=false;for(var a=1,i=h.length;a<i;a++){var f=h[a];if(f){e=true;var b=Date._parseExact(g,f,c);if(b)return b}}if(!e){var d=c._getDateTimeFormats();for(var a=0,i=d.length;a<i;a++){var b=Date._parseExact(g,d[a],c);if(b)return b}}return null};Date._parseExact=function(s,y,j){s=s.trim();var m=j.dateTimeFormat,v=Date._getParseRegExp(m,y),x=(new RegExp(v.regExp)).exec(s);if(x===null)return null;var w=v.groups,f=null,c=null,h=null,g=null,d=0,n=0,o=0,e=0,k=null,r=false;for(var p=0,z=w.length;p<z;p++){var a=x[p+1];if(a)switch(w[p]){case "dd":case "d":h=parseInt(a,10);if(h<1||h>31)return null;break;case "MMMM":c=j._getMonthIndex(a);if(c<0||c>11)return null;break;case "MMM":c=j._getAbbrMonthIndex(a);if(c<0||c>11)return null;break;case "M":case "MM":var c=parseInt(a,10)-1;if(c<0||c>11)return null;break;case "y":case "yy":f=Date._expandYear(m,parseInt(a,10));if(f<0||f>9999)return null;break;case "yyyy":f=parseInt(a,10);if(f<0||f>9999)return null;break;case "h":case "hh":d=parseInt(a,10);if(d===12)d=0;if(d<0||d>11)return null;break;case "H":case "HH":d=parseInt(a,10);if(d<0||d>23)return null;break;case "m":case "mm":n=parseInt(a,10);if(n<0||n>59)return null;break;case "s":case "ss":o=parseInt(a,10);if(o<0||o>59)return null;break;case "tt":case "t":var u=a.toUpperCase();r=u===m.PMDesignator.toUpperCase();if(!r&&u!==m.AMDesignator.toUpperCase())return null;break;case "f":e=parseInt(a,10)*100;if(e<0||e>999)return null;break;case "ff":e=parseInt(a,10)*10;if(e<0||e>999)return null;break;case "fff":e=parseInt(a,10);if(e<0||e>999)return null;break;case "dddd":g=j._getDayIndex(a);if(g<0||g>6)return null;break;case "ddd":g=j._getAbbrDayIndex(a);if(g<0||g>6)return null;break;case "zzz":var q=a.split(/:/);if(q.length!==2)return null;var i=parseInt(q[0],10);if(i<-12||i>13)return null;var l=parseInt(q[1],10);if(l<0||l>59)return null;k=i*60+(a.startsWith("-")?-l:l);break;case "z":case "zz":var i=parseInt(a,10);if(i<-12||i>13)return null;k=i*60}}var b=new Date;if(f===null)f=b.getFullYear();if(c===null)c=b.getMonth();if(h===null)h=b.getDate();b.setFullYear(f,c,h);if(b.getDate()!==h)return null;if(g!==null&&b.getDay()!==g)return null;if(r&&d<12)d+=12;b.setHours(d,n,o,e);if(k!==null){var t=b.getMinutes()-(k+b.getTimezoneOffset());b.setHours(b.getHours()+parseInt(t/60,10),t%60)}return b};Date.prototype.format=function(a){return this._toFormattedString(a,Sys.CultureInfo.InvariantCulture)};Date.prototype.localeFormat=function(a){return this._toFormattedString(a,Sys.CultureInfo.CurrentCulture)};Date.prototype._toFormattedString=function(e,h){if(!e||e.length===0||e==="i")if(h&&h.name.length>0)return this.toLocaleString();else return this.toString();var d=h.dateTimeFormat;e=Date._expandFormat(d,e);var a=new Sys.StringBuilder,b;function c(a){if(a<10)return "0"+a;return a.toString()}function g(a){if(a<10)return "00"+a;if(a<100)return "0"+a;return a.toString()}var j=0,i=Date._getTokenRegExp();for(;true;){var l=i.lastIndex,f=i.exec(e),k=e.slice(l,f?f.index:e.length);j+=Date._appendPreOrPostMatch(k,a);if(!f)break;if(j%2===1){a.append(f[0]);continue}switch(f[0]){case "dddd":a.append(d.DayNames[this.getDay()]);break;case "ddd":a.append(d.AbbreviatedDayNames[this.getDay()]);break;case "dd":a.append(c(this.getDate()));break;case "d":a.append(this.getDate());break;case "MMMM":a.append(d.MonthNames[this.getMonth()]);break;case "MMM":a.append(d.AbbreviatedMonthNames[this.getMonth()]);break;case "MM":a.append(c(this.getMonth()+1));break;case "M":a.append(this.getMonth()+1);break;case "yyyy":a.append(this.getFullYear());break;case "yy":a.append(c(this.getFullYear()%100));break;case "y":a.append(this.getFullYear()%100);break;case "hh":b=this.getHours()%12;if(b===0)b=12;a.append(c(b));break;case "h":b=this.getHours()%12;if(b===0)b=12;a.append(b);break;case "HH":a.append(c(this.getHours()));break;case "H":a.append(this.getHours());break;case "mm":a.append(c(this.getMinutes()));break;case "m":a.append(this.getMinutes());break;case "ss":a.append(c(this.getSeconds()));break;case "s":a.append(this.getSeconds());break;case "tt":a.append(this.getHours()<12?d.AMDesignator:d.PMDesignator);break;case "t":a.append((this.getHours()<12?d.AMDesignator:d.PMDesignator).charAt(0));break;case "f":a.append(g(this.getMilliseconds()).charAt(0));break;case "ff":a.append(g(this.getMilliseconds()).substr(0,2));break;case "fff":a.append(g(this.getMilliseconds()));break;case "z":b=this.getTimezoneOffset()/60;a.append((b<=0?"+":"-")+Math.floor(Math.abs(b)));break;case "zz":b=this.getTimezoneOffset()/60;a.append((b<=0?"+":"-")+c(Math.floor(Math.abs(b))));break;case "zzz":b=this.getTimezoneOffset()/60;a.append((b<=0?"+":"-")+c(Math.floor(Math.abs(b)))+d.TimeSeparator+c(Math.abs(this.getTimezoneOffset()%60)))}}return a.toString()};Number.__typeName="Number";Number.__class=true;Number.parseLocale=function(a){return Number._parse(a,Sys.CultureInfo.CurrentCulture)};Number.parseInvariant=function(a){return Number._parse(a,Sys.CultureInfo.InvariantCulture)};Number._parse=function(b,n){b=b.trim();if(b.match(/^[+-]?infinity$/i))return parseFloat(b);if(b.match(/^0x[a-f0-9]+$/i))return parseInt(b);var a=n.numberFormat,f=Number._parseNumberNegativePattern(b,a,a.NumberNegativePattern),h=f[0],d=f[1];if(h===""&&a.NumberNegativePattern!==1){f=Number._parseNumberNegativePattern(b,a,1);h=f[0];d=f[1]}if(h==="")h="+";var j,c,e=d.indexOf("e");if(e<0)e=d.indexOf("E");if(e<0){c=d;j=null}else{c=d.substr(0,e);j=d.substr(e+1)}var g,k,m=c.indexOf(a.NumberDecimalSeparator);if(m<0){g=c;k=null}else{g=c.substr(0,m);k=c.substr(m+a.NumberDecimalSeparator.length)}g=g.split(a.NumberGroupSeparator).join("");var l=h+g;if(k!==null)l+="."+k;if(j!==null){var i=Number._parseNumberNegativePattern(j,a,1);if(i[0]==="")i[0]="+";l+="e"+i[0]+i[1]}if(l.match(/^[+-]?\d*\.?\d*(e[+-]?\d+)?$/))return parseFloat(l);return Number.NaN};Number._parseNumberNegativePattern=function(a,d,e){var b=d.NegativeSign,c=d.PositiveSign;switch(e){case 4:b=" "+b;c=" "+c;case 3:if(a.endsWith(b))return ["-",a.substr(0,a.length-b.length)];else if(a.endsWith(c))return ["+",a.substr(0,a.length-c.length)];break;case 2:b+=" ";c+=" ";case 1:if(a.startsWith(b))return ["-",a.substr(b.length)];else if(a.startsWith(c))return ["+",a.substr(c.length)];break;case 0:if(a.startsWith("(")&&a.endsWith(")"))return ["-",a.substr(1,a.length-2)]}return ["",a]};Number.prototype.format=function(a){return this._toFormattedString(a,Sys.CultureInfo.InvariantCulture)};Number.prototype.localeFormat=function(a){return this._toFormattedString(a,Sys.CultureInfo.CurrentCulture)};Number.prototype._toFormattedString=function(d,j){if(!d||d.length===0||d==="i")if(j&&j.name.length>0)return this.toLocaleString();else return this.toString();var q=["n %","n%","%n"],p=["-n %","-n%","-%n"],r=["(n)","-n","- n","n-","n -"],o=["$n","n$","$ n","n $"],n=["($n)","-$n","$-n","$n-","(n$)","-n$","n-$","n$-","-n $","-$ n","n $-","$ n-","$ -n","n- $","($ n)","(n $)"];function i(p,k,j,l,o){var e=j[0],g=1,c=p.toString(),a="",m="",i=c.split(".");if(i.length>1){c=i[0];a=i[1];var h=a.split(/e/i);if(h.length>1){a=h[0];m="e"+h[1]}}if(k>0){var f=a.length-k;if(f>0)a=a.slice(0,k);else if(f<0)for(var n=0;n<Math.abs(f);n++)a+="0";a=o+a}else a="";a+=m;var b=c.length-1,d="";while(b>=0){if(e===0||e>b)if(d.length>0)return c.slice(0,b+1)+l+d+a;else return c.slice(0,b+1)+a;if(d.length>0)d=c.slice(b-e+1,b+1)+l+d;else d=c.slice(b-e+1,b+1);b-=e;if(g<j.length){e=j[g];g++}}return c.slice(0,b+1)+l+d+a}var a=j.numberFormat,e=Math.abs(this);if(!d)d="D";var b=-1;if(d.length>1)b=parseInt(d.slice(1),10);var c;switch(d.charAt(0)){case "d":case "D":c="n";if(b!==-1){var g=""+e,k=b-g.length;if(k>0)for(var m=0;m<k;m++)g="0"+g;e=g}if(this<0)e=-e;break;case "c":case "C":if(this<0)c=n[a.CurrencyNegativePattern];else c=o[a.CurrencyPositivePattern];if(b===-1)b=a.CurrencyDecimalDigits;e=i(Math.abs(this),b,a.CurrencyGroupSizes,a.CurrencyGroupSeparator,a.CurrencyDecimalSeparator);break;case "n":case "N":if(this<0)c=r[a.NumberNegativePattern];else c="n";if(b===-1)b=a.NumberDecimalDigits;e=i(Math.abs(this),b,a.NumberGroupSizes,a.NumberGroupSeparator,a.NumberDecimalSeparator);break;case "p":case "P":if(this<0)c=p[a.PercentNegativePattern];else c=q[a.PercentPositivePattern];if(b===-1)b=a.PercentDecimalDigits;e=i(Math.abs(this),b,a.PercentGroupSizes,a.PercentGroupSeparator,a.PercentDecimalSeparator);break;default:throw Error.format(Sys.Res.formatBadFormatSpecifier)}var l=/n|\$|-|%/g,f="";for(;true;){var s=l.lastIndex,h=l.exec(c);f+=c.slice(s,h?h.index:c.length);if(!h)break;switch(h[0]){case "n":f+=e;break;case "$":f+=a.CurrencySymbol;break;case "-":f+=a.NegativeSign;break;case "%":f+=a.PercentSymbol}}return f};RegExp.__typeName="RegExp";RegExp.__class=true;Array.__typeName="Array";Array.__class=true;Array.add=Array.enqueue=function(a,b){a[a.length]=b};Array.addRange=function(a,b){a.push.apply(a,b)};Array.clear=function(a){a.length=0};Array.clone=function(a){if(a.length===1)return [a[0]];else return Array.apply(null,a)};Array.contains=function(a,b){return Array.indexOf(a,b)>=0};Array.dequeue=function(a){return a.shift()};Array.forEach=function(b,e,d){for(var a=0,f=b.length;a<f;a++){var c=b[a];if(typeof c!=="undefined")e.call(d,c,a,b)}};Array.indexOf=function(d,e,a){if(typeof e==="undefined")return -1;var c=d.length;if(c!==0){a=a-0;if(isNaN(a))a=0;else{if(isFinite(a))a=a-a%1;if(a<0)a=Math.max(0,c+a)}for(var b=a;b<c;b++)if(typeof d[b]!=="undefined"&&d[b]===e)return b}return -1};Array.insert=function(a,b,c){a.splice(b,0,c)};Array.parse=function(value){if(!value)return [];return eval(value)};Array.remove=function(b,c){var a=Array.indexOf(b,c);if(a>=0)b.splice(a,1);return a>=0};Array.removeAt=function(a,b){a.splice(b,1)};if(!window)this.window=this;window.Type=Function;Type.prototype.callBaseMethod=function(a,d,b){var c=this.getBaseMethod(a,d);if(!b)return c.apply(a);else return c.apply(a,b)};Type.prototype.getBaseMethod=function(d,c){var b=this.getBaseType();if(b){var a=b.prototype[c];return a instanceof Function?a:null}return null};Type.prototype.getBaseType=function(){return typeof this.__baseType==="undefined"?null:this.__baseType};Type.prototype.getInterfaces=function(){var a=[],b=this;while(b){var c=b.__interfaces;if(c)for(var d=0,f=c.length;d<f;d++){var e=c[d];if(!Array.contains(a,e))a[a.length]=e}b=b.__baseType}return a};Type.prototype.getName=function(){return typeof this.__typeName==="undefined"?"":this.__typeName};Type.prototype.implementsInterface=function(d){this.resolveInheritance();var c=d.getName(),a=this.__interfaceCache;if(a){var e=a[c];if(typeof e!=="undefined")return e}else a=this.__interfaceCache={};var b=this;while(b){var f=b.__interfaces;if(f)if(Array.indexOf(f,d)!==-1)return a[c]=true;b=b.__baseType}return a[c]=false};Type.prototype.inheritsFrom=function(b){this.resolveInheritance();var a=this.__baseType;while(a){if(a===b)return true;a=a.__baseType}return false};Type.prototype.initializeBase=function(a,b){this.resolveInheritance();if(this.__baseType)if(!b)this.__baseType.apply(a);else this.__baseType.apply(a,b);return a};Type.prototype.isImplementedBy=function(a){if(typeof a==="undefined"||a===null)return false;var b=Object.getType(a);return !!(b.implementsInterface&&b.implementsInterface(this))};Type.prototype.isInstanceOfType=function(b){if(typeof b==="undefined"||b===null)return false;if(b instanceof this)return true;var a=Object.getType(b);return !!(a===this)||a.inheritsFrom&&a.inheritsFrom(this)||a.implementsInterface&&a.implementsInterface(this)};Type.prototype.registerClass=function(c,b,d){this.prototype.constructor=this;this.__typeName=c;this.__class=true;if(b){this.__baseType=b;this.__basePrototypePending=true}Sys.__upperCaseTypes[c.toUpperCase()]=this;if(d){this.__interfaces=[];for(var a=2,f=arguments.length;a<f;a++){var e=arguments[a];this.__interfaces.push(e)}}return this};Type.prototype.registerInterface=function(a){Sys.__upperCaseTypes[a.toUpperCase()]=this;this.prototype.constructor=this;this.__typeName=a;this.__interface=true;return this};Type.prototype.resolveInheritance=function(){if(this.__basePrototypePending){var b=this.__baseType;b.resolveInheritance();for(var a in b.prototype){var c=b.prototype[a];if(!this.prototype[a])this.prototype[a]=c}delete this.__basePrototypePending}};Type.getRootNamespaces=function(){return Array.clone(Sys.__rootNamespaces)};Type.isClass=function(a){if(typeof a==="undefined"||a===null)return false;return !!a.__class};Type.isInterface=function(a){if(typeof a==="undefined"||a===null)return false;return !!a.__interface};Type.isNamespace=function(a){if(typeof a==="undefined"||a===null)return false;return !!a.__namespace};Type.parse=function(typeName,ns){var fn;if(ns){fn=Sys.__upperCaseTypes[ns.getName().toUpperCase()+"."+typeName.toUpperCase()];return fn||null}if(!typeName)return null;if(!Type.__htClasses)Type.__htClasses={};fn=Type.__htClasses[typeName];if(!fn){fn=eval(typeName);Type.__htClasses[typeName]=fn}return fn};Type.registerNamespace=function(f){var d=window,c=f.split(".");for(var b=0;b<c.length;b++){var e=c[b],a=d[e];if(!a){a=d[e]={__namespace:true,__typeName:c.slice(0,b+1).join(".")};if(b===0)Sys.__rootNamespaces[Sys.__rootNamespaces.length]=a;a.getName=function(){return this.__typeName}}d=a}};window.Sys={__namespace:true,__typeName:"Sys",getName:function(){return "Sys"},__upperCaseTypes:{}};Sys.__rootNamespaces=[Sys];Sys.IDisposable=function(){};Sys.IDisposable.prototype={};Sys.IDisposable.registerInterface("Sys.IDisposable");Sys.StringBuilder=function(a){this._parts=typeof a!=="undefined"&&a!==null&&a!==""?[a.toString()]:[];this._value={};this._len=0};Sys.StringBuilder.prototype={append:function(a){this._parts[this._parts.length]=a},appendLine:function(a){this._parts[this._parts.length]=typeof a==="undefined"||a===null||a===""?"\r\n":a+"\r\n"},clear:function(){this._parts=[];this._value={};this._len=0},isEmpty:function(){if(this._parts.length===0)return true;return this.toString()===""},toString:function(a){a=a||"";var b=this._parts;if(this._len!==b.length){this._value={};this._len=b.length}var d=this._value;if(typeof d[a]==="undefined"){if(a!=="")for(var c=0;c<b.length;)if(typeof b[c]==="undefined"||b[c]===""||b[c]===null)b.splice(c,1);else c++;d[a]=this._parts.join(a)}return d[a]}};Sys.StringBuilder.registerClass("Sys.StringBuilder");if(!window.XMLHttpRequest)window.XMLHttpRequest=function(){var b=["Mxsml2.XMLHTTP.3.0","Msxml2.XMLHTTP"];for(var a=0,c=b.length;a<c;a++)try{return new ActiveXObject(b[a])}catch(d){}return null};Sys.Browser={};Sys.Browser.InternetExplorer={};Sys.Browser.Firefox={};Sys.Browser.Safari={};Sys.Browser.Opera={};Sys.Browser.agent=null;Sys.Browser.hasDebuggerStatement=false;Sys.Browser.name=navigator.appName;Sys.Browser.version=parseFloat(navigator.appVersion);if(navigator.userAgent.indexOf(" MSIE ")>-1){Sys.Browser.agent=Sys.Browser.InternetExplorer;Sys.Browser.version=parseFloat(navigator.userAgent.match(/MSIE (\d+\.\d+)/)[1]);Sys.Browser.hasDebuggerStatement=true}else if(navigator.userAgent.indexOf(" Firefox/")>-1){Sys.Browser.agent=Sys.Browser.Firefox;Sys.Browser.version=parseFloat(navigator.userAgent.match(/Firefox\/(\d+\.\d+)/)[1]);Sys.Browser.name="Firefox";Sys.Browser.hasDebuggerStatement=true}else if(navigator.userAgent.indexOf(" Safari/")>-1){Sys.Browser.agent=Sys.Browser.Safari;Sys.Browser.version=parseFloat(navigator.userAgent.match(/Safari\/(\d+(\.\d+)?)/)[1]);Sys.Browser.name="Safari"}else if(navigator.userAgent.indexOf("Opera/")>-1)Sys.Browser.agent=Sys.Browser.Opera;Type.registerNamespace("Sys.UI");Sys._Debug=function(){};Sys._Debug.prototype={_appendConsole:function(a){if(typeof Debug!=="undefined"&&Debug.writeln)Debug.writeln(a);if(window.console&&window.console.log)window.console.log(a);if(window.opera)window.opera.postError(a);if(window.debugService)window.debugService.trace(a)},_appendTrace:function(b){var a=document.getElementById("TraceConsole");if(a&&a.tagName.toUpperCase()==="TEXTAREA")a.value+=b+"\n"},assert:function(c,a,b){if(!c){a=b&&this.assert.caller?String.format(Sys.Res.assertFailedCaller,a,this.assert.caller):String.format(Sys.Res.assertFailed,a);if(confirm(String.format(Sys.Res.breakIntoDebugger,a)))this.fail(a)}},clearTrace:function(){var a=document.getElementById("TraceConsole");if(a&&a.tagName.toUpperCase()==="TEXTAREA")a.value=""},fail:function(message){this._appendConsole(message);if(Sys.Browser.hasDebuggerStatement)eval("debugger")},trace:function(a){this._appendConsole(a);this._appendTrace(a)},traceDump:function(a,b){var c=this._traceDump(a,b,true)},_traceDump:function(a,c,f,b,d){c=c?c:"traceDump";b=b?b:"";if(a===null){this.trace(b+c+": null");return}switch(typeof a){case "undefined":this.trace(b+c+": Undefined");break;case "number":case "string":case "boolean":this.trace(b+c+": "+a);break;default:if(Date.isInstanceOfType(a)||RegExp.isInstanceOfType(a)){this.trace(b+c+": "+a.toString());break}if(!d)d=[];else if(Array.contains(d,a)){this.trace(b+c+": ...");return}Array.add(d,a);if(a==window||a===document||window.HTMLElement&&a instanceof HTMLElement||typeof a.nodeName==="string"){var k=a.tagName?a.tagName:"DomElement";if(a.id)k+=" - "+a.id;this.trace(b+c+" {"+k+"}")}else{var i=Object.getTypeName(a);this.trace(b+c+(typeof i==="string"?" {"+i+"}":""));if(b===""||f){b+="    ";var e,j,l,g,h;if(Array.isInstanceOfType(a)){j=a.length;for(e=0;e<j;e++)this._traceDump(a[e],"["+e+"]",f,b,d)}else for(g in a){h=a[g];if(!Function.isInstanceOfType(h))this._traceDump(h,g,f,b,d)}}}Array.remove(d,a)}}};Sys._Debug.registerClass("Sys._Debug");Sys.Debug=new Sys._Debug;Sys.Debug.isDebug=false;function Sys$Enum$parse(c,e){var a,b,i;if(e){a=this.__lowerCaseValues;if(!a){this.__lowerCaseValues=a={};var g=this.prototype;for(var f in g)a[f.toLowerCase()]=g[f]}}else a=this.prototype;if(!this.__flags){i=e?c.toLowerCase():c;b=a[i.trim()];if(typeof b!=="number")throw Error.argument("value",String.format(Sys.Res.enumInvalidValue,c,this.__typeName));return b}else{var h=(e?c.toLowerCase():c).split(","),j=0;for(var d=h.length-1;d>=0;d--){var k=h[d].trim();b=a[k];if(typeof b!=="number")throw Error.argument("value",String.format(Sys.Res.enumInvalidValue,c.split(",")[d].trim(),this.__typeName));j|=b}return j}}function Sys$Enum$toString(c){if(typeof c==="undefined"||c===null)return this.__string;var d=this.prototype,a;if(!this.__flags||c===0){for(a in d)if(d[a]===c)return a}else{var b=this.__sortedValues;if(!b){b=[];for(a in d)b[b.length]={key:a,value:d[a]};b.sort(function(a,b){return a.value-b.value});this.__sortedValues=b}var e=[],g=c;for(a=b.length-1;a>=0;a--){var h=b[a],f=h.value;if(f===0)continue;if((f&c)===f){e[e.length]=h.key;g-=f;if(g===0)break}}if(e.length&&g===0)return e.reverse().join(", ")}return ""}Type.prototype.registerEnum=function(b,c){Sys.__upperCaseTypes[b.toUpperCase()]=this;for(var a in this.prototype)this[a]=this.prototype[a];this.__typeName=b;this.parse=Sys$Enum$parse;this.__string=this.toString();this.toString=Sys$Enum$toString;this.__flags=c;this.__enum=true};Type.isEnum=function(a){if(typeof a==="undefined"||a===null)return false;return !!a.__enum};Type.isFlags=function(a){if(typeof a==="undefined"||a===null)return false;return !!a.__flags};Sys.EventHandlerList=function(){this._list={}};Sys.EventHandlerList.prototype={addHandler:function(b,a){Array.add(this._getEvent(b,true),a)},removeHandler:function(c,b){var a=this._getEvent(c);if(!a)return;Array.remove(a,b)},getHandler:function(b){var a=this._getEvent(b);if(!a||a.length===0)return null;a=Array.clone(a);return function(c,d){for(var b=0,e=a.length;b<e;b++)a[b](c,d)}},_getEvent:function(a,b){if(!this._list[a]){if(!b)return null;this._list[a]=[]}return this._list[a]}};Sys.EventHandlerList.registerClass("Sys.EventHandlerList");Sys.EventArgs=function(){};Sys.EventArgs.registerClass("Sys.EventArgs");Sys.EventArgs.Empty=new Sys.EventArgs;Sys.CancelEventArgs=function(){Sys.CancelEventArgs.initializeBase(this);this._cancel=false};Sys.CancelEventArgs.prototype={get_cancel:function(){return this._cancel},set_cancel:function(a){this._cancel=a}};Sys.CancelEventArgs.registerClass("Sys.CancelEventArgs",Sys.EventArgs);Sys.INotifyPropertyChange=function(){};Sys.INotifyPropertyChange.prototype={};Sys.INotifyPropertyChange.registerInterface("Sys.INotifyPropertyChange");Sys.PropertyChangedEventArgs=function(a){Sys.PropertyChangedEventArgs.initializeBase(this);this._propertyName=a};Sys.PropertyChangedEventArgs.prototype={get_propertyName:function(){return this._propertyName}};Sys.PropertyChangedEventArgs.registerClass("Sys.PropertyChangedEventArgs",Sys.EventArgs);Sys.INotifyDisposing=function(){};Sys.INotifyDisposing.prototype={};Sys.INotifyDisposing.registerInterface("Sys.INotifyDisposing");Sys.Component=function(){if(Sys.Application)Sys.Application.registerDisposableObject(this)};Sys.Component.prototype={_id:null,_initialized:false,_updating:false,get_events:function(){if(!this._events)this._events=new Sys.EventHandlerList;return this._events},get_id:function(){return this._id},set_id:function(a){this._id=a},get_isInitialized:function(){return this._initialized},get_isUpdating:function(){return this._updating},add_disposing:function(a){this.get_events().addHandler("disposing",a)},remove_disposing:function(a){this.get_events().removeHandler("disposing",a)},add_propertyChanged:function(a){this.get_events().addHandler("propertyChanged",a)},remove_propertyChanged:function(a){this.get_events().removeHandler("propertyChanged",a)},beginUpdate:function(){this._updating=true},dispose:function(){if(this._events){var a=this._events.getHandler("disposing");if(a)a(this,Sys.EventArgs.Empty)}delete this._events;Sys.Application.unregisterDisposableObject(this);Sys.Application.removeComponent(this)},endUpdate:function(){this._updating=false;if(!this._initialized)this.initialize();this.updated()},initialize:function(){this._initialized=true},raisePropertyChanged:function(b){if(!this._events)return;var a=this._events.getHandler("propertyChanged");if(a)a(this,new Sys.PropertyChangedEventArgs(b))},updated:function(){}};Sys.Component.registerClass("Sys.Component",null,Sys.IDisposable,Sys.INotifyPropertyChange,Sys.INotifyDisposing);function Sys$Component$_setProperties(a,i){var d,j=Object.getType(a),e=j===Object||j===Sys.UI.DomElement,h=Sys.Component.isInstanceOfType(a)&&!a.get_isUpdating();if(h)a.beginUpdate();for(var c in i){var b=i[c],f=e?null:a["get_"+c];if(e||typeof f!=="function"){var k=a[c];if(!b||typeof b!=="object"||e&&!k)a[c]=b;else Sys$Component$_setProperties(k,b)}else{var l=a["set_"+c];if(typeof l==="function")l.apply(a,[b]);else if(b instanceof Array){d=f.apply(a);for(var g=0,m=d.length,n=b.length;g<n;g++,m++)d[m]=b[g]}else if(typeof b==="object"&&Object.getType(b)===Object){d=f.apply(a);Sys$Component$_setProperties(d,b)}}}if(h)a.endUpdate()}function Sys$Component$_setReferences(c,b){for(var a in b){var e=c["set_"+a],d=$find(b[a]);e.apply(c,[d])}}var $create=Sys.Component.create=function(h,f,d,c,g){var a=g?new h(g):new h,b=Sys.Application,i=b.get_isCreatingComponents();a.beginUpdate();if(f)Sys$Component$_setProperties(a,f);if(d)for(var e in d)a["add_"+e](d[e]);if(a.get_id())b.addComponent(a);if(i){b._createdComponents[b._createdComponents.length]=a;if(c)b._addComponentToSecondPass(a,c);else a.endUpdate()}else{if(c)Sys$Component$_setReferences(a,c);a.endUpdate()}return a};Sys.UI.MouseButton=function(){throw Error.notImplemented()};Sys.UI.MouseButton.prototype={leftButton:0,middleButton:1,rightButton:2};Sys.UI.MouseButton.registerEnum("Sys.UI.MouseButton");Sys.UI.Key=function(){throw Error.notImplemented()};Sys.UI.Key.prototype={backspace:8,tab:9,enter:13,esc:27,space:32,pageUp:33,pageDown:34,end:35,home:36,left:37,up:38,right:39,down:40,del:127};Sys.UI.Key.registerEnum("Sys.UI.Key");Sys.UI.Point=function(a,b){this.x=a;this.y=b};Sys.UI.Point.registerClass("Sys.UI.Point");Sys.UI.Bounds=function(c,d,b,a){this.x=c;this.y=d;this.height=a;this.width=b};Sys.UI.Bounds.registerClass("Sys.UI.Bounds");Sys.UI.DomEvent=function(d){var a=d;this.rawEvent=a;this.altKey=a.altKey;if(typeof a.button!=="undefined")this.button=typeof a.which!=="undefined"?a.button:a.button===4?Sys.UI.MouseButton.middleButton:a.button===2?Sys.UI.MouseButton.rightButton:Sys.UI.MouseButton.leftButton;if(a.type==="keypress")this.charCode=a.charCode||a.keyCode;else if(a.keyCode&&a.keyCode===46)this.keyCode=127;else this.keyCode=a.keyCode;this.clientX=a.clientX;this.clientY=a.clientY;this.ctrlKey=a.ctrlKey;this.target=a.target?a.target:a.srcElement;if(typeof a.offsetX!=="undefined"&&typeof a.offsetY!=="undefined"){this.offsetX=a.offsetX;this.offsetY=a.offsetY}else if(this.target&&this.target.nodeType!==3&&typeof a.clientX==="number"){var b=Sys.UI.DomElement.getLocation(this.target),c=Sys.UI.DomElement._getWindow(this.target);this.offsetX=(c.pageXOffset||0)+a.clientX-b.x;this.offsetY=(c.pageYOffset||0)+a.clientY-b.y}this.screenX=a.screenX;this.screenY=a.screenY;this.shiftKey=a.shiftKey;this.type=a.type};Sys.UI.DomEvent.prototype={preventDefault:function(){if(this.rawEvent.preventDefault)this.rawEvent.preventDefault();else if(window.event)this.rawEvent.returnValue=false},stopPropagation:function(){if(this.rawEvent.stopPropagation)this.rawEvent.stopPropagation();else if(window.event)this.rawEvent.cancelBubble=true}};Sys.UI.DomEvent.registerClass("Sys.UI.DomEvent");var $addHandler=Sys.UI.DomEvent.addHandler=function(a,d,e){if(!a._events)a._events={};var c=a._events[d];if(!c)a._events[d]=c=[];var b;if(a.addEventListener){b=function(b){return e.call(a,new Sys.UI.DomEvent(b))};a.addEventListener(d,b,false)}else if(a.attachEvent){b=function(){var b={};try{b=Sys.UI.DomElement._getWindow(a).event}catch(c){}return e.call(a,new Sys.UI.DomEvent(b))};a.attachEvent("on"+d,b)}c[c.length]={handler:e,browserHandler:b}},$addHandlers=Sys.UI.DomEvent.addHandlers=function(e,d,c){for(var b in d){var a=d[b];if(c)a=Function.createDelegate(c,a);$addHandler(e,b,a)}},$clearHandlers=Sys.UI.DomEvent.clearHandlers=function(a){if(a._events){var e=a._events;for(var b in e){var d=e[b];for(var c=d.length-1;c>=0;c--)$removeHandler(a,b,d[c].handler)}a._events=null}},$removeHandler=Sys.UI.DomEvent.removeHandler=function(a,e,f){var d=null,c=a._events[e];for(var b=0,g=c.length;b<g;b++)if(c[b].handler===f){d=c[b].browserHandler;break}if(a.removeEventListener)a.removeEventListener(e,d,false);else if(a.detachEvent)a.detachEvent("on"+e,d);c.splice(b,1)};Sys.UI.DomElement=function(){};Sys.UI.DomElement.registerClass("Sys.UI.DomElement");Sys.UI.DomElement.addCssClass=function(a,b){if(!Sys.UI.DomElement.containsCssClass(a,b))if(a.className==="")a.className=b;else a.className+=" "+b};Sys.UI.DomElement.containsCssClass=function(b,a){return Array.contains(b.className.split(" "),a)};Sys.UI.DomElement.getBounds=function(a){var b=Sys.UI.DomElement.getLocation(a);return new Sys.UI.Bounds(b.x,b.y,a.offsetWidth||0,a.offsetHeight||0)};var $get=Sys.UI.DomElement.getElementById=function(f,e){if(!e)return document.getElementById(f);if(e.getElementById)return e.getElementById(f);var c=[],d=e.childNodes;for(var b=0;b<d.length;b++){var a=d[b];if(a.nodeType==1)c[c.length]=a}while(c.length){a=c.shift();if(a.id==f)return a;d=a.childNodes;for(b=0;b<d.length;b++){a=d[b];if(a.nodeType==1)c[c.length]=a}}return null};switch(Sys.Browser.agent){case Sys.Browser.InternetExplorer:Sys.UI.DomElement.getLocation=function(a){if(a.self||a.nodeType===9)return new Sys.UI.Point(0,0);var b=a.getBoundingClientRect();if(!b)return new Sys.UI.Point(0,0);var d=a.ownerDocument.documentElement,e=b.left-2+d.scrollLeft,f=b.top-2+d.scrollTop;try{var c=a.ownerDocument.parentWindow.frameElement||null;if(c){var g=c.frameBorder==="0"||c.frameBorder==="no"?2:0;e+=g;f+=g}}catch(h){}return new Sys.UI.Point(e,f)};break;case Sys.Browser.Safari:Sys.UI.DomElement.getLocation=function(c){if(c.window&&c.window===c||c.nodeType===9)return new Sys.UI.Point(0,0);var f=0,g=0,j=null,e=null,b;for(var a=c;a;j=a,(e=b,a=a.offsetParent)){b=Sys.UI.DomElement._getCurrentStyle(a);var d=a.tagName;if((a.offsetLeft||a.offsetTop)&&(d!=="BODY"||(!e||e.position!=="absolute"))){f+=a.offsetLeft;g+=a.offsetTop}}b=Sys.UI.DomElement._getCurrentStyle(c);var h=b?b.position:null;if(!h||h!=="absolute")for(var a=c.parentNode;a;a=a.parentNode){d=a.tagName;if(d!=="BODY"&&d!=="HTML"&&(a.scrollLeft||a.scrollTop)){f-=a.scrollLeft||0;g-=a.scrollTop||0}b=Sys.UI.DomElement._getCurrentStyle(a);var i=b?b.position:null;if(i&&i==="absolute")break}return new Sys.UI.Point(f,g)};break;case Sys.Browser.Opera:Sys.UI.DomElement.getLocation=function(b){if(b.window&&b.window===b||b.nodeType===9)return new Sys.UI.Point(0,0);var d=0,e=0,i=null;for(var a=b;a;i=a,a=a.offsetParent){var f=a.tagName;d+=a.offsetLeft||0;e+=a.offsetTop||0}var g=b.style.position,c=g&&g!=="static";for(var a=b.parentNode;a;a=a.parentNode){f=a.tagName;if(f!=="BODY"&&f!=="HTML"&&(a.scrollLeft||a.scrollTop)&&(c&&(a.style.overflow==="scroll"||a.style.overflow==="auto"))){d-=a.scrollLeft||0;e-=a.scrollTop||0}var h=a&&a.style?a.style.position:null;c=c||h&&h!=="static"}return new Sys.UI.Point(d,e)};break;default:Sys.UI.DomElement.getLocation=function(d){if(d.window&&d.window===d||d.nodeType===9)return new Sys.UI.Point(0,0);var e=0,f=0,i=null,g=null,b=null;for(var a=d;a;i=a,(g=b,a=a.offsetParent)){var c=a.tagName;b=Sys.UI.DomElement._getCurrentStyle(a);if((a.offsetLeft||a.offsetTop)&&!(c==="BODY"&&(!g||g.position!=="absolute"))){e+=a.offsetLeft;f+=a.offsetTop}if(i!==null&&b){if(c!=="TABLE"&&c!=="TD"&&c!=="HTML"){e+=parseInt(b.borderLeftWidth)||0;f+=parseInt(b.borderTopWidth)||0}if(c==="TABLE"&&(b.position==="relative"||b.position==="absolute")){e+=parseInt(b.marginLeft)||0;f+=parseInt(b.marginTop)||0}}}b=Sys.UI.DomElement._getCurrentStyle(d);var h=b?b.position:null;if(!h||h!=="absolute")for(var a=d.parentNode;a;a=a.parentNode){c=a.tagName;if(c!=="BODY"&&c!=="HTML"&&(a.scrollLeft||a.scrollTop)){e-=a.scrollLeft||0;f-=a.scrollTop||0;b=Sys.UI.DomElement._getCurrentStyle(a);if(b){e+=parseInt(b.borderLeftWidth)||0;f+=parseInt(b.borderTopWidth)||0}}}return new Sys.UI.Point(e,f)}}Sys.UI.DomElement.removeCssClass=function(d,c){var a=" "+d.className+" ",b=a.indexOf(" "+c+" ");if(b>=0)d.className=(a.substr(0,b)+" "+a.substring(b+c.length+1,a.length)).trim()};Sys.UI.DomElement.setLocation=function(b,c,d){var a=b.style;a.position="absolute";a.left=c+"px";a.top=d+"px"};Sys.UI.DomElement.toggleCssClass=function(b,a){if(Sys.UI.DomElement.containsCssClass(b,a))Sys.UI.DomElement.removeCssClass(b,a);else Sys.UI.DomElement.addCssClass(b,a)};Sys.UI.DomElement.getVisibilityMode=function(a){return a._visibilityMode===Sys.UI.VisibilityMode.hide?Sys.UI.VisibilityMode.hide:Sys.UI.VisibilityMode.collapse};Sys.UI.DomElement.setVisibilityMode=function(a,b){Sys.UI.DomElement._ensureOldDisplayMode(a);if(a._visibilityMode!==b){a._visibilityMode=b;if(Sys.UI.DomElement.getVisible(a)===false)if(a._visibilityMode===Sys.UI.VisibilityMode.hide)a.style.display=a._oldDisplayMode;else a.style.display="none";a._visibilityMode=b}};Sys.UI.DomElement.getVisible=function(b){var a=b.currentStyle||Sys.UI.DomElement._getCurrentStyle(b);if(!a)return true;return a.visibility!=="hidden"&&a.display!=="none"};Sys.UI.DomElement.setVisible=function(a,b){if(b!==Sys.UI.DomElement.getVisible(a)){Sys.UI.DomElement._ensureOldDisplayMode(a);a.style.visibility=b?"visible":"hidden";if(b||a._visibilityMode===Sys.UI.VisibilityMode.hide)a.style.display=a._oldDisplayMode;else a.style.display="none"}};Sys.UI.DomElement._ensureOldDisplayMode=function(a){if(!a._oldDisplayMode){var b=a.currentStyle||Sys.UI.DomElement._getCurrentStyle(a);a._oldDisplayMode=b?b.display:null;if(!a._oldDisplayMode||a._oldDisplayMode==="none")switch(a.tagName.toUpperCase()){case "DIV":case "P":case "ADDRESS":case "BLOCKQUOTE":case "BODY":case "COL":case "COLGROUP":case "DD":case "DL":case "DT":case "FIELDSET":case "FORM":case "H1":case "H2":case "H3":case "H4":case "H5":case "H6":case "HR":case "IFRAME":case "LEGEND":case "OL":case "PRE":case "TABLE":case "TD":case "TH":case "TR":case "UL":a._oldDisplayMode="block";break;case "LI":a._oldDisplayMode="list-item";break;default:a._oldDisplayMode="inline"}}};Sys.UI.DomElement._getWindow=function(a){var b=a.ownerDocument||a.document||a;return b.defaultView||b.parentWindow};Sys.UI.DomElement._getCurrentStyle=function(a){if(a.nodeType===3)return null;var c=Sys.UI.DomElement._getWindow(a);if(a.documentElement)a=a.documentElement;var b=c&&a!==c&&c.getComputedStyle?c.getComputedStyle(a,null):a.currentStyle||a.style;if(!b&&Sys.Browser.agent===Sys.Browser.Safari&&a.style){var g=a.style.display,f=a.style.position;a.style.position="absolute";a.style.display="block";var e=c.getComputedStyle(a,null);a.style.display=g;a.style.position=f;b={};for(var d in e)b[d]=e[d];b.display="none"}return b};Sys.IContainer=function(){};Sys.IContainer.prototype={};Sys.IContainer.registerInterface("Sys.IContainer");Sys._ScriptLoader=function(){this._scriptsToLoad=null;this._scriptLoadedDelegate=Function.createDelegate(this,this._scriptLoadedHandler)};Sys._ScriptLoader.prototype={dispose:function(){this._stopLoading();if(this._events)delete this._events;this._scriptLoadedDelegate=null},loadScripts:function(a,c,d,b){this._loading=true;this._allScriptsLoadedCallback=c;this._scriptLoadFailedCallback=d;this._scriptLoadTimeoutCallback=b;if(a>0)this._timeoutCookie=window.setTimeout(Function.createDelegate(this,this._scriptLoadTimeoutHandler),a*1000);this._loadScriptsInternal()},notifyScriptLoaded:function(){if(!this._loading)return;this._currentTask._notified++;if(Sys.Browser.agent===Sys.Browser.Safari)if(this._currentTask._notified===1)window.setTimeout(Function.createDelegate(this,function(){this._scriptLoadedHandler(this._currentTask.get_scriptElement(),true)}),0)},queueCustomScriptTag:function(a){if(!this._scriptsToLoad)this._scriptsToLoad=[];Array.add(this._scriptsToLoad,a)},queueScriptBlock:function(a){if(!this._scriptsToLoad)this._scriptsToLoad=[];Array.add(this._scriptsToLoad,{text:a})},queueScriptReference:function(a){if(!this._scriptsToLoad)this._scriptsToLoad=[];Array.add(this._scriptsToLoad,{src:a})},_createScriptElement:function(c){var a=document.createElement("SCRIPT");a.type="text/javascript";for(var b in c)a[b]=c[b];return a},_loadScriptsInternal:function(){if(this._scriptsToLoad&&this._scriptsToLoad.length>0){var b=Array.dequeue(this._scriptsToLoad),a=this._createScriptElement(b);if(a.text&&Sys.Browser.agent===Sys.Browser.Safari){a.innerHTML=a.text;delete a.text}if(typeof b.src==="string"){this._currentTask=new Sys._ScriptLoaderTask(a,this._scriptLoadedDelegate);this._currentTask.execute()}else{document.getElementsByTagName("HEAD")[0].appendChild(a);var d=this;window.setTimeout(function(){Sys._ScriptLoader._clearScript(a);d._loadScriptsInternal()},0)}}else{var c=this._allScriptsLoadedCallback;this._stopLoading();if(c)c(this)}},_raiseError:function(a){var c=this._scriptLoadFailedCallback,b=this._currentTask.get_scriptElement();this._stopLoading();if(c)c(this,b,a);else throw Sys._ScriptLoader._errorScriptLoadFailed(b.src,a)},_scriptLoadedHandler:function(a,b){if(b&&this._currentTask._notified)if(this._currentTask._notified>1)this._raiseError(true);else{Array.add(Sys._ScriptLoader._getLoadedScripts(),a.src);this._currentTask.dispose();this._currentTask=null;this._loadScriptsInternal()}else this._raiseError(false)},_scriptLoadTimeoutHandler:function(){var a=this._scriptLoadTimeoutCallback;this._stopLoading();if(a)a(this)},_stopLoading:function(){if(this._timeoutCookie){window.clearTimeout(this._timeoutCookie);this._timeoutCookie=null}if(this._currentTask){this._currentTask.dispose();this._currentTask=null}this._scriptsToLoad=null;this._loading=null;this._allScriptsLoadedCallback=null;this._scriptLoadFailedCallback=null;this._scriptLoadTimeoutCallback=null}};Sys._ScriptLoader.registerClass("Sys._ScriptLoader",null,Sys.IDisposable);Sys._ScriptLoader.getInstance=function(){var a=Sys._ScriptLoader._activeInstance;if(!a)a=Sys._ScriptLoader._activeInstance=new Sys._ScriptLoader;return a};Sys._ScriptLoader.isScriptLoaded=function(b){var a=document.createElement("script");a.src=b;return Array.contains(Sys._ScriptLoader._getLoadedScripts(),a.src)};Sys._ScriptLoader.readLoadedScripts=function(){if(!Sys._ScriptLoader._referencedScripts){var b=Sys._ScriptLoader._referencedScripts=[],c=document.getElementsByTagName("SCRIPT");for(i=c.length-1;i>=0;i--){var d=c[i],a=d.src;if(a.length)if(!Array.contains(b,a))Array.add(b,a)}}};Sys._ScriptLoader._clearScript=function(a){if(!Sys.Debug.isDebug)a.parentNode.removeChild(a)};Sys._ScriptLoader._errorScriptLoadFailed=function(b,d){var a;if(d)a=Sys.Res.scriptLoadMultipleCallbacks;else a=Sys.Res.scriptLoadFailed;var e="Sys.ScriptLoadFailedException: "+String.format(a,b),c=Error.create(e,{name:"Sys.ScriptLoadFailedException","scriptUrl":b});c.popStackFrame();return c};Sys._ScriptLoader._getLoadedScripts=function(){if(!Sys._ScriptLoader._referencedScripts){Sys._ScriptLoader._referencedScripts=[];Sys._ScriptLoader.readLoadedScripts()}return Sys._ScriptLoader._referencedScripts};Sys._ScriptLoaderTask=function(b,a){this._scriptElement=b;this._completedCallback=a;this._notified=0};Sys._ScriptLoaderTask.prototype={get_scriptElement:function(){return this._scriptElement},dispose:function(){if(this._disposed)return;this._disposed=true;this._removeScriptElementHandlers();Sys._ScriptLoader._clearScript(this._scriptElement);this._scriptElement=null},execute:function(){this._addScriptElementHandlers();document.getElementsByTagName("HEAD")[0].appendChild(this._scriptElement)},_addScriptElementHandlers:function(){this._scriptLoadDelegate=Function.createDelegate(this,this._scriptLoadHandler);if(Sys.Browser.agent!==Sys.Browser.InternetExplorer){this._scriptElement.readyState="loaded";$addHandler(this._scriptElement,"load",this._scriptLoadDelegate)}else $addHandler(this._scriptElement,"readystatechange",this._scriptLoadDelegate);if(this._scriptElement.addEventListener){this._scriptErrorDelegate=Function.createDelegate(this,this._scriptErrorHandler);this._scriptElement.addEventListener("error",this._scriptErrorDelegate,false)}},_removeScriptElementHandlers:function(){if(this._scriptLoadDelegate){var a=this.get_scriptElement();if(Sys.Browser.agent!==Sys.Browser.InternetExplorer)$removeHandler(a,"load",this._scriptLoadDelegate);else $removeHandler(a,"readystatechange",this._scriptLoadDelegate);if(this._scriptErrorDelegate){this._scriptElement.removeEventListener("error",this._scriptErrorDelegate,false);this._scriptErrorDelegate=null}this._scriptLoadDelegate=null}},_scriptErrorHandler:function(){if(this._disposed)return;this._completedCallback(this.get_scriptElement(),false)},_scriptLoadHandler:function(){if(this._disposed)return;var a=this.get_scriptElement();if(a.readyState!=="loaded"&&a.readyState!=="complete")return;var b=this;window.setTimeout(function(){b._completedCallback(a,true)},0)}};Sys._ScriptLoaderTask.registerClass("Sys._ScriptLoaderTask",null,Sys.IDisposable);Sys.ApplicationLoadEventArgs=function(b,a){Sys.ApplicationLoadEventArgs.initializeBase(this);this._components=b;this._isPartialLoad=a};Sys.ApplicationLoadEventArgs.prototype={get_components:function(){return this._components},get_isPartialLoad:function(){return this._isPartialLoad}};Sys.ApplicationLoadEventArgs.registerClass("Sys.ApplicationLoadEventArgs",Sys.EventArgs);Sys._Application=function(){Sys._Application.initializeBase(this);this._disposableObjects=[];this._components={};this._createdComponents=[];this._secondPassComponents=[];this._unloadHandlerDelegate=Function.createDelegate(this,this._unloadHandler);this._loadHandlerDelegate=Function.createDelegate(this,this._loadHandler);Sys.UI.DomEvent.addHandler(window,"unload",this._unloadHandlerDelegate);Sys.UI.DomEvent.addHandler(window,"load",this._loadHandlerDelegate)};Sys._Application.prototype={_creatingComponents:false,_disposing:false,get_isCreatingComponents:function(){return this._creatingComponents},add_load:function(a){this.get_events().addHandler("load",a)},remove_load:function(a){this.get_events().removeHandler("load",a)},add_init:function(a){if(this._initialized)a(this,Sys.EventArgs.Empty);else this.get_events().addHandler("init",a)},remove_init:function(a){this.get_events().removeHandler("init",a)},add_unload:function(a){this.get_events().addHandler("unload",a)},remove_unload:function(a){this.get_events().removeHandler("unload",a)},addComponent:function(a){this._components[a.get_id()]=a},beginCreateComponents:function(){this._creatingComponents=true},dispose:function(){if(!this._disposing){this._disposing=true;if(window.pageUnload)window.pageUnload(this,Sys.EventArgs.Empty);var c=this.get_events().getHandler("unload");if(c)c(this,Sys.EventArgs.Empty);var b=Array.clone(this._disposableObjects);for(var a=0,e=b.length;a<e;a++)b[a].dispose();Array.clear(this._disposableObjects);Sys.UI.DomEvent.removeHandler(window,"unload",this._unloadHandlerDelegate);if(this._loadHandlerDelegate){Sys.UI.DomEvent.removeHandler(window,"load",this._loadHandlerDelegate);this._loadHandlerDelegate=null}var d=Sys._ScriptLoader.getInstance();if(d)d.dispose();Sys._Application.callBaseMethod(this,"dispose")}},endCreateComponents:function(){var b=this._secondPassComponents;for(var a=0,d=b.length;a<d;a++){var c=b[a].component;Sys$Component$_setReferences(c,b[a].references);c.endUpdate()}this._secondPassComponents=[];this._creatingComponents=false},findComponent:function(b,a){return a?Sys.IContainer.isInstanceOfType(a)?a.findComponent(b):a[b]||null:Sys.Application._components[b]||null},getComponents:function(){var a=[],b=this._components;for(var c in b)a[a.length]=b[c];return a},initialize:function(){if(!this._initialized&&!this._initializing){this._initializing=true;this._doInitialize();}},notifyScriptLoaded:function(){var a=Sys._ScriptLoader.getInstance();if(a)a.notifyScriptLoaded()},registerDisposableObject:function(a){if(!this._disposing)this._disposableObjects[this._disposableObjects.length]=a},raiseLoad:function(){var b=this.get_events().getHandler("load"),a=new Sys.ApplicationLoadEventArgs(Array.clone(this._createdComponents),!this._initializing);if(b)b(this,a);if(window.pageLoad)window.pageLoad(this,a);this._createdComponents=[]},removeComponent:function(b){var a=b.get_id();if(a)delete this._components[a]},unregisterDisposableObject:function(a){if(!this._disposing)Array.remove(this._disposableObjects,a)},_addComponentToSecondPass:function(b,a){this._secondPassComponents[this._secondPassComponents.length]={component:b,references:a}},_doInitialize:function(){Sys._Application.callBaseMethod(this,"initialize");var a=this.get_events().getHandler("init");if(a){this.beginCreateComponents();a(this,Sys.EventArgs.Empty);this.endCreateComponents()}this.raiseLoad();this._initializing=false},_loadHandler:function(){if(this._loadHandlerDelegate){Sys.UI.DomEvent.removeHandler(window,"load",this._loadHandlerDelegate);this._loadHandlerDelegate=null}this.initialize()},_unloadHandler:function(){this.dispose()}};Sys._Application.registerClass("Sys._Application",Sys.Component,Sys.IContainer);Sys.Application=new Sys._Application;var $find=Sys.Application.findComponent;Type.registerNamespace("Sys.Net");Sys.Net.WebRequestExecutor=function(){this._webRequest=null;this._resultObject=null};Sys.Net.WebRequestExecutor.prototype={get_webRequest:function(){return this._webRequest},_set_webRequest:function(a){this._webRequest=a},get_started:function(){throw Error.notImplemented()},get_responseAvailable:function(){throw Error.notImplemented()},get_timedOut:function(){throw Error.notImplemented()},get_aborted:function(){throw Error.notImplemented()},get_responseData:function(){throw Error.notImplemented()},get_statusCode:function(){throw Error.notImplemented()},get_statusText:function(){throw Error.notImplemented()},get_xml:function(){throw Error.notImplemented()},get_object:function(){if(!this._resultObject)this._resultObject=Sys.Serialization.JavaScriptSerializer.deserialize(this.get_responseData());return this._resultObject},executeRequest:function(){throw Error.notImplemented()},abort:function(){throw Error.notImplemented()},getResponseHeader:function(){throw Error.notImplemented()},getAllResponseHeaders:function(){throw Error.notImplemented()}};Sys.Net.WebRequestExecutor.registerClass("Sys.Net.WebRequestExecutor");Sys.Net.XMLDOM=function(d){if(!window.DOMParser){var c=["Msxml2.DOMDocument.3.0","Msxml2.DOMDocument"];for(var b=0,f=c.length;b<f;b++)try{var a=new ActiveXObject(c[b]);a.async=false;a.loadXML(d);a.setProperty("SelectionLanguage","XPath");return a}catch(g){}}else try{var e=new window.DOMParser;return e.parseFromString(d,"text/xml")}catch(g){}return null};Sys.Net.XMLHttpExecutor=function(){Sys.Net.XMLHttpExecutor.initializeBase(this);var a=this;this._xmlHttpRequest=null;this._webRequest=null;this._responseAvailable=false;this._timedOut=false;this._timer=null;this._aborted=false;this._started=false;this._onReadyStateChange=function(){if(a._xmlHttpRequest.readyState===4){try{if(typeof a._xmlHttpRequest.status==="undefined")return}catch(b){return}a._clearTimer();a._responseAvailable=true;a._webRequest.completed(Sys.EventArgs.Empty);if(a._xmlHttpRequest!=null){a._xmlHttpRequest.onreadystatechange=Function.emptyMethod;a._xmlHttpRequest=null}}};this._clearTimer=function(){if(a._timer!=null){window.clearTimeout(a._timer);a._timer=null}};this._onTimeout=function(){if(!a._responseAvailable){a._clearTimer();a._timedOut=true;a._xmlHttpRequest.onreadystatechange=Function.emptyMethod;a._xmlHttpRequest.abort();a._webRequest.completed(Sys.EventArgs.Empty);a._xmlHttpRequest=null}}};Sys.Net.XMLHttpExecutor.prototype={get_timedOut:function(){return this._timedOut},get_started:function(){return this._started},get_responseAvailable:function(){return this._responseAvailable},get_aborted:function(){return this._aborted},executeRequest:function(){this._webRequest=this.get_webRequest();var c=this._webRequest.get_body(),a=this._webRequest.get_headers();this._xmlHttpRequest=new XMLHttpRequest;this._xmlHttpRequest.onreadystatechange=this._onReadyStateChange;var e=this._webRequest.get_httpVerb();this._xmlHttpRequest.open(e,this._webRequest.getResolvedUrl(),true);if(a)for(var b in a){var f=a[b];if(typeof f!=="function")this._xmlHttpRequest.setRequestHeader(b,f)}if(e.toLowerCase()==="post"){if(a===null||!a["Content-Type"])this._xmlHttpRequest.setRequestHeader("Content-Type","application/x-www-form-urlencoded; charset=utf-8");if(!c)c=""}var d=this._webRequest.get_timeout();if(d>0)this._timer=window.setTimeout(Function.createDelegate(this,this._onTimeout),d);this._xmlHttpRequest.send(c);this._started=true},getResponseHeader:function(b){var a;try{a=this._xmlHttpRequest.getResponseHeader(b)}catch(c){}if(!a)a="";return a},getAllResponseHeaders:function(){return this._xmlHttpRequest.getAllResponseHeaders()},get_responseData:function(){return this._xmlHttpRequest.responseText},get_statusCode:function(){var a=0;try{a=this._xmlHttpRequest.status}catch(b){}return a},get_statusText:function(){return this._xmlHttpRequest.statusText},get_xml:function(){var a=this._xmlHttpRequest.responseXML;if(!a||!a.documentElement){a=Sys.Net.XMLDOM(this._xmlHttpRequest.responseText);if(!a||!a.documentElement)return null}else if(navigator.userAgent.indexOf("MSIE")!==-1)a.setProperty("SelectionLanguage","XPath");if(a.documentElement.namespaceURI==="http://www.mozilla.org/newlayout/xml/parsererror.xml"&&a.documentElement.tagName==="parsererror")return null;if(a.documentElement.firstChild&&a.documentElement.firstChild.tagName==="parsererror")return null;return a},abort:function(){if(this._aborted||this._responseAvailable||this._timedOut)return;this._aborted=true;this._clearTimer();if(this._xmlHttpRequest&&!this._responseAvailable){this._xmlHttpRequest.onreadystatechange=Function.emptyMethod;this._xmlHttpRequest.abort();this._xmlHttpRequest=null;this._webRequest.completed(Sys.EventArgs.Empty)}}};Sys.Net.XMLHttpExecutor.registerClass("Sys.Net.XMLHttpExecutor",Sys.Net.WebRequestExecutor);Sys.Net._WebRequestManager=function(){this._this=this;this._defaultTimeout=0;this._defaultExecutorType="Sys.Net.XMLHttpExecutor"};Sys.Net._WebRequestManager.prototype={add_invokingRequest:function(a){this._get_eventHandlerList().addHandler("invokingRequest",a)},remove_invokingRequest:function(a){this._get_eventHandlerList().removeHandler("invokingRequest",a)},add_completedRequest:function(a){this._get_eventHandlerList().addHandler("completedRequest",a)},remove_completedRequest:function(a){this._get_eventHandlerList().removeHandler("completedRequest",a)},_get_eventHandlerList:function(){if(!this._events)this._events=new Sys.EventHandlerList;return this._events},get_defaultTimeout:function(){return this._defaultTimeout},set_defaultTimeout:function(a){this._defaultTimeout=a},get_defaultExecutorType:function(){return this._defaultExecutorType},set_defaultExecutorType:function(a){this._defaultExecutorType=a},executeRequest:function(webRequest){var executor=webRequest.get_executor();if(!executor){var failed=false;try{var executorType=eval(this._defaultExecutorType);executor=new executorType}catch(a){failed=true}webRequest.set_executor(executor)}if(executor.get_aborted())return;var evArgs=new Sys.Net.NetworkRequestEventArgs(webRequest),handler=this._get_eventHandlerList().getHandler("invokingRequest");if(handler)handler(this,evArgs);if(!evArgs.get_cancel())executor.executeRequest()}};Sys.Net._WebRequestManager.registerClass("Sys.Net._WebRequestManager");Sys.Net.WebRequestManager=new Sys.Net._WebRequestManager;Sys.Net.NetworkRequestEventArgs=function(a){Sys.Net.NetworkRequestEventArgs.initializeBase(this);this._webRequest=a};Sys.Net.NetworkRequestEventArgs.prototype={get_webRequest:function(){return this._webRequest}};Sys.Net.NetworkRequestEventArgs.registerClass("Sys.Net.NetworkRequestEventArgs",Sys.CancelEventArgs);Sys.Net.WebRequest=function(){this._url="";this._headers={};this._body=null;this._userContext=null;this._httpVerb=null;this._executor=null;this._invokeCalled=false;this._timeout=0};Sys.Net.WebRequest.prototype={add_completed:function(a){this._get_eventHandlerList().addHandler("completed",a)},remove_completed:function(a){this._get_eventHandlerList().removeHandler("completed",a)},completed:function(b){var a=Sys.Net.WebRequestManager._get_eventHandlerList().getHandler("completedRequest");if(a)a(this._executor,b);a=this._get_eventHandlerList().getHandler("completed");if(a)a(this._executor,b)},_get_eventHandlerList:function(){if(!this._events)this._events=new Sys.EventHandlerList;return this._events},get_url:function(){return this._url},set_url:function(a){this._url=a},get_headers:function(){return this._headers},get_httpVerb:function(){if(this._httpVerb===null){if(this._body===null)return "GET";return "POST"}return this._httpVerb},set_httpVerb:function(a){this._httpVerb=a},get_body:function(){return this._body},set_body:function(a){this._body=a},get_userContext:function(){return this._userContext},set_userContext:function(a){this._userContext=a},get_executor:function(){return this._executor},set_executor:function(a){this._executor=a;this._executor._set_webRequest(this)},get_timeout:function(){if(this._timeout===0)return Sys.Net.WebRequestManager.get_defaultTimeout();return this._timeout},set_timeout:function(a){this._timeout=a},getResolvedUrl:function(){return Sys.Net.WebRequest._resolveUrl(this._url)},invoke:function(){Sys.Net.WebRequestManager.executeRequest(this);this._invokeCalled=true}};Sys.Net.WebRequest._resolveUrl=function(b,a){if(b&&b.indexOf("://")!==-1)return b;if(!a||a.length===0){var c=document.getElementsByTagName("base")[0];if(c&&c.href&&c.href.length>0)a=c.href;else a=document.URL}var d=a.indexOf("?");if(d!==-1)a=a.substr(0,d);a=a.substr(0,a.lastIndexOf("/")+1);if(!b||b.length===0)return a;if(b.charAt(0)==="/"){var e=a.indexOf("://"),g=a.indexOf("/",e+3);return a.substr(0,g)+b}else{var f=a.lastIndexOf("/");return a.substr(0,f+1)+b}};Sys.Net.WebRequest._createQueryString=function(d,b){if(!b)b=encodeURIComponent;var a=new Sys.StringBuilder,f=0;for(var c in d){var e=d[c];if(typeof e==="function")continue;var g=Sys.Serialization.JavaScriptSerializer.serialize(e);if(f!==0)a.append("&");a.append(c);a.append("=");a.append(b(g));f++}return a.toString()};Sys.Net.WebRequest._createUrl=function(a,b){if(!b)return a;var d=Sys.Net.WebRequest._createQueryString(b);if(d.length>0){var c="?";if(a&&a.indexOf("?")!==-1)c="&";return a+c+d}else return a};Sys.Net.WebRequest.registerClass("Sys.Net.WebRequest");Sys.Net.WebServiceProxy=function(){};Sys.Net.WebServiceProxy.prototype={get_timeout:function(){return this._timeout},set_timeout:function(a){if(a<0)throw Error.argumentOutOfRange("value",a,Sys.Res.invalidTimeout);this._timeout=a},get_defaultUserContext:function(){return this._userContext},set_defaultUserContext:function(a){this._userContext=a},get_defaultSucceededCallback:function(){return this._succeeded},set_defaultSucceededCallback:function(a){this._succeeded=a},get_defaultFailedCallback:function(){return this._failed},set_defaultFailedCallback:function(a){this._failed=a},get_path:function(){return this._path},set_path:function(a){this._path=a},_invoke:function(d,e,g,f,c,b,a){if(c===null||typeof c==="undefined")c=this.get_defaultSucceededCallback();if(b===null||typeof b==="undefined")b=this.get_defaultFailedCallback();if(a===null||typeof a==="undefined")a=this.get_defaultUserContext();return Sys.Net.WebServiceProxy.invoke(d,e,g,f,c,b,a,this.get_timeout())}};Sys.Net.WebServiceProxy.registerClass("Sys.Net.WebServiceProxy");Sys.Net.WebServiceProxy.invoke=function(k,a,j,d,i,c,f,h){var b=new Sys.Net.WebRequest;b.get_headers()["Content-Type"]="application/json; charset=utf-8";if(!d)d={};var g=d;if(!j||!g)g={};b.set_url(Sys.Net.WebRequest._createUrl(k+"/"+encodeURIComponent(a),g));var e=null;if(!j){e=Sys.Serialization.JavaScriptSerializer.serialize(d);if(e==="{}")e=""}b.set_body(e);b.add_completed(l);if(h&&h>0)b.set_timeout(h);b.invoke();function l(d){if(d.get_responseAvailable()){var g=d.get_statusCode(),b=null;try{var e=d.getResponseHeader("Content-Type");if(e.startsWith("application/json"))b=d.get_object();else if(e.startsWith("text/xml"))b=d.get_xml();else b=d.get_responseData()}catch(m){}var k=d.getResponseHeader("jsonerror"),h=k==="true";if(h){if(b)b=new Sys.Net.WebServiceError(false,b.Message,b.StackTrace,b.ExceptionType)}else if(e.startsWith("application/json"))b=b.d;if(g<200||g>=300||h){if(c){if(!b||!h)b=new Sys.Net.WebServiceError(false,String.format(Sys.Res.webServiceFailedNoMsg,a),"","");b._statusCode=g;c(b,f,a)}}else if(i)i(b,f,a)}else{var j;if(d.get_timedOut())j=String.format(Sys.Res.webServiceTimedOut,a);else j=String.format(Sys.Res.webServiceFailedNoMsg,a);if(c)c(new Sys.Net.WebServiceError(d.get_timedOut(),j,"",""),f,a)}}return b};Sys.Net.WebServiceProxy._generateTypedConstructor=function(a){return function(b){if(b)for(var c in b)this[c]=b[c];this.__type=a}};Sys.Net.WebServiceError=function(c,d,b,a){this._timedOut=c;this._message=d;this._stackTrace=b;this._exceptionType=a;this._statusCode=-1};Sys.Net.WebServiceError.prototype={get_timedOut:function(){return this._timedOut},get_statusCode:function(){return this._statusCode},get_message:function(){return this._message},get_stackTrace:function(){return this._stackTrace},get_exceptionType:function(){return this._exceptionType}};Sys.Net.WebServiceError.registerClass("Sys.Net.WebServiceError");Type.registerNamespace("Sys.Services");Sys.Services._ProfileService=function(){Sys.Services._ProfileService.initializeBase(this);this.properties={}};Sys.Services._ProfileService.DefaultWebServicePath="";Sys.Services._ProfileService.prototype={_defaultLoadCompletedCallback:null,_defaultSaveCompletedCallback:null,_path:"",_timeout:0,get_defaultLoadCompletedCallback:function(){return this._defaultLoadCompletedCallback},set_defaultLoadCompletedCallback:function(a){this._defaultLoadCompletedCallback=a},get_defaultSaveCompletedCallback:function(){return this._defaultSaveCompletedCallback},set_defaultSaveCompletedCallback:function(a){this._defaultSaveCompletedCallback=a},get_path:function(){return this._path||""},load:function(c,d,e,f){var b,a;if(!c){a="GetAllPropertiesForCurrentUser";b={authenticatedUserOnly:false}}else{a="GetPropertiesForCurrentUser";b={properties:this._clonePropertyNames(c),authenticatedUserOnly:false}}this._invoke(this._get_path(),a,false,b,Function.createDelegate(this,this._onLoadComplete),Function.createDelegate(this,this._onLoadFailed),[d,e,f])},save:function(d,b,c,e){var a=this._flattenProperties(d,this.properties);this._invoke(this._get_path(),"SetPropertiesForCurrentUser",false,{values:a.value,authenticatedUserOnly:false},Function.createDelegate(this,this._onSaveComplete),Function.createDelegate(this,this._onSaveFailed),[b,c,e,a.count])},_clonePropertyNames:function(e){var c=[],d={};for(var b=0;b<e.length;b++){var a=e[b];if(!d[a]){Array.add(c,a);d[a]=true}}return c},_flattenProperties:function(a,i,j){var b={},e,d,g=0;if(a&&a.length===0)return {value:b,count:0};for(var c in i){e=i[c];d=j?j+"."+c:c;if(Sys.Services.ProfileGroup.isInstanceOfType(e)){var k=this._flattenProperties(a,e,d),h=k.value;g+=k.count;for(var f in h){var l=h[f];b[f]=l}}else if(!a||Array.indexOf(a,d)!==-1){b[d]=e;g++}}return {value:b,count:g}},_get_path:function(){var a=this.get_path();if(!a.length)a=Sys.Services._ProfileService.DefaultWebServicePath;if(!a||!a.length)throw Error.invalidOperation(Sys.Res.servicePathNotSet);return a},_onLoadComplete:function(a,e,g){if(typeof a!=="object")throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType,g,"Object"));var c=this._unflattenProperties(a);for(var b in c)this.properties[b]=c[b];var d=e[0]||this.get_defaultLoadCompletedCallback()||this.get_defaultSucceededCallback();if(d){var f=e[2]||this.get_defaultUserContext();d(a.length,f,"Sys.Services.ProfileService.load")}},_onLoadFailed:function(d,b){var a=b[1]||this.get_defaultFailedCallback();if(a){var c=b[2]||this.get_defaultUserContext();a(d,c,"Sys.Services.ProfileService.load")}},_onSaveComplete:function(a,b,f){var c=b[3];if(a!==null)if(a instanceof Array)c-=a.length;else if(typeof a==="number")c=a;else throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType,f,"Array"));var d=b[0]||this.get_defaultSaveCompletedCallback()||this.get_defaultSucceededCallback();if(d){var e=b[2]||this.get_defaultUserContext();d(c,e,"Sys.Services.ProfileService.save")}},_onSaveFailed:function(d,b){var a=b[1]||this.get_defaultFailedCallback();if(a){var c=b[2]||this.get_defaultUserContext();a(d,c,"Sys.Services.ProfileService.save")}},_unflattenProperties:function(e){var c={},d,f,h=0;for(var a in e){h++;f=e[a];d=a.indexOf(".");if(d!==-1){var g=a.substr(0,d);a=a.substr(d+1);var b=c[g];if(!b||!Sys.Services.ProfileGroup.isInstanceOfType(b)){b=new Sys.Services.ProfileGroup;c[g]=b}b[a]=f}else c[a]=f}e.length=h;return c}};Sys.Services._ProfileService.registerClass("Sys.Services._ProfileService",Sys.Net.WebServiceProxy);Sys.Services.ProfileService=new Sys.Services._ProfileService;Sys.Services.ProfileGroup=function(a){if(a)for(var b in a)this[b]=a[b]};Sys.Services.ProfileGroup.registerClass("Sys.Services.ProfileGroup");Sys.Services._AuthenticationService=function(){Sys.Services._AuthenticationService.initializeBase(this)};Sys.Services._AuthenticationService.DefaultWebServicePath="";Sys.Services._AuthenticationService.prototype={_defaultLoginCompletedCallback:null,_defaultLogoutCompletedCallback:null,_path:"",_timeout:0,_authenticated:false,get_defaultLoginCompletedCallback:function(){return this._defaultLoginCompletedCallback},set_defaultLoginCompletedCallback:function(a){this._defaultLoginCompletedCallback=a},get_defaultLogoutCompletedCallback:function(){return this._defaultLogoutCompletedCallback},set_defaultLogoutCompletedCallback:function(a){this._defaultLogoutCompletedCallback=a},get_isLoggedIn:function(){return this._authenticated},get_path:function(){return this._path||""},login:function(c,b,a,h,f,d,e,g){this._invoke(this._get_path(),"Login",false,{userName:c,password:b,createPersistentCookie:a},Function.createDelegate(this,this._onLoginComplete),Function.createDelegate(this,this._onLoginFailed),[c,b,a,h,f,d,e,g])},logout:function(c,a,b,d){this._invoke(this._get_path(),"Logout",false,{},Function.createDelegate(this,this._onLogoutComplete),Function.createDelegate(this,this._onLogoutFailed),[c,a,b,d])},_get_path:function(){var a=this.get_path();if(!a.length)a=Sys.Services._AuthenticationService.DefaultWebServicePath;if(!a||!a.length)throw Error.invalidOperation(Sys.Res.servicePathNotSet);return a},_onLoginComplete:function(e,c,f){if(typeof e!=="boolean")throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType,f,"Boolean"));var b=c[4],d=c[7]||this.get_defaultUserContext(),a=c[5]||this.get_defaultLoginCompletedCallback()||this.get_defaultSucceededCallback();if(e){this._authenticated=true;if(a)a(true,d,"Sys.Services.AuthenticationService.login");if(typeof b!=="undefined"&&b!==null)window.location.href=b}else if(a)a(false,d,"Sys.Services.AuthenticationService.login")},_onLoginFailed:function(d,b){var a=b[6]||this.get_defaultFailedCallback();if(a){var c=b[7]||this.get_defaultUserContext();a(d,c,"Sys.Services.AuthenticationService.login")}},_onLogoutComplete:function(f,a,e){if(f!==null)throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType,e,"null"));var b=a[0],d=a[3]||this.get_defaultUserContext(),c=a[1]||this.get_defaultLogoutCompletedCallback()||this.get_defaultSucceededCallback();this._authenticated=false;if(c)c(null,d,"Sys.Services.AuthenticationService.logout");if(!b)window.location.reload();else window.location.href=b},_onLogoutFailed:function(c,b){var a=b[2]||this.get_defaultFailedCallback();if(a)a(c,b[3],"Sys.Services.AuthenticationService.logout")},_setAuthenticated:function(a){this._authenticated=a}};Sys.Services._AuthenticationService.registerClass("Sys.Services._AuthenticationService",Sys.Net.WebServiceProxy);Sys.Services.AuthenticationService=new Sys.Services._AuthenticationService;Sys.Services._RoleService=function(){Sys.Services._RoleService.initializeBase(this);this._roles=[]};Sys.Services._RoleService.DefaultWebServicePath="";Sys.Services._RoleService.prototype={_defaultLoadCompletedCallback:null,_rolesIndex:null,_timeout:0,_path:"",get_defaultLoadCompletedCallback:function(){return this._defaultLoadCompletedCallback},set_defaultLoadCompletedCallback:function(a){this._defaultLoadCompletedCallback=a},get_path:function(){return this._path||""},get_roles:function(){return Array.clone(this._roles)},isUserInRole:function(a){var b=this._get_rolesIndex()[a.trim().toLowerCase()];return !!b},load:function(a,b,c){Sys.Net.WebServiceProxy.invoke(this._get_path(),"GetRolesForCurrentUser",false,{},Function.createDelegate(this,this._onLoadComplete),Function.createDelegate(this,this._onLoadFailed),[a,b,c],this.get_timeout())},_get_path:function(){var a=this.get_path();if(!a||!a.length)a=Sys.Services._RoleService.DefaultWebServicePath;if(!a||!a.length)throw Error.invalidOperation(Sys.Res.servicePathNotSet);return a},_get_rolesIndex:function(){if(!this._rolesIndex){var b={};for(var a=0;a<this._roles.length;a++)b[this._roles[a].toLowerCase()]=true;this._rolesIndex=b}return this._rolesIndex},_onLoadComplete:function(a,c,f){if(a&&!(a instanceof Array))throw Error.invalidOperation(String.format(Sys.Res.webServiceInvalidReturnType,f,"Array"));this._roles=a;this._rolesIndex=null;var b=c[0]||this.get_defaultLoadCompletedCallback()||this.get_defaultSucceededCallback();if(b){var e=c[2]||this.get_defaultUserContext(),d=Array.clone(a);b(d,e,"Sys.Services.RoleService.load")}},_onLoadFailed:function(d,b){var a=b[1]||this.get_defaultFailedCallback();if(a){var c=b[2]||this.get_defaultUserContext();a(d,c,"Sys.Services.RoleService.load")}}};Sys.Services._RoleService.registerClass("Sys.Services._RoleService",Sys.Net.WebServiceProxy);Sys.Services.RoleService=new Sys.Services._RoleService;Type.registerNamespace("Sys.Serialization");Sys.Serialization.JavaScriptSerializer=function(){};Sys.Serialization.JavaScriptSerializer.registerClass("Sys.Serialization.JavaScriptSerializer");Sys.Serialization.JavaScriptSerializer._serverTypeFieldName="__type";Sys.Serialization.JavaScriptSerializer._stringRegEx=new RegExp('["\\b\\f\\n\\r\\t\\\\\\x00-\\x1F]',"i");Sys.Serialization.JavaScriptSerializer._dateRegEx=new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"',"g");Sys.Serialization.JavaScriptSerializer._jsonRegEx=new RegExp("[^,:{}\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]","g");Sys.Serialization.JavaScriptSerializer._jsonStringRegEx=new RegExp('"(\\\\.|[^"\\\\])*"',"g");Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder=function(b,a){a.append(b.toString())};Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder=function(a,b){if(isFinite(a))b.append(String(a));else throw Error.invalidOperation(Sys.Res.cannotSerializeNonFiniteNumbers)};Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder=function(c,a){a.append('"');if(Sys.Serialization.JavaScriptSerializer._stringRegEx.test(c)){var d=c.length;for(i=0;i<d;++i){var b=c.charAt(i);if(b>=" "){if(b==="\\"||b==='"')a.append("\\");a.append(b)}else switch(b){case "\b":a.append("\\b");break;case "\f":a.append("\\f");break;case "\n":a.append("\\n");break;case "\r":a.append("\\r");break;case "\t":a.append("\\t");break;default:a.append("\\u00");if(b.charCodeAt()<16)a.append("0");a.append(b.charCodeAt().toString(16))}}}else a.append(c);a.append('"')};Sys.Serialization.JavaScriptSerializer._serializeWithBuilder=function(b,a,i,g){var c;switch(typeof b){case "object":
if(b)
if(b.isArray){a.append("[");for(c=0;c<b.length;++c){if(c>0)a.append(",");Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(b[c],a,false,g)}a.append("]")}
else if(Boolean.isInstanceOfType(b))Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(b,a);
else if(String.isInstanceOfType(b))Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(b,a);
else
{if(Date.isInstanceOfType(b)){a.append('"\\/Date(');a.append(b.getTime());a.append(')\\/"');break}var d=[],f=0;for(var e in b){if(e.startsWith("$"))continue;if(e===Sys.Serialization.JavaScriptSerializer._serverTypeFieldName&&f!==0){d[f++]=d[0];d[0]=e}else d[f++]=e}if(i)d.sort();a.append("{");var j=false;for(c=0;c<f;c++){var h=b[d[c]];if(typeof h!=="undefined"&&typeof h!=="function"){if(j)a.append(",");else j=true;Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(d[c],a,i,g);a.append(":");Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(h,a,i,g)}}a.append("}")}else a.append("null");break;case "number":Sys.Serialization.JavaScriptSerializer._serializeNumberWithBuilder(b,a);break;case "string":Sys.Serialization.JavaScriptSerializer._serializeStringWithBuilder(b,a);break;case "boolean":Sys.Serialization.JavaScriptSerializer._serializeBooleanWithBuilder(b,a);break;default:a.append("null")}};Sys.Serialization.JavaScriptSerializer.serialize=function(b){var a=new Sys.StringBuilder;Sys.Serialization.JavaScriptSerializer._serializeWithBuilder(b,a,false);return a.toString()};Sys.Serialization.JavaScriptSerializer.deserialize=function(data,secure){if(data.length===0)throw Error.argument("data",Sys.Res.cannotDeserializeEmptyString);try{var exp=data.replace(Sys.Serialization.JavaScriptSerializer._dateRegEx,"$1new Date($2)");if(secure&&Sys.Serialization.JavaScriptSerializer._jsonRegEx.test(exp.replace(Sys.Serialization.JavaScriptSerializer._jsonStringRegEx,"")))throw null;return eval("("+exp+")")}catch(a){throw Error.argument("data",Sys.Res.cannotDeserializeInvalidJson)}};Sys.CultureInfo=function(c,b,a){this.name=c;this.numberFormat=b;this.dateTimeFormat=a};Sys.CultureInfo.prototype={_getDateTimeFormats:function(){if(!this._dateTimeFormats){var a=this.dateTimeFormat;this._dateTimeFormats=[a.MonthDayPattern,a.YearMonthPattern,a.ShortDatePattern,a.ShortTimePattern,a.LongDatePattern,a.LongTimePattern,a.FullDateTimePattern,a.RFC1123Pattern,a.SortableDateTimePattern,a.UniversalSortableDateTimePattern]}return this._dateTimeFormats},_getMonthIndex:function(a){if(!this._upperMonths)this._upperMonths=this._toUpperArray(this.dateTimeFormat.MonthNames);return Array.indexOf(this._upperMonths,this._toUpper(a))},_getAbbrMonthIndex:function(a){if(!this._upperAbbrMonths)this._upperAbbrMonths=this._toUpperArray(this.dateTimeFormat.AbbreviatedMonthNames);return Array.indexOf(this._upperAbbrMonths,this._toUpper(a))},_getDayIndex:function(a){if(!this._upperDays)this._upperDays=this._toUpperArray(this.dateTimeFormat.DayNames);return Array.indexOf(this._upperDays,this._toUpper(a))},_getAbbrDayIndex:function(a){if(!this._upperAbbrDays)this._upperAbbrDays=this._toUpperArray(this.dateTimeFormat.AbbreviatedDayNames);return Array.indexOf(this._upperAbbrDays,this._toUpper(a))},_toUpperArray:function(c){var b=[];for(var a=0,d=c.length;a<d;a++)b[a]=this._toUpper(c[a]);return b},_toUpper:function(a){return a.split("\u00a0").join(" ").toUpperCase()}};Sys.CultureInfo._parse=function(b){var a=Sys.Serialization.JavaScriptSerializer.deserialize(b);return new Sys.CultureInfo(a.name,a.numberFormat,a.dateTimeFormat)};Sys.CultureInfo.registerClass("Sys.CultureInfo");Sys.CultureInfo.InvariantCulture=Sys.CultureInfo._parse('{"name":"","numberFormat":{"CurrencyDecimalDigits":2,"CurrencyDecimalSeparator":".","IsReadOnly":true,"CurrencyGroupSizes":[3],"NumberGroupSizes":[3],"PercentGroupSizes":[3],"CurrencyGroupSeparator":",","CurrencySymbol":"\u00a4","NaNSymbol":"NaN","CurrencyNegativePattern":0,"NumberNegativePattern":1,"PercentPositivePattern":0,"PercentNegativePattern":0,"NegativeInfinitySymbol":"-Infinity","NegativeSign":"-","NumberDecimalDigits":2,"NumberDecimalSeparator":".","NumberGroupSeparator":",","CurrencyPositivePattern":0,"PositiveInfinitySymbol":"Infinity","PositiveSign":"+","PercentDecimalDigits":2,"PercentDecimalSeparator":".","PercentGroupSeparator":",","PercentSymbol":"%","PerMilleSymbol":"\u2030","NativeDigits":["0","1","2","3","4","5","6","7","8","9"],"DigitSubstitution":1},"dateTimeFormat":{"AMDesignator":"AM","Calendar":{"MinSupportedDateTime":"@-62135568000000@","MaxSupportedDateTime":"@253402300799999@","AlgorithmType":1,"CalendarType":1,"Eras":[1],"TwoDigitYearMax":2029,"IsReadOnly":true},"DateSeparator":"/","FirstDayOfWeek":0,"CalendarWeekRule":0,"FullDateTimePattern":"dddd, dd MMMM yyyy HH:mm:ss","LongDatePattern":"dddd, dd MMMM yyyy","LongTimePattern":"HH:mm:ss","MonthDayPattern":"MMMM dd","PMDesignator":"PM","RFC1123Pattern":"ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'","ShortDatePattern":"MM/dd/yyyy","ShortTimePattern":"HH:mm","SortableDateTimePattern":"yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss","TimeSeparator":":","UniversalSortableDateTimePattern":"yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'","YearMonthPattern":"yyyy MMMM","AbbreviatedDayNames":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"ShortestDayNames":["Su","Mo","Tu","We","Th","Fr","Sa"],"DayNames":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"AbbreviatedMonthNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthNames":["January","February","March","April","May","June","July","August","September","October","November","December",""],"IsReadOnly":true,"NativeCalendarName":"Gregorian Calendar","AbbreviatedMonthGenitiveNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthGenitiveNames":["January","February","March","April","May","June","July","August","September","October","November","December",""]}}');if(typeof __cultureInfo==="undefined")var __cultureInfo='{"name":"en-US","numberFormat":{"CurrencyDecimalDigits":2,"CurrencyDecimalSeparator":".","IsReadOnly":false,"CurrencyGroupSizes":[3],"NumberGroupSizes":[3],"PercentGroupSizes":[3],"CurrencyGroupSeparator":",","CurrencySymbol":"$","NaNSymbol":"NaN","CurrencyNegativePattern":0,"NumberNegativePattern":1,"PercentPositivePattern":0,"PercentNegativePattern":0,"NegativeInfinitySymbol":"-Infinity","NegativeSign":"-","NumberDecimalDigits":2,"NumberDecimalSeparator":".","NumberGroupSeparator":",","CurrencyPositivePattern":0,"PositiveInfinitySymbol":"Infinity","PositiveSign":"+","PercentDecimalDigits":2,"PercentDecimalSeparator":".","PercentGroupSeparator":",","PercentSymbol":"%","PerMilleSymbol":"\u2030","NativeDigits":["0","1","2","3","4","5","6","7","8","9"],"DigitSubstitution":1},"dateTimeFormat":{"AMDesignator":"AM","Calendar":{"MinSupportedDateTime":"@-62135568000000@","MaxSupportedDateTime":"@253402300799999@","AlgorithmType":1,"CalendarType":1,"Eras":[1],"TwoDigitYearMax":2029,"IsReadOnly":false},"DateSeparator":"/","FirstDayOfWeek":0,"CalendarWeekRule":0,"FullDateTimePattern":"dddd, MMMM dd, yyyy h:mm:ss tt","LongDatePattern":"dddd, MMMM dd, yyyy","LongTimePattern":"h:mm:ss tt","MonthDayPattern":"MMMM dd","PMDesignator":"PM","RFC1123Pattern":"ddd, dd MMM yyyy HH\':\'mm\':\'ss \'GMT\'","ShortDatePattern":"M/d/yyyy","ShortTimePattern":"h:mm tt","SortableDateTimePattern":"yyyy\'-\'MM\'-\'dd\'T\'HH\':\'mm\':\'ss","TimeSeparator":":","UniversalSortableDateTimePattern":"yyyy\'-\'MM\'-\'dd HH\':\'mm\':\'ss\'Z\'","YearMonthPattern":"MMMM, yyyy","AbbreviatedDayNames":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"ShortestDayNames":["Su","Mo","Tu","We","Th","Fr","Sa"],"DayNames":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"AbbreviatedMonthNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthNames":["January","February","March","April","May","June","July","August","September","October","November","December",""],"IsReadOnly":false,"NativeCalendarName":"Gregorian Calendar","AbbreviatedMonthGenitiveNames":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],"MonthGenitiveNames":["January","February","March","April","May","June","July","August","September","October","November","December",""]}}';Sys.CultureInfo.CurrentCulture=Sys.CultureInfo._parse(__cultureInfo);delete __cultureInfo;Sys.UI.Behavior=function(b){Sys.UI.Behavior.initializeBase(this);this._element=b;var a=b._behaviors;if(!a)b._behaviors=[this];else a[a.length]=this};Sys.UI.Behavior.prototype={_name:null,get_element:function(){return this._element},get_id:function(){var a=Sys.UI.Behavior.callBaseMethod(this,"get_id");if(a)return a;if(!this._element||!this._element.id)return "";return this._element.id+"$"+this.get_name()},get_name:function(){if(this._name)return this._name;var a=Object.getTypeName(this),b=a.lastIndexOf(".");if(b!=-1)a=a.substr(b+1);if(!this.get_isInitialized())this._name=a;return a},set_name:function(a){this._name=a},initialize:function(){Sys.UI.Behavior.callBaseMethod(this,"initialize");var a=this.get_name();if(a)this._element[a]=this},dispose:function(){Sys.UI.Behavior.callBaseMethod(this,"dispose");if(this._element){var a=this.get_name();if(a)this._element[a]=null;Array.remove(this._element._behaviors,this);delete this._element}}};Sys.UI.Behavior.registerClass("Sys.UI.Behavior",Sys.Component);Sys.UI.Behavior.getBehaviorByName=function(b,c){var a=b[c];return a&&Sys.UI.Behavior.isInstanceOfType(a)?a:null};Sys.UI.Behavior.getBehaviors=function(a){if(!a._behaviors)return [];return Array.clone(a._behaviors)};Sys.UI.Behavior.getBehaviorsByType=function(d,e){var a=d._behaviors,c=[];if(a)for(var b=0,f=a.length;b<f;b++)if(e.isInstanceOfType(a[b]))c[c.length]=a[b];return c};Sys.UI.VisibilityMode=function(){throw Error.notImplemented()};Sys.UI.VisibilityMode.prototype={hide:0,collapse:1};Sys.UI.VisibilityMode.registerEnum("Sys.UI.VisibilityMode");Sys.UI.Control=function(a){Sys.UI.Control.initializeBase(this);this._element=a;a.control=this};Sys.UI.Control.prototype={_parent:null,_visibilityMode:Sys.UI.VisibilityMode.hide,get_element:function(){return this._element},get_id:function(){if(!this._element)return "";return this._element.id},set_id:function(){throw Error.invalidOperation(Sys.Res.cantSetId)},get_parent:function(){if(this._parent)return this._parent;if(!this._element)return null;var a=this._element.parentNode;while(a){if(a.control)return a.control;a=a.parentNode}return null},set_parent:function(a){this._parent=a},get_visibilityMode:function(){return Sys.UI.DomElement.getVisibilityMode(this._element)},set_visibilityMode:function(a){Sys.UI.DomElement.setVisibilityMode(this._element,a)},get_visible:function(){return Sys.UI.DomElement.getVisible(this._element)},set_visible:function(a){Sys.UI.DomElement.setVisible(this._element,a)},addCssClass:function(a){Sys.UI.DomElement.addCssClass(this._element,a)},dispose:function(){Sys.UI.Control.callBaseMethod(this,"dispose");if(this._element){this._element.control=undefined;delete this._element}if(this._parent)delete this._parent},onBubbleEvent:function(){return false},raiseBubbleEvent:function(b,c){var a=this.get_parent();while(a){if(a.onBubbleEvent(b,c))return;a=a.get_parent()}},removeCssClass:function(a){Sys.UI.DomElement.removeCssClass(this._element,a)},toggleCssClass:function(a){Sys.UI.DomElement.toggleCssClass(this._element,a)}};Sys.UI.Control.registerClass("Sys.UI.Control",Sys.Component);
Type.registerNamespace('Sys');Sys.Res={'argumentInteger':'Value must be an integer.','scriptLoadMultipleCallbacks':'The script \'{0}\' contains multiple calls to Sys.Application.notifyScriptLoaded(). Only one is allowed.','invokeCalledTwice':'Cannot call invoke more than once.','webServiceFailed':'The server method \'{0}\' failed with the following error: {1}','webServiceInvalidJsonWrapper':'The server method \'{0}\' returned invalid data. The \'d\' property is missing from the JSON wrapper.','argumentType':'Object cannot be converted to the required type.','argumentNull':'Value cannot be null.','controlCantSetId':'The id property can\'t be set on a control.','formatBadFormatSpecifier':'Format specifier was invalid.','webServiceFailedNoMsg':'The server method \'{0}\' failed.','argumentDomElement':'Value must be a DOM element.','invalidExecutorType':'Could not create a valid Sys.Net.WebRequestExecutor from: {0}.','cannotCallBeforeResponse':'Cannot call {0} when responseAvailable is false.','actualValue':'Actual value was {0}.','enumInvalidValue':'\'{0}\' is not a valid value for enum {1}.','scriptLoadFailed':'The script \'{0}\' could not be loaded.','parameterCount':'Parameter count mismatch.','cannotDeserializeEmptyString':'Cannot deserialize empty string.','formatInvalidString':'Input string was not in a correct format.','invalidTimeout':'Value must be greater than or equal to zero.','cannotAbortBeforeStart':'Cannot abort when executor has not started.','argument':'Value does not fall within the expected range.','cannotDeserializeInvalidJson':'Cannot deserialize. The data does not correspond to valid JSON.','invalidHttpVerb':'httpVerb cannot be set to an empty or null string.','nullWebRequest':'Cannot call executeRequest with a null webRequest.','eventHandlerInvalid':'Handler was not added through the Sys.UI.DomEvent.addHandler method.','cannotSerializeNonFiniteNumbers':'Cannot serialize non finite numbers.','argumentUndefined':'Value cannot be undefined.','webServiceInvalidReturnType':'The server method \'{0}\' returned an invalid type. Expected type: {1}','servicePathNotSet':'The path to the web service has not been set.','argumentTypeWithTypes':'Object of type \'{0}\' cannot be converted to type \'{1}\'.','cannotCallOnceStarted':'Cannot call {0} once started.','badBaseUrl1':'Base URL does not contain ://.','badBaseUrl2':'Base URL does not contain another /.','badBaseUrl3':'Cannot find last / in base URL.','setExecutorAfterActive':'Cannot set executor after it has become active.','paramName':'Parameter name: {0}','cannotCallOutsideHandler':'Cannot call {0} outside of a completed event handler.','cannotSerializeObjectWithCycle':'Cannot serialize object with cyclic reference within child properties.','format':'One of the identified items was in an invalid format.','assertFailedCaller':'Assertion Failed: {0}\r\nat {1}','argumentOutOfRange':'Specified argument was out of the range of valid values.','webServiceTimedOut':'The server method \'{0}\' timed out.','notImplemented':'The method or operation is not implemented.','assertFailed':'Assertion Failed: {0}','invalidOperation':'Operation is not valid due to the current state of the object.','breakIntoDebugger':'{0}\r\n\r\nBreak into debugger?'};
if(typeof(Sys)!=='undefined')Sys.Application.notifyScriptLoaded();

//http://github.com/emwendelin/javascript-stacktrace
function printStackTrace(options) {
  var ex = (options && options.e) ? options.e : null;
  var guess = (options && options.guess) ? options.guess : true;

  var p = new printStackTrace.implementation();
  var result = p.run(ex);
  return (guess) ? p.guessFunctions(result) : result;
}

printStackTrace.implementation = function () { };

printStackTrace.implementation.prototype = {
  run: function (ex) {
    // Use either the stored mode, or resolve it
    var mode = this._mode || this.mode();
    if (mode === 'other') {
      return this.other(arguments.callee);
    }
    else {
      ex = ex ||
          (function () {
            try {
              (0)();
            } catch (e) {
              return e;
            }
          })();
      return this[mode](ex);
    }
  },

  mode: function () {
    try {
      (0)();
    } catch (e) {
      if (e.arguments) {
        return (this._mode = 'chrome');
      } else if (e.stack) {
        return (this._mode = 'firefox');
      } else if (window.opera && !('stacktrace' in e)) { //Opera 9-
        return (this._mode = 'opera');
      }
    }
    return (this._mode = 'other');
  },

  chrome: function (e) {
    return e.stack.replace(/^.*?\n/, '').
            replace(/^.*?\n/, '').
            replace(/^.*?\n/, '').
            replace(/^[^\(]+?[\n$]/gm, '').
            replace(/^\s+at\s+/gm, '').
            replace(/^Object.<anonymous>\s*\(/gm, '{anonymous}()@').
            split("\n");
  },

  firefox: function (e) {
    return e.stack.replace(/^.*?\n/, '').
            replace(/(?:\n@:0)?\s+$/m, '').
            replace(/^\(/gm, '{anonymous}(').
            split("\n");
  },

  // Opera 7.x and 8.x only!
  opera: function (e) {
    var lines = e.message.split("\n"), ANON = '{anonymous}',
        lineRE = /Line\s+(\d+).*?script\s+(http\S+)(?:.*?in\s+function\s+(\S+))?/i, i, j, len;

    for (i = 4, j = 0, len = lines.length; i < len; i += 2) {
      if (lineRE.test(lines[i])) {
        lines[j++] = (RegExp.$3 ? RegExp.$3 + '()@' + RegExp.$2 + RegExp.$1 : ANON + '()@' + RegExp.$2 + ':' + RegExp.$1) +
        ' -- ' +
        lines[i + 1].replace(/^\s+/, '');
      }
    }

    lines.splice(j, lines.length - j);
    return lines;
  },

  // Safari, Opera 9+, IE, and others
  other: function (curr) {
    var ANON = "{anonymous}", fnRE = /function\s*([\w\-$]+)?\s*\(/i, stack = [], j = 0, fn, args;

    var maxStackSize = 10;
    while (curr && stack.length < maxStackSize) {
      fn = fnRE.test(curr.toString()) ? RegExp.$1 || ANON : ANON;
      args = Array.prototype.slice.call(curr['arguments']);
      stack[j++] = fn + '(' + printStackTrace.implementation.prototype.stringifyArguments(args) + ')';

      //Opera bug: if curr.caller does not exist, Opera returns curr (WTF)
      if (curr === curr.caller && window.opera) {
        //TODO: check for same arguments if possible
        break;
      }
      curr = curr.caller;
    }
    return stack;
  },

  stringifyArguments: function (args) {
    for (var i = 0; i < args.length; ++i) {
      var argument = args[i];
      if (typeof argument == 'object') {
        args[i] = '#object';
      } else if (typeof argument == 'function') {
        args[i] = '#function';
      } else if (typeof argument == 'string') {
        args[i] = '"' + argument + '"';
      }
    }
    return args.join(',');
  },

  sourceCache: {},

  ajax: function (url) {
    var req = this.createXMLHTTPObject();
    if (!req) {
      return;
    }
    req.open('GET', url, false);
    req.setRequestHeader("User-Agent", "XMLHTTP/1.0");
    req.send('');
    return req.responseText;
  },

  createXMLHTTPObject: function () {
    // Try XHR methods in order and store XHR factory
    var xmlhttp, XMLHttpFactories = [
        function () {
          return new XMLHttpRequest();
        }, function () {
          return new ActiveXObject("Msxml2.XMLHTTP");
        }, function () {
          return new ActiveXObject("Msxml3.XMLHTTP");
        }, function () {
          return new ActiveXObject("Microsoft.XMLHTTP");
        }
    ];
    for (var i = 0; i < XMLHttpFactories.length; i++) {
      try {
        xmlhttp = XMLHttpFactories[i]();
        // Use memoization to cache the factory
        this.createXMLHTTPObject = XMLHttpFactories[i];
        return xmlhttp;
      } catch (e) { }
    }
  },

  getSource: function (url) {
    if (!(url in this.sourceCache)) {
      this.sourceCache[url] = this.ajax(url).split("\n");
    }
    return this.sourceCache[url];
  },

  guessFunctions: function (stack) {
    for (var i = 0; i < stack.length; ++i) {
      var reStack = /{anonymous}\(.*\)@(\w+:\/\/([-\w\.]+)+(:\d+)?[^:]+):(\d+):?(\d+)?/;
      var frame = stack[i], m = reStack.exec(frame);
      if (m) {
        var file = m[1], lineno = m[4]; //m[7] is character position in Chrome
        if (file && lineno) {
          var functionName = this.guessFunctionName(file, lineno);
          stack[i] = frame.replace('{anonymous}', functionName);
        }
      }
    }
    return stack;
  },

  guessFunctionName: function (url, lineNo) {
    try {
      return this.guessFunctionNameFromLines(lineNo, this.getSource(url));
    } catch (e) {
      return 'getSource failed with url: ' + url + ', exception: ' + e.toString();
    }
  },

  guessFunctionNameFromLines: function (lineNo, source) {
    var reFunctionArgNames = /function ([^(]*)\(([^)]*)\)/;
    var reGuessFunction = /['"]?([0-9A-Za-z_]+)['"]?\s*[:=]\s*(function|eval|new Function)/;
    // Walk backwards from the first line in the function until we find the line which
    // matches the pattern above, which is the function definition
    var line = "", maxLines = 10;
    for (var i = 0; i < maxLines; ++i) {
      line = source[lineNo - i] + line;
      if (line !== undefined) {
        var m = reGuessFunction.exec(line);
        if (m) {
          return m[1];
        }
        else {
          m = reFunctionArgNames.exec(line);
        }
        if (m && m[1]) {
          return m[1];
        }
      }
    }
    return "(?)";
  }
};


Type.registerNamespace('S4N.Sys');
Type.registerNamespace('S4N');

S4N.Sys.IsEmpty = function (obj, ignoreEmptyString) {
  if (typeof (ignoreEmptyString) == 'undefined') ignoreEmptyString = false;
  var tp = typeof (obj);
  return (tp == 'undefined' || obj == null || (tp == 'string' && !ignoreEmptyString && obj == ''));
};
var $isEmpty = S4N.Sys.IsEmpty;

//API promenne, dosazovane v LmComAPI.js
var ScormAPI = null; //klasicke SCORM API
var ScormIsPopup = false; //otevreni v SCORM popup okne
var ScormAPIEx = null; //S4N.Api_lmcom: rozsirene SCORM API (o funkce LMSInitializeEx, LMSCommitEx, setData, ...)
var RunApiSCORM = null; //SCORM objekt (MAC nebo Delphi) pro S4N.Engine_NewEE
var RunApiExplorer = null; //Tlacitka exploreru (MAC nebo Delphi) pro LogoBar.js
var RunLicence = null; //Licence objekt pro Run.exe (Delphi)
var Json_Rpc = null; // JSON RPC server pro S4N.Engine_lmcom
var RewiseAPI = null; //REWISE API
var LicencePlayer = { checkLicence: function () { return true; } };   //Licence a Sound player. V DictConnector.js je dostupna Silverlight verze v podobe SPlayer

var dt_mili = 1000;
var dt_sec = dt_mili * 60;
var dt_min = dt_sec * 60;
var dt_hour = dt_min * 60;
var dt_day = dt_hour * 24;

function logHandle() {
  if ($isEmpty(S4N.config) || S4N.config.lmsType != S4N.LMSType.NewEE) return null;
  var res = null;
  if (navigator.userAgent.indexOf('Macintosh') > -1) {
    res = window.LMComOfflineMac;
    if ($isEmpty(res) && (window.parent != null)) res = window.parent.LMComOfflineMac;
    if (typeof (res.Log) != 'undefined') return res;
  } else {
    res = window.external;
    if (typeof (res) != 'undefined' /*PZ kvuli Vista, 21.9.07 && typeof(res.Log)!='undefined'*/) return res;
  }
  return null;
};

var Debug;
(function (Debug) {
  function $trace(id, txt) {
    var handle = logHandle();
    try {
      if (handle) handle.Log(4, id, txt);
      else Sys.Debug.trace(id.toString() + '|' + txt);
    } catch (e) { }
  }
  Debug.$trace = $trace;
})(Debug || (Debug = {}));

var $assert = function (condition, message) {
  //uprava pro itutor; default zakomentované
  //return;
  if (condition) return;
  var handle = logHandle();
  try {
    if (handle) handle.Log(0, 0, message);
    else Sys.Debug.assert(condition, message);
  } catch (e) { }
};

jsError = function (msg, url, l) {
  var stack = printStackTrace().join('\n\n');
  $assert(false, 'ERROR ' + msg + ', url=' + url + ', line=' + l + ", stack=" + stack);
};

Hack = function () { return typeof (EA) != 'undefined'; }

//window.onerror = jsError;

S4N.Trace = function () { throw Error.notImplemented(); };
S4N.Trace.prototype = {
  no: 0,
  Eval: 1,
  Sound: 2,
  ScormServer: 3,
  ScormClient: 4,
  Registration: 5
};
S4N.Trace.registerEnum('S4N.Trace');

/*********** EVENT ARG ***********/
S4N.BoolArg = function (value) {
  S4N.BoolArg.initializeBase(this);
  this.value = value;
};
S4N.BoolArg.registerClass('S4N.BoolArg', Sys.EventArgs);

/*********** ENUM ScorePart ***********/
S4N.ScorePart = function () {
  throw Error.notImplemented();
};
S4N.ScorePart.prototype = {
  Correct: 0,
  From: 1
};
S4N.ScorePart.registerEnum('S4N.ScorePart');

/*********** ENUM ExerciseStatus ***********/
//Unknown..neznamy, Empty..prazdne kontrolky, Normal..data v kontrolkach, Preview..preview, Evaluated..po vyhodnoceni
S4N.ExerciseStatus = function () {
  throw Error.notImplemented();
};
S4N.ExerciseStatus.prototype = {
  Unknown: 0,
  Normal: 1,
  Preview: 2,
  Evaluated: 3,
  //pro modul
  notAttempted: 4,
  removed: 5
};
S4N.ExerciseStatus.registerEnum('S4N.ExerciseStatus');

/*********** ENUM LMSType ***********/
S4N.LMSType = function () { throw Error.notImplemented(); };
S4N.LMSType.prototype = {
  no: 0,
  NewEE: 1,
  EE: 2,
  LMCom: 3,
  Moodle: 4,
  SlNewEE: 5 //SLEA
  //MacPC:5
};
S4N.LMSType.registerEnum('S4N.LMSType');

/*********** ENUM RunExeType from Q:\LMComPas\LMComOffline\Utils.pas ***********/
S4N.RunExeType = function () { throw Error.notImplemented(); };
S4N.RunExeType.prototype = {
  no: 0,
  cdrom: 1,
  download: 2
};
S4N.RunExeType.registerEnum('S4N.RunExeType');

/*********** ENUM Courses ***********/
S4N.CourseIds = function () { throw Error.notImplemented(); };
S4N.CourseIds.prototype = {
  no: 0,
  English: 1,
  German: 2,
  Spanish: 3,
  Italian: 4,
  French: 5,
  Chinese: 6,
  Russian: 7,
  KurzTest: 8,
  Vyspa1: 9,
  Vyspa2: 10,
  Vyspa3: 11,
  Vyspa4: 12,
  Vyspa5: 13,
  Vyspa6: 14,
  Vyspa7: 15,
  Vyspa8: 16,
  Vyspa9: 17,
  Vyspa10: 18,
  Vyspa11: 19,
  Vyspa12: 20,
  Vyspa13: 21,
  Vyspa: 22, //pro ProductID
  NNOUcto: 23,
  ZSAJ61: 24,
  ZSAJ71: 25,
  ZSAJ81: 26,
  ZSAJ91: 27,
  ZSNJ61: 28,
  ZSNJ71: 29,
  ZSNJ81: 30,
  ZSNJ91: 31,
  ZSAJ62: 32,
  ZSAJ72: 33,
  ZSAJ82: 34,
  ZSAJ92: 35,
  ZSNJ62: 36,
  ZSNJ72: 37,
  ZSNJ82: 38,
  ZSNJ92: 39,
  MVAJtesty: 40,
  MVSPtesty: 41,
  MVFRtesty: 42,
  MVRJtesty: 43,
  MVtesty: 44,
  EuroEnglish: 45,
  RewiseEnglish: 46,
  RewiseGerman: 47,
  RewiseSpanish: 48,
  RewiseItalian: 49,
  RewiseFrench: 50,
  RewiseChinese: 51,
  RewiseRussian: 52,
  Holiday_English: 53,
  ZSAj: 54,
  ZSNj: 55,
  Ucto1: 56,
  Ucto2: 57,
  Ucto3: 58,
  UctoAll: 59,
  SurvEnglish: 60,
  SurvGerman: 61,
  SurvSpanish: 62,
  SurvFrench: 63,
  SurvItalian: 64,
  Ptas: 65,
  Esd: 66,
  Usschpor: 67,
  Ustelef: 68,
  Usprez: 69,
  Usobchjed: 70,
  EnglishBerlitz: 71,
  GermanBerlitz: 72,
  SpanishBerlitz: 73,
  ItalianBerlitz: 74,
  FrenchBerlitz: 75,
  ChineseBerlitz: 76,
  RussianBerlitz: 77,
  AholdDemoAnim: 78,
  AholdDemoVideo: 79,

  EnglishE: 82,

  VNEng3: 101,
  VNEng4: 102,
  VNEng5: 103,
  VNEng6: 104,
  VNEng7: 105,
  VNEng8: 106,
  VNEng9: 107,
  VNEng10: 108,
  VNEng11: 109,
  VNEng12: 110

};
S4N.CourseIds.registerEnum('S4N.CourseIds');

/*********** EVENT ARG  AcceptDataArgs ***********/
S4N.AcceptDataArgs = function (exSt, data) {
  S4N.AcceptDataArgs.initializeBase(this);
  this.exerciseStatus = exSt;
  this.data = data;
};
S4N.AcceptDataArgs.registerClass('S4N.AcceptDataArgs', Sys.EventArgs);

/*********** CreateScore ***********/
S4N.CreateScore = function (correct, from) {
  var res = [];
  res[S4N.ScorePart.Correct] = correct;
  res[S4N.ScorePart.From] = from;
  return res;
};

$headerFrame = function () {
  if (window.name == 's4n_header') return window;
  else if (window.name == 's4n_content') return _findFrame('s4n_header', window.parent);
  else return _findFrame('s4n_header', window.top);
};

$lmsModule = function () {
  var top = $headerFrame();
  return $isEmpty(top) ? null : top.scormModule;
};

$ScormAPIEx = function () {
  var top = $headerFrame();
  return $isEmpty(top) ? null : top.ScormAPIEx;
};

$LMSGetValue = function (par) {
  try {
    if (!$ScormAPIEx) return null;
    var api = $ScormAPIEx(); if (api == null) return null;
    if (!api.LMSGetValue) return null;
    return api.LMSGetValue(par);
  } catch (msg) { return null; }
}

$contentFrame = function () {
  if (window.name == 's4n_content') return window;
  else if (window.name == 's4n_header') return _findFrame('s4n_content', window.parent);
  return _findFrame('s4n_content', window.top);
};

_findFrame = function (name, root) {
  try {
    if (root.name == name) return root;
  } catch (err) {
    return null;
  }
  for (var i = 0; i < root.frames.length; i++) {
    res = _findFrame(name, root.frames[i]);
    if (res != null) return res;
  }
  return null;
};

$JSONToId = function (spaceId, globalId) {
  var res = globalId.toLowerCase();
  res = res.replace(/(\_)/g, '_u').replace(/(\.)/g, '_d').replace(/(\/)/g, '_s').replace(/(\-)/g, '_c');
  return spaceId.toLowerCase().replace(/(\-)/g, '_c') + '_x' + res;
};

$JSONFromId = function (id) {
  var idx = id.indexOf('_x');
  var sp = id.substring(0, idx).replace(/(_c)/g, '-');
  var gl = id.substring(idx + 2, id.length);
  gl = gl.replace(/(_s)/g, '/').replace(/(_d)/g, '.').replace(/(_u)/g, '_').replace(/(_c)/g, '-');
  var res = {};
  res.spaceId = sp; res.globalId = gl;
  return res;
};

$innerText = function (el) {
  return document.all ? el.innerText : el.textContent;
};

/*********** UTILS ***********/
S4N.Sys.getAbsoluteUrl = function (selfGlobalId, spaceId, globalId) {
  var basicPath;
  if (Hack()) {
    basicPath = EA.DataPath();
  } else {
    if (urlBasicPath == null) {
      var url = decodeURI(location.href.toLowerCase());
      url = url.substr(0, url.length - location.search.length - location.hash.length - selfGlobalId.length - 1);
      var idx = url.lastIndexOf('/');
      urlBasicPath = url.substr(0, idx + 1);
    }
    basicPath = urlBasicPath;
  }
  var res = basicPath + spaceId + '/' + globalId;
  return res.toLowerCase();
};

S4N.Sys.DocumentAll = function () {
  var res = [];
  var nodeQueue = [document.body];
  var childNodes = this.childNodes;
  var node;
  var c;

  while (nodeQueue.length) {
    node = Array.dequeue(nodeQueue);
    Array.add(res, node);
    childNodes = node.childNodes;
    if (childNodes.length != 0) {
      for (c = 0; c < childNodes.length; c++) {
        node = childNodes[c];
        if (node.nodeType == 1) {
          Array.enqueue(nodeQueue, node);
        }
      }
    }
  }

  return res;
};

S4N.Sys.textFromHtml = function (txt) {
  if (txt.indexOf('<') < 0) return txt;
  var sb = new Sys.StringBuilder();
  var st = 0;
  for (var i = 0; i < txt.length; i++) {
    if (st == 0) {
      if (txt.charAt(i) == '<') { st = 1; continue; }
      sb.append(txt.charAt(i));
    } else {
      if (txt.charAt(i) == '>') st = 0;
    }
  }
  return sb.toString();
};

S4N.Sys.setCssStatus = function (el) {
  if (el == null) return;
  for (var i = 1; i + 1 < arguments.length; i += 2) {
    if (arguments[i]) Sys.UI.DomElement.addCssClass(el, arguments[i + 1]);
    else Sys.UI.DomElement.removeCssClass(el, arguments[i + 1]);
  }
};

S4N.Sys.setDisplayId = function (elName, value) {
  S4N.Sys.setDisplay($get(elName), value);
};

S4N.Sys.setDisplay = function (el, value) {
  var displayCls = (el.tagName == 'span' ? 'displayInline' : 'displayBlock');
  if (value) {
    Sys.UI.DomElement.removeCssClass(el, 'displayNone');
    Sys.UI.DomElement.addCssClass(el, displayCls);
  } else {
    Sys.UI.DomElement.removeCssClass(el, displayCls);
    Sys.UI.DomElement.addCssClass(el, 'displayNone');
  }
};

S4N.Sys.createActiveXObject = function (id) {
  var error; var control = null;
  try {
    if (window.ActiveXObject) {
      control = new ActiveXObject(id);
    } else if (window.GeckoActiveXObject) {
      control = new GeckoActiveXObject(id);
    }
  }
  catch (error) {; }
  return control;
};

/*S4N.Sys.getActiveX = function (id) {
if (Sys.Browser.agent == Sys.Browser.InternetExplorer) return window[id];
if (Sys.Browser.agent == Sys.Browser.Safari) return document[id+'-embed'];
return document.getElementById(id+'-embed');
};

S4N.body = function () { document.getElementsByTagName("body")[0]; };
*/
S4N.Sys.addHandler = function (element, eventName, handler) {
  if (element.addEventListener)
    element.addEventListener(eventName, handler, false);
  else if (element.attachEvent)
    element.attachEvent(eventName, handler);
};

S4N.Sys.addHandlers = function (element, events, handlerOwner) {
  for (var name in events) {
    var handler = events[name];
    if (typeof (handler) !== 'function') throw Error.invalidOperation(Sys.Res.cantAddNonFunctionhandler);
    if (handlerOwner)
      handler = Function.createDelegate(handlerOwner, handler);
    S4N.Sys.addHandler(element, name, handler);
  }
};

/*S4N.DebugEmpty = function () {};
S4N.DebugEmpty.prototype = {
assert : function() { },
clearTrace : function() { },
trace : function() { },
traceDump : function() { },
fail : function() {}
};
S4N.DebugEmpty.registerClass('S4N.DebugEmpty', null);*/

var $serialize = function (obj) {
  return $isEmpty(obj) ? '' : Sys.Serialization.JavaScriptSerializer.serialize(obj);
};
var $deserialize = function (str) {
  return $isEmpty(str) ? null : Sys.Serialization.JavaScriptSerializer.deserialize(str);
};

S4N.Percent = function (score, max) {
  if (max <= 0) return -1;
  return parseInt(score / max * 100);
};

S4N.Querystring = function (qs) { // optionally pass a querystring to parse
  this.params = {};
  this.get = function (key, default_) {
    if (default_ == null) default_ = null;
    var value = this.params[key];
    return value == null ? default_ : value;
  };

  if (qs == null)
    qs = location.search.substring(1, location.search.length);
  if (qs.length == 0) return;
  qs = qs.replace(/\+/g, ' '); // Turn <plus> back to <space>
  var args = qs.split('&'); // parse out name/value pairs separated via &
  for (var i = 0; i < args.length; i++) {
    var pair = args[i].split('=');
    var name = unescape(pair[0]);
    var value = pair.length == 2 ? unescape(pair[1]) : name;
    this.params[name] = value;
  }
};

S4N.Querystring._instance = null;

S4N.Querystring.instance = function () {
  if (S4N.Querystring._instance == null) S4N.Querystring._instance = new S4N.Querystring();
  return S4N.Querystring._instance;
};

$getEx = function (ctrl, ext, ignoreNull) { //ignoreNull je difotne false
  var id = Sys.UI.Behavior.isInstanceOfType(ctrl) ? ctrl._element.id : ctrl.get_id();
  id += '_' + ext;
  var res = $get(id);
  if (typeof (ignoreNull) == 'undefined' || !ignoreNull) {
    $assert(res != null, '$getEx: ' + id);
  }
  return res;
};


Array.prototype.isArray = true;

/*
//based on http://devedge-temp.mozilla.org/viewsource/2003/windows-media-in-netscape/first-detection.js.txt
S4N.Sys.DetectMediaPlayer = function () {
var wmp64 = "MediaPlayer.MediaPlayer.1"; var wmp7 = "WMPlayer.OCX.7";
if((window.ActiveXObject && navigator.userAgent.indexOf('Windows') != -1) || window.GeckoActiveXObject)	{
var control = S4N.Sys.createActiveXObject(wmp7);
if (control) {
Debug.$trace( S4N.Trace.no, 'S4N.SoundPlayer.detect: MediaPlayer 7');
return S4N.SoundDriver.MediaPlayer; 
}
control = S4N.Sys.createActiveXObject(wmp64);
if (control) { 
Debug.$trace(S4N.Trace.no, 'S4N.SoundPlayer.detect: MediaPlayer 6.4');
return S4N.SoundDriver.MediaPlayer6;
}
}
return S4N.SoundDriver.prototype.no;
Debug.$trace(S4N.Trace.no, 'S4N.SoundPlayer.detect: MediaPlayer no');
};

S4N.Sys.DetectFlashPlayer = function () {
//if (DetectFlashVer (7,0,0)) return S4N.SoundDriver.prototype.FlashPlayer;
if (deconcept.SWFObjectUtil.getPlayerVersion().major>=7) return S4N.SoundDriver.prototype.FlashPlayer;
return S4N.SoundDriver.prototype.no;
};
*/

S4N.Config = function () {
  S4N.Config.initializeBase(this);
  S4N.config = this;
  this.courseId = S4N.CourseIds.no;
  this.productId = S4N.CourseIds.no;
  this.lmsType = S4N.LMSType.no;
  this.basicPath = '';
  this.site = '';
  this.regLimitedFree = false;
};
S4N.Config.prototype = {
  relUrl: function (spaceId, globalId) {
    var res = this.basicPath + spaceId + '/' + globalId;
    res = res.replace(/(berlitz)/g, '')
    return res;
  },
  navigate: function (frame, spaceId, globalId) {
    if (!frame) return;
    frame.location.href = this.relUrl(spaceId, globalId);
  },
  navigateCrs: function (frame, crsId, globalId) {
    if ($isEmpty(crsId) || crsId == S4N.CourseIds.no) crsId = this.courseId;
    var si = S4N.CourseIds.toString(crsId).toLowerCase().replace(/(_)/g, '-');
    this.navigate(frame, si, globalId);
  },
  get_CourseId: function (crsId) {
    return $isEmpty(crsId) || crsId == S4N.CourseIds.no ? this.courseId : crsId;
  },
  testUrl: function (url) {
    return this.basicPath + this.testSpaceId() + '/' + url;
  },
  testSpaceId: function () {
    return S4N.CourseIds.toString(this.courseId).replace('Berlitz', '') + 'Test';
  },
  courseUrl: function (url) {
    return this.basicPath + S4N.CourseIds.toString(this.courseId).replace('Berlitz', '') + '/' + url;
  }

};
S4N.Config.registerClass('S4N.Config', Sys.Component);

$config = function () { return S4N.config; };

Sys.UI.DomElement.getCurrentStyle = function Sys$UI$DomElement$_getCurrentStyle(element) {
  var w = (element.ownerDocument ? element.ownerDocument : element.documentElement).defaultView;
  return ((w && (element !== w) && w.getComputedStyle) ? w.getComputedStyle(element, null) : element.currentStyle);
};

var $adjustAPI = function () { };

rxLocComment = new RegExp("\\(\\*.*?\\*\\)", "g");

function CSLocalize(id, def) {
  if (id == null || tradosData==null || typeof(tradosData) == 'undefined') return def.replace(rxLocComment, '');
  var res = tradosData[id];
  if (typeof (res) == 'undefined') return def.replace(rxLocComment, '');
  return res;
};
/*
var src = ".The rain in Spain falls mainly in the plain";
var re = new RegExp("\\w+", "g");
var res = regExpParse(re, src);
for (var i = 0; i < res.length; i++)
alert((res[i].match ? 'YES "' : 'NO "') + res[i].value + '"');
*/
function regExpParse(regEx, src) {
  var res = [];
  if (src == null || src.length == 0) return res;
  var index = 0;
  var match;
  while ((match = regEx.exec(src)) !== null) {
    if (index < match.index)
      Array.add(res, { match: false, value: src.slice(index, match.index) });
    Array.add(res, { match: true, value: src.slice(match.index, regEx.lastIndex) });
    index = regEx.lastIndex;
  }
  if (index < src.length)
    Array.add(res, { match: false, value: src.slice(index, value.length) });
  return res;
};

Type.registerNamespace('S4N');

S4N._Doctor = function () {
    S4N._Doctor.initializeBase(this);
    //this.canTrace = true; //(Sys.Browser.agent == Sys.Browser.InternetExplorer && Sys.Browser.version>=5.5);
    //if (!this.canTrace) return;

    this.isDoctorPage = typeof (isDoctor)!='undefined' && isDoctor;
    var st = typeof (startTrace)!='undefined' && startTrace;
    var val = window.top.name; 
    if ($isEmpty(val) && st) {
        window.top.name = '%'; val = '%';
    }
    this.active = !$isEmpty(val);
    if (!this.isDoctorPage) {
        Sys.Application.add_load (Function.createDelegate(this, this.onLoadPage));
        if (!this.active) return;
        if ($isEmpty(window.top.doctorBuf)) {
            this.buf = new Sys.StringBuilder();
            window.top.doctorBuf = this.buf;
            if (val!='%') this.buf.append (val); 
        } else
            this.buf = window.top.doctorBuf;
        this.adjustTracing (); 
        Sys.Application.add_unload (Function.createDelegate(this, this.onUnload));
    } else {
        this.set_id ('trace');
        Sys.Application.add_load (Function.createDelegate(this, this.onLoad));
    }
};
    
S4N._Doctor.prototype = {

    onLoad : function () { // isDoctorPage
        this.adjustTracing ();
        //Dle http://www.blooberry.com/indexdot/html/topics/uastring-navobj.htm
        //$getEx (this, 'MediaPlayer').innerHTML = this.MPVer();
        //$getEx (this, 'FlashPlayer').innerHTML = '';
        S4N.Sys.setCssStatus ($getEx (this, 'NotAvailable'), this.canTrace, 'displayNone');
        $addHandler ($getEx (this, 'Start'), 'click', Function.createDelegate(this, this.start));
        $addHandler ($getEx (this, 'Stop'), 'click', Function.createDelegate(this, this.stop));
        $addHandler ($getEx (this, 'Mail'), 'click', Function.createDelegate(this, this.mail));
    },

    onLoadPage : function () { // not isDoctorPage
        var logo = $get ('logo');
        if (logo==null) return;
        $addHandler (logo, 'click', Function.createDelegate(this, this.onLogoClick));
    }, 
    
    onUnload : function () { // not isDoctorPage
        if (!this.active) return;
        //var val = this.buf.toString();
        var val;
        try { val = this.buf.toString(); }
        catch (error) { val = ''; }
        window.top.name = $isEmpty(val) ? '%' : val;
    },
    
    /*MPVer : function () {
        switch (S4N.Sys.DetectMediaPlayer ()) {
            case S4N.SoundDriver.MediaPlayer: return 'Version 7 or better installed';
            case S4N.SoundDriver.MediaPlayer6: return 'Version 6.4 installed';
            default: return 'not installed';
        }
    },*/
    
    trace : function (txt) { // isDoctorPage
        if (!this.active || this.isDoctorPage) return;
        txt += '\r\n';
        //window.top.name += txt;
        try { this.buf.append (txt); }
        catch (error) { ; }
    },
    
    adjustTracing : function () { //all
        if (!this.isDoctorPage) {
            if (this.active) Sys.Debug._appendTrace = Function.createDelegate(this, this.trace);
        } else {
            S4N.Sys.setCssStatus ($getEx (this, 'Active'), !this.canTrace || !this.active, 'displayNone');
            S4N.Sys.setCssStatus ($getEx (this, 'NotActive'), !this.canTrace || this.active, 'displayNone');
            $getEx (this, 'View').value = window.top.name;
        }
    },
    
    start : function () { // isDoctorPage
        this.active = true; window.top.name = '%';
        this.adjustTracing ();
    },
    
    stop : function () { // isDoctorPage
        this.active = false; window.top.name = '';
        this.adjustTracing ();
    },
    
    onLogoClick : function (ev) { // not isDoctorPage
        if (!ev.ctrlKey || !ev.shiftKey) return;
        window.top.location.href = $config().basicPath + 'framework/doctor.html';
    },
    
    mail : function () { // isDoctorPage
        alert ( window.top.name);
    }
    
};
S4N._Doctor.registerClass('S4N._Doctor', Sys.Component);

S4N.Doctor = new S4N._Doctor ();
Type.registerNamespace('S4N');
S4N.JsonRpc = function() {
    S4N.JsonRpc.initializeBase(this);
    this.scorm = '';
    this.rewise = '';
};

S4N.JsonRpc.prototype = {
    
    initialize : function () {
        S4N.JsonRpc.callBaseMethod(this, 'initialize');
        Json_Rpc = this;
    },
    
    call : function (serverName, procName) {
        try {
            var data = {}; 
            var url = this[serverName];
            data.name = serverName + '.' + procName;
            if (arguments.length>1) {
                data.pars = {};
                for (var i=2; i+1<arguments.length; i+=2)
                    data.pars[arguments[i]] = arguments[i+1];
            }
            var res = null;
            try {
                var req = new XMLHttpRequest();
                req.open('POST', url, false);
                req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                var body = $serialize(data);
                try {
                    req.send(body);
                    if (req.status!=200) throw '';
                } catch (e) {
                    throw 'JavaScript.S4N.JsonRpc.call HTTP Errpr: name=' + name + ', url=' + url + ', req.status=' + req.status + ', req.statusText=' + req.statusText;
                }
                resTxt = req.responseText;
            } catch (e) {
                throw 'JavaScript.S4N.JsonRpc.call: name=' + name + ', url=' + url + ', error=' + e;
            }
            if ($isEmpty (resTxt)) return null;
            if (resTxt.charAt(0)!='{')
                throw 'JavaScript.S4N.JsonRpc.call, 2: name=' + name + ', url=' + url + ', msg=' + resTxt; 
            var resObj;
            try {
                resObj = $deserialize(resTxt);
            } catch (e) {
                throw 'JavaScript.S4N.JsonRpc.call, JavaScriptSerializer.deserialize: name=' + name + ', url=' + url + ', msg=' + e + ', text=' + resTxt; 
            }
            if (resObj==null) return null;
            //Chyba?
            if (resObj.error!=0)
                throw 'JavaScript.S4N.JsonRpc.call Server return error: name=' + name + ', url=' + url + ', errorCode=' + resObj.error + ', errorText=' + resObj.errorText;
            return resObj.result; 
        } catch (exp) {
            alert (exp);
        }
    }
    
};
S4N.JsonRpc.registerClass('S4N.JsonRpc', Sys.Component);

/*
try {
var json = new S4N.JsonRpc ();
json.url = 'http://www.langmaster.cz/EduAuthorNew/Framework/ScormServer/Default.aspx';
var res = json.call ('HalloWorld',
  'text','text','bool',true,'int',123,'real',123.456,'date',new Date().getTime());
} catch (e) {
   alert (e);
}  
var res = null; 
*/




Type.registerNamespace('S4N');

/*********** INTERFACE IScoreProvider ***********/
S4N.IScoreProvider = function() { throw Error.notImplemented(); };
S4N.IScoreProvider.prototype = {
    provideData: function(data) { throw Error.notImplemented(); },
    acceptData: function(exSt, data) { throw Error.notImplemented(); }, 
    resetData: function(data) { throw Error.notImplemented(); },
    get_score: function() { throw Error.notImplemented(); } 
};
S4N.IScoreProvider.registerInterface("S4N.IScoreProvider");


/*********** ENUM EvalType ***********/
S4N.EvalType = function() { throw Error.notImplemented(); };
S4N.EvalType.prototype = {
    Or: 0,
    And: 1
};
S4N.EvalType.registerEnum('S4N.EvalType');

/*********** COMPONENT EvalGroup ***********/
S4N.EvalGroup = function () {
    S4N.EvalGroup.initializeBase(this);

    this.scoreProviders = [];
    this.spText = null;
    this.evalType = S4N.EvalType.Or;
    this.exerciseStatus = S4N.ExerciseStatus.Unknown;
    this.evalGroup = null;
    this.example = false;
};    
S4N.EvalGroup.prototype = {

    initialize : function() {
        S4N.EvalGroup.callBaseMethod(this, 'initialize');
        if (this.spText!=null)
            for (var i=0; i<this.spText.length; i++) {
                var prov = $find(this.spText[i]); prov.evalGroup = this;
                Array.add (this.scoreProviders, prov);
            }  
    },
    
    set_scoreProviders : function (value) { this.spText = value; },
    get_scoreProviders : function () { return this.scoreProviders; },
    set_evalType : function (value) { this.evalType = S4N.EvalType.parse(value,true); },
    get_evalType : function () { return this.evalType; },
    set_evalGroup : function (value) { this.evalGroup = value; },
    get_evalGroup : function () { return this.evalGroup; },
    
    addScoreProvider : function (provider) {
        $assert (S4N.IScoreProvider.isImplementedBy (provider));
        Array.add (this.scoreProviders, provider);
    },
    
    //--------- S4N.IScoreProvider
    provideData : function (data) {
        for (var i = 0; i < this.scoreProviders.length; i++) {
            this.scoreProviders[i].provideData (data);
        }    
    },
    
    acceptData : function (exSt, data) {
        if (this.exerciseStatus == exSt) return;
        for (var i = 0; i < this.scoreProviders.length; i++)
            this.scoreProviders[i].acceptData (exSt, data);
        this.exerciseStatus = exSt;
        this.raisePropertyChanged ('exerciseStatus');
        //if (_myEvalGroupControl!=null) //obsolete
            //_myEvalGroupControl.onChangeExerciseStatus();
    },
    
    resetData : function (data) {
        for (var i = 0; i < this.scoreProviders.length; i++) {
            this.scoreProviders[i].resetData (data);
        }    
    },
    
    get_score : function () {
        if (this.example || this.scoreProviders.length == 0) return null;
        var resFrom = 0; var resCorrect = 0;
        if (this.evalType == S4N.EvalType.Or) {
            for (var i=0; i<this.scoreProviders.length; i++) {
                var sc = this.scoreProviders[i].get_score ();
                if (sc==null) continue;
                resFrom += sc [S4N.ScorePart.From];
                resCorrect += sc [S4N.ScorePart.Correct];
            }
        } else if (this.evalType == S4N.EvalType.And) {
            var ok = true;
            for (var i=0; i<this.scoreProviders.length; i++) {
                var sc = this.scoreProviders[i].get_score ();
                if (sc==null) continue;
                if (sc==null || sc [S4N.ScorePart.Correct] < sc [S4N.ScorePart.From])
                {
                    ok = false;
                    break;
                }
            }
            resFrom = 1;
            resCorrect = ok ? 1 : 0;
        }
        return S4N.CreateScore (resCorrect,resFrom);
    }
};
S4N.EvalGroup.registerClass('S4N.EvalGroup', Sys.Component, S4N.IScoreProvider);

/*********** CONTROL Control ***********/
S4N.Control = function (element) {
    S4N.Control.initializeBase(this, [element]);
    
    this.exerciseStatus = S4N.ExerciseStatus.Unknown;
    this.evalGroup = null;
};    
S4N.Control.prototype = {    

    get_score : function () { return S4N.CreateScore (this.isCorrect() ? 1 : 0, 1); },
    
    get_control : function (id, ignoreNull) { return $getEx (this, id, ignoreNull); },
    
    acceptData : function (exSt, data) {
        if (this.exerciseStatus == exSt) return;
        this.exerciseStatus = exSt;
        this.doAcceptData(exSt, data);
    },

    isCorrect : function () { return false; },
    
    doAcceptData : function (exSt, data) { }
    
};

S4N.Control.registerClass('S4N.Control', Sys.UI.Control, S4N.IScoreProvider);

/*********** persisentni data k jedne strance ***********/
S4N.ModulePageData = function () {
    this.i = -1; //index
    this.ms = 0; //score, 0 pro nevyhodnotitelne cviceni
    this.s = 0; //score
    //this.st = 0; //datum prvniho vstupu do stranky
    //this.et = 0; //datum posledniho vstupu do stranky
    //this.t = 0; //celkovy ztraveny cas na strance
    this.st = S4N.ExerciseStatus.Normal; //stav cviceni
    // dalsi properties pro kazdou z kontrolek
};

/*********** persisentni data k modulu ***********/
S4N.ModuleData = function () {
    this.st = S4N.ExerciseStatus.Normal;
    //this.actPage = 0; //index aktualni stranky
    this.ms = 0; //maximalni score
    this.s = 0; //score
    this.bt = 0; //datum prvniho vstupu do modulu
    this.et = 0; //datum posledniho vstupu do modulu
    this.t = 0; //celkovy ztraveny cas s modulem
    this.pages = []; //array of S4N.ModulePageData, persistence jednotlivych stranek
};

/*********** COMPONENT _Page ***********/
S4N.Page = function () {
    S4N.Page.initializeBase(this);

    this.spaceId = null;
    this.globalId = null;
    this.title = ''; //Titulek stranky

    this.exerciseStatus = S4N.ExerciseStatus.Normal;
    this.module = null; //S4N.Module objekt
    this.data = null; //S4N.ModulePageData. persistentni data stranky. data.i=-1 iff stranka neni v IFrame nebo neni v modulu

};

S4N.Page.prototype = {

    initialize: function () {
        S4N.Page.callBaseMethod(this, 'initialize');
        Sys.Application.add_load(Function.createDelegate(this, this.onLoad));
        Sys.Application.add_unload(Function.createDelegate(this, this.onUnload));
    },

    onLoad: function () {
        this.module = $lmsModule();
        this.data = $isEmpty(this.module) ? new S4N.ModulePageData() : this.module.get_pageData(this.spaceId, this.globalId);
        this.index = this.data.i;
        this.acceptData(this.data.st, this.data);
        if (this.module != null) this.module.innerPageChanged(true, this); //notifikace modulu
        S4N.Sys.setCssStatus(document.body, false, 'visibleHidden');
        window.focus();
    },

    onUnload: function () {
        if (this.module == null) return;
        this.provideData(this.data);
        //Odvazani od modulu
        this.module.page = null; this.module = null;
    },

    debug_status: function (status) {
        var _evalRoot = $evalRoot();
        if (_evalRoot == null) {
            this.exerciseStatus = S4N.ExerciseStatus.Evaluated;
            data.st = S4N.ExerciseStatus.Evaluated;
            return;
        }
        var data = this.data;
        if (this.exerciseStatus == S4N.ExerciseStatus.Normal && status == S4N.ExerciseStatus.Evaluated)
            this.provideData(data);
        else if (this.exerciseStatus == S4N.ExerciseStatus.Evaluated && status == S4N.ExerciseStatus.Normal)
            this.resetData(data);
        this.exerciseStatus = status;
        data.st = status;
        this.acceptData(this.exerciseStatus, data);
    },

    reset: function () {
        var data = this.data;
        this.exerciseStatus = S4N.ExerciseStatus.Normal;
        this.resetData(data);
        data.st = this.exerciseStatus;
        this.acceptData(this.exerciseStatus, data);
        if (this.module != null) {
            this.module.moduleData.pages[data.i] = data;
            this.module.innerPageChanged(false, this); //notifikace modulu
        }
    },

    evaluate: function (data, pageInfo) {
        var _evalRoot = $evalRoot();
        if (_evalRoot == null) {
            this.exerciseStatus = S4N.ExerciseStatus.Evaluated;
            data.st = S4N.ExerciseStatus.Evaluated;
            return true;
        }
        //zjisteni score
        var score = pageInfo.passive || pageInfo.errorLimit == 0 ? null : _evalRoot.get_score();
        Debug.$trace(S4N.Trace.Eval, score == null ? "null" :
            'S4N.Page.evaluate: ' + score[S4N.ScorePart.Correct].toString() + '/' + score[S4N.ScorePart.From].toString());
        //uschovat vysledek?
        var saveResult = score == null ||
            score[S4N.ScorePart.From] == 0 ||
            (score[S4N.ScorePart.Correct] / score[S4N.ScorePart.From] * 100) >= pageInfo.errorLimit; //je malo chyb
        if (!this.module.notResetable) {
            if (!saveResult) saveResult = this.askUser();
            if (!saveResult) return false;
        }
        //Refresh cviceni
        this.provideData(data);
        this.exerciseStatus = S4N.ExerciseStatus.Evaluated;
        data.st = S4N.ExerciseStatus.Evaluated;
        data.ms = score == null ? 0 : score[S4N.ScorePart.From];
        data.s = score == null ? 0 : score[S4N.ScorePart.Correct];
        this.acceptData(this.exerciseStatus, data);
        window.focus();
        return true;
    },

    askUser: function () {
        return confirm(CSLocalize('2d31eeae1c5d483db53452f07d20e0d9', 'Příliš mnoho chyb. Opravdu chcete cvičení vyhodnotit?'));
    },

    provideData: function (data) {
        var _evalRoot = $evalRoot();
        if (_evalRoot == null || data == null || _evalRoot.exerciseStatus != S4N.ExerciseStatus.Normal) return;
        _evalRoot.provideData(data);
    },

    acceptData: function (exSt, data) {
        var _evalRoot = $evalRoot();
        if (data == null || _evalRoot == null) return;
        _evalRoot.acceptData(exSt, data);
    },

    resetData: function (data) {
        var _evalRoot = $evalRoot();
        if (data == null || _evalRoot == null) return;
        _evalRoot.resetData(data);
    }

};
S4N.Page.registerClass('S4N.Page', Sys.Component);

$page = function () {
    return $find ('page');
};
$evalRoot = function () {
    return $find ('root');
};
$evalRootEx = function () {
    var res = $evalRoot();
    if (res==null) {
        res = new S4N.EvalGroup();
        res.set_id ('root');
        Sys.Application.addComponent (this);
        res.initialize();
    }
    return res;
};

function getRunApi() {
    $adjustAPI();
    return RunApiExplorer;
};

function RunBrowser(url) {
    $adjustAPI();
    if (RunApiExplorer != null) RunApiExplorer.RunBrowser(url);
    else window.location.href = url;
};


if (typeof (LicencePlayer) == 'undefined') {
    var LicencePlayer = null;
}

var LicGrammar_DaysLeft = null;

function SilverlightLicencePlayer(player) {

    this.play = function (url) {
        player().playFile(url, 0);
    }
    this.wordWrap = function (sentences) {
        return player().wordWrap(sentences);
    }
    this.licenceServiceOK = function () {
        return player().LicenceServiceOK();
    }
    this.licenceErrorMessage = function () {
        return player().LicenceErrorMessage();
    }
    this.checkLicence = function () {
        if (player().LicenceServiceOK()) return true;
        alert(player().LicenceErrorMessage());
        return false;
    }
    this.finishLicenceAnchor = function (url, reason) {
        return player().FinishLicenceAnchor(url, reason);
    }
    this.removeLicencoFromCookie = function () {
        return player().RemoveLicencoFromCookie();
    }
}
SilverlightLicencePlayer.empty = 'Entry not found.';

SilverlightLicencePlayer.licenceNotify = function (isTopBar, name, cfgStr) {
    var body = $('body');
    try { var cfg = cfgStr == null ? null : eval('(' + cfgStr + ')'); } catch (msg) { cfg = null; }
    switch (name) {
        case 'HideLicenceServiceControls': body.removeClass('show-licence-service-controls'); body.addClass('hide-licence-service-controls'); break;
        case 'ShowLicenceServiceControls': body.removeClass('hide-licence-service-controls'); body.addClass('show-licence-service-controls'); break;
        case 'DaysLeft': if (isTopBar && LicGrammar_DaysLeft != null) try { LicGrammar_DaysLeft(cfg); } catch (msg) { } break;
    }
}

var $licenceNotify = function (name, cfg) {
    try {
        if (name == 'DaysLeft' && LicGrammar_DaysLeft) { SilverlightLicencePlayer.licenceNotify(true, name, cfg); return; }
        SilverlightLicencePlayer.licenceNotify(false, name, cfg);
        var notify = $headerFrame ? $headerFrame().SilverlightLicencePlayer.licenceNotify : null;
        if (notify != null) notify(true, name, cfg);
    } catch (msg) { }
}

function isLMComDemo(lms) {
    if (lms != 'Moodle') return false;
    return window.location.href.toLowerCase().indexOf('/services/demolmsmodules/') > 0;
}

function isLMCom(lms) {
    if (lms == 'LMCom' || lms=='3') return true;
    return window.location.href.toLowerCase().indexOf('/services/demolmsmodules/') > 0;
}

function InstallationName() { //nutno rozsirit pro kazdou novou domenu
    var dom = window.location.hostname.toLowerCase();
    if (dom == 'langmaster.lbenet.com') return 'cn';
    var idx = dom.lastIndexOf('.');
    switch (dom.substring(idx + 1)) {
        case 'vn': return 'vn';
        default: return null;
    }

}

function DownloadHost(lms) { //kvuli linku na gramatiku
    switch (InstallationName()) {
        case 'vn': return 'http://down.eduland.vn';
        //case 'vn': return 'http://download.etestme.vn';
        case 'cn': return 'http://download.lbenet.com';
        default: return 'http://download.langmaster.cz'
    }
}

function serviceRoot(lms, isWidget) {
    if (isLMCom(lms))
        return isWidget ? 'http://' + window.location.hostname + '/lmcom/etestme.com' : 'http://' + window.location.hostname;
    else {
        switch (InstallationName()) {
            case 'vn': return 'http://www.eduland.vn' + (isWidget ? '/lmcom/etestme.com' : '');
            case 'cn': return 'http://langmaster.lbenet.com' + (isWidget ? '/lmcom/etestme.com' : '');
            default: return isWidget ? 'http://widgets.langmaster.com' : 'http://www.langmaster.com';
        }
    }
}

function listenTalkBase(lms) {
    return serviceRoot(lms, false) + '/comen'; //  + (isLMCom(lms) ? 'comen' : window.location.pathname.split('/')[1]);
};

//prirad click na licenced anchor
$(document).ready(function () {
    $('a[lic]').click(SilverlightLicencePlayer.clickLicenceAnchor);
});

SilverlightLicencePlayer.clickLicenceAnchorLow = function (anch, url) {
    var lic = LicencePlayer.finishLicenceAnchor(url);
    if (lic.isServiceOk) {
        anch.attr('href', lic.modifiedUrl);
        return true;
    } else {
        alert(lic.error);
        return false;
    }
}

SilverlightLicencePlayer.clickLicenceAnchorEx = function (ev) {
    return SilverlightLicencePlayer.clickLicenceAnchorLow($(ev.target), ev.data);
}

SilverlightLicencePlayer.clickLicenceAnchor = function (ev) {
    var anch = $(ev.target);
    return SilverlightLicencePlayer.clickLicenceAnchorLow(anch, anch.attr('lic'));
}

function ContentLicencePlayer() {
    this.play = function (url) {
        $contentFrame().LicencePlayer.play(url);
    }
    this.wordWrap = function (sentences) {
        return $contentFrame().LicencePlayer.wordWrap(sentences);
    }
    this.licenceServiceOK = function () {
        return $contentFrame().LicencePlayer.licenceServiceOK();
    }
    this.licenceErrorMessage = function () {
        return $contentFrame().LicencePlayer.licenceErrorMessage();
    }
    this.checkLicence = function () {
        return $contentFrame().LicencePlayer.checkLicence();
    }
    this.finishLicenceAnchor = function (url, reason) {
        return $contentFrame().LicencePlayer.finishLicenceAnchor(url, reason);
    }
    this.removeLicencoFromCookie = function () {
        return $contentFrame().LicencePlayer.removeLicencoFromCookie();
    }
}


// http://plugins.jquery.com/project/md5
//key codes: http://www.cambiaresearch.com/c4/702b8cd1-e5b0-42e6-83ac-25f0306e3e25/javascript-char-codes-key-codes.aspx/
//crossdomain: http://engin.bzzzt.biz/2010/03/31/cross-domain-data-push-methods-compared/


function DictConnector(option) {

  function trace(msg) { Debug.trace("DictConnector", msg); }

  var isCtrlDown = false; /*ctrl key je stisknut*/
    var ct_pos /*x,y pozice spanu se slovem*/, ct_w /*vyska divu se slovem*/, ct_h/*sirka divu se slovem*/, ct_word /*slovo pod mysi*/,
      current_ev, ct_ev /*souradnice mysi, zjistovane v mousemove*/
    var do_ctClose = function () { ct_content.css('display', 'none'); }; //uzavri popup okno

    /*Popup okno:*/
    var popupHtml = [
    '<div id="ct_content">',
      '<div id="ct_header">',
        '<div id="ct_title">Nadpis</div>',
        '<div id="ct_close">X</div>',
        '<div class="ct_clear"></div>',
      '</div>',
      '<div id="ct_body"></div>',
    '</div>'].join('');
    var soundMarkHtml = [
      '<span class="sound-repro">&nbsp;</span>',
      '<a lic="dict_cpv" class="sound-listen-talk" target="_blank">&nbsp;</a>',
    ].join('');
    var ct_content = $(popupHtml); $('body').append(ct_content);
    var ct_close = $('#ct_close'); ct_close.click(do_ctClose);
    var ct_body = $('#ct_body');
    var ct_title = $('#ct_title');

    do_ctClose();

    var words = []; //words cache

    var tryGetWord = function (dictId, w) { //slovo je v cache?
        var wrds = words[dictId];
        if (typeof (wrds) == 'undefined') return null;
        var res = wrds[w];
        if (typeof (res) == 'undefined') return null;
        return res;
    };

    var showWindowNew = function (data) { //show option okno
        //vloz data do popup okna
        ct_body.height(1000); //dostatecna vyska pro content
        ct_body.html(data.html + '<div id="dict_end">&nbsp;</div>');
        ct_title.html(data.word);
        //zpracuj zvukovy tag
        var sndTags = ct_body.find('.sound');
        if (sndTags.length > 0) {
            var sndTag = $(sndTags[0]);
            sndTag.html(soundMarkHtml);
            var url = sndTag.attr('url');
            //url = 'http://www.langmaster.com/lmcom/Services/DictConnector.aspx?localMP3=' + encodeURIComponent(url); //predvadeni na lokalu
            //rozdil mezi SilverlightLicencePlayer (q:\LMNet2\WebApps\EduAuthorNew\framework\script\lm\LicencePlayer.js) a 
            //HTML5 licence player (Q:\lmcom\JSPlayer\res\SLPlayer\Player.js)
            //sndTag.find('.sound-repro').click(url, function (ev) { LicencePlayer.play(ev.data); return false; });
            sndTag.find('.sound-repro').click(url, function (ev) { LicencePlayer.playFile(ev.data,0); return false; });
            var cpvLink = sndTag.find('.sound-listen-talk');
            cpvLink.attr('lic', option.listenTalk(url, data.word)); //doplneni URL pro skok do CPV
            cpvLink.click(SilverlightLicencePlayer.clickLicenceAnchor); //pri kliku na anchor se jednak zjistuje licence a jednak se do anchoru pridava Identifikace
        }
        //scrollbar?
        var wh = $(window).height();
        var scrollHeight = wh > 500 ? 500 : wh - 40;
        ct_content.css('display', 'block');
        var top = $(ct_body.find('#dict_end')).position().top;
        if (top > scrollHeight) ct_body.height(scrollHeight - 10); else ct_body.height(top + 10);
        //Show window
        var ww = $(window).width();
        var w = ct_content.width(); var h = ct_content.height();
        var st = $(document).scrollTop(); var sl = $(document).scrollLeft();
        var actX = ct_pos.left - sl; var actY = ct_pos.top - st;
        var left = 0; var top = 0;
        //nad x pod x middle
        if (ct_pos.top + h + ct_h < wh + st) top = ct_pos.top + ct_h; //pod
        else if (ct_pos.top - st - h > 0) top = ct_pos.top - h; //nad
        else top = (wh - h) / 2 + st; //center
        //vlevo x vpravo x middle
        if (ct_pos.left - sl - w > 0) left = ct_pos.left - w; //vlevo
        else if (ct_pos.left + w + ct_w < ww + sl) left = ct_pos.left + ct_w; //vpravo
        else left = (ww - w) / 2 + sl; //center
        //umisteni
        ct_content.css('top', top + 'px');
        ct_content.css('left', left + 'px');
    };

    var textNodes;
    var textNodesText;
    var hit_elem;
    var actDictId;

    var wordUnderCursorEnd = function (data, status, req) {
        trace(function () { return 'Dict: wordUnderCursorEnd'; });
        if (status == 'error') {
            ct_body.html('Error parsing text');
            trace(function () { return 'Dict: Error parsing text'; });
        }
        //v data je array of array: pro kazdou vetu seznam slov: vytvor spany
        for (var i = 0; i < textNodes.length; i++) {
            var toRepl = [];
            $.each(data[i], function (i, val) {
                var el = $('<span w="y"></span>')[0];
                el.appendChild(document.createTextNode(val));
                toRepl.push(el);
            });
            textNodes[i].replaceWith(toRepl);
        }

        //get the exact word under cursor 
        var hit_word_elem = $(document.elementFromPoint(ct_ev.clientX, ct_ev.clientY));
        //Bug 1405
        trace(function () {
          return 'cursor top=' + ct_ev.clientY.toString() + ",left=" + ct_ev.clientX.toString() +
            "; element top=" + hit_word_elem.offset().top.toString() + ",left=" + hit_word_elem.offset().left.toString() + ',html=' + hit_word_elem.html();
        });

        if (hit_word_elem == null || hit_word_elem.length == 0 || hit_word_elem.attr('w') != 'y') return;
        ct_word = hit_word_elem.text(); ct_pos = hit_word_elem.offset(); ct_w = hit_word_elem.width(); ct_h = hit_word_elem.height();
        trace(function () { return 'Dict: ct_word=' + ct_word; });

        //return original content:
        var new_nodes = hit_elem.contents().filter('span').filter(function (i) { return $(this).attr('w') == 'y'; });
        new_nodes.replaceWith(function () { return $(this).contents(); });

        //nacti data:
        if (ct_word != '') loadWordHtmlStart();
    };

    var wordUnderCursorStart = function () { //nalezeni slova pod kurzorem a start ladovani Lingea slovicka
      trace(function () { return 'Dict: wordUnderCursorStart (top=' + ct_ev.clientY.toString() + ",left=" + ct_ev.clientX.toString(); });
        hit_elem = document.elementFromPoint(ct_ev.clientX, ct_ev.clientY);
        hit_elem = $(hit_elem);
        //Bug 1405
        trace(function () { return "top=" + hit_elem.offset().top.toString() + ",left=" + hit_elem.offset().left.toString() + ',html=' + hit_elem.html();  }); 

        actDictId = getDictId(hit_elem);
        trace(function () { return 'Dict: actDictId = ' + actDictId; });

        //text contents of hit element 
        textNodes = []; textNodesText = [];
        hit_elem.contents().filter(function () {
            return this.nodeType == 3/* && this.nodeValue.match(/[^0-9\s\.\,\"\!\?]{2,}/)*/;
        }).each(function (i) { textNodes.push($(this)); textNodesText.push($(this).text()); });
        if (textNodes.length <= 0) return;

        if (LicencePlayer.wordWrap) {
            //proved word wrap pomoci SL kontrolky
            var data = LicencePlayer.wordWrap(textNodesText);
            trace(function () { return 'Dict: wordWrap, 1.sent = ' + data[0].join(''); });
            wordUnderCursorEnd(data, 'ok', null);
        } else {
            //proved word wrap na serveru
            var pars = { mode: 'word_wrap' };
            for (var i = 0; i < textNodesText.length; i++) pars['p' + i.toString()] = textNodesText[i];
            //alert(option.url());
            $.ajax({
                url: option.url() + 'callback=?',
                dataType: 'json',
                data: pars,
                //type: 'POST', pro crossdomain se prepise na get, crossdomain neni Ajax ale dynamicke vytvoreni SCRIPT tagu
                success: wordUnderCursorEnd,
                error: ajaxError
            });
        }
    };

    var ajaxError = function (jqXHR, textStatus, errorThrown) {
        ct_pos = hit_elem.offset()
        var data = { html: '<div>' + 'status=' + textStatus + ', error=' + errorThrown + '</div>', word: 'error' };
        showWindowNew(data);
    };

    var getDictId = function (el) {
        var dict = el.attr('dict'); if ($.type(dict) == 'string') return dict;
        var dictItems = el.parents('[dict]'); if (dictItems.length <= 0) return option.dict;
        return $(dictItems[0]).attr('dict')
    };

    var loadWordHtmlStart = function () { //naladuj heslo (ev. vyuzij "words" cache)
        trace(function () { return 'Dict: loadWordHtmlStart'; });
        if (option.testEntry) { //debug - heslo se bere z self HTML stranky, hleda se DIV s class=entry
            var data = { html: $('.entry').html(), word: 'debug word' };
            loadWordHtmlEnd(data, 'ok', null);
        } else {
            if (!LicencePlayer.licenceServiceOK()) {
                trace(function () { return 'Dict: !LicencePlayer.licenceServiceOK'; });
                var data = { html: 'Undefined' /*SilverlightLicencePlayer.msg*/ + '<br/>' + LicencePlayer.licenceErrorMessage(), word: 'Undefined' /*SilverlightLicencePlayer.msg*/ };
                loadWordHtmlEnd(data, 'ok', null);
            } else {
                var data = tryGetWord(actDictId, ct_word);
                if (data != null) { //slovo jiz bylo nacteno driv
                    trace(function () { return 'Dict: from cache'; });
                    showWindowNew(data);
                } else { //nacti slovo, neboli naladuj cross domain javascript json
                    trace(function () { return 'Dict: ajax: ' + option.url() + 'callback=?'; });
                    $.ajax({
                        url: option.url() + 'callback=?',
                        dataType: 'json',
                        data: { mode: "dict", dict: actDictId, word: ct_word, encoding: option.encoding },
                        success: loadWordHtmlEnd,
                        error: ajaxError,
                        beforeSend: function (jqXHR, settings) { trace(function () { return 'Dict: url=' + settings.url; }); }
                    });
                }
            }
        }
    };

    this.lingeaDebug = function (word, callback) {
        $.ajax({
            url: option.url() + 'callback=?',
            dataType: 'json',
            data: { mode: "dict", dict: option.dict, word: word },
            success: function (data, status, req) { if (callback) callback(data.html); }
        });
    };

    var loadWordHtmlEnd = function (data, status, req) { //heslo naladovano
        trace(function () { return 'Dict: loadWordHtmlStart'; });
        if (status == 'error' || data == null) {
            trace(function () { return 'Dict: Error loading dictionary word'; });
            ct_body.html('Error loading dictionary word: ' + ct_word);
        }
        if (typeof (words[actDictId]) == 'undefined') words[actDictId] = [];
        if (data.html == '') data.html = SilverlightLicencePlayer.empty;
        words[actDictId][ct_word] = data;
        showWindowNew(data);
    };

    var onKeyDown = function (ev) {
        switch (ev.which) {
            case 67: //W           
            case 81: //Q
                if (isCtrlDown || !ev.ctrlKey) return; //CTRL
                if (ev.which == 67 && selectedText() != '') break;
                isCtrlDown = true;
                do_ctClose();
                ct_ev = current_ev; //zapamatuj si aktualni pozici mysi
                wordUnderCursorStart();
                break;
            case 27: //ESC
                do_ctClose();
                break;
        };
    };

    var selectedText = function () {
        var t = '';
        if (window.getSelection) t = window.getSelection();
        else if (document.getSelection) t = document.getSelection();
        else if (document.selection) t = document.selection.createRange().text;
        return t;
    };

    var onKeyUp = function (ev) {
        isCtrlDown = false;
    };

    var mouseMove = function (ev) { //vzdy vime, kde je mys - pri keydown tak muzeme zjistit slovo pod kurzorem
        current_ev = { clientX: ev.clientX, clientY: ev.clientY, pageX: ev.pageX, pageY: ev.pageY };
    };

    this.listenTalkSentence = function (ev) {
        if (!LicencePlayer.licenceServiceOK()) {
            alert(LicencePlayer.licenceErrorMessage()); return false;
        }
        var el = $(ev.target);
        var url = option.listenTalkSentence(ev.data);
        el.attr('href', url);
        return true;
    };

    $(document).bind('keydown', onKeyDown);
    $(document).bind('keyup', onKeyUp);
    $(document).bind('mousemove', mouseMove);

};


// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />


///////////////////////////////////////////////////////////////////////////////
// Sys.Timer

Sys.Timer = function() {
    Sys.Timer.initializeBase(this);
    
    this._interval = 1000;
    this._enabled = false;
    this._timer = null;
}

Sys.Timer.prototype = {
    get_interval: function() {
        
        return this._interval;
    },
    set_interval: function(value) {
        
        if (this._interval !== value) {
            this._interval = value;
            this.raisePropertyChanged('interval');
            
            if (!this.get_isUpdating() && (this._timer !== null)) {
                this._stopTimer();
                this._startTimer();
            }
        }
    },
    
    get_enabled: function() {
        
        return this._enabled;
    },
    set_enabled: function(value) {
        
        if (value !== this.get_enabled()) {
            this._enabled = value;
            this.raisePropertyChanged('enabled');
            if (!this.get_isUpdating()) {
                if (value) {
                    this._startTimer();
                }
                else {
                    this._stopTimer();
                }
            }
        }
    },

    
    add_tick: function(handler) {
        
        
        this.get_events().addHandler("tick", handler);
    },

    remove_tick: function(handler) {
        
        
        this.get_events().removeHandler("tick", handler);
    },

    dispose: function() {
        this.set_enabled(false);
        this._stopTimer();
        
        Sys.Timer.callBaseMethod(this, 'dispose');
    },
    
    updated: function() {
        Sys.Timer.callBaseMethod(this, 'updated');

        if (this._enabled) {
            this._stopTimer();
            this._startTimer();
        }
    },

    _timerCallback: function() {
        var handler = this.get_events().getHandler("tick");
        if (handler) {
            handler(this, Sys.EventArgs.Empty);
        }
    },

    _startTimer: function() {
        this._timer = window.setInterval(Function.createDelegate(this, this._timerCallback), this._interval);
    },

    _stopTimer: function() {
        window.clearInterval(this._timer);
        this._timer = null;
    }
}

Sys.Timer.descriptor = {
    properties: [   {name: 'interval', type: Number},
                    {name: 'enabled', type: Boolean} ],
    events: [ {name: 'tick'} ]
}

Sys.Timer.registerClass('Sys.Timer', Sys.Component);

// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />


// Add common toolkit scripts here.  To consume the scripts on a control add
// 
//      [RequiredScript(typeof(CommonToolkitScripts))] 
//      public class SomeExtender : ...
// 
// to the controls extender class declaration.


Type.registerNamespace('AjaxControlToolkit');


AjaxControlToolkit.BoxSide = function() {
    /// <summary>
    /// The BoxSide enumeration describes the sides of a DOM element
    /// </summary>
    /// <field name="Top" type="Number" integer="true" static="true" />
    /// <field name="Right" type="Number" integer="true" static="true" />
    /// <field name="Bottom" type="Number" integer="true" static="true" />
    /// <field name="Left" type="Number" integer="true" static="true" />
}
AjaxControlToolkit.BoxSide.prototype = {
    Top : 0,
    Right : 1,
    Bottom : 2,
    Left : 3
}
AjaxControlToolkit.BoxSide.registerEnum("AjaxControlToolkit.BoxSide", false);


AjaxControlToolkit._CommonToolkitScripts = function() {
    /// <summary>
    /// The _CommonToolkitScripts class contains functionality utilized across a number
    /// of controls (but not universally)
    /// </summary>
    /// <remarks>
    /// You should not create new instances of _CommonToolkitScripts.  Instead you should use the shared instance CommonToolkitScripts (or AjaxControlToolkit.CommonToolkitScripts).
    /// </remarks>
}
AjaxControlToolkit._CommonToolkitScripts.prototype = {
    // The order of these lookup tables is directly linked to the BoxSide enum defined above
    _borderStyleNames : ["borderTopStyle","borderRightStyle","borderBottomStyle","borderLeftStyle"],
    _borderWidthNames : ["borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth"],
    _paddingWidthNames : ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
    _marginWidthNames : ["marginTop", "marginRight", "marginBottom", "marginLeft"],

    getCurrentStyle : function(element, attribute, defaultValue) {
        /// <summary>
        /// CommonToolkitScripts.getCurrentStyle is used to compute the value of a style attribute on an
        /// element that is currently being displayed.  This is especially useful for scenarios where
        /// several CSS classes and style attributes are merged, or when you need information about the
        /// size of an element (such as its padding or margins) that is not exposed in any other fashion.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Live DOM element to check style of
        /// </param>
        /// <param name="attribute" type="String">
        /// The style attribute's name is expected to be in a camel-cased form that you would use when
        /// accessing a JavaScript property instead of the hyphenated form you would use in a CSS
        /// stylesheet (i.e. it should be "backgroundColor" and not "background-color").
        /// </param>
        /// <param name="defaultValue" type="Object" mayBeNull="true" optional="true">
        /// In the event of a problem (i.e. a null element or an attribute that cannot be found) we
        /// return this object (or null if none if not specified).
        /// </param>
        /// <returns type="Object">
        /// Current style of the element's attribute
        /// </returns>

        var currentValue = null;
        if (element) {
            if (element.currentStyle) {
                currentValue = element.currentStyle[attribute];
            } else if (document.defaultView && document.defaultView.getComputedStyle) {
                var style = document.defaultView.getComputedStyle(element, null);
                if (style) {
                    currentValue = style[attribute];
                }
            }
            
            if (!currentValue && element.style.getPropertyValue) {
                currentValue = element.style.getPropertyValue(attribute);
            }
            else if (!currentValue && element.style.getAttribute) {
                currentValue = element.style.getAttribute(attribute);
            }       
        }
        
        if ((!currentValue || currentValue == "" || typeof(currentValue) === 'undefined')) {
            if (typeof(defaultValue) != 'undefined') {
                currentValue = defaultValue;
            }
            else {
                currentValue = null;
            }
        }   
        return currentValue;  
    },

    getInheritedBackgroundColor : function(element) {
        /// <summary>
        /// CommonToolkitScripts.getInheritedBackgroundColor provides the ability to get the displayed
        /// background-color of an element.  In most cases calling CommonToolkitScripts.getCurrentStyle
        /// won't do the job because it will return "transparent" unless the element has been given a
        /// specific background color.  This function will walk up the element's parents until it finds
        /// a non-transparent color.  If we get all the way to the top of the document or have any other
        /// problem finding a color, we will return the default value '#FFFFFF'.  This function is
        /// especially important when we're using opacity in IE (because ClearType will make text look
        /// horrendous if you fade it with a transparent background color).
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Live DOM element to get the background color of
        /// </param>
        /// <returns type="String">
        /// Background color of the element
        /// </returns>
        
        if (!element) return '#FFFFFF';
        var background = this.getCurrentStyle(element, 'backgroundColor');
        try {
            while (!background || background == '' || background == 'transparent' || background == 'rgba(0, 0, 0, 0)') {
                element = element.parentNode;
                if (!element) {
                    background = '#FFFFFF';
                } else {
                    background = this.getCurrentStyle(element, 'backgroundColor');
                }
            }
        } catch(ex) {
            background = '#FFFFFF';
        }
        return background;
    },

    getLocation : function(element) {
    /// <summary>Gets the coordinates of a DOM element.</summary>
    /// <param name="element" domElement="true"/>
    /// <returns type="Sys.UI.Point">
    ///   A Point object with two fields, x and y, which contain the pixel coordinates of the element.
    /// </returns>

    // workaround for an issue in getLocation where it will compute the location of the document element.
    // this will return an offset if scrolled.
    //
    if (element === document.documentElement) {
        return new Sys.UI.Point(0,0);
    }

    // Workaround for IE6 bug in getLocation (also required patching getBounds - remove that fix when this is removed)
    if (Sys.Browser.agent == Sys.Browser.InternetExplorer && Sys.Browser.version < 7) {
        if (element.window === element || element.nodeType === 9 || !element.getClientRects || !element.getBoundingClientRect) return new Sys.UI.Point(0,0);

        // Get the first bounding rectangle in screen coordinates
        var screenRects = element.getClientRects();
        if (!screenRects || !screenRects.length) {
            return new Sys.UI.Point(0,0);
        }
        var first = screenRects[0];

        // Delta between client coords and screen coords
        var dLeft = 0;
        var dTop = 0;

        var inFrame = false;
        try {
            inFrame = element.ownerDocument.parentWindow.frameElement;
        } catch(ex) {
            // If accessing the frameElement fails, a frame is probably in a different
            // domain than its parent - and we still want to do the calculation below
            inFrame = true;
        }

        // If we're in a frame, get client coordinates too so we can compute the delta
        if (inFrame) {
            // Get the bounding rectangle in client coords
            var clientRect = element.getBoundingClientRect();
            if (!clientRect) {
                return new Sys.UI.Point(0,0);
            }

            // Find the minima in screen coords
            var minLeft = first.left;
            var minTop = first.top;
            for (var i = 1; i < screenRects.length; i++) {
                var r = screenRects[i];
                if (r.left < minLeft) {
                    minLeft = r.left;
                }
                if (r.top < minTop) {
                    minTop = r.top;
                }
            }

            // Compute the delta between screen and client coords
            dLeft = minLeft - clientRect.left;
            dTop = minTop - clientRect.top;
        }

        // Subtract 2px, the border of the viewport (It can be changed in IE6 by applying a border style to the HTML element,
        // but this is not supported by ASP.NET AJAX, and it cannot be changed in IE7.), and also subtract the delta between
        // screen coords and client coords
        var ownerDocument = element.document.documentElement;
        return new Sys.UI.Point(first.left - 2 - dLeft + ownerDocument.scrollLeft, first.top - 2 - dTop + ownerDocument.scrollTop);
    }

    return Sys.UI.DomElement.getLocation(element);
},

    setLocation : function(element, point) {
        /// <summary>
        /// Sets the current location for an element.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="point" type="Object">
        /// Point object (of the form {x,y})
        /// </param>
        /// <remarks>
        /// This method does not attempt to set the positioning mode of an element.
        /// The position is relative from the elements nearest position:relative or
        /// position:absolute element.
        /// </remarks>
        Sys.UI.DomElement.setLocation(element, point.x, point.y);
    },
    
    getContentSize : function(element) {
        /// <summary>
        /// Gets the "content-box" size of an element.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Size of the element (in the form {width,height})
        /// </returns>
        /// <remarks>
        /// The "content-box" is the size of the content area *inside* of the borders and
        /// padding of an element. The "content-box" size does not include the margins around
        /// the element.
        /// </remarks>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        var size = this.getSize(element);
        var borderBox = this.getBorderBox(element);
        var paddingBox = this.getPaddingBox(element);
        return {
            width :  size.width - borderBox.horizontal - paddingBox.horizontal,
            height : size.height - borderBox.vertical - paddingBox.vertical
        }
    },

    getSize : function(element) {
        /// <summary>
        /// Gets the "border-box" size of an element.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Size of the element (in the form {width,height})
        /// </returns>
        /// <remarks>
        /// The "border-box" is the size of the content area *outside* of the borders and
        /// padding of an element.  The "border-box" size does not include the margins around
        /// the element.
        /// </remarks>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        return {
            width:  element.offsetWidth,
            height: element.offsetHeight
        };
    },
    
    setContentSize : function(element, size) {
        /// <summary>
        /// Sets the "content-box" size of an element.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="size" type="Object">
        /// Size of the element (in the form {width,height})
        /// </param>
        /// <remarks>
        /// The "content-box" is the size of the content area *inside* of the borders and
        /// padding of an element. The "content-box" size does not include the margins around
        /// the element.
        /// </remarks>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if (!size) {
            throw Error.argumentNull('size');
        }
        // FF respects -moz-box-sizing css extension, so adjust the box size for the border-box
        if(this.getCurrentStyle(element, 'MozBoxSizing') == 'border-box' || this.getCurrentStyle(element, 'BoxSizing') == 'border-box') {
            var borderBox = this.getBorderBox(element);
            var paddingBox = this.getPaddingBox(element);
            size = {
                width: size.width + borderBox.horizontal + paddingBox.horizontal,
                height: size.height + borderBox.vertical + paddingBox.vertical
            };
        }
        element.style.width = size.width.toString() + 'px';
        element.style.height = size.height.toString() + 'px';
    },
    
    setSize : function(element, size) {
        /// <summary>
        /// Sets the "border-box" size of an element.
        /// </summary>
        /// <remarks>
        /// The "border-box" is the size of the content area *outside* of the borders and 
        /// padding of an element.  The "border-box" size does not include the margins around
        /// the element.
        /// </remarks>
        /// <param name="element" type="Sys.UI.DomElement">DOM element</param>
        /// <param name="size" type="Object">Size of the element (in the form {width,height})</param>
        /// <returns />
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if (!size) {
            throw Error.argumentNull('size');
        }
        var borderBox = this.getBorderBox(element);
        var paddingBox = this.getPaddingBox(element);
        var contentSize = {
            width:  size.width - borderBox.horizontal - paddingBox.horizontal,
            height: size.height - borderBox.vertical - paddingBox.vertical
        };
        this.setContentSize(element, contentSize);
    },
    
    getBounds : function(element) {
        /// <summary>Gets the coordinates, width and height of an element.</summary>
        /// <param name="element" domElement="true"/>
        /// <returns type="Sys.UI.Bounds">
        ///   A Bounds object with four fields, x, y, width and height, which contain the pixel coordinates,
        ///   width and height of the element.
        /// </returns>
        /// <remarks>
        ///   Use the CommonToolkitScripts version of getLocation to handle the workaround for IE6.  We can
        ///   remove the below implementation and just call Sys.UI.DomElement.getBounds when the other bug
        ///   is fixed.
        /// </remarks>
        
        var offset = $common.getLocation(element);
        return new Sys.UI.Bounds(offset.x, offset.y, element.offsetWidth || 0, element.offsetHeight || 0);
    }, 
    
    setBounds : function(element, bounds) {
        /// <summary>
        /// Sets the "border-box" bounds of an element
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="bounds" type="Object">
        /// Bounds of the element (of the form {x,y,width,height})
        /// </param>
        /// <remarks>
        /// The "border-box" is the size of the content area *outside* of the borders and
        /// padding of an element.  The "border-box" size does not include the margins around
        /// the element.
        /// </remarks>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if (!bounds) {
            throw Error.argumentNull('bounds');
        }
        this.setSize(element, bounds);
        $common.setLocation(element, bounds);
    },
    
    getClientBounds : function() {
        /// <summary>
        /// Gets the width and height of the browser client window (excluding scrollbars)
        /// </summary>
        /// <returns type="Sys.UI.Bounds">
        /// Browser's client width and height
        /// </returns>

        var clientWidth;
        var clientHeight;
        switch(Sys.Browser.agent) {
            case Sys.Browser.InternetExplorer:
                clientWidth = document.documentElement.clientWidth;
                clientHeight = document.documentElement.clientHeight;
                break;
            case Sys.Browser.Safari:
                clientWidth = window.innerWidth;
                clientHeight = window.innerHeight;
                break;
            case Sys.Browser.Opera:
                clientWidth = Math.min(window.innerWidth, document.body.clientWidth);
                clientHeight = Math.min(window.innerHeight, document.body.clientHeight);
                break;
            default:  // Sys.Browser.Firefox, etc.
                clientWidth = Math.min(window.innerWidth, document.documentElement.clientWidth);
                clientHeight = Math.min(window.innerHeight, document.documentElement.clientHeight);
                break;
        }
        return new Sys.UI.Bounds(0, 0, clientWidth, clientHeight);
    },
   
    getMarginBox : function(element) {
        /// <summary>
        /// Gets the entire margin box sizes.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Element's margin box sizes (of the form {top,left,bottom,right,horizontal,vertical})
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        var box = {
            top: this.getMargin(element, AjaxControlToolkit.BoxSide.Top),
            right: this.getMargin(element, AjaxControlToolkit.BoxSide.Right),
            bottom: this.getMargin(element, AjaxControlToolkit.BoxSide.Bottom),
            left: this.getMargin(element, AjaxControlToolkit.BoxSide.Left)
        };
        box.horizontal = box.left + box.right;
        box.vertical = box.top + box.bottom;
        return box;
    },
    
    getBorderBox : function(element) {
        /// <summary>
        /// Gets the entire border box sizes.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Element's border box sizes (of the form {top,left,bottom,right,horizontal,vertical})
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        var box = {
            top: this.getBorderWidth(element, AjaxControlToolkit.BoxSide.Top),
            right: this.getBorderWidth(element, AjaxControlToolkit.BoxSide.Right),
            bottom: this.getBorderWidth(element, AjaxControlToolkit.BoxSide.Bottom),
            left: this.getBorderWidth(element, AjaxControlToolkit.BoxSide.Left)
        };
        box.horizontal = box.left + box.right;
        box.vertical = box.top + box.bottom;
        return box;
    },
    
    getPaddingBox : function(element) {
        /// <summary>
        /// Gets the entire padding box sizes.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <returns type="Object">
        /// Element's padding box sizes (of the form {top,left,bottom,right,horizontal,vertical})
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        var box = {
            top: this.getPadding(element, AjaxControlToolkit.BoxSide.Top),
            right: this.getPadding(element, AjaxControlToolkit.BoxSide.Right),
            bottom: this.getPadding(element, AjaxControlToolkit.BoxSide.Bottom),
            left: this.getPadding(element, AjaxControlToolkit.BoxSide.Left)
        };
        box.horizontal = box.left + box.right;
        box.vertical = box.top + box.bottom;
        return box;
    },
    
    isBorderVisible : function(element, boxSide) {
        /// <summary>
        /// Gets whether the current border style for an element on a specific boxSide is not 'none'.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="boxSide" type="AjaxControlToolkit.BoxSide">
        /// Side of the element
        /// </param>
        /// <returns type="Boolean">
        /// Whether the current border style for an element on a specific boxSide is not 'none'.
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if(boxSide < AjaxControlToolkit.BoxSide.Top || boxSide > AjaxControlToolkit.BoxSide.Left) {
            throw Error.argumentOutOfRange(String.format(Sys.Res.enumInvalidValue, boxSide, 'AjaxControlToolkit.BoxSide'));
        }
        var styleName = this._borderStyleNames[boxSide];
        var styleValue = this.getCurrentStyle(element, styleName);
        return styleValue != "none";
    },
    
    getMargin : function(element, boxSide) {
        /// <summary>
        /// Gets the margin thickness of an element on a specific boxSide.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="boxSide" type="AjaxControlToolkit.BoxSide">
        /// Side of the element
        /// </param>
        /// <returns type="Number" integer="true">
        /// Margin thickness on the element's specified side
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if(boxSide < AjaxControlToolkit.BoxSide.Top || boxSide > AjaxControlToolkit.BoxSide.Left) {
            throw Error.argumentOutOfRange(String.format(Sys.Res.enumInvalidValue, boxSide, 'AjaxControlToolkit.BoxSide'));
        }
        var styleName = this._marginWidthNames[boxSide];
        var styleValue = this.getCurrentStyle(element, styleName);
        try { return this.parsePadding(styleValue); } catch(ex) { return 0; }
    },

    getBorderWidth : function(element, boxSide) {
        /// <summary>
        /// Gets the border thickness of an element on a specific boxSide.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="boxSide" type="AjaxControlToolkit.BoxSide">
        /// Side of the element
        /// </param>
        /// <returns type="Number" integer="true">
        /// Border thickness on the element's specified side
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if(boxSide < AjaxControlToolkit.BoxSide.Top || boxSide > AjaxControlToolkit.BoxSide.Left) {
            throw Error.argumentOutOfRange(String.format(Sys.Res.enumInvalidValue, boxSide, 'AjaxControlToolkit.BoxSide'));
        }
        if(!this.isBorderVisible(element, boxSide)) {
            return 0;
        }        
        var styleName = this._borderWidthNames[boxSide];    
        var styleValue = this.getCurrentStyle(element, styleName);
        return this.parseBorderWidth(styleValue);
    },
    
    getPadding : function(element, boxSide) {
        /// <summary>
        /// Gets the padding thickness of an element on a specific boxSide.
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// DOM element
        /// </param>
        /// <param name="boxSide" type="AjaxControlToolkit.BoxSide">
        /// Side of the element
        /// </param>
        /// <returns type="Number" integer="true">
        /// Padding on the element's specified side
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        if(boxSide < AjaxControlToolkit.BoxSide.Top || boxSide > AjaxControlToolkit.BoxSide.Left) {
            throw Error.argumentOutOfRange(String.format(Sys.Res.enumInvalidValue, boxSide, 'AjaxControlToolkit.BoxSide'));
        }
        var styleName = this._paddingWidthNames[boxSide];
        var styleValue = this.getCurrentStyle(element, styleName);
        return this.parsePadding(styleValue);
    },
    
    parseBorderWidth : function(borderWidth) {
        /// <summary>
        /// Parses a border-width string into a pixel size
        /// </summary>
        /// <param name="borderWidth" type="String" mayBeNull="true">
        /// Type of border ('thin','medium','thick','inherit',px unit,null,'')
        /// </param>
        /// <returns type="Number" integer="true">
        /// Number of pixels in the border-width
        /// </returns>
        if (!this._borderThicknesses) {
            
            // Populate the borderThicknesses lookup table
            var borderThicknesses = { };
            var div0 = document.createElement('div');
            div0.style.visibility = 'hidden';
            div0.style.position = 'absolute';
            div0.style.fontSize = '1px';
            document.body.appendChild(div0)
            var div1 = document.createElement('div');
            div1.style.height = '0px';
            div1.style.overflow = 'hidden';
            div0.appendChild(div1);
            var base = div0.offsetHeight;
            div1.style.borderTop = 'solid black';
            div1.style.borderTopWidth = 'thin';
            borderThicknesses['thin'] = div0.offsetHeight - base;
            div1.style.borderTopWidth = 'medium';
            borderThicknesses['medium'] = div0.offsetHeight - base;
            div1.style.borderTopWidth = 'thick';
            borderThicknesses['thick'] = div0.offsetHeight - base;
            div0.removeChild(div1);
            document.body.removeChild(div0);
            this._borderThicknesses = borderThicknesses;
        }
        
        if (borderWidth) {
            switch(borderWidth) {
                case 'thin':
                case 'medium':
                case 'thick':
                    return this._borderThicknesses[borderWidth];
                case 'inherit':
                    return 0;
            }
            var unit = this.parseUnit(borderWidth);
            Sys.Debug.assert(unit.type == 'px', String.format(AjaxControlToolkit.Resources.Common_InvalidBorderWidthUnit, unit.type));
            return unit.size;
        }
        return 0;
    },
    
    parsePadding : function(padding) {
        /// <summary>
        /// Parses a padding string into a pixel size
        /// </summary>
        /// <param name="padding" type="String" mayBeNull="true">
        /// Padding to parse ('inherit',px unit,null,'')
        /// </param>
        /// <returns type="Number" integer="true">
        /// Number of pixels in the padding
        /// </returns>
        
        if(padding) {
            if(padding == 'inherit') {
                return 0;
            }
            var unit = this.parseUnit(padding);
            Sys.Debug.assert(unit.type == 'px', String.format(AjaxControlToolkit.Resources.Common_InvalidPaddingUnit, unit.type));
            return unit.size;
        }
        return 0;
    },
    
    parseUnit : function(value) {
        /// <summary>
        /// Parses a unit string into a unit object
        /// </summary>
        /// <param name="value" type="String" mayBeNull="true">
        /// Value to parse (of the form px unit,% unit,em unit,...)
        /// </param>
        /// <returns type="Object">
        /// Parsed unit (of the form {size,type})
        /// </returns>
        
        if (!value) {
            throw Error.argumentNull('value');
        }
        
        value = value.trim().toLowerCase();
        var l = value.length;
        var s = -1;
        for(var i = 0; i < l; i++) {
            var ch = value.substr(i, 1);
            if((ch < '0' || ch > '9') && ch != '-' && ch != '.' && ch != ',') {
                break;
            }
            s = i;
        }
        if(s == -1) {
            throw Error.create(AjaxControlToolkit.Resources.Common_UnitHasNoDigits);
        }
        var type;
        var size;
        if(s < (l - 1)) {
            type = value.substring(s + 1).trim();
        } else {
            type = 'px';
        }
        size = parseFloat(value.substr(0, s + 1));
        if(type == 'px') {
            size = Math.floor(size);
        }
        return { 
            size: size,
            type: type
        };
    },
    
    getElementOpacity : function(element) {
        /// <summary>
        /// Get the element's opacity
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Element
        /// </param>
        /// <returns type="Number">
        /// Opacity of the element
        /// </returns>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        
        var hasOpacity = false;
        var opacity;
        
        if (element.filters) {
            var filters = element.filters;
            if (filters.length !== 0) {
                var alphaFilter = filters['DXImageTransform.Microsoft.Alpha'];
                if (alphaFilter) {
                    opacity = alphaFilter.opacity / 100.0;
                    hasOpacity = true;
                }
            }
        }
        else {
            opacity = this.getCurrentStyle(element, 'opacity', 1);
            hasOpacity = true;
        }
        
        if (hasOpacity === false) {
            return 1.0;
        }
        return parseFloat(opacity);
    },

    setElementOpacity : function(element, value) {
        /// <summary>
        /// Set the element's opacity
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Element
        /// </param>
        /// <param name="value" type="Number">
        /// Opacity of the element
        /// </param>
        
        if (!element) {
            throw Error.argumentNull('element');
        }
        
        if (element.filters) {
            var filters = element.filters;
            var createFilter = true;
            if (filters.length !== 0) {
                var alphaFilter = filters['DXImageTransform.Microsoft.Alpha'];
                if (alphaFilter) {
                    createFilter = false;
                    alphaFilter.opacity = value * 100;
                }
            }
            if (createFilter) {
                element.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity=' + (value * 100) + ')';
            }
        }
        else {
            element.style.opacity = value;
        }
    },
    
    getVisible : function(element) {
        /// <summary>
        /// Check if an element is visible
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Element
        /// </param>
        /// <returns type="Boolean" mayBeNull="false">
        /// True if the element is visible, false otherwise
        /// </returns>
        
        // Note: reference to CommonToolkitScripts must be left intact (i.e. don't
        // replace with 'this') because this function will be aliased
        
        return (element &&
                ("none" != $common.getCurrentStyle(element, "display")) &&
                ("hidden" != $common.getCurrentStyle(element, "visibility")));
    },
    
    setVisible : function(element, value) {
        /// <summary>
        /// Check if an element is visible
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement" domElement="true">
        /// Element
        /// </param>
        /// <param name="value" type="Boolean" mayBeNull="false">
        /// True to make the element visible, false to hide it
        /// </param>
        
        // Note: reference to CommonToolkitScripts must be left intact (i.e. don't
        // replace with 'this') because this function will be aliased
        
        if (element && value != $common.getVisible(element)) {
            if (value) {
                if (element.style.removeAttribute) {
                    element.style.removeAttribute("display");
                } else {
                   element.style.removeProperty("display");
                }
            } else {
                element.style.display = 'none';
            }
            element.style.visibility = value ? 'visible' : 'hidden';
        }
    },
    
    resolveFunction : function(value) {
        /// <summary>
        /// Returns a function reference that corresponds to the provided value
        /// </summary>
        /// <param name="value" type="Object">
        /// The value can either be a Function, the name of a function (that can be found using window['name']),
        /// or an expression that evaluates to a function.
        /// </param>
        /// <returns type="Function">
        /// Reference to the function, or null if not found
        /// </returns>
        
        if (value) {
            if (value instanceof Function) {
                return value;
            } else if (String.isInstanceOfType(value) && value.length > 0) {
                var func;
                if ((func = window[value]) instanceof Function) {
                    return func;
                } else if ((func = eval(value)) instanceof Function) {
                    return func;
                }
            }
        }
        return null;
    },

    addCssClasses : function(element, classNames) {
        /// <summary>
        /// Adds multiple css classes to a DomElement
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to modify</param>
        /// <param name="classNames" type="Array">The class names to add</param>
        
        for(var i = 0; i < classNames.length; i++) {
            Sys.UI.DomElement.addCssClass(element, classNames[i]);
        }
    },
    removeCssClasses : function(element, classNames) {
        /// <summary>
        /// Removes multiple css classes to a DomElement
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to modify</param>
        /// <param name="classNames" type="Array">The class names to remove</param>
        
        for(var i = 0; i < classNames.length; i++) {
            Sys.UI.DomElement.removeCssClass(element, classNames[i]);
        }
    },
    setStyle : function(element, style) {
        /// <summary>
        /// Sets the style of the element using the supplied style template object
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to modify</param>
        /// <param name="style" type="Object">The template</param>

        $common.applyProperties(element.style, style);
    },
    removeHandlers : function(element, events) {
        /// <summary>
        /// Removes a set of event handlers from an element
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to modify</param>
        /// <param name="events" type="Object">The template object that contains event names and delegates</param>
        /// <remarks>
        /// This is NOT the same as $clearHandlers which removes all delegates from a DomElement.  This rather removes select delegates 
        /// from a specified element and has a matching signature as $addHandlers
        /// </remarks>
        for (var name in events) {
            $removeHandler(element, name, events[name]);
        }
    },
    
    overlaps : function(r1, r2) {
        /// <summary>
        /// Determine if two rectangles overlap
        /// </summary>
        /// <param name="r1" type="Object">
        /// Rectangle
        /// </param>
        /// <param name="r2" type="Object">
        /// Rectangle
        /// </param>
        /// <returns type="Boolean">
        /// True if the rectangles overlap, false otherwise
        /// </returns>
        
         return r1.x < (r2.x + r2.width)
                && r2.x < (r1.x + r1.width)
                && r1.y < (r2.y + r2.height)
                && r2.y < (r1.y + r1.height);
    },
    
    containsPoint : function(rect, x, y) {
        /// <summary>
        /// Tests whether a point (x,y) is contained within a rectangle
        /// </summary>
        /// <param name="rect" type="Object">The rectangle</param>
        /// <param name="x" type="Number">The x coordinate of the point</param>
        /// <param name="y" type="Number">The y coordinate of the point</param>
        
        return x >= rect.x && x < (rect.x + rect.width) && y >= rect.y && y < (rect.y + rect.height);
    },

    isKeyDigit : function(keyCode) { 
        /// <summary>
        /// Gets whether the supplied key-code is a digit
        /// </summary>
        /// <param name="keyCode" type="Number" integer="true">The key code of the event (from Sys.UI.DomEvent)</param>
        /// <returns type="Boolean" />

        return (0x30 <= keyCode && keyCode <= 0x39); 
    },
    
    isKeyNavigation : function(keyCode) { 
        /// <summary>
        /// Gets whether the supplied key-code is a navigation key
        /// </summary>
        /// <param name="keyCode" type="Number" integer="true">The key code of the event (from Sys.UI.DomEvent)</param>
        /// <returns type="Boolean" />

        return (Sys.UI.Key.left <= keyCode && keyCode <= Sys.UI.Key.down); 
    },
    
    padLeft : function(text, size, ch, truncate) { 
        /// <summary>
        /// Pads the left hand side of the supplied text with the specified pad character up to the requested size
        /// </summary>
        /// <param name="text" type="String">The text to pad</param>
        /// <param name="size" type="Number" integer="true" optional="true">The size to pad the text (default is 2)</param>
        /// <param name="ch" type="String" optional="true">The single character to use as the pad character (default is ' ')</param>
        /// <param name="truncate" type="Boolean" optional="true">Whether to truncate the text to size (default is false)</param>
        
        return $common._pad(text, size || 2, ch || ' ', 'l', truncate || false); 
    },
    
    padRight : function(text, size, ch, truncate) { 
        /// <summary>
        /// Pads the right hand side of the supplied text with the specified pad character up to the requested size
        /// </summary>
        /// <param name="text" type="String">The text to pad</param>
        /// <param name="size" type="Number" integer="true" optional="true">The size to pad the text (default is 2)</param>
        /// <param name="ch" type="String" optional="true">The single character to use as the pad character (default is ' ')</param>
        /// <param name="truncate" type="Boolean" optional="true">Whether to truncate the text to size (default is false)</param>

        return $common._pad(text, size || 2, ch || ' ', 'r', truncate || false); 
    },
    
    _pad : function(text, size, ch, side, truncate) {
        /// <summary>
        /// Pads supplied text with the specified pad character up to the requested size
        /// </summary>
        /// <param name="text" type="String">The text to pad</param>
        /// <param name="size" type="Number" integer="true">The size to pad the text</param>
        /// <param name="ch" type="String">The single character to use as the pad character</param>
        /// <param name="side" type="String">Either 'l' or 'r' to siginfy whether to pad the Left or Right side respectively</param>
        /// <param name="truncate" type="Boolean">Whether to truncate the text to size</param>

        text = text.toString();
        var length = text.length;
        var builder = new Sys.StringBuilder();
        if (side == 'r') {
            builder.append(text);
        } 
        while (length < size) {
            builder.append(ch);
            length++;
        }
        if (side == 'l') {
            builder.append(text);
        }
        var result = builder.toString();
        if (truncate && result.length > size) {
            if (side == 'l') {
                result = result.substr(result.length - size, size);
            } else {
                result = result.substr(0, size);
            }
        }
        return result;
    },
    
    __DOMEvents : {
        focusin : { eventGroup : "UIEvents", init : function(e, p) { e.initUIEvent("focusin", true, false, window, 1); } },
        focusout : { eventGroup : "UIEvents", init : function(e, p) { e.initUIEvent("focusout", true, false, window, 1); } },
        activate : { eventGroup : "UIEvents", init : function(e, p) { e.initUIEvent("activate", true, true, window, 1); } },
        focus : { eventGroup : "UIEvents", init : function(e, p) { e.initUIEvent("focus", false, false, window, 1); } },
        blur : { eventGroup : "UIEvents", init : function(e, p) { e.initUIEvent("blur", false, false, window, 1); } },
        click : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("click", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        dblclick : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("click", true, true, window, 2, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        mousedown : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("mousedown", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        mouseup : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("mouseup", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        mouseover : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("mouseover", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        mousemove : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("mousemove", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        mouseout : { eventGroup : "MouseEvents", init : function(e, p) { e.initMouseEvent("mousemove", true, true, window, 1, p.screenX || 0, p.screenY || 0, p.clientX || 0, p.clientY || 0, p.ctrlKey || false, p.altKey || false, p.shiftKey || false, p.metaKey || false, p.button || 0, p.relatedTarget || null); } },
        load : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("load", false, false); } },
        unload : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("unload", false, false); } },
        select : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("select", true, false); } },
        change : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("change", true, false); } },
        submit : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("submit", true, true); } },
        reset : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("reset", true, false); } },
        resize : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("resize", true, false); } },
        scroll : { eventGroup : "HTMLEvents", init : function(e, p) { e.initEvent("scroll", true, false); } }
    },
    
    tryFireRawEvent : function(element, rawEvent) {
        /// <summary>
        /// Attempts to fire a raw DOM event on an element
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to fire the event</param>
        /// <param name="rawEvent" type="Object">The raw DOM event object to fire. Must not be Sys.UI.DomEvent</param>
        /// <returns type="Boolean">True if the event was successfully fired, otherwise false</returns>
        
        try {
            if (element.fireEvent) {
                element.fireEvent("on" + rawEvent.type, rawEvent);
                return true;
            } else if (element.dispatchEvent) {
                element.dispatchEvent(rawEvent);
                return true;
            }
        } catch (e) {
        }
        return false;
    },    

    tryFireEvent : function(element, eventName, properties) {
        /// <summary>
        /// Attempts to fire a DOM event on an element
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to fire the event</param>
        /// <param name="eventName" type="String">The name of the event to fire (without an 'on' prefix)</param>
        /// <param name="properties" type="Object">Properties to add to the event</param>
        /// <returns type="Boolean">True if the event was successfully fired, otherwise false</returns>
        
        try {
            if (document.createEventObject) {
                var e = document.createEventObject();
                $common.applyProperties(e, properties || {});
                element.fireEvent("on" + eventName, e);
                return true;
            } else if (document.createEvent) {
                var def = $common.__DOMEvents[eventName];
                if (def) {
                    var e = document.createEvent(def.eventGroup);
                    def.init(e, properties || {});
                    element.dispatchEvent(e);
                    return true;
                }
            }
        } catch (e) {
        }
        return false;
    },

    wrapElement : function(innerElement, newOuterElement, newInnerParentElement) {
        /// <summary>
        /// Wraps an inner element with a new outer element at the same DOM location as the inner element
        /// </summary>
        /// <param name="innerElement" type="Sys.UI.DomElement">The element to be wrapped</param>
        /// <param name="newOuterElement" type="Sys.UI.DomElement">The new parent for the element</param>
        /// <returns />
        
        var parent = innerElement.parentNode;
        parent.replaceChild(newOuterElement, innerElement);        
        (newInnerParentElement || newOuterElement).appendChild(innerElement);
    },

    unwrapElement : function(innerElement, oldOuterElement) {
        /// <summary>
        /// Unwraps an inner element from an outer element at the same DOM location as the outer element
        /// </summary>
        /// <param name="innerElement" type="Sys.UI.DomElement">The element to be wrapped</param>
        /// <param name="newOuterElement" type="Sys.UI.DomElement">The new parent for the element</param>
        /// <returns />

        var parent = oldOuterElement.parentNode;
        if (parent != null) {
            $common.removeElement(innerElement);
            parent.replaceChild(innerElement, oldOuterElement);
        }
    },
    
    removeElement : function(element) {
        /// <summary>
        /// Removes an element from the DOM tree
        /// </summary>
        /// <param name="element" type="Sys.UI.DomElement">The element to be removed</param>
        /// <returns />

        var parent = element.parentNode;
        if (parent != null) {
            parent.removeChild(element);
        }
    },
 
    applyProperties : function(target, properties) {
        /// <summary>
        /// Quick utility method to copy properties from a template object to a target object
        /// </summary>
        /// <param name="target" type="Object">The object to apply to</param>
        /// <param name="properties" type="Object">The template to copy values from</param>
        
        for (var p in properties) {
            var pv = properties[p];
            if (pv != null && Object.getType(pv)===Object) {
                var tv = target[p];
                $common.applyProperties(tv, pv);
            } else {
                target[p] = pv;
            }
        }
    },
        
    createElementFromTemplate : function(template, appendToParent, nameTable) {
        /// <summary>
        /// Creates an element for the current document based on a template object
        /// </summary>
        /// <param name="template" type="Object">The template from which to create the element</param>
        /// <param name="appendToParent" type="Sys.UI.DomElement" optional="true" mayBeNull="true">A DomElement under which to append this element</param>
        /// <param name="nameTable" type="Object" optional="true" mayBeNull="true">An object to use as the storage for the element using template.name as the key</param>
        /// <returns type="Sys.UI.DomElement" />
        /// <remarks>
        /// This method is useful if you find yourself using the same or similar DomElement constructions throughout a class.  You can even set the templates
        /// as static properties for a type to cut down on overhead.  This method is often called with a JSON style template:
        /// <code>
        /// var elt = $common.createElementFromTemplate({
        ///     nodeName : "div",
        ///     properties : {
        ///         style : {
        ///             height : "100px",
        ///             width : "100px",
        ///             backgroundColor : "white"
        ///         },
        ///         expandoAttribute : "foo"
        ///     },
        ///     events : {
        ///         click : function() { alert("foo"); },
        ///         mouseover : function() { elt.backgroundColor = "silver"; },
        ///         mouseout : function() { elt.backgroundColor = "white"; }
        ///     },
        ///     cssClasses : [ "class0", "class1" ],
        ///     visible : true,
        ///     opacity : .5
        /// }, someParent);
        /// </code>
        /// </remarks>
        
        // if we wish to override the name table we do so here
        if (typeof(template.nameTable)!='undefined') {
            var newNameTable = template.nameTable;
            if (String.isInstanceOfType(newNameTable)) {
                newNameTable = nameTable[newNameTable];
            }
            if (newNameTable != null) {
                nameTable = newNameTable;
            }
        }
        
        // get a name for the element in the nameTable
        var elementName = null;
        if (typeof(template.name)!=='undefined') {
            elementName = template.name;
        }
        
        // create or acquire the element
        var elt = document.createElement(template.nodeName);
        
        // if our element is named, add it to the name table
        if (typeof(template.name)!=='undefined' && nameTable) {
            nameTable[template.name] = elt;
        }
        
        // if we wish to supply a default parent we do so here
        if (typeof(template.parent)!=='undefined' && appendToParent == null) {
            var newParent = template.parent;
            if (String.isInstanceOfType(newParent)) {
                newParent = nameTable[newParent];
            }
            if (newParent != null) {
                appendToParent = newParent;
            }
        }
        
        // properties are applied as expando values to the element
        if (typeof(template.properties)!=='undefined' && template.properties != null) {
            $common.applyProperties(elt, template.properties);
        }
        
        // css classes are added to the element's className property
        if (typeof(template.cssClasses)!=='undefined' && template.cssClasses != null) {
            $common.addCssClasses(elt, template.cssClasses);
        }
        
        // events are added to the dom element using $addHandlers
        if (typeof(template.events)!=='undefined' && template.events != null) {
            $addHandlers(elt, template.events);
        }
        
        // if the element is visible or not its visibility is set
        if (typeof(template.visible)!=='undefined' && template.visible != null) {
            this.setVisible(elt, template.visible);
        }
        
        // if we have an appendToParent we will now append to it
        if (appendToParent) {
            appendToParent.appendChild(elt);
        }

        // if we have opacity, apply it
        if (typeof(template.opacity)!=='undefined' && template.opacity != null) {
            $common.setElementOpacity(elt, template.opacity);
        }
        
        // if we have child templates, process them
        if (typeof(template.children)!=='undefined' && template.children != null) {
            for (var i = 0; i < template.children.length; i++) {
                var subtemplate = template.children[i];
                $common.createElementFromTemplate(subtemplate, elt, nameTable);
            }
        }
        
        // if we have a content presenter for the element get it (the element itself is the default presenter for content)
        var contentPresenter = elt;
        if (typeof(template.contentPresenter)!=='undefined' && template.contentPresenter != null) {
            contentPresenter = nameTable[contentPresenter];
        }
        
        // if we have content, add it
        if (typeof(template.content)!=='undefined' && template.content != null) {
            var content = template.content;
            if (String.isInstanceOfType(content)) {
                content = nameTable[content];
            }
            if (content.parentNode) {
                $common.wrapElement(content, elt, contentPresenter);
            } else {
                contentPresenter.appendChild(content);
            }
        }
        
        // return the created element
        return elt;
    },
    
    prepareHiddenElementForATDeviceUpdate : function () {
        /// <summary>
        /// JAWS, an Assistive Technology device responds to updates to form elements 
        /// and refreshes its document buffer to what is showing live
        /// in the browser. To ensure that Toolkit controls that make XmlHttpRequests to
        /// retrieve content are useful to users with visual disabilities, we update a
        /// hidden form element to ensure that JAWS conveys what is in
        /// the browser. See this article for more details: 
        /// http://juicystudio.com/article/improving-ajax-applications-for-jaws-users.php
        /// This method creates a hidden input on the screen for any page that uses a Toolkit
        /// control that will perform an XmlHttpRequest.
        /// </summary>   
        var objHidden = document.getElementById('hiddenInputToUpdateATBuffer_CommonToolkitScripts');
        if (!objHidden) {
            var objHidden = document.createElement('input');
            objHidden.setAttribute('type', 'hidden');
            objHidden.setAttribute('value', '1');
            objHidden.setAttribute('id', 'hiddenInputToUpdateATBuffer_CommonToolkitScripts');
            objHidden.setAttribute('name', 'hiddenInputToUpdateATBuffer_CommonToolkitScripts');
            if ( document.forms[0] ) {
                document.forms[0].appendChild(objHidden);
            }
        }
    },
    
    updateFormToRefreshATDeviceBuffer : function () {
        /// <summary>
        /// Updates the hidden buffer to ensure that the latest document stream is picked up
        /// by the screen reader.
        /// </summary>
        var objHidden = document.getElementById('hiddenInputToUpdateATBuffer_CommonToolkitScripts');

        if (objHidden) {
            if (objHidden.getAttribute('value') == '1') {
                objHidden.setAttribute('value', '0');
            } else {
                objHidden.setAttribute('value', '1');
            }
        }
    }
}

// Create the singleton instance of the CommonToolkitScripts
var CommonToolkitScripts = AjaxControlToolkit.CommonToolkitScripts = new AjaxControlToolkit._CommonToolkitScripts();
var $common = CommonToolkitScripts;

// Alias functions that were moved from BlockingScripts into Common
Sys.UI.DomElement.getVisible = $common.getVisible;
Sys.UI.DomElement.setVisible = $common.setVisible;
Sys.UI.Control.overlaps = $common.overlaps;

AjaxControlToolkit._DomUtility = function() {
    /// <summary>
    /// Utility functions for manipulating the DOM
    /// </summary>
}
AjaxControlToolkit._DomUtility.prototype = {
    isDescendant : function(ancestor, descendant) {
        /// <summary>
        /// Whether the specified element is a descendant of the ancestor
        /// </summary>
        /// <param name="ancestor" type="Sys.UI.DomElement">Ancestor node</param>
        /// <param name="descendant" type="Sys.UI.DomElement">Possible descendant node</param>
        /// <returns type="Boolean" />
        
        for (var n = descendant.parentNode; n != null; n = n.parentNode) {
            if (n == ancestor) return true;
        }
        return false;
    },
    isDescendantOrSelf : function(ancestor, descendant) {
        /// <summary>
        /// Whether the specified element is a descendant of the ancestor or the same as the ancestor
        /// </summary>
        /// <param name="ancestor" type="Sys.UI.DomElement">Ancestor node</param>
        /// <param name="descendant" type="Sys.UI.DomElement">Possible descendant node</param>
        /// <returns type="Boolean" />

        if (ancestor === descendant) 
            return true;
        return AjaxControlToolkit.DomUtility.isDescendant(ancestor, descendant);
    },
    isAncestor : function(descendant, ancestor) {
        /// <summary>
        /// Whether the specified element is an ancestor of the descendant
        /// </summary>
        /// <param name="descendant" type="Sys.UI.DomElement">Descendant node</param>
        /// <param name="ancestor" type="Sys.UI.DomElement">Possible ancestor node</param>
        /// <returns type="Boolean" />

        return AjaxControlToolkit.DomUtility.isDescendant(ancestor, descendant);
    },
    isAncestorOrSelf : function(descendant, ancestor) {
        /// <summary>
        /// Whether the specified element is an ancestor of the descendant or the same as the descendant
        /// </summary>
        /// <param name="descendant" type="Sys.UI.DomElement">Descendant node</param>
        /// <param name="ancestor" type="Sys.UI.DomElement">Possible ancestor node</param>
        /// <returns type="Boolean" />
        
        if (descendant === ancestor)
            return true;
            
        return AjaxControlToolkit.DomUtility.isDescendant(ancestor, descendant);
    },
    isSibling : function(self, sibling) {
        /// <summary>
        /// Whether the specified element is a sibling of the self element
        /// </summary>
        /// <param name="self" type="Sys.UI.DomElement">Self node</param>
        /// <param name="sibling" type="Sys.UI.DomElement">Possible sibling node</param>
        /// <returns type="Boolean" />
        
        var parent = self.parentNode;
        for (var i = 0; i < parent.childNodes.length; i++) {
            if (parent.childNodes[i] == sibling) return true;
        }
        return false;
    }
}
AjaxControlToolkit._DomUtility.registerClass("AjaxControlToolkit._DomUtility");
AjaxControlToolkit.DomUtility = new AjaxControlToolkit._DomUtility();


AjaxControlToolkit.TextBoxWrapper = function(element) {
    /// <summary>
    /// Class that wraps a TextBox (INPUT type="text") to abstract-out the
    /// presence of a watermark (which may be visible to the user but which
    /// should never be read by script.
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// The DOM element the behavior is associated with
    /// </param>
    AjaxControlToolkit.TextBoxWrapper.initializeBase(this, [element]);
    this._current = element.value;
    this._watermark = null;
    this._isWatermarked = false;
}

AjaxControlToolkit.TextBoxWrapper.prototype = {

    dispose : function() {
        /// <summary>
        /// Dispose the behavior
        /// </summary>
        this.get_element().AjaxControlToolkitTextBoxWrapper = null;
        AjaxControlToolkit.TextBoxWrapper.callBaseMethod(this, 'dispose');
    },

    get_Current : function() {
        /// <value type="String">
        /// Current value actually in the TextBox (i.e., TextBox.value)
        /// </value>
        this._current = this.get_element().value;
        return this._current;
    },
    set_Current : function(value) {
        this._current = value;
        this._updateElement();
    },

    get_Value : function() {
        /// <value type="String">
        /// Conceptual "value" of the TextBox - its contents if no watermark is present
        /// or "" if one is
        /// </value>
        if (this.get_IsWatermarked()) {
            return "";
        } else {
            return this.get_Current();
        }
    },
    set_Value : function(text) {
        this.set_Current(text);
        if (!text || (0 == text.length)) {
            if (null != this._watermark) {
                this.set_IsWatermarked(true);
            }
        } else {
            this.set_IsWatermarked(false);
        }
    },

    get_Watermark : function() {
        /// <value type="String">
        /// Text of the watermark for the TextBox
        /// </value>
        return this._watermark;
    },
    set_Watermark : function(value) {
        this._watermark = value;
        this._updateElement();
    },

    get_IsWatermarked : function() {
        /// <value type="Boolean">
        /// true iff the TextBox is watermarked
        /// </value>
        return this._isWatermarked;
    },
    set_IsWatermarked : function(isWatermarked) {
        if (this._isWatermarked != isWatermarked) {
            this._isWatermarked = isWatermarked;
            this._updateElement();
            this._raiseWatermarkChanged();
        }
    },

    _updateElement : function() {
        /// <summary>
        /// Updates the actual contents of the TextBox according to what should be there
        /// </summary>
        var element = this.get_element();
        if (this._isWatermarked) {
            if (element.value != this._watermark) {
                element.value = this._watermark;
            }
        } else {
            if (element.value != this._current) {
                element.value = this._current;
            }
        }
    },

    add_WatermarkChanged : function(handler) {
        /// <summary>
        /// Adds a handler for the WatermarkChanged event
        /// </summary>
        /// <param name="handler" type="Function">
        /// Handler
        /// </param>
        this.get_events().addHandler("WatermarkChanged", handler);
    },
    remove_WatermarkChanged : function(handler) {
        /// <summary>
        /// Removes a handler for the WatermarkChanged event
        /// </summary>
        /// <param name="handler" type="Function">
        /// Handler
        /// </param>
        this.get_events().removeHandler("WatermarkChanged", handler);
    },
    _raiseWatermarkChanged : function() {
        /// <summary>
        /// Raises the WatermarkChanged event
        /// </summary>
        var onWatermarkChangedHandler = this.get_events().getHandler("WatermarkChanged");
        if (onWatermarkChangedHandler) {
            onWatermarkChangedHandler(this, Sys.EventArgs.Empty);
        }
    }
}
AjaxControlToolkit.TextBoxWrapper.get_Wrapper = function(element) {
    /// <summary>
    /// Gets (creating one if necessary) the TextBoxWrapper for the specified TextBox
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// TextBox for which to get the wrapper
    /// </param>
    /// <returns type="AjaxControlToolkit.TextBoxWrapper">
    /// TextBoxWrapper instance
    /// </returns>
    if (null == element.AjaxControlToolkitTextBoxWrapper) {
        element.AjaxControlToolkitTextBoxWrapper = new AjaxControlToolkit.TextBoxWrapper(element);
    }
    return element.AjaxControlToolkitTextBoxWrapper;
}
AjaxControlToolkit.TextBoxWrapper.registerClass('AjaxControlToolkit.TextBoxWrapper', Sys.UI.Behavior);

AjaxControlToolkit.TextBoxWrapper.validatorGetValue = function(id) {
    /// <summary>
    /// Wrapper for ASP.NET's validatorGetValue to return the value from the wrapper if present
    /// </summary>
    /// <param name="id" type="String">
    /// id of the element
    /// </param>
    /// <returns type="Object">
    /// Value from the wrapper or result of original ValidatorGetValue
    /// </returns>
    var control = $get(id);
    if (control && control.AjaxControlToolkitTextBoxWrapper) {
        return control.AjaxControlToolkitTextBoxWrapper.get_Value();
    }
    return AjaxControlToolkit.TextBoxWrapper._originalValidatorGetValue(id);
}

// Wrap ASP.NET's ValidatorGetValue with AjaxControlToolkit.TextBoxWrapper.validatorGetValue
// to make validators work properly with watermarked TextBoxes
if (typeof(ValidatorGetValue) == 'function') {
    AjaxControlToolkit.TextBoxWrapper._originalValidatorGetValue = ValidatorGetValue;
    ValidatorGetValue = AjaxControlToolkit.TextBoxWrapper.validatorGetValue;
}


// Temporary fix null reference bug in Sys.CultureInfo._getAbbrMonthIndex
if (Sys.CultureInfo.prototype._getAbbrMonthIndex) {
    try {
        Sys.CultureInfo.prototype._getAbbrMonthIndex('');
    } catch(ex) {
        Sys.CultureInfo.prototype._getAbbrMonthIndex = function(value) {
            if (!this._upperAbbrMonths) {
                this._upperAbbrMonths = this._toUpperArray(this.dateTimeFormat.AbbreviatedMonthNames);
            }
            return Array.indexOf(this._upperAbbrMonths, this._toUpper(value));
        }
        Sys.CultureInfo.CurrentCulture._getAbbrMonthIndex = Sys.CultureInfo.prototype._getAbbrMonthIndex;
        Sys.CultureInfo.InvariantCulture._getAbbrMonthIndex = Sys.CultureInfo.prototype._getAbbrMonthIndex;
    }
}

// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />


Type.registerNamespace('AjaxControlToolkit');

// This is the base behavior for all extender behaviors
AjaxControlToolkit.BehaviorBase = function(element) {
    /// <summary>
    /// Base behavior for all extender behaviors
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// Element the behavior is associated with
    /// </param>
    AjaxControlToolkit.BehaviorBase.initializeBase(this,[element]);
    
    this._clientStateFieldID = null;
    this._pageRequestManager = null;
    this._partialUpdateBeginRequestHandler = null;
    this._partialUpdateEndRequestHandler = null;
};
AjaxControlToolkit.BehaviorBase.prototype = {
    initialize : function() {
        /// <summary>
        /// Initialize the behavior
        /// </summary>

        // TODO: Evaluate necessity
        AjaxControlToolkit.BehaviorBase.callBaseMethod(this, 'initialize');
    },

    dispose : function() {
        /// <summary>
        /// Dispose the behavior
        /// </summary>
        AjaxControlToolkit.BehaviorBase.callBaseMethod(this, 'dispose');

        if (this._pageRequestManager) {
            if (this._partialUpdateBeginRequestHandler) {
                this._pageRequestManager.remove_beginRequest(this._partialUpdateBeginRequestHandler);
                this._partialUpdateBeginRequestHandler = null;
            }
            if (this._partialUpdateEndRequestHandler) {
                this._pageRequestManager.remove_endRequest(this._partialUpdateEndRequestHandler);
                this._partialUpdateEndRequestHandler = null;
            }
            this._pageRequestManager = null;
        }
    },

    get_ClientStateFieldID : function() {
        /// <value type="String">
        /// ID of the hidden field used to store client state
        /// </value>
        return this._clientStateFieldID;
    },
    set_ClientStateFieldID : function(value) {
        if (this._clientStateFieldID != value) {
            this._clientStateFieldID = value;
            this.raisePropertyChanged('ClientStateFieldID');
        }
    },

    get_ClientState : function() {
        /// <value type="String">
        /// Client state
        /// </value>
        if (this._clientStateFieldID) {
            var input = document.getElementById(this._clientStateFieldID);
            if (input) {
                return input.value;
            }
        }
        return null;
    },
    set_ClientState : function(value) {
        if (this._clientStateFieldID) {
            var input = document.getElementById(this._clientStateFieldID);
            if (input) {
                input.value = value;
            }
        }
    },

    registerPartialUpdateEvents : function() {
        /// <summary>
        /// Register for beginRequest and endRequest events on the PageRequestManager,
        /// (which cause _partialUpdateBeginRequest and _partialUpdateEndRequest to be
        /// called when an UpdatePanel refreshes)
        /// </summary>

        if (Sys && Sys.WebForms && Sys.WebForms.PageRequestManager){
            this._pageRequestManager = Sys.WebForms.PageRequestManager.getInstance();
            if (this._pageRequestManager) {
                this._partialUpdateBeginRequestHandler = Function.createDelegate(this, this._partialUpdateBeginRequest);
                this._pageRequestManager.add_beginRequest(this._partialUpdateBeginRequestHandler);
                this._partialUpdateEndRequestHandler = Function.createDelegate(this, this._partialUpdateEndRequest);
                this._pageRequestManager.add_endRequest(this._partialUpdateEndRequestHandler);
            }
        }
    },

    _partialUpdateBeginRequest : function(sender, beginRequestEventArgs) {
        /// <summary>
        /// Method that will be called when a partial update (via an UpdatePanel) begins,
        /// if registerPartialUpdateEvents() has been called.
        /// </summary>
        /// <param name="sender" type="Object">
        /// Sender
        /// </param>
        /// <param name="beginRequestEventArgs" type="Sys.WebForms.BeginRequestEventArgs">
        /// Event arguments
        /// </param>

        // Nothing done here; override this method in a child class
    },
    
    _partialUpdateEndRequest : function(sender, endRequestEventArgs) {
        /// <summary>
        /// Method that will be called when a partial update (via an UpdatePanel) finishes,
        /// if registerPartialUpdateEvents() has been called.
        /// </summary>
        /// <param name="sender" type="Object">
        /// Sender
        /// </param>
        /// <param name="endRequestEventArgs" type="Sys.WebForms.EndRequestEventArgs">
        /// Event arguments
        /// </param>

        // Nothing done here; override this method in a child class
    }
};
AjaxControlToolkit.BehaviorBase.registerClass('AjaxControlToolkit.BehaviorBase', Sys.UI.Behavior);


// Dynamically populates content when the populate method is called
AjaxControlToolkit.DynamicPopulateBehaviorBase = function(element) {
    /// <summary>
    /// DynamicPopulateBehaviorBase is used to add DynamicPopulateBehavior funcitonality
    /// to other extenders.  It will dynamically populate the contents of the target element
    /// when its populate method is called.
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// DOM Element the behavior is associated with
    /// </param>
    AjaxControlToolkit.DynamicPopulateBehaviorBase.initializeBase(this, [element]);
    
    this._DynamicControlID = null;
    this._DynamicContextKey = null;
    this._DynamicServicePath = null;
    this._DynamicServiceMethod = null;
    this._cacheDynamicResults = false;
    this._dynamicPopulateBehavior = null;
    this._populatingHandler = null;
    this._populatedHandler = null;
};
AjaxControlToolkit.DynamicPopulateBehaviorBase.prototype = {
    initialize : function() {
        /// <summary>
        /// Initialize the behavior
        /// </summary>

        AjaxControlToolkit.DynamicPopulateBehaviorBase.callBaseMethod(this, 'initialize');

        // Create event handlers
        this._populatingHandler = Function.createDelegate(this, this._onPopulating);
        this._populatedHandler = Function.createDelegate(this, this._onPopulated);
    },

    dispose : function() {
        /// <summary>
        /// Dispose the behavior
        /// </summary>

        // Dispose of event handlers
        if (this._populatedHandler) {
            if (this._dynamicPopulateBehavior) {
                this._dynamicPopulateBehavior.remove_populated(this._populatedHandler);
            }
            this._populatedHandler = null;
        }
        if (this._populatingHandler) {
            if (this._dynamicPopulateBehavior) {
                this._dynamicPopulateBehavior.remove_populating(this._populatingHandler);
            }
            this._populatingHandler = null;
        }

        // Dispose of the placeholder control and behavior
        if (this._dynamicPopulateBehavior) {
            this._dynamicPopulateBehavior.dispose();
            this._dynamicPopulateBehavior = null;
        }
        AjaxControlToolkit.DynamicPopulateBehaviorBase.callBaseMethod(this, 'dispose');
    },

    populate : function(contextKeyOverride) {
        /// <summary>
        /// Demand-create the DynamicPopulateBehavior and use it to populate the target element
        /// </summary>
        /// <param name="contextKeyOverride" type="String" mayBeNull="true" optional="true">
        /// An arbitrary string value to be passed to the web method. For example, if the element to be populated is within a data-bound repeater, this could be the ID of the current row.
        /// </param>

        // If the DynamicPopulateBehavior's element is out of date, dispose of it
        if (this._dynamicPopulateBehavior && (this._dynamicPopulateBehavior.get_element() != $get(this._DynamicControlID))) {
            this._dynamicPopulateBehavior.dispose();
            this._dynamicPopulateBehavior = null;
        }
        
        // If a DynamicPopulateBehavior is not available and the necessary information is, create one
        if (!this._dynamicPopulateBehavior && this._DynamicControlID && this._DynamicServiceMethod) {
            this._dynamicPopulateBehavior = $create(AjaxControlToolkit.DynamicPopulateBehavior,
                {
                    "id" : this.get_id() + "_DynamicPopulateBehavior",
                    "ContextKey" : this._DynamicContextKey,
                    "ServicePath" : this._DynamicServicePath,
                    "ServiceMethod" : this._DynamicServiceMethod,
                    "cacheDynamicResults" : this._cacheDynamicResults
                }, null, null, $get(this._DynamicControlID));

            // Attach event handlers
            this._dynamicPopulateBehavior.add_populating(this._populatingHandler);
            this._dynamicPopulateBehavior.add_populated(this._populatedHandler);
        }
        
        // If a DynamicPopulateBehavior is available, use it to populate the dynamic content
        if (this._dynamicPopulateBehavior) {
            this._dynamicPopulateBehavior.populate(contextKeyOverride ? contextKeyOverride : this._DynamicContextKey);
        }
    },

    _onPopulating : function(sender, eventArgs) {
        /// <summary>
        /// Handler for DynamicPopulate behavior's Populating event
        /// </summary>
        /// <param name="sender" type="Object">
        /// DynamicPopulate behavior
        /// </param>
        /// <param name="eventArgs" type="Sys.CancelEventArgs" mayBeNull="false">
        /// Event args
        /// </param>
        this.raisePopulating(eventArgs);
    },

    _onPopulated : function(sender, eventArgs) {
        /// <summary>
        /// Handler for DynamicPopulate behavior's Populated event
        /// </summary>
        /// <param name="sender" type="Object">
        /// DynamicPopulate behavior
        /// </param>
        /// <param name="eventArgs" type="Sys.EventArgs" mayBeNull="false">
        /// Event args
        /// </param>
        this.raisePopulated(eventArgs);
    },

    get_dynamicControlID : function() {
        /// <value type="String">
        /// ID of the element to populate with dynamic content
        /// </value>
        return this._DynamicControlID;
    },
    get_DynamicControlID : this.get_dynamicControlID,
    set_dynamicControlID : function(value) {
        if (this._DynamicControlID != value) {
            this._DynamicControlID = value;
            this.raisePropertyChanged('dynamicControlID');
            this.raisePropertyChanged('DynamicControlID');
        }
    },
    set_DynamicControlID : this.set_dynamicControlID,

    get_dynamicContextKey : function() {
        /// <value type="String">
        /// An arbitrary string value to be passed to the web method.
        /// For example, if the element to be populated is within a
        /// data-bound repeater, this could be the ID of the current row.
        /// </value>
        return this._DynamicContextKey;
    },
    get_DynamicContextKey : this.get_dynamicContextKey,
    set_dynamicContextKey : function(value) {
        if (this._DynamicContextKey != value) {
            this._DynamicContextKey = value;
            this.raisePropertyChanged('dynamicContextKey');
            this.raisePropertyChanged('DynamicContextKey');
        }
    },
    set_DynamicContextKey : this.set_dynamicContextKey,

    get_dynamicServicePath : function() {
        /// <value type="String" mayBeNull="true" optional="true">
        /// The URL of the web service to call.  If the ServicePath is not defined, then we will invoke a PageMethod instead of a web service.
        /// </value>
        return this._DynamicServicePath;
    },
    get_DynamicServicePath : this.get_dynamicServicePath,
    set_dynamicServicePath : function(value) {
        if (this._DynamicServicePath != value) {
            this._DynamicServicePath = value;
            this.raisePropertyChanged('dynamicServicePath');
            this.raisePropertyChanged('DynamicServicePath');
        }
    },
    set_DynamicServicePath : this.set_dynamicServicePath,

    get_dynamicServiceMethod : function() {
        /// <value type="String">
        /// The name of the method to call on the page or web service
        /// </value>
        /// <remarks>
        /// The signature of the method must exactly match the following:
        ///     [WebMethod]
        ///     string DynamicPopulateMethod(string contextKey)
        ///     {
        ///         ...
        ///     }
        /// </remarks>
        return this._DynamicServiceMethod;
    },
    get_DynamicServiceMethod : this.get_dynamicServiceMethod,
    set_dynamicServiceMethod : function(value) {
        if (this._DynamicServiceMethod != value) {
            this._DynamicServiceMethod = value;
            this.raisePropertyChanged('dynamicServiceMethod');
            this.raisePropertyChanged('DynamicServiceMethod');
        }
    },
    set_DynamicServiceMethod : this.set_dynamicServiceMethod,
    
    get_cacheDynamicResults : function() {
        /// <value type="Boolean" mayBeNull="false">
        /// Whether the results of the dynamic population should be cached and
        /// not fetched again after the first load
        /// </value>
        return this._cacheDynamicResults;
    },
    set_cacheDynamicResults : function(value) {
        if (this._cacheDynamicResults != value) {
            this._cacheDynamicResults = value;
            this.raisePropertyChanged('cacheDynamicResults');
        }
    },
    
    add_populated : function(handler) {
        /// <summary>
        /// Add a handler on the populated event
        /// </summary>
        /// <param name="handler" type="Function">
        /// Handler
        /// </param>
        this.get_events().addHandler("populated", handler);
    },
    remove_populated : function(handler) {
        /// <summary>
        /// Remove a handler from the populated event
        /// </summary>
        /// <param name="handler" type="Function">
        /// Handler
        /// </param>
        this.get_events().removeHandler("populated", handler);
    },
    raisePopulated : function(arg) {
        /// <summary>
        /// Raise the populated event
        /// </summary>
        /// <param name="arg" type="Sys.EventArgs">
        /// Event arguments
        /// </param>
        var handler = this.get_events().getHandler("populated");  
        if (handler) handler(this, arg);
    },
    
    add_populating : function(handler) {
        /// <summary>
        /// Add an event handler for the populating event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().addHandler('populating', handler);
    },
    remove_populating : function(handler) {
        /// <summary>
        /// Remove an event handler from the populating event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().removeHandler('populating', handler);
    },
    raisePopulating : function(eventArgs) {
        /// <summary>
        /// Raise the populating event
        /// </summary>
        /// <param name="eventArgs" type="Sys.CancelEventArgs" mayBeNull="false">
        /// Event arguments for the populating event
        /// </param>
        /// <returns />
        
        var handler = this.get_events().getHandler('populating');
        if (handler) {
            handler(this, eventArgs);
        }
    }
};
AjaxControlToolkit.DynamicPopulateBehaviorBase.registerClass('AjaxControlToolkit.DynamicPopulateBehaviorBase', AjaxControlToolkit.BehaviorBase);


AjaxControlToolkit.ControlBase = function(element) {
    AjaxControlToolkit.ControlBase.initializeBase(this, [element]);
    this._clientStateField = null;
    this._callbackTarget = null;
    this._onsubmit$delegate = Function.createDelegate(this, this._onsubmit);
    this._oncomplete$delegate = Function.createDelegate(this, this._oncomplete);
    this._onerror$delegate = Function.createDelegate(this, this._onerror);
};
AjaxControlToolkit.ControlBase.prototype = {
    initialize : function() {
        AjaxControlToolkit.ControlBase.callBaseMethod(this, "initialize");
        // load the client state if possible
        if (this._clientStateField) {
            this.loadClientState(this._clientStateField.value);
        }
        // attach an event to save the client state before a postback or updatepanel partial postback
        if (typeof(Sys.WebForms)!=="undefined" && typeof(Sys.WebForms.PageRequestManager)!=="undefined") {
            Array.add(Sys.WebForms.PageRequestManager.getInstance()._onSubmitStatements, this._onsubmit$delegate);
        } else {
            $addHandler(document.forms[0], "submit", this._onsubmit$delegate);
        }
    },
    dispose : function() {
        if (typeof(Sys.WebForms)!=="undefined" && typeof(Sys.WebForms.PageRequestManager)!=="undefined") {
            Array.remove(Sys.WebForms.PageRequestManager.getInstance()._onSubmitStatements, this._onsubmit$delegate);
        } else {
            $removeHandler(document.forms[0], "submit", this._onsubmit$delegate);
        }
        AjaxControlToolkit.ControlBase.callBaseMethod(this, "dispose");
    },
    findElement : function(id) {
        // <summary>Finds an element within this control (ScriptControl/ScriptUserControl are NamingContainers);
        return $get(this.get_id() + '_' + id.split(':').join('_'));
    },
    get_clientStateField : function() {
        return this._clientStateField;
    },
    set_clientStateField : function(value) {
        if (this.get_isInitialized()) throw Error.invalidOperation(AjaxControlToolkit.Resources.ExtenderBase_CannotSetClientStateField);
        if (this._clientStateField != value) {
            this._clientStateField = value;
            this.raisePropertyChanged('clientStateField');
        }
    },
    loadClientState : function(value) {
        /// <remarks>override this method to intercept client state loading after a callback</remarks>
    },
    saveClientState : function() {
        /// <remarks>override this method to intercept client state acquisition before a callback</remarks>
        return null;
    },
    _invoke : function(name, args, cb) {
        /// <summary>invokes a callback method on the server control</summary>        
        if (!this._callbackTarget) {
            throw Error.invalidOperation(AjaxControlToolkit.Resources.ExtenderBase_ControlNotRegisteredForCallbacks);
        }
        if (typeof(WebForm_DoCallback)==="undefined") {
            throw Error.invalidOperation(AjaxControlToolkit.Resources.ExtenderBase_PageNotRegisteredForCallbacks);
        }
        var ar = [];
        for (var i = 0; i < args.length; i++) 
            ar[i] = args[i];
        var clientState = this.saveClientState();
        if (clientState != null && !String.isInstanceOfType(clientState)) {
            throw Error.invalidOperation(AjaxControlToolkit.Resources.ExtenderBase_InvalidClientStateType);
        }
        var payload = Sys.Serialization.JavaScriptSerializer.serialize({name:name,args:ar,state:this.saveClientState()});
        WebForm_DoCallback(this._callbackTarget, payload, this._oncomplete$delegate, cb, this._onerror$delegate, true);
    },
    _oncomplete : function(result, context) {
        result = Sys.Serialization.JavaScriptSerializer.deserialize(result);
        if (result.error) {
            throw Error.create(result.error);
        }
        this.loadClientState(result.state);
        context(result.result);
    },
    _onerror : function(message, context) {
        throw Error.create(message);
    },
    _onsubmit : function() {
        if (this._clientStateField) {
            this._clientStateField.value = this.saveClientState();
        }
        return true;
    }    
   
};
AjaxControlToolkit.ControlBase.registerClass("AjaxControlToolkit.ControlBase", Sys.UI.Control);

// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />
/// <reference path="../../Common/Common.js" />
/// <reference path="../Timer/Timer.js" />


///////////////////////////////////////////////////////////////////////////////
// IDropSource

Type.registerNamespace('AjaxControlToolkit');

AjaxControlToolkit.IDragSource = function () {
};
AjaxControlToolkit.IDragSource.prototype = {
  // Type get_dragDataType()
  get_dragDataType: function () { throw Error.notImplemented(); },
  // Object getDragData(Context)
  getDragData: function () { throw Error.notImplemented(); },
  // DragMode get_dragMode()
  get_dragMode: function () { throw Error.notImplemented(); },
  // void onDragStart()
  onDragStart: function () { throw Error.notImplemented(); },
  // void onDrag()
  onDrag: function () { throw Error.notImplemented(); },
  // void onDragEnd(Cancelled)
  onDragEnd: function () { throw Error.notImplemented(); }
};
AjaxControlToolkit.IDragSource.registerInterface('AjaxControlToolkit.IDragSource');

///////////////////////////////////////////////////////////////////////////////
// IDropTarget
AjaxControlToolkit.IDropTarget = function () {
};
AjaxControlToolkit.IDropTarget.prototype = {
  get_dropTargetElement: function () { throw Error.notImplemented(); },
  // bool canDrop(DragMode, DataType, Data)
  canDrop: function () { throw Error.notImplemented(); },
  // void drop(DragMode, DataType, Data)
  drop: function () { throw Error.notImplemented(); },
  // void onDragEnterTarget(DragMode, DataType, Data)
  onDragEnterTarget: function () { throw Error.notImplemented(); },
  // void onDragLeaveTarget(DragMode, DataType, Data)
  onDragLeaveTarget: function () { throw Error.notImplemented(); },
  // void onDragInTarget(DragMode, DataType, Data)
  onDragInTarget: function () { throw Error.notImplemented(); }
};
AjaxControlToolkit.IDropTarget.registerInterface('AjaxControlToolkit.IDropTarget');

///////////////////////////////////////////////
// DragMode
//

AjaxControlToolkit.DragMode = function () {
  throw Error.invalidOperation();
};
AjaxControlToolkit.DragMode.prototype = {
  Copy: 0,
  Move: 1
};
AjaxControlToolkit.DragMode.registerEnum('AjaxControlToolkit.DragMode');

////////////////////////////////////////////////////////////////////
// DragDropEventArgs
//

AjaxControlToolkit.DragDropEventArgs = function (dragMode, dragDataType, dragData) {
  this._dragMode = dragMode;
  this._dataType = dragDataType;
  this._data = dragData;
};
AjaxControlToolkit.DragDropEventArgs.prototype = {
  get_dragMode: function () {
    return this._dragMode || null;
  },
  get_dragDataType: function () {
    return this._dataType || null;
  },
  get_dragData: function () {
    return this._data || null;
  }
};
AjaxControlToolkit.DragDropEventArgs.registerClass('AjaxControlToolkit.DragDropEventArgs');


AjaxControlToolkit._DragDropManager = function () {
  this._instance = null;
  this._events = null;
};
AjaxControlToolkit._DragDropManager.prototype = {

  add_dragStart: function (handler) {
    this.get_events().addHandler('dragStart', handler);
  },
  remove_dragStart: function (handler) {
    this.get_events().removeHandler('dragStart', handler);
  },

  get_events: function () {
    // todo: doc comments. this one is commented out (two //) due to a bug with the preprocessor.
    // <value type="Sys.EventHandlerList">
    // </value>
    if (!this._events) {
      this._events = new Sys.EventHandlerList();
    }
    return this._events;
  },

  add_dragStop: function (handler) {
    this.get_events().addHandler('dragStop', handler);
  },
  remove_dragStop: function (handler) {
    this.get_events().removeHandler('dragStop', handler);
  },

  _getInstance: function () {
    if (!this._instance) {
      //if (false) {
      if (Sys.Browser.agent === Sys.Browser.InternetExplorer && Sys.Browser.version < 10) {
        this._instance = new AjaxControlToolkit.IEDragDropManager();
      }
      else {
        this._instance = new AjaxControlToolkit.GenericDragDropManager();
      }
      this._instance.initialize();
      this._instance.add_dragStart(Function.createDelegate(this, this._raiseDragStart));
      this._instance.add_dragStop(Function.createDelegate(this, this._raiseDragStop));
    }
    return this._instance;
  },

  startDragDrop: function (dragSource, dragVisual, context) {
    this._getInstance().startDragDrop(dragSource, dragVisual, context);
  },

  registerDropTarget: function (target) {
    this._getInstance().registerDropTarget(target);
  },

  unregisterDropTarget: function (target) {
    this._getInstance().unregisterDropTarget(target);
  },

  dispose: function () {
    delete this._events;
    Sys.Application.unregisterDisposableObject(this);
    Sys.Application.removeComponent(this);
  },

  _raiseDragStart: function (sender, eventArgs) {
    var handler = this.get_events().getHandler('dragStart');
    if (handler) {
      handler(this, eventArgs);
    }
  },

  _raiseDragStop: function (sender, eventArgs) {
    var handler = this.get_events().getHandler('dragStop');
    if (handler) {
      handler(this, eventArgs);
    }
  }
};
AjaxControlToolkit._DragDropManager.registerClass('AjaxControlToolkit._DragDropManager');
AjaxControlToolkit.DragDropManager = new AjaxControlToolkit._DragDropManager();


AjaxControlToolkit.IEDragDropManager = function () {
  AjaxControlToolkit.IEDragDropManager.initializeBase(this);

  this._dropTargets = null;
  // Radius of the cursor used to determine what drop target we 
  // are hovering. Anything below the cursor's zone may be a 
  // potential drop target.
  this._radius = 10;
  this._activeDragVisual = null;
  this._activeContext = null;
  this._activeDragSource = null;
  this._underlyingTarget = null;
  this._oldOffset = null;
  this._potentialTarget = null;
  this._isDragging = false;
  this._mouseUpHandler = null;
  this._documentMouseMoveHandler = null;
  this._documentDragOverHandler = null;
  this._dragStartHandler = null;
  this._mouseMoveHandler = null;
  this._dragEnterHandler = null;
  this._dragLeaveHandler = null;
  this._dragOverHandler = null;
  this._dropHandler = null;
};
AjaxControlToolkit.IEDragDropManager.prototype = {

  add_dragStart: function (handler) {
    this.get_events().addHandler("dragStart", handler);
  },

  remove_dragStart: function (handler) {
    this.get_events().removeHandler("dragStart", handler);
  },

  add_dragStop: function (handler) {
    this.get_events().addHandler("dragStop", handler);
  },

  remove_dragStop: function (handler) {
    this.get_events().removeHandler("dragStop", handler);
  },

  initialize: function () {
    AjaxControlToolkit.IEDragDropManager.callBaseMethod(this, 'initialize');
    this._mouseUpHandler = Function.createDelegate(this, this._onMouseUp);
    this._documentMouseMoveHandler = Function.createDelegate(this, this._onDocumentMouseMove);
    this._documentDragOverHandler = Function.createDelegate(this, this._onDocumentDragOver);
    this._dragStartHandler = Function.createDelegate(this, this._onDragStart);
    this._mouseMoveHandler = Function.createDelegate(this, this._onMouseMove);
    this._dragEnterHandler = Function.createDelegate(this, this._onDragEnter);
    this._dragLeaveHandler = Function.createDelegate(this, this._onDragLeave);
    this._dragOverHandler = Function.createDelegate(this, this._onDragOver);
    this._dropHandler = Function.createDelegate(this, this._onDrop);
  },


  dispose: function () {
    if (this._dropTargets) {
      for (var i = 0; i < this._dropTargets; i++) {
        this.unregisterDropTarget(this._dropTargets[i]);
      }
      this._dropTargets = null;
    }

    AjaxControlToolkit.IEDragDropManager.callBaseMethod(this, 'dispose');
  },


  startDragDrop: function (dragSource, dragVisual, context) {
    var ev = window._event;

    // Don't allow drag and drop if there is another active drag operation going on.
    if (this._isDragging) {
      return;
    }

    this._underlyingTarget = null;
    this._activeDragSource = dragSource;
    this._activeDragVisual = dragVisual;
    this._activeContext = context;

    var mousePosition = { x: ev.clientX, y: ev.clientY };

    // By default we use absolute positioning, unless a different type 
    // of positioning is set explicitly.
    dragVisual.originalPosition = dragVisual.style.position;
    dragVisual.style.position = "absolute";

    document._lastPosition = mousePosition;
    dragVisual.startingPoint = mousePosition;
    var scrollOffset = this.getScrollOffset(dragVisual, /* recursive */ true);

    dragVisual.startingPoint = this.addPoints(dragVisual.startingPoint, scrollOffset);

    if (dragVisual.style.position == "absolute") {
      dragVisual.startingPoint = this.subtractPoints(dragVisual.startingPoint, $common.getLocation(dragVisual));
    }
    else {
      var left = parseInt(dragVisual.style.left);
      var top = parseInt(dragVisual.style.top);
      if (isNaN(left)) left = "0";
      if (isNaN(top)) top = "0";

      dragVisual.startingPoint = this.subtractPoints(dragVisual.startingPoint, { x: left, y: top });
    }

    // Monitor DOM changes.
    this._prepareForDomChanges();
    dragSource.onDragStart();
    var eventArgs = new AjaxControlToolkit.DragDropEventArgs(
        dragSource.get_dragMode(),
        dragSource.get_dragDataType(),
        dragSource.getDragData(context));
    var handler = this.get_events().getHandler('dragStart');
    if (handler) handler(this, eventArgs);
    this._recoverFromDomChanges();

    this._wireEvents();

    this._drag(/* isInitialDrag */ true);
  },


  _stopDragDrop: function (cancelled) {
    var ev = window._event;
    if (this._activeDragSource != null) {
      this._unwireEvents();

      if (!cancelled) {
        // The drag operation is cancelled if there 
        // is no drop target.
        cancelled = (this._underlyingTarget == null);
      }

      if (!cancelled && this._underlyingTarget != null) {
        this._underlyingTarget.drop(this._activeDragSource.get_dragMode(), this._activeDragSource.get_dragDataType(),
            this._activeDragSource.getDragData(this._activeContext));
      }

      this._activeDragSource.onDragEnd(cancelled);
      var handler = this.get_events().getHandler('dragStop');
      if (handler) handler(this, Sys.EventArgs.Empty);

      this._activeDragVisual.style.position = this._activeDragVisual.originalPosition;

      this._activeDragSource = null;
      this._activeContext = null;
      this._activeDragVisual = null;
      this._isDragging = false;
      this._potentialTarget = null;
      ev.preventDefault();
    }
  },

  _drag: function (isInitialDrag) {
    var ev = window._event;
    var mousePosition = { x: ev.clientX, y: ev.clientY };

    // NOTE: We store the event object to be able to determine the current 
    // mouse position in Mozilla in other event handlers such as keydown.
    document._lastPosition = mousePosition;

    var scrollOffset = this.getScrollOffset(this._activeDragVisual, /* recursive */ true);
    var position = this.addPoints(this.subtractPoints(mousePosition, this._activeDragVisual.startingPoint), scrollOffset);

    // Check if the visual moved at all.
    if (!isInitialDrag && parseInt(this._activeDragVisual.style.left) == position.x && parseInt(this._activeDragVisual.style.top) == position.y) {
      return;
    }

    $common.setLocation(this._activeDragVisual, position);

    // Monitor DOM changes.
    this._prepareForDomChanges();
    this._activeDragSource.onDrag();
    this._recoverFromDomChanges();

    // Find a potential target.
    this._potentialTarget = this._findPotentialTarget(this._activeDragSource, this._activeDragVisual);

    var movedToOtherTarget = (this._potentialTarget != this._underlyingTarget || this._potentialTarget == null);
    // Check if we are leaving an underlying target.
    if (movedToOtherTarget && this._underlyingTarget != null) {
      this._leaveTarget(this._activeDragSource, this._underlyingTarget);
    }

    if (this._potentialTarget != null) {
      // Check if we are entering a new target.
      if (movedToOtherTarget) {
        this._underlyingTarget = this._potentialTarget;

        // Enter the new target.
        this._enterTarget(this._activeDragSource, this._underlyingTarget);
      }
      else {
        this._moveInTarget(this._activeDragSource, this._underlyingTarget);
      }
    }
    else {
      this._underlyingTarget = null;
    }
  },


  _wireEvents: function () {
    $addHandler(document, "mouseup", this._mouseUpHandler);
    $addHandler(document, "mousemove", this._documentMouseMoveHandler);
    $addHandler(document.body, "dragover", this._documentDragOverHandler);

    $addHandler(this._activeDragVisual, "dragstart", this._dragStartHandler);
    $addHandler(this._activeDragVisual, "dragend", this._mouseUpHandler);
    $addHandler(this._activeDragVisual, "drag", this._mouseMoveHandler);
  },


  _unwireEvents: function () {
    $removeHandler(this._activeDragVisual, "drag", this._mouseMoveHandler);
    $removeHandler(this._activeDragVisual, "dragend", this._mouseUpHandler);
    $removeHandler(this._activeDragVisual, "dragstart", this._dragStartHandler);

    $removeHandler(document.body, "dragover", this._documentDragOverHandler);
    $removeHandler(document, "mousemove", this._documentMouseMoveHandler);
    $removeHandler(document, "mouseup", this._mouseUpHandler);
  },


  registerDropTarget: function (dropTarget) {
    if (this._dropTargets == null) {
      this._dropTargets = [];
    }
    Array.add(this._dropTargets, dropTarget);

    this._wireDropTargetEvents(dropTarget);
  },


  unregisterDropTarget: function (dropTarget) {
    this._unwireDropTargetEvents(dropTarget);
    if (this._dropTargets) {
      Array.remove(this._dropTargets, dropTarget);
    }
  },


  _wireDropTargetEvents: function (dropTarget) {
    var associatedElement = dropTarget.get_dropTargetElement();
    associatedElement._dropTarget = dropTarget;
    $addHandler(associatedElement, "dragenter", this._dragEnterHandler);
    $addHandler(associatedElement, "dragleave", this._dragLeaveHandler);
    $addHandler(associatedElement, "dragover", this._dragOverHandler);
    $addHandler(associatedElement, "drop", this._dropHandler);
  },


  _unwireDropTargetEvents: function (dropTarget) {
    var associatedElement = dropTarget.get_dropTargetElement();
    // make sure that the handlers are not removed twice
    if (associatedElement._dropTarget) {
      associatedElement._dropTarget = null;
      $removeHandler(associatedElement, "dragenter", this._dragEnterHandler);
      $removeHandler(associatedElement, "dragleave", this._dragLeaveHandler);
      $removeHandler(associatedElement, "dragover", this._dragOverHandler);
      $removeHandler(associatedElement, "drop", this._dropHandler);
    }
  },


  _onDragStart: function (ev) {
    window._event = ev;
    document.selection.empty();

    var dt = ev.dataTransfer;
    if (!dt && ev.rawEvent) dt = ev.rawEvent.dataTransfer;

    var dataType = this._activeDragSource.get_dragDataType().toLowerCase();
    var data = this._activeDragSource.getDragData(this._activeContext);

    if (data) {
      // TODO: How do we want to deal with 'non-compatible types'?
      if (dataType != "text" && dataType != "url") {
        dataType = "text";

        if (data.innerHTML != null) {
          data = data.innerHTML;
        }
      }

      dt.effectAllowed = "move";
      dt.setData(dataType, data.toString());
    }
  },

  _onMouseUp: function (ev) {
    window._event = ev;
    this._stopDragDrop(false);
  },

  _onDocumentMouseMove: function (ev) {
    window._event = ev;
    this._dragDrop();
  },

  _onDocumentDragOver: function (ev) {
    window._event = ev;
    if (this._potentialTarget) ev.preventDefault();
    //ev.returnValue = (_potentialTarget == null);
  },

  _onMouseMove: function (ev) {
    window._event = ev;
    this._drag();
  },

  _onDragEnter: function (ev) {
    window._event = ev;
    if (this._isDragging) {
      ev.preventDefault();
      //ev.returnValue = false;
    }
    else {
      // An external object is dragged to the drop target.
      var dataObjects = AjaxControlToolkit.IEDragDropManager._getDataObjectsForDropTarget(this._getDropTarget(ev.target));
      for (var i = 0; i < dataObjects.length; i++) {
        this._dropTarget.onDragEnterTarget(AjaxControlToolkit.DragMode.Copy, dataObjects[i].type, dataObjects[i].value);
      }
    }
  },

  _onDragLeave: function (ev) {
    window._event = ev;
    if (this._isDragging) {
      ev.preventDefault();
      //ev.returnValue = false;
    }
    else {
      // An external object is dragged to the drop target.
      var dataObjects = AjaxControlToolkit.IEDragDropManager._getDataObjectsForDropTarget(this._getDropTarget(ev.target));
      for (var i = 0; i < dataObjects.length; i++) {
        this._dropTarget.onDragLeaveTarget(AjaxControlToolkit.DragMode.Copy, dataObjects[i].type, dataObjects[i].value);
      }
    }
  },

  _onDragOver: function (ev) {
    window._event = ev;
    if (this._isDragging) {
      ev.preventDefault();
      //ev.returnValue = false;
    }
    else {
      // An external object is dragged over the drop target.
      var dataObjects = AjaxControlToolkit.IEDragDropManager._getDataObjectsForDropTarget(this._getDropTarget(ev.target));
      for (var i = 0; i < dataObjects.length; i++) {
        this._dropTarget.onDragInTarget(AjaxControlToolkit.DragMode.Copy, dataObjects[i].type, dataObjects[i].value);
      }
    }
  },

  _onDrop: function (ev) {
    window._event = ev;
    if (!this._isDragging) {
      // An external object is dropped on the drop target.
      var dataObjects = AjaxControlToolkit.IEDragDropManager._getDataObjectsForDropTarget(this._getDropTarget(ev.target));
      for (var i = 0; i < dataObjects.length; i++) {
        this._dropTarget.drop(AjaxControlToolkit.DragMode.Copy, dataObjects[i].type, dataObjects[i].value);
      }
    }
    ev.preventDefault();
    //ev.returnValue = false;
  },

  _getDropTarget: function (element) {
    while (element) {
      if (element._dropTarget != null) {
        return element._dropTarget;
      }
      element = element.parentNode;
    }
    return null;
  },

  _dragDrop: function () {
    if (this._isDragging) {
      return;
    }

    this._isDragging = true;
    this._activeDragVisual.dragDrop();
    document.selection.empty();
  },

  _moveInTarget: function (dragSource, dropTarget) {
    // Monitor DOM changes.
    this._prepareForDomChanges();
    dropTarget.onDragInTarget(dragSource.get_dragMode(), dragSource.get_dragDataType(), dragSource.getDragData(this._activeContext));
    this._recoverFromDomChanges();
  },

  _enterTarget: function (dragSource, dropTarget) {
    // Monitor DOM changes.
    this._prepareForDomChanges();
    dropTarget.onDragEnterTarget(dragSource.get_dragMode(), dragSource.get_dragDataType(), dragSource.getDragData(this._activeContext));
    this._recoverFromDomChanges();
  },

  _leaveTarget: function (dragSource, dropTarget) {
    // Monitor DOM changes.
    this._prepareForDomChanges();
    dropTarget.onDragLeaveTarget(dragSource.get_dragMode(), dragSource.get_dragDataType(), dragSource.getDragData(this._activeContext));
    this._recoverFromDomChanges();
  },

  _findPotentialTarget: function (dragSource, dragVisual) {
    var ev = window._event;

    if (this._dropTargets == null) {
      return null;
    }

    var type = dragSource.get_dragDataType();
    var mode = dragSource.get_dragMode();
    var data = dragSource.getDragData(this._activeContext);

    // Get the current cursor location.
    var scrollOffset = this.getScrollOffset(document.body, /* recursive */ true);
    var x = ev.clientX + scrollOffset.x;
    var y = ev.clientY + scrollOffset.y;
    var cursorRect = { x: x - this._radius, y: y - this._radius, width: this._radius * 2, height: this._radius * 2 };

    // Find any targets near the current cursor location.
    var targetRect;
    for (var i = 0; i < this._dropTargets.length; i++) {
      targetRect = $common.getBounds(this._dropTargets[i].get_dropTargetElement());
      if ($common.overlaps(cursorRect, targetRect) && this._dropTargets[i].canDrop(mode, type, data)) {
        return this._dropTargets[i];
      }
    }

    return null;
  },

  _prepareForDomChanges: function () {
    this._oldOffset = $common.getLocation(this._activeDragVisual);
  },

  _recoverFromDomChanges: function () {
    var newOffset = $common.getLocation(this._activeDragVisual);
    if (this._oldOffset.x != newOffset.x || this._oldOffset.y != newOffset.y) {
      this._activeDragVisual.startingPoint = this.subtractPoints(this._activeDragVisual.startingPoint, this.subtractPoints(this._oldOffset, newOffset));
      scrollOffset = this.getScrollOffset(this._activeDragVisual, /* recursive */ true);
      var position = this.addPoints(this.subtractPoints(document._lastPosition, this._activeDragVisual.startingPoint), scrollOffset);
      $common.setLocation(this._activeDragVisual, position);
    }
  },

  addPoints: function (p1, p2) {
    return { x: p1.x + p2.x, y: p1.y + p2.y };
  },

  subtractPoints: function (p1, p2) {
    return { x: p1.x - p2.x, y: p1.y - p2.y };
  },

  // -- Drag and drop helper methods.
  getScrollOffset: function (element, recursive) {
    var left = element.scrollLeft;
    var top = element.scrollTop;
    if (recursive) {
      var parent = element.parentNode;
      while (parent != null && parent.scrollLeft != null) {
        left += parent.scrollLeft;
        top += parent.scrollTop;
        // Don't include anything below the body.
        if (parent == document.body && (left != 0 && top != 0))
          break;
        parent = parent.parentNode;
      }
    }
    return { x: left, y: top };
  },

  getBrowserRectangle: function () {
    var width = window.innerWidth;
    var height = window.innerHeight;
    if (width == null) {
      width = document.body.clientWidth;
    }
    if (height == null) {
      height = document.body.clientHeight;
    }

    return { x: 0, y: 0, width: width, height: height };
  },

  getNextSibling: function (item) {
    for (item = item.nextSibling; item != null; item = item.nextSibling) {
      if (item.innerHTML != null) {
        return item;
      }
    }
    return null;
  },

  hasParent: function (element) {
    return (element.parentNode != null && element.parentNode.tagName != null);
  }
};
AjaxControlToolkit.IEDragDropManager.registerClass('AjaxControlToolkit.IEDragDropManager', Sys.Component);

AjaxControlToolkit.IEDragDropManager._getDataObjectsForDropTarget = function (dropTarget) {
  if (dropTarget == null) {
    return [];
  }
  var ev = window._event;
  var dataObjects = [];
  var dataTypes = ["URL", "Text"];
  var data;
  for (var i = 0; i < dataTypes.length; i++) {
    var dt = ev.dataTransfer;
    if (!dt && ev.rawEvent) dt = ev.rawEvent.dataTransfer;
    data = dt.getData(dataTypes[i]);
    if (dropTarget.canDrop(AjaxControlToolkit.DragMode.Copy, dataTypes[i], data)) {
      if (data) {
        Array.add(dataObjects, { type: dataTypes[i], value: data });
      }
    }
  }

  return dataObjects;
};


AjaxControlToolkit.GenericDragDropManager = function () {
  AjaxControlToolkit.GenericDragDropManager.initializeBase(this);

  this._dropTargets = null;
  // Radius of the cursor used to determine what drop target we 
  // are hovering. Anything below the cursor's zone may be a 
  // potential drop target.
  this._scrollEdgeConst = 40;
  this._scrollByConst = 10;
  this._scroller = null;
  this._scrollDeltaX = 0;
  this._scrollDeltaY = 0;
  this._activeDragVisual = null;
  this._activeContext = null;
  this._activeDragSource = null;
  this._oldOffset = null;
  this._potentialTarget = null;
  this._mouseUpHandler = null;
  this._mouseMoveHandler = null;
  this._keyPressHandler = null;
  this._scrollerTickHandler = null;
};
AjaxControlToolkit.GenericDragDropManager.prototype = {

  initialize: function () {
    AjaxControlToolkit.GenericDragDropManager.callBaseMethod(this, "initialize");
    this._mouseUpHandler = Function.createDelegate(this, this._onMouseUp);
    this._mouseMoveHandler = Function.createDelegate(this, this._onMouseMove);
    this._keyPressHandler = Function.createDelegate(this, this._onKeyPress);
    this._scrollerTickHandler = Function.createDelegate(this, this._onScrollerTick);
    if (Sys.Browser.agent === Sys.Browser.Safari) {
      AjaxControlToolkit.GenericDragDropManager.__loadSafariCompatLayer(this);
    }
    this._scroller = new Sys.Timer();
    this._scroller.set_interval(10);
    this._scroller.add_tick(this._scrollerTickHandler);
  },

  startDragDrop: function (dragSource, dragVisual, context) {
    this._activeDragSource = dragSource;
    this._activeDragVisual = dragVisual;
    this._activeContext = context;

    AjaxControlToolkit.GenericDragDropManager.callBaseMethod(this, "startDragDrop", [dragSource, dragVisual, context]);
  },

  _stopDragDrop: function (cancelled) {
    this._scroller.set_enabled(false);

    AjaxControlToolkit.GenericDragDropManager.callBaseMethod(this, "_stopDragDrop", [cancelled]);
  },

  _drag: function (isInitialDrag) {
    AjaxControlToolkit.GenericDragDropManager.callBaseMethod(this, "_drag", [isInitialDrag]);

    this._autoScroll();
  },

  _wireEvents: function () {
    $addHandler(document, "mouseup", this._mouseUpHandler);
    $addHandler(document, "mousemove", this._mouseMoveHandler);
    $addHandler(document, "keypress", this._keyPressHandler);
  },

  _unwireEvents: function () {
    $removeHandler(document, "keypress", this._keyPressHandler);
    $removeHandler(document, "mousemove", this._mouseMoveHandler);
    $removeHandler(document, "mouseup", this._mouseUpHandler);
  },

  _wireDropTargetEvents: function (dropTarget) {
    //
  },

  _unwireDropTargetEvents: function (dropTarget) {
    //
  },

  _onMouseUp: function (e) {
    window._event = e;
    this._stopDragDrop(false);
  },

  _onMouseMove: function (e) {
    window._event = e;
    this._drag();
  },

  _onKeyPress: function (e) {
    window._event = e;
    // Escape.
    var k = e.keyCode ? e.keyCode : e.rawEvent.keyCode;
    if (k == 27) {
      this._stopDragDrop(/* cancel */ true);
    }
  },

  _autoScroll: function () {
    var ev = window._event;
    var browserRect = this.getBrowserRectangle();
    if (browserRect.width > 0) {
      this._scrollDeltaX = this._scrollDeltaY = 0;
      if (ev.clientX < browserRect.x + this._scrollEdgeConst) this._scrollDeltaX = -this._scrollByConst;
      else if (ev.clientX > browserRect.width - this._scrollEdgeConst) this._scrollDeltaX = this._scrollByConst;
      if (ev.clientY < browserRect.y + this._scrollEdgeConst) this._scrollDeltaY = -this._scrollByConst;
      else if (ev.clientY > browserRect.height - this._scrollEdgeConst) this._scrollDeltaY = this._scrollByConst;
      if (this._scrollDeltaX != 0 || this._scrollDeltaY != 0) {
        this._scroller.set_enabled(true);
      }
      else {
        this._scroller.set_enabled(false);
      }
    }
  },

  _onScrollerTick: function () {
    var oldLeft = document.body.scrollLeft;
    var oldTop = document.body.scrollTop;
    window.scrollBy(this._scrollDeltaX, this._scrollDeltaY);
    var newLeft = document.body.scrollLeft;
    var newTop = document.body.scrollTop;

    var dragVisual = this._activeDragVisual;
    var position = { x: parseInt(dragVisual.style.left) + (newLeft - oldLeft), y: parseInt(dragVisual.style.top) + (newTop - oldTop) };
    $common.setLocation(dragVisual, position);
  }
};
AjaxControlToolkit.GenericDragDropManager.registerClass('AjaxControlToolkit.GenericDragDropManager', AjaxControlToolkit.IEDragDropManager);


if (Sys.Browser.agent === Sys.Browser.Safari) {
  AjaxControlToolkit.GenericDragDropManager.__loadSafariCompatLayer = function (ddm) {
    ddm._getScrollOffset = ddm.getScrollOffset;

    ddm.getScrollOffset = function (element, recursive) {
      return { x: 0, y: 0 };
    }

    ddm._getBrowserRectangle = ddm.getBrowserRectangle;

    ddm.getBrowserRectangle = function () {
      var browserRect = ddm._getBrowserRectangle();

      var offset = ddm._getScrollOffset(document.body, true);
      return {
        x: browserRect.x + offset.x, y: browserRect.y + offset.y,
        width: browserRect.width + offset.x, height: browserRect.height + offset.y
      };
    }
  }
};

// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />
/// <reference path="../Compat/Timer/Timer.js" />
/// <reference path="../Common/Common.js" />


Type.registerNamespace('AjaxControlToolkit.Animation');

// Create an alias for the namespace to save 25 chars each time it's used since
// this is a very long script and will take awhile to download
var $AA = AjaxControlToolkit.Animation;

$AA.registerAnimation = function(name, type) {
    /// <summary>
    /// Register an animation with the AJAX Control Toolkit animation framework. This serves a dual purpose:
    /// 1) to add standard utility methods to the animation type (such as a <code>play</code> method that creates
    /// an animation, plays it, and disposes it when the animation is over), and 2) to associate a name with the
    /// type that will be used when creating animations from a JSON description.  This method can also be called
    /// by other animation libraries to seamlessly interoperate with the AJAX Control Toolkit's animation
    /// framework.
    /// </summary>
    /// <param name="name" type="String">
    /// Name of the animation that will be used as the XML tag name in the XML animation description.  It
    /// should be a valid XML tag (i.e. an alpha-numeric sequence with no spaces, special characters, etc.).
    /// </param>
    /// <param name="type" type="Type">
    /// The type of the new animation must inherit from <see cref="AjaxControlToolkit.Animation.Animation" />.
    /// </param>
    /// <returns />

    // Make sure the type inherits from AjaxControlToolkit.Animation.Animation
    if (type && ((type === $AA.Animation) || (type.inheritsFrom && type.inheritsFrom($AA.Animation)))) {
        // We'll store the animation name/type mapping in a "static" object off of
        // AjaxControlToolkit.Animation.  If this __animations object hasn't been
        // created yet, demand create it on the first registration.
        if (!$AA.__animations) {
            $AA.__animations = { };
        }
        
        // Add the current type to the collection of animations
        $AA.__animations[name.toLowerCase()] = type;
        
        // Add a play function that will make it very easy to create, play, and
        // dispose of an animation.  This is effectively a "static" function on
        // each animation and will take the same parameters as that animation's
        // constructor.
        type.play = function() {
            /// <summary>
            /// Create an animation, play it immediately, and dispose it when finished.
            /// </summary>
            /// <param parameterArray="true" elementType="Object">
            /// The play function takes the same parameters as the type's constructor
            /// </param>
            /// <returns />
        
            // Create and initialize a new animation of the right type and pass in
            // any arguments given to the play function
            var animation = new type();
            type.apply(animation, arguments);
            animation.initialize();
            
            // Add an event handler to dispose the animation when it's finished
            var handler = Function.createDelegate(animation,
                function() {
                    /// <summary>
                    /// Dispose the animation after playing
                    /// </summary>
                    /// <returns />
                    animation.remove_ended(handler);
                    handler = null;
                    animation.dispose();
                });
            animation.add_ended(handler);
            
            // Once the animation has been created and initialized, play it and
            // dispose it as soon as it's finished
            animation.play();            
        }
    } else {
        // Raise an error if someone registers an animation that doesn't inherit
        // from our base Animation class
        throw Error.argumentType('type', type, $AA.Animation, AjaxControlToolkit.Resources.Animation_InvalidBaseType);
    }
}

$AA.buildAnimation = function(json, defaultTarget) {
    /// <summary>
    /// The <code>buildAnimation</code> function is used to turn a JSON animation description
    /// into an actual animation object that can be played.
    /// </summary>
    /// <param name="json" type="String" mayBeNull="true">
    /// JSON description of the animation in the format expected by createAnimation
    /// </param>
    /// <param name="defaultTarget" type="Sys.UI.DomElement" mayBeNull="true" domElement="true">
    /// Target of the animation if none is specified in the JSON description.  The semantics of
    /// target assignment are provided in more detail in createAnimation.
    /// </param>
    /// <returns type="AjaxControlToolkit.Animation.Animation" mayBeNull="true">
    /// Animation created from the JSON description
    /// </returns>
    
    // Ensure we have a description to create an animation with
    if (!json || json === '') {
        return null;
    }

    // "Parse" the JSON so we can easily manipulate it
    // (we don't wrap it in a try/catch when debugging to raise any errors)
    var obj;
    json = '(' + json + ')';
    if (! Sys.Debug.isDebug) {
        try { obj = Sys.Serialization.JavaScriptSerializer.deserialize(json); } catch (ex) { } 
    } else {
        obj = Sys.Serialization.JavaScriptSerializer.deserialize(json);
    }
    
    // Create a new instance of the animation
    return $AA.createAnimation(obj, defaultTarget);    
}

$AA.createAnimation = function(obj, defaultTarget) {
    /// <summary>
    /// The <code>createAnimation</code> function builds a new
    /// <see cref="AjaxControlToolkit.Animation.Animation" /> instance from an object
    /// that describes it.
    /// </summary>
    /// <param name="obj" type="Object">
    /// The object provides a description of the animation to be be generated in
    /// a very specific format. It has two special properties: <code>AnimationName</code>
    /// and <code>AnimationChildren</code>.  The <code>AnimationName</code> is required
    /// and used to find the type of animation to create (this name should map to
    /// one of the animation names supplied to <code>registerAnimation</code>).  The
    /// <code>AnimationChildren</code> property supplies an optional array for
    /// animations that use child animations (such as
    /// <see cref="AjaxControlToolkit.Animation.ParallelAnimation" /> and
    /// <see cref="AjaxControlToolkit.Animation.SequenceAnimation" />). The elements of
    /// the <code>AnimationChildren</code> array are valid
    /// <see cref="AjaxControlToolkit.Animation.Animation" /> objects that meet these same
    /// requirements.  In order for an animation to support child animations, it must
    /// derive from the <see cref="AjaxControlToolkit.Animation.ParentAnimation" /> class
    /// which provides common methods like <code>add</code>, <code>clear</code>, etc. The
    /// remaining properties of the object are used to set parameters specific to the type
    /// of animation being created (e.g. <code>duration</code>, <code>minimumOpacity</code>,
    /// <code>startValue</code>, etc.) and should have a corresponding property on the
    /// animation.  You can also assign an arbitrary JavaScript expression to any property
    /// by adding 'Script' to the end of its name (i.e., Height="70" can be replaced by
    /// HeightScript="$get('myElement').offsetHeight") and have the property set to the
    /// result of evaluating the expression before the animation is played each time.
    /// </param>
    /// <param name="defaultTarget" type="Sys.UI.DomElement" mayBeNull="true" domElement="true">
    /// The function also takes a <code>defaultTarget</code> parameter that is used as the
    /// target of the animation if the object does not specify one.  This parameter should be
    /// an instance of <see cref="Sys.UI.DomElement" /> and not just the name of an element.
    /// </param>
    /// <returns type="AjaxControlToolkit.Animation.Animation">
    /// <see cref="AjaxControlToolkit.Animation.Animation" /> created from the description
    /// </returns>
    /// <remarks>
    /// Exceptions are thrown when the <code>AnimationName</code> cannot be found.  Also,
    /// any exceptions raised by setting properties or providing properties with invalid
    /// names will only be raised when debugging.
    /// </remarks>

    // Create a default instance of the animation by looking up the AnimationName
    // in the global __animations object.
    if (!obj || !obj.AnimationName) {
        throw Error.argument('obj', AjaxControlToolkit.Resources.Animation_MissingAnimationName);
    }
    var type = $AA.__animations[obj.AnimationName.toLowerCase()];
    if (!type) {
        throw Error.argument('type', String.format(AjaxControlToolkit.Resources.Animation_UknownAnimationName, obj.AnimationName));
    }
    var animation = new type();
    
    // Set the animation's target if provided via defaultTarget (note that setting
    // it via AnimationTarget will happen during the regular property setting phase)
    if (defaultTarget) {
        animation.set_target(defaultTarget);
    }
    
    // If there is an AnimationChildren array and the animation inherits from
    // ParentAnimation, then we will recusively build the child animations.  It is
    // important that we create the child animations before setting the animation's
    // properties or initializing (because some properties and initialization may be
    // propogated down from parent to child).
    if (obj.AnimationChildren && obj.AnimationChildren.length) {
        if ($AA.ParentAnimation.isInstanceOfType(animation)) {
            for (var i = 0; i < obj.AnimationChildren.length; i++) {
                var child = $AA.createAnimation(obj.AnimationChildren[i]);
                if (child) {
                    animation.add(child);
                }
            }
        } else {
            throw Error.argument('obj', String.format(AjaxControlToolkit.Resources.Animation_ChildrenNotAllowed, type.getName()));
        }
    }
    
    // Get the list of all properties available to set on the current animation's
    // type.  We create a mapping from the property's lowercase friendly name
    // (i.e., "duration") to the name of its setter (i.e., "set_duration").  This is
    // essentialy in setting properties so we only copy over valid values.
    var properties = type.__animationProperties;
    if (!properties) {
        // Get the properties for this type by walking its prototype - by doing
        // this we'll effectively ignore anything not defined in the prototype
        type.__animationProperties = { };
        type.resolveInheritance();
        for (var name in type.prototype) {
            if (name.startsWith('set_')) {
                type.__animationProperties[name.substr(4).toLowerCase()] = name;
            }
        }
        
        // Remove the 'id' property as it shouldn't be set by the animation
        // (NOTE: the 'target' proeprty shouldn't be set to a string value, but it
        // isn't removed because it can be used as a valid dynamic property - i.e.
        // Target="myElement" *DOES NOT WORK*, but it's OKAY to use
        // TargetScript="$get('myElement')".  Validation for this scenario will be
        // handled automatically by _validateParams when debugging as Target is required
        // to be a dom element.)
        delete type.__animationProperties['id'];
        properties = type.__animationProperties;
    }
    
    // Loop through each of the properties in the object and check if it's in the list
    // of valid property names.  We will check the type of the propertyName to make sure
    // it's a String (as other types can be added by the ASP.NET AJAX compatability
    // layers to all objects and cause errors if you don't exclude them).  We will first
    // try to set a property with the same name if it exists.  If we can't find one but
    // the name of the property ends in 'script', then we will try to set a corresponding
    // dynamic property.  If no matches can be found at all, we'll raise an error when
    // debugging.
    for (var property in obj) {
        // Ignore the special properties in the object that don't correspond
        // to any actual properties on the animation
        var prop = property.toLowerCase();
        if (prop == 'animationname' || prop == 'animationchildren') {
            continue;
        }
        
        var value = obj[property];
        
        // Try to directly set the value of this property
        var setter = properties[prop];
        if (setter && String.isInstanceOfType(setter) && animation[setter]) {
            // Ignore any exceptions raised by setting the property
            // unless we're debugging
            if (! Sys.Debug.isDebug) {
                try { animation[setter](value); } catch (ex) { }
            } else {
                animation[setter](value);
            }
        } else {
            // Try to set the value of a dynamic property
            if (prop.endsWith('script')) {
                setter = properties[prop.substr(0, property.length - 6)];
                if (setter && String.isInstanceOfType(setter) && animation[setter]) {
                    animation.DynamicProperties[setter] = value;
                } else if ( Sys.Debug.isDebug) {
                    // Raise an error when debugging if we could not find a matching property
                    throw Error.argument('obj', String.format(AjaxControlToolkit.Resources.Animation_NoDynamicPropertyFound, property, property.substr(0, property.length - 5)));
                }
            } else if ( Sys.Debug.isDebug) {
                // Raise an error when debugging if we could not find a matching property
                throw Error.argument('obj', String.format(AjaxControlToolkit.Resources.Animation_NoPropertyFound, property));
            }
        }
    }
    
    return animation;
}


// In the Xml comments for each of the animations below, there is a special <animation /> tag
// that describes how the animation is referenced from a generic XML animation description


$AA.Animation = function(target, duration, fps) {
    /// <summary>
    /// <code>Animation</code> is an abstract base class used as a starting point for all the other animations.
    /// It provides the basic mechanics for the animation (playing, pausing, stopping, timing, etc.)
    /// and leaves the actual animation to be done in the abstract methods <code>getAnimatedValue</code>
    /// and <code>setValue</code>.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <field name="DynamicProperties" type="Object">
    /// The DynamicProperties collection is used to associate JavaScript expressions with
    /// properties.  The expressions are evaluated just before the animation is played
    /// everytime (in the base onStart method).  The object itself maps strings with the
    /// names of property setters (like "set_verticalOffset") to JavaScript expressions
    /// (like "$find('MyBehavior').get_element().offsetHeight").  Note specifically that
    /// the dynamic properties are JavaScript expressions and not abitrary statements (i.e.
    /// you can't include things like "return foo;"), although you can include anything
    /// inside an anonymous function definition that you immediately invoke (i.e.,
    /// "(function() { return foo; })()").  A dynamic property can be set in the generic
    /// XML animation description by appending Script onto any legitimate property name
    /// (for example, instead of Height="70" we could use
    /// HeightScript="$find('MyBehavior').get_element().offsetHeight").  Any exceptions
    /// raised when setting dynamic properties (including both JavaScript evaluation errors
    /// and other exceptions raised by property setters) will only be propogated when
    /// debugging.
    /// </field>
    /// <remarks>
    /// Animations need to be as fast as possible - even in debug mode.  Don't add validation code to
    /// methods involved in every step of the animation.
    /// </remarks>
    /// <animation>Animation</animation>
    $AA.Animation.initializeBase(this);
    
    // Length of the animation in seconds
    this._duration = 1;
    
    // Number of steps per second
    this._fps = 25;
    
    // Target Sys.UI.DomElement of the animation
    this._target = null;
    
    // Tick event handler
    this._tickHandler = null;
    
    // Animation timer
    this._timer = null;
    
    // Percentage of the animation already played
    this._percentComplete = 0;
    
    // Percentage of the animation to play on each step
    this._percentDelta = null;
    
    // Reference to the animation that owns this animation (currently only set in 
    // ParallelAnimation.add).  This concept of ownership allows an entire animation
    // subtree to be driven off a single timer so all the operations are properly
    // synchronized.
    this._owner = null;
    
    // Reference to the animation that contains this as a child (this is set
    // in ParentAnimation.add).  The primary use of the parent animation is in
    // resolving the animation target when one isn't specified.
    this._parentAnimation = null;
    
    // The DynamicProperties collection is used to associate JavaScript expressions with
    // properties.  The expressions are evaluated just before the animation is played
    // everytime (in the base onStart method).  See the additional information in the
    // XML <field> comment above.
    this.DynamicProperties = { };
    
    // Set the target, duration, and fps if they were provided in the constructor
    if (target) {
        this.set_target(target);
    }
    if (duration) {
        this.set_duration(duration);
    }
    if (fps) { 
        this.set_fps(fps);
    }
}
$AA.Animation.prototype = {
    dispose : function() {
        /// <summary>
        /// Dispose the animation
        /// </summary>
        /// <returns />
        
        if (this._timer) {
            this._timer.dispose();
            this._timer = null;
        }
        
        this._tickHandler = null;
        this._target = null;
        
        $AA.Animation.callBaseMethod(this, 'dispose');
    },
    
    play : function() {
        /// <summary>
        /// Play the animation from the beginning or where it was left off when paused.
        /// </summary>
        /// <returns />
        /// <remarks>
        /// If this animation is the child of another, you must call <code>play</code> on its parent instead.
        /// </remarks>
        
        // If ownership of this animation has been claimed, then we'll require the parent to
        // handle playing the animation (this is very important because then the entire animation
        // tree runs on the same timer and updates consistently)
        if (!this._owner) {
            var resume = true;
            if (!this._timer) {
                resume = false;
                
                if (!this._tickHandler) {
                    this._tickHandler = Function.createDelegate(this, this._onTimerTick);
                }

                this._timer = new Sys.Timer();
                this._timer.add_tick(this._tickHandler);
               
                this.onStart();
                
                this._timer.set_interval(1000 / this._fps);
                this._percentDelta = 100 / (this._duration * this._fps);
                this._updatePercentComplete(0, true);
            }

            this._timer.set_enabled(true);
            
            this.raisePropertyChanged('isPlaying');
            if (!resume) {
                this.raisePropertyChanged('isActive');
            }
        }
    },
    
    pause : function() {
        /// <summary>
        /// Pause the animation if it is playing.  Calling <code>play</code> will resume where
        /// the animation left off.
        /// </summary>
        /// <returns />
        /// <remarks>
        /// If this animation is the child of another, you must call <code>pause</code> on its parent instead.
        /// </remarks>
        
        if (!this._owner) {
            if (this._timer) {
                this._timer.set_enabled(false);
                
                this.raisePropertyChanged('isPlaying');
            }
        }
    },
    
    stop : function(finish) {
        /// <summary>
        /// Stop playing the animation.
        /// </summary>
        /// <param name="finish" type="Boolean" mayBeNull="true" optional="true">
        /// Whether or not stopping the animation should leave the target element in a state
        /// consistent with the animation playing completely by performing the last step.
        /// The default value is true.
        /// </param>
        /// <returns />
        /// <remarks>
        /// If this animation is the child of another, you must call <code>stop</code> on
        /// its parent instead.
        /// </remarks>
        
        if (!this._owner) {
            var t = this._timer;
            this._timer = null;
            if (t) {
                t.dispose();
                
                if (this._percentComplete !== 100) {
                    this._percentComplete = 100;
                    this.raisePropertyChanged('percentComplete');
                    if (finish || finish === undefined) {
                        this.onStep(100);
                    }
                }
                this.onEnd();
                
                this.raisePropertyChanged('isPlaying');
                this.raisePropertyChanged('isActive');
            }
        }
    },
    
    onStart : function() {
        /// <summary>
        /// The <code>onStart</code> method is called just before the animation is played each time.
        /// </summary>
        /// <returns />
        
        this.raiseStarted();
        
        // Initialize any dynamic properties
        for (var property in this.DynamicProperties) {
            try {
                // Invoke the property's setter on the evaluated expression
                this[property](eval(this.DynamicProperties[property]));
            } catch(ex) {
                // Propogate any exceptions if we're debugging, otherwise eat them
                if ( Sys.Debug.isDebug) {
                    throw ex;
                }
            }
        }
    },
    
    onStep : function(percentage) {
        /// <summary>
        /// The <code>onStep</code> method is called repeatedly to progress the animation through each frame
        /// </summary>
        /// <param name="percentage" type="Number">Percentage of the animation already complete</param>
        /// <returns />
        
        this.setValue(this.getAnimatedValue(percentage));
    },
    
    onEnd : function() {
        /// <summary>
        /// The <code>onEnd</code> method is called just after the animation is played each time.
        /// </summary>
        /// <returns />
        
        this.raiseEnded();
    },
    
    getAnimatedValue : function(percentage) {
        /// <summary>
        /// Determine the state of the animation after the given percentage of its duration has elapsed
        /// </summary>
        /// <param name="percentage" type="Number">Percentage of the animation already complete</param>
        /// <returns type="Object">
        /// State of the animation after the given percentage of its duration has elapsed that will
        /// be passed to <code>setValue</code>
        /// </returns>
        throw Error.notImplemented();
    },
    
    setValue : function(value) {
        /// <summary>
        /// Set the current state of the animation
        /// </summary>
        /// <param name="value" type="Object">Current state of the animation (as retreived from <code>getAnimatedValue</code>)</param>
        /// <returns />
        throw Error.notImplemented();
    },
    
    interpolate : function(start, end, percentage) {
        /// <summary>
        /// The <code>interpolate</code> function is used to find the appropriate value between starting and
        /// ending values given the current percentage.
        /// </summary>
        /// <param name="start" type="Number">
        /// Start of the range to interpolate
        /// </param>
        /// <param name="end" type="Number">
        /// End of the range to interpolate
        /// </param>
        /// <param name="percentage" type="Number">
        /// Percentage completed in the range to interpolate
        /// </param>
        /// <returns type="Number">
        /// Value the desired percentage between the start and end values
        /// </returns>
        /// <remarks>
        /// In the future, we hope to make several implementations of this available so we can dynamically
        /// change the apparent speed of the animations, although it may make more sense to modify the
        /// <code>_updatePercentComplete</code> function instead.
        /// </remarks>
        return start + (end - start) * (percentage / 100);
    },
    
    _onTimerTick : function() {
        /// <summary>
        /// Handler for the tick event to move the animation along through its duration
        /// </summary>
        /// <returns />
        this._updatePercentComplete(this._percentComplete + this._percentDelta, true);
    },
    
    _updatePercentComplete : function(percentComplete, animate) {
        /// <summary>
        /// Update the animation and its target given the current percentage of its duration that
        /// has already elapsed
        /// </summary>
        /// <param name="percentComplete" type="Number">
        /// Percentage of the animation duration that has already elapsed
        /// </param>
        /// <param name="animate" type="Boolean" mayBeNull="true" optional="true">
        /// Whether or not updating the animation should visually modify the animation's target
        /// </param>
        /// <returns />
        
        if (percentComplete > 100) {
            percentComplete = 100;
        }
        
        this._percentComplete = percentComplete;
        this.raisePropertyChanged('percentComplete');
        
        if (animate) {
            this.onStep(percentComplete);
        }
        
        if (percentComplete === 100) {
            this.stop(false);
        }
    },
    
    setOwner : function(owner) {
        /// <summary>
        /// Make this animation the child of another animation
        /// </summary>
        /// <param name="owner" type="AjaxControlToolkit.Animation.Animation">
        /// Parent animation
        /// </param>
        /// <returns />
        this._owner = owner;
    },
    
    raiseStarted : function() {
        /// <summary>
        /// Raise the <code>started</code> event
        /// </summary>
        /// <returns />
        var handlers = this.get_events().getHandler('started');
        if (handlers) {
            handlers(this, Sys.EventArgs.Empty);
        }
    },
    
    add_started : function(handler) {
        /// <summary>
        /// Adds an event handler for the <code>started</code> event.
        /// </summary>
        /// <param name="handler" type="Function">
        /// The handler to add to the event.
        /// </param>
        /// <returns />
        this.get_events().addHandler("started", handler);
    },
    
    remove_started : function(handler) {
        /// <summary>
        /// Removes an event handler for the <code>started</code> event.
        /// </summary>
        /// <param name="handler" type="Function">
        /// The handler to remove from the event.
        /// </param>
        /// <returns />
        this.get_events().removeHandler("started", handler);
    },
    
    raiseEnded : function() {
        /// <summary>
        /// Raise the <code>ended</code> event
        /// </summary>
        /// <returns />
        var handlers = this.get_events().getHandler('ended');
        if (handlers) {
            handlers(this, Sys.EventArgs.Empty);
        }
    },
    
    add_ended : function(handler) {
        /// <summary>
        /// Adds an event handler for the <code>ended</code> event.
        /// </summary>
        /// <param name="handler" type="Function">
        /// The handler to add to the event.
        /// </param>
        /// <returns />
        this.get_events().addHandler("ended", handler);
    },
    
    remove_ended : function(handler) {
        /// <summary>
        /// Removes an event handler for the <code>ended</code> event.
        /// </summary>
        /// <param name="handler" type="Function">
        /// The handler to remove from the event.
        /// </param>
        /// <returns />
        this.get_events().removeHandler("ended", handler);
    },
    
    get_target : function() {
        /// <value type="Sys.UI.DomElement" domElement="true" mayBeNull="true">
        /// Target of the animation.  If the target of this animation is null and
        /// the animation has a parent, then it will recursively use the target of
        /// the parent animation instead.
        /// </value>
        /// <remarks>
        /// Do not set this property in a generic Xml animation description. It should be set
        /// using either the extender's TargetControlID or the AnimationTarget property (the latter
        /// maps to AjaxControlToolkit.Animation.set_animationTarget).  The only valid way to
        /// set this property in the generic Xml animation description is to use the dynamic
        /// property TargetScript="$get('myElement')".
        /// <remarks>
        if (!this._target && this._parentAnimation) {
            return this._parentAnimation.get_target();
        }
        return this._target;
    },
    set_target : function(value) {
        if (this._target != value) {
            this._target = value;
            this.raisePropertyChanged('target');
        }
    },
    
    set_animationTarget : function(id) {
        /// <value type="string" mayBeNull="false">
        /// ID of a Sys.UI.DomElement or Sys.UI.Control to use as the target of the animation
        /// </value>
        /// <remarks>
        /// If no Sys.UI.DomElement or Sys.UI.Control can be found for the given ID, an
        /// argument exception will be thrown.
        /// <remarks>
        
        // Try to find a Sys.UI.DomElement
        var target = null;
        var element = $get(id);
        if (element) {
            target = element;
        } else {
            // Try to find the control in the AJAX controls collection
            var ctrl = $find(id);
            if (ctrl) {
                element = ctrl.get_element();
                if (element) {
                    target = element;
                }
            }
        }
        
        // Use the new target if we have one, or raise an error if not
        if (target) { 
            this.set_target(target);
        } else {
            throw Error.argument('id', String.format(AjaxControlToolkit.Resources.Animation_TargetNotFound, id));
        }
    },
    
    get_duration : function() {
        /// <value type="Number">
        /// Length of the animation in seconds.  The default is 1.
        /// </value>
        return this._duration;
    },
    set_duration : function(value) {
        value = this._getFloat(value);
        if (this._duration != value) {
            this._duration = value;
            this.raisePropertyChanged('duration');
        }
    },
    
    get_fps : function() {
        /// <value type="Number" integer="true">
        /// Number of steps per second.  The default is 25.
        /// </value>
        return this._fps;
    },
    set_fps : function(value) {
        value = this._getInteger(value);
        if (this.fps != value) {
            this._fps = value;
            this.raisePropertyChanged('fps');
        }
    },
    
    get_isActive : function() {
        /// <value type="Boolean">
        /// <code>true</code> if animation is active, <code>false</code> if not.
        /// </value>
        return (this._timer !== null);
    },
    
    get_isPlaying : function() {
        /// <value type="Boolean">
        /// <code>true</code> if animation is playing, <code>false</code> if not.
        /// </value>
        return (this._timer !== null) && this._timer.get_enabled();
    },
    
    get_percentComplete : function() {
        /// <value type="Number">
        /// Percentage of the animation already played.
        /// </value>
        return this._percentComplete;
    },
    
    _getBoolean : function(value) {
        /// <summary>
        /// Helper to convert strings to booleans for property setters
        /// </summary>
        /// <param name="value" type="Object">
        /// Value to convert if it's a string
        /// </param>
        /// <returns type="Object">
        /// Value that has been converted if it was a string
        /// </returns>
        if (String.isInstanceOfType(value)) {
            return Boolean.parse(value);
        }
        return value;
    },
    
    _getInteger : function(value) {
        /// <summary>
        /// Helper to convert strings to integers for property setters
        /// </summary>
        /// <param name="value" type="Object">Value to convert if it's a string</param>
        /// <returns type="Object">Value that has been converted if it was a string</returns>
        if (String.isInstanceOfType(value)) {
            return parseInt(value);
        }
        return value;
    },
    
    _getFloat : function(value) {
        /// <summary>
        /// Helper to convert strings to floats for property setters
        /// </summary>
        /// <param name="value" type="Object">Value to convert if it's a string</param>
        /// <returns type="Object">Value that has been converted if it was a string</returns>
        if (String.isInstanceOfType(value)) {
            return parseFloat(value);
        }
        return value;
    },
    
    _getEnum : function(value, type) {
        /// <summary>
        /// Helper to convert strings to enum values for property setters
        /// </summary>
        /// <param name="value" type="Object">Value to convert if it's a string</param>
        /// <param name="type" type="Type">Type of the enum to convert to</param>
        /// <returns type="Object">Value that has been converted if it was a string</returns>
        if (String.isInstanceOfType(value) && type && type.parse) {
            return type.parse(value);
        }
        return value;
    }
}
$AA.Animation.registerClass('AjaxControlToolkit.Animation.Animation', Sys.Component);
$AA.registerAnimation('animation', $AA.Animation);


$AA.ParentAnimation = function(target, duration, fps, animations) {
    /// <summary>
    /// The <code>ParentAnimation</code> serves as a base class for all animations that contain children (such as
    /// <see cref="AjaxControlToolkit.Animation.ParallelAnimation" />, <see cref="AjaxControlToolkit.SequenceAnimation" />,
    /// etc.).  It does not actually play the animations, so any classes that inherit from it must do so.  Any animation
    /// that requires nested child animations must inherit from this class, although it will likely want to inherit off of
    /// <see cref="AjaxControlToolkit.Animation.ParallelAnimation" /> or <see cref="AjaxControlToolkit.SequenceAnimation" />
    /// which will actually play their child animations.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="animations" mayBeNull="true" optional="true" parameterArray="true" elementType="AjaxControlToolkit.Animation.Animation">
    /// Array of child animations to be played
    /// </param>
    /// <animation>Parent</animation>
    $AA.ParentAnimation.initializeBase(this, [target, duration, fps]);
    
    // Array of child animations (there are no assumptions placed on order because
    // it will matter for some derived animations like SequenceAnimation, but not
    // for others like ParallelAnimation) that is demand created in add
    this._animations = [];
    
    // Add any child animations passed into the constructor
    if (animations && animations.length) {
        for (var i = 0; i < animations.length; i++) {
            this.add(animations[i]);
        }
    }
}
$AA.ParentAnimation.prototype = {
    initialize : function() {
    	/// <summary>
        /// Initialize the parent along with any child animations that have not yet been initialized themselves
    	/// </summary>
    	/// <returns />
        $AA.ParentAnimation.callBaseMethod(this, 'initialize');
        
        // Initialize all the uninitialized child animations
        if (this._animations) {
            for (var i = 0; i < this._animations.length; i++) {
                var animation = this._animations[i];
                if (animation && !animation.get_isInitialized) {
                    animation.initialize();
                }
            }
        }
    },
    
    dispose : function() {
    	/// <summary>
        /// Dispose of the child animations
    	/// </summary>
    	/// <returns />

        this.clear();
        this._animations = null;
        $AA.ParentAnimation.callBaseMethod(this, 'dispose');
    },
    
    get_animations : function() {
    	/// <value elementType="AjaxControlToolkit.Animation.Animation">
        /// Array of child animations to be played (there are no assumptions placed on order because it will matter for some
        /// derived animations like <see cref="AjaxControlToolkit.Animation.SequenceAnimation" />, but not for
        /// others like <see cref="AjaxControlToolkit.Animation.ParallelAnimation" />).  To manipulate the child
        /// animations, use the functions <code>add</code>, <code>clear</code>, <code>remove</code>, and <code>removeAt</code>.
    	/// </value>
        return this._animations;
    },
    
    add : function(animation) {
    	/// <summary>
        /// Add an animation as a child of this animation.
    	/// </summary>
    	/// <param name="animation" type="AjaxControlToolkit.Animation.Animation">Child animation to add</param>
    	/// <returns />

        if (this._animations) {
            if (animation) {
                animation._parentAnimation = this;
            }
            Array.add(this._animations, animation);
            this.raisePropertyChanged('animations');
        }
    },
    
    remove : function(animation) {
        /// <summary>
        /// Remove the animation from the array of child animations.
        /// </summary>
        /// <param name="animation" type="AjaxControlToolkit.Animation.Animation">
        /// Child animation to remove
        /// </param>
        /// <returns />
        /// <remarks>
        /// This will dispose the removed animation.
        /// </remarks>

        if (this._animations) {
            if (animation) {
                animation.dispose();
            }
            Array.remove(this._animations, animation);
            this.raisePropertyChanged('animations');
        }
    },
    
    removeAt : function(index) {
        /// <summary>
        /// Remove the animation at a given index from the array of child animations.
        /// </summary>
        /// <param name="index" type="Number" integer="true">
        /// Index of the child animation to remove
        /// </param>
        /// <returns />
        
        if (this._animations) {
            var animation = this._animations[index];
            if (animation) {
                animation.dispose();
            }
            Array.removeAt(this._animations, index);
            this.raisePropertyChanged('animations');
        }
    },
    
    clear : function() {
    	/// <summary>
        /// Clear the array of child animations.
    	/// </summary>
    	/// <remarks>
    	/// This will dispose the cleared child animations.
    	/// </remarks>
    	/// <returns />

        if (this._animations) {
            for (var i = this._animations.length - 1; i >= 0; i--) {
                this._animations[i].dispose();
                this._animations[i] = null;
            }
            Array.clear(this._animations);
            this._animations = [];
            this.raisePropertyChanged('animations');
        }
    }
}
$AA.ParentAnimation.registerClass('AjaxControlToolkit.Animation.ParentAnimation', $AA.Animation);
$AA.registerAnimation('parent', $AA.ParentAnimation);


$AA.ParallelAnimation = function(target, duration, fps, animations) {
    /// <summary>
    /// The <code>ParallelAnimation</code> plays several animations simultaneously.  It inherits from
    /// <see cref="AjaxControlToolkit.Animation.ParentAnimation" />, but makes itself the owner of all
    /// its child animations to allow the use a single timer and syncrhonization mechanisms shared with
    /// all the children (in other words, the <code>duration</code> properties of any child animations
    /// are ignored in favor of the parent's <code>duration</code>).  It is very useful in creating
    /// sophisticated effects through combination of simpler animations.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="animations" mayBeNull="true" optional="true" parameterArray="true" elementType="AjaxControlToolkit.Animation.Animation">
    /// Array of child animations
    /// </param>
    /// <animation>Parallel</animation>
    $AA.ParallelAnimation.initializeBase(this, [target, duration, fps, animations]);
}
$AA.ParallelAnimation.prototype = {
    add : function(animation) {
    	/// <summary>
        /// Add an animation as a child of this animation and make ourselves its owner.
    	/// </summary>
    	/// <param name="animation" type="AjaxControlToolkit.Animation.Animation">Child animation to add</param>
    	/// <returns />
        $AA.ParallelAnimation.callBaseMethod(this, 'add', [animation]);
        animation.setOwner(this);
    },
    
    onStart : function() {
        /// <summary>
        /// Get the child animations ready to play
        /// </summary>
        /// <returns />

        $AA.ParallelAnimation.callBaseMethod(this, 'onStart');
        var animations = this.get_animations();
        for (var i = 0; i < animations.length; i++) {
            animations[i].onStart();
        }
    },
    
    onStep : function(percentage) {
        /// <summary>
        /// Progress the child animations through each frame
        /// </summary>
        /// <param name="percentage" type="Number">
        /// Percentage of the animation already complete
        /// </param>
        /// <returns />

        var animations = this.get_animations();
        for (var i = 0; i < animations.length; i++) {
            animations[i].onStep(percentage);
        }
    },
    
    onEnd : function() {
        /// <summary>
        /// Finish playing all of the child animations
        /// </summary>
        /// <returns />

        var animations = this.get_animations();
        for (var i = 0; i < animations.length; i++) {
            animations[i].onEnd();
        }
        $AA.ParallelAnimation.callBaseMethod(this, 'onEnd');
    }
}
$AA.ParallelAnimation.registerClass('AjaxControlToolkit.Animation.ParallelAnimation', $AA.ParentAnimation);
$AA.registerAnimation('parallel', $AA.ParallelAnimation);


$AA.SequenceAnimation = function(target, duration, fps, animations, iterations) {
    /// <summary>
    /// The <code>SequenceAnimation</code> runs several animations one after the other.  It can also
    /// repeat the sequence of animations for a specified number of iterations (which defaults to a
    /// single iteration, but will repeat forever if you specify zero or less iterations).  Also, the
    /// <code>SequenceAnimation</code> cannot be a child of a <see cref="AjaxControlToolkit.Animation.ParallelAnimation" />
    /// (or any animation inheriting from it).
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="animations" mayBeNull="true" optional="true" parameterArray="true" elementType="AjaxControlToolkit.Animation.Animation">
    /// Array of child animations
    /// </param>
    /// <param name="iterations" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of times to repeatedly play the sequence.  If zero or less iterations are specified, the sequence
    /// will repeat forever.  The default value is 1 iteration.
    /// </param>
    /// <remarks>
    /// The <code>SequenceAnimation</code> ignores the <code>duration</code> and <code>fps</code>
    /// properties, and will let each of its child animations use any settings they please.
    /// </remarks>
    /// <animation>Sequence</animation>
    $AA.SequenceAnimation.initializeBase(this, [target, duration, fps, animations]);

    // Handler used to determine when an animation has finished
    this._handler = null;
    
    // Flags to note whether we're playing, paused, or stopped
    this._paused = false;
    this._playing = false;
    
    // Index of the currently executing animation in the sequence
    this._index = 0;
    
    // Counter used when playing the animation to determine the remaining number of times to play the entire sequence
    this._remainingIterations = 0;
    
    // Number of iterations
    this._iterations = (iterations !== undefined) ? iterations : 1;
}
$AA.SequenceAnimation.prototype = {
    dispose : function() {
    	/// <summary>
        /// Dispose the animation
        /// </summary>
        /// <returns />
        this._handler = null;
        $AA.SequenceAnimation.callBaseMethod(this, 'dispose');
    },
    
    stop : function() {
        /// <summary>
        /// Stop playing the entire sequence of animations
        /// </summary>
        /// <returns />
        /// <remarks>
        /// Stopping this animation will perform the last step of each child animation, thereby leaving their
        /// target elements in a state consistent with the animation playing completely. If this animation is
        /// the child of another, you must call <code>stop</code> on its parent instead.
        /// </remarks>

        if (this._playing) {
            var animations = this.get_animations();
            if (this._index < animations.length) {
                // Remove the handler from the currently running animation
                animations[this._index].remove_ended(this._handler);
                // Call stop on all remaining animations to ensure their
                // effects will be seen
                for (var i = this._index; i < animations.length; i++) {
                    animations[i].stop();
                }
            }
            this._playing = false;
            this._paused = false;
            this.raisePropertyChanged('isPlaying');
            this.onEnd();
        }
    },
    
    pause : function() {
        /// <summary>
        /// Pause the animation if it is playing.  Calling <code>play</code> will resume where
        /// the animation left off.
        /// </summary>
        /// <returns />
        /// <remarks>
        /// If this animation is the child of another, you must call <code>pause</code> on its parent instead.
        /// </remarks>

        if (this.get_isPlaying()) {
            var current = this.get_animations()[this._index];
            if (current != null) {
                current.pause();
            }
            this._paused = true;
            this.raisePropertyChanged('isPlaying');
        }
    },
    
    play : function() {
        /// <summary>
        /// Play the sequence of animations from the beginning or where it was left off when paused
        /// </summary>
        /// <returns />
        /// <remarks>
        /// If this animation is the child of another, you must call <code>play</code> on its parent instead
        /// </remarks>

        var animations = this.get_animations();
        if (!this._playing) {
            this._playing = true;
            if (this._paused) {
                this._paused = false;
                var current = animations[this._index];
                if (current != null) {
                    current.play();
                    this.raisePropertyChanged('isPlaying');
                }
            } else {
                this.onStart();
                // Reset the index and attach the handler to the first
                this._index = 0;
                var first = animations[this._index];
                if (first) {
                    first.add_ended(this._handler);
                    first.play();
                    this.raisePropertyChanged('isPlaying');
                } else {
                    this.stop();
                }
            }
        }
    },
    
    onStart : function() {
        /// <summary>
        /// The <code>onStart</code> method is called just before the animation is played each time
        /// </summary>
        /// <returns />
        $AA.SequenceAnimation.callBaseMethod(this, 'onStart');
        this._remainingIterations = this._iterations - 1;
        
        // Create the handler we attach to each animation as it plays to determine when we've finished with it
        if (!this._handler) {
            this._handler = Function.createDelegate(this, this._onEndAnimation);
        }
    },
    
    _onEndAnimation : function() {
    	/// <summary>
        /// Wait for the end of each animation, and then continue by playing the other animations remaining
        /// in the sequence.  Stop when it reaches the last animation and there are no remaining iterations.
    	/// </summary>
    	/// <returns />

        // Remove the handler from the current animation
        var animations = this.get_animations();
        var current = animations[this._index++];
        if (current) {
            current.remove_ended(this._handler);
        }
        
        // Keep running animations and stop when we're out
        if (this._index < animations.length) {
            var next = animations[this._index];
            next.add_ended(this._handler);
            next.play();
        } else if (this._remainingIterations >= 1 || this._iterations <= 0) {
            this._remainingIterations--;
            this._index = 0;
            var first = animations[0];
            first.add_ended(this._handler);
            first.play();
        } else {
            this.stop();
        }
    },
    
    onStep : function(percentage) {
        /// <summary>
        /// Raises an invalid operation exception because this will only be called if a <code>SequenceAnimation</code>
        /// has been nested inside an <see cref="AjaxControlToolkit.Animation.ParallelAnimation" /> (or a derived type).
        /// </summary>
        /// <param name="percentage" type="Number">Percentage of the animation already complete</param>
        /// <returns />
        throw Error.invalidOperation(AjaxControlToolkit.Resources.Animation_CannotNestSequence);
    },
    
    onEnd : function() {
        /// <summary>
        /// The <code>onEnd</code> method is called just after the animation is played each time.
        /// </summary>
        /// <returns />
        this._remainingIterations = 0;
        $AA.SequenceAnimation.callBaseMethod(this, 'onEnd');
    },
    
    get_isActive : function() {
    	/// <value type="Boolean">
        /// <code>true</code> if animation is active, <code>false</code> if not.
        /// </value>
        return true;
    },
    
    get_isPlaying : function() {
    	/// <value type="Boolean">
        /// <code>true</code> if animation is playing, <code>false</code> if not.
        /// </value>
        return this._playing && !this._paused;
    },
    
    get_iterations : function() {
        /// <value type="Number" integer="true">
        /// Number of times to repeatedly play the sequence.  If zero or less iterations are specified, the sequence
        /// will repeat forever.  The default value is 1 iteration.
        /// </value>
        return this._iterations;
    },
    set_iterations : function(value) {
        value = this._getInteger(value);
        if (this._iterations != value) {
            this._iterations = value;
            this.raisePropertyChanged('iterations');
        }
    },
    
    get_isInfinite : function() {
    	/// <value type="Boolean">
        /// <code>true</code> if this animation will repeat forever, <code>false</code> otherwise.
    	/// </value>
        return this._iterations <= 0;
    }
}
$AA.SequenceAnimation.registerClass('AjaxControlToolkit.Animation.SequenceAnimation', $AA.ParentAnimation);
$AA.registerAnimation('sequence', $AA.SequenceAnimation);


$AA.SelectionAnimation = function(target, duration, fps, animations) {
    /// <summary>
    /// The <code>SelectionAnimation</code> will run a single animation chosen from of its child animations. It is
    /// important to note that the <code>SelectionAnimation</code> ignores the <code>duration</code> and <code>fps</code>
    /// properties, and will let each of its child animations use any settings they please.  This is a base class with no
    /// functional implementation, so consider using <see cref="AjaxControlToolkit.Animation.ConditionAnimation" /> or
    /// <see cref="AjaxControlToolkit.Animation.CaseAnimation" /> instead.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="animations" mayBeNull="true" optional="true" parameterArray="true" elementType="AjaxControlToolkit.Animation.Animation">
    /// Array of child animations
    /// </param>
    /// <animation>Selection</animation>
    $AA.SelectionAnimation.initializeBase(this, [target, duration, fps, animations]);
    
    // Index of the animation selected to play
    this._selectedIndex = -1;
    
    // Reference to the animation selected to play
    this._selected = null;
}
$AA.SelectionAnimation.prototype = {    
    getSelectedIndex : function() {
        /// <summary>
        /// Get the index of the animation that is selected to be played.  If this returns an index outside the bounds of
        /// the child animations array, then nothing is played.
        /// </summary>
        /// <returns type="Number" integer="true">
        /// Index of the selected child animation to play
        /// </returns>
        throw Error.notImplemented();
    },
    
    onStart : function() {
    	/// <summary>
        /// The <code>onStart</code> method is called just before the animation is played each time.
        /// </summary>
        /// <returns />
	    $AA.SelectionAnimation.callBaseMethod(this, 'onStart');
	    
	    var animations = this.get_animations();
	    this._selectedIndex = this.getSelectedIndex();
	    if (this._selectedIndex >= 0 && this._selectedIndex < animations.length) {
	        this._selected = animations[this._selectedIndex];
	        if (this._selected) {
	            this._selected.setOwner(this);
	            this._selected.onStart();
	        }
	    }
    },
    
    onStep : function(percentage) {
    	/// <summary>
        /// The <code>onStep</code> method is called repeatedly to progress the animation through each frame
        /// </summary>
        /// <param name="percentage" type="Number">Percentage of the animation already complete</param>
        /// <returns />

        if (this._selected) {
    	    this._selected.onStep(percentage);
    	}
    },
    
    onEnd : function() {
    	/// <summary>
        /// The <code>onEnd</code> method is called just after the animation is played each time.
        /// </summary>
        /// <returns />

        if (this._selected) {
    	    this._selected.onEnd();
    	    this._selected.setOwner(null);
    	}
    	this._selected = null;
    	this._selectedIndex = null;
	    $AA.SelectionAnimation.callBaseMethod(this, 'onEnd');
    }
}
$AA.SelectionAnimation.registerClass('AjaxControlToolkit.Animation.SelectionAnimation', $AA.ParentAnimation);
$AA.registerAnimation('selection', $AA.SelectionAnimation);


$AA.ConditionAnimation = function(target, duration, fps, animations, conditionScript) {
    /// <summary>
    /// The <code>ConditionAnimation</code> is used as a control structure to play a specific child animation
    /// depending on the result of executing the <code>conditionScript</code>.  If the <code>conditionScript</code>
    /// evaluates to <code>true</code>, the first child animation is played.  If it evaluates to <code>false</code>,
    /// the second child animation is played (although nothing is played if a second animation is not present).
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="animations" mayBeNull="true" optional="true" parameterArray="true" elementType="AjaxControlToolkit.Animation.Animation">
    /// Array of child animations
    /// </param>
    /// <param name="conditionScript" type="String" mayBeNull="true" optional="true">
    /// JavaScript that should evaluate to <code>true</code> or <code>false</code> to determine which child
    /// animation to play.
    /// </param>
    /// <animation>Condition</animation>
    $AA.ConditionAnimation.initializeBase(this, [target, duration, fps, animations]);
    
    // Condition to determine which index we will play
    this._conditionScript = conditionScript;   
}
$AA.ConditionAnimation.prototype = {    
   getSelectedIndex : function() {
       /// <summary>
       /// Get the index of the animation that is selected to be played.  If this returns an index outside the bounds of
       /// the child animations array, then nothing is played.
       /// </summary>
       /// <returns type="Number" integer="true">
       /// Index of the selected child animation to play
       /// </returns>

        var selected = -1;
        if (this._conditionScript && this._conditionScript.length > 0) {
            try {
                selected = eval(this._conditionScript) ? 0 : 1;
            } catch(ex) {
            }
        }
        return selected;
    },
    
    get_conditionScript : function() {
    	/// <value type="String">
        /// JavaScript that should evaluate to <code>true</code> or <code>false</code> to determine which
        /// child animation to play.
    	/// </value>
        return this._conditionScript;
    },
    set_conditionScript : function(value) {
        if (this._conditionScript != value) {
            this._conditionScript = value;
            this.raisePropertyChanged('conditionScript');
        }
    }
}
$AA.ConditionAnimation.registerClass('AjaxControlToolkit.Animation.ConditionAnimation', $AA.SelectionAnimation);
$AA.registerAnimation('condition', $AA.ConditionAnimation);


$AA.CaseAnimation = function(target, duration, fps, animations, selectScript) {
    /// <summary>
    /// The <code>CaseAnimation</code> is used as a control structure to play a specific child animation depending on
    /// the result of executing the <code>selectScript</code>, which should return the index of the child animation to
    /// play (this is similar to the <code>case</code> or <code>select</code> statements in C#/VB, etc.).  If the provided
    /// index is outside the bounds of the child animations array (or if nothing was returned) then we will not play anything.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="animations" mayBeNull="true" optional="true" parameterArray="true" elementType="AjaxControlToolkit.Animation.Animation">
    /// Array of child animations
    /// </param>
    /// <param name="selectScript" type="String" mayBeNull="true" optional="true">
    /// JavaScript that should evaluate to the index of the appropriate child animation to play.  If this returns an index outside the bounds of the child animations array, then nothing is played.
    /// </param>
    /// <animation>Case</animation>
    $AA.CaseAnimation.initializeBase(this, [target, duration, fps, animations]);

    // Condition to determine which index we will play
    this._selectScript = selectScript;
}
$AA.CaseAnimation.prototype = {
    getSelectedIndex : function() {
        /// <summary>
        /// Get the index of the animation that is selected to be played.  If this returns an index outside the bounds of
        /// the child animations array, then nothing is played.
        /// </summary>
        /// <returns type="Number" integer="true">
        /// Index of the selected child animation to play
        /// </returns>

        var selected = -1;
        if (this._selectScript && this._selectScript.length > 0) {
            try {
                var result = eval(this._selectScript)
                if (result !== undefined)
                    selected = result;
            } catch (ex) {
            }
        }
        return selected;
    },
    
    get_selectScript : function() {
        /// <value type="String">
        /// JavaScript that should evaluate to the index of the appropriate child animation to play.  If this returns an index outside the bounds of the child animations array, then nothing is played.
        /// </value>
        return this._selectScript;
    },
    set_selectScript : function(value) {
        if (this._selectScript != value) {
            this._selectScript = value;
            this.raisePropertyChanged('selectScript');
        }
    }
}
$AA.CaseAnimation.registerClass('AjaxControlToolkit.Animation.CaseAnimation', $AA.SelectionAnimation);
$AA.registerAnimation('case', $AA.CaseAnimation);


$AA.FadeEffect = function() {
    /// <summary>
    /// The FadeEffect enumeration determines whether a fade animation is used to fade in or fade out.
    /// </summary>
    /// <field name="FadeIn" type="Number" integer="true" />
    /// <field name="FadeOut" type="Number" integer="true" />
    throw Error.invalidOperation();
}
$AA.FadeEffect.prototype = {
    FadeIn : 0,
    FadeOut : 1
}
$AA.FadeEffect.registerEnum("AjaxControlToolkit.Animation.FadeEffect", false);


$AA.FadeAnimation = function(target, duration, fps, effect, minimumOpacity, maximumOpacity, forceLayoutInIE) {
    /// <summary>
    /// The <code>FadeAnimation</code> is used to fade an element in or out of view, depending on the
    /// provided <see cref="AjaxControlToolkit.Animation.FadeEffect" />, by settings its opacity.
    /// The minimum and maximum opacity values can be specified to precisely control the fade.
    /// You may also consider using <see cref="AjaxControlToolkit.Animation.FadeInAnimation" /> or
    /// <see cref="AjaxControlToolkit.Animation.FadeOutAnimation" /> if you know the only direction you
    /// are fading.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="effect" type="AjaxControlToolkit.Animation.FadeEffect" mayBeNull="true" optional="true">
    /// Determine whether to fade the element in or fade the element out.  The possible values are <code>FadeIn</code>
    /// and <code>FadeOut</code>.  The default value is <code>FadeOut</code>.
    /// </param>
    /// <param name="minimumOpacity" type="Number" mayBeNull="true" optional="true">
    /// Minimum opacity to use when fading in or out. Its value can range from between 0 to 1. The default value is 0.
    /// </param>
    /// <param name="maximumOpacity" type="Number" mayBeNull="true" optional="true">
    /// Maximum opacity to use when fading in or out. Its value can range from between 0 to 1. The default value is 1.
    /// </param>
    /// <param name="forceLayoutInIE" type="Boolean" mayBeNull="true" optional="true">
    /// Whether or not we should force a layout to be created for Internet Explorer by giving it a width and setting its
    /// background color (the latter is required in case the user has ClearType enabled). The default value is <code>true</code>.
    /// This is obviously ignored when working in other browsers.
    /// </param>
    /// <animation>Fade</animation>
    $AA.FadeAnimation.initializeBase(this, [target, duration, fps]);

    // The effect determines whether or not we fade in or out
    this._effect = (effect !== undefined) ? effect : $AA.FadeEffect.FadeIn;
    
    // Maximum and minimum opacities default to 100% and 0%
    this._max = (maximumOpacity !== undefined) ? maximumOpacity : 1;
    this._min = (minimumOpacity !== undefined) ? minimumOpacity : 0;
    
    // Starting and ending opacities
    this._start = this._min;
    this._end = this._max;
    
    // Whether the a layout has already been created (to work around IE problems)
    this._layoutCreated = false;

    // Whether or not we should force a layout to be created for IE by giving it a width
    // and setting its background color (the latter is required in case the user has ClearType enabled).
    // http://msdn.microsoft.com/library/default.asp?url=/workshop/author/filter/reference/filters/alpha.asp
    this._forceLayoutInIE = (forceLayoutInIE === undefined || forceLayoutInIE === null) ? true : forceLayoutInIE;
    
    // Current target of the animation that is cached before the animation plays (since looking up
    // the target could mean walking all the way up to the root of the animation's tree, which we don't
    // want to do for every step of the animation)
    this._currentTarget = null;
    
    // Properly set up the min/max values provided by the constructor
    this._resetOpacities();
}
$AA.FadeAnimation.prototype = {
    _resetOpacities : function() {
    	/// <summary>
        /// Set the starting and ending opacity values based on the effect (i.e. when we're fading
        /// in we go from <code>_min</code> to <code>_max</code>, but we go <code>_max</code> to
        /// <code>_min</code> when fading out)
    	/// </summary>
    	/// <returns />

        if (this._effect == $AA.FadeEffect.FadeIn) {
            this._start = this._min;
            this._end = this._max;
        } else {
            this._start = this._max;
            this._end = this._min;
        }
    },
    
    _createLayout : function() {
    	/// <summary>
        /// Create a layout when using Internet Explorer (which entails setting a width and also
        /// a background color if it currently has neither)
    	/// </summary>
    	/// <returns />

        var element = this._currentTarget;
        if (element) {
            // Get the original width/height/back color
            var originalWidth = $common.getCurrentStyle(element, 'width');
            var originalHeight = $common.getCurrentStyle(element, 'height');
            var originalBackColor = $common.getCurrentStyle(element, 'backgroundColor');

            // Set the width which will force the creation of a layout
            if ((!originalWidth || originalWidth == '' || originalWidth == 'auto') &&
                (!originalHeight || originalHeight == '' || originalHeight == 'auto')) {
                element.style.width = element.offsetWidth + 'px';
            }
            
            // Set the back color to avoid ClearType problems
            if (!originalBackColor || originalBackColor == '' || originalBackColor == 'transparent' || originalBackColor == 'rgba(0, 0, 0, 0)') {
                element.style.backgroundColor = $common.getInheritedBackgroundColor(element);
            }
            
            // Mark that we've created the layout so we only do it once
            this._layoutCreated = true;
        }
    },
    
    onStart : function() {
    	/// <summary>
        /// The <code>onStart</code> method is called just before the animation is played each time.
        /// </summary>
        /// <returns />       
        $AA.FadeAnimation.callBaseMethod(this, 'onStart');
        
        this._currentTarget = this.get_target();
        this.setValue(this._start);
        
        // Force the creation of a layout in IE if we're supposed to and the current browser is Internet Explorer
        if (this._forceLayoutInIE && !this._layoutCreated && Sys.Browser.agent == Sys.Browser.InternetExplorer) {
            this._createLayout();
        }
    },
    
    getAnimatedValue : function(percentage) {
    	/// <summary>
        /// Determine the current opacity after the given percentage of its duration has elapsed
        /// </summary>
        /// <param name="percentage" type="Number">Percentage of the animation already complete</param>
        /// <returns type="Number">
        /// Current opacity after the given percentage of its duration has elapsed that will
        /// be passed to <code>setValue</code>
        /// </returns>
        return this.interpolate(this._start, this._end, percentage);
    },
    
    setValue : function(value) {
        /// <summary>
        /// Set the current opacity of the element.
        /// </summary>
        /// <param name="value" type="Number">
        /// Current opacity (as retreived from <code>getAnimatedValue</code>)
        /// </param>
        /// <returns />
        /// <remarks>
        /// This method will be replaced by a dynamically generated function that requires no logic
        /// to determine whether it should use filters or the style's opacity.
        /// </remarks>
        if (this._currentTarget) {
            $common.setElementOpacity(this._currentTarget, value);
        }
    },
    
//    set_target : function(value) {
//        /// <value type="Sys.UI.DomElement">
//        /// Override the <code>target</code> property to dynamically create the setValue function.
//        /// </value>
//        /// <remarks>
//        /// Do not set this property in a generic Xml animation description. It will be set automatically
//        /// using either the extender's TargetControlID or the AnimationTarget property.
//        /// <remarks>
//        $AA.FadeAnimation.callBaseMethod(this, 'set_target', [value]);
//        
//        var element = value;
//        if (element) {
//            var filters = element.filters;
//            if (filters) {
//                var alphaFilter = null;
//                if (filters.length !== 0) {
//                    alphaFilter = filters['DXImageTransform.Microsoft.Alpha'];
//                }
//                if (!alphaFilter) {
//                    element.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity=' + (this._start * 100) + ')';
//                    alphaFilter = filters['DXImageTransform.Microsoft.Alpha'];
//                }
//                if (alphaFilter) {
//                    this.setValue = function(val) { alphaFilter.opacity = val * 100; }
//                } else {
//                    this.setValue = function(val) {
//                        element.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity=' + (val * 100) + ')';
//                    };
//                }
//            }
//            else {
//                this.setValue = function(val) { element.style.opacity = val; };
//            }
//        }
//    },
    
    get_effect : function() {
    	/// <value type="AjaxControlToolkit.Animation.FadeEffect">
        /// Determine whether to fade the element in or fade the element out.  The possible values are
        /// <code>FadeIn</code> and <code>FadeOut</code>.  The default value is <code>FadeOut</code>.
    	/// </value>
        return this._effect;
    },
    set_effect : function(value) {
        value = this._getEnum(value, $AA.FadeEffect);
        if (this._effect != value) {
            this._effect = value;
            this._resetOpacities();
            this.raisePropertyChanged('effect');
        }
    },
    
    get_minimumOpacity : function() {
        /// <value type="Number">
        /// Minimum opacity to use when fading in or out. Its value can range from between 0 to 1.
        /// The default value is 0.
        /// </value>
	    return this._min;
    },
    set_minimumOpacity : function(value) {
        value = this._getFloat(value);
        if (this._min != value) {
            this._min = value;
            this._resetOpacities();
            this.raisePropertyChanged('minimumOpacity');
        }
    },
    
    get_maximumOpacity : function() {
        /// <value type="Number">
        /// Maximum opacity to use when fading in or out. Its value can range from between 0 to 1.
        /// The default value is 1.
        /// </value>
        return this._max;
    },
    set_maximumOpacity : function(value) {
        value = this._getFloat(value);
        if (this._max != value) {
            this._max = value;
            this._resetOpacities();
            this.raisePropertyChanged('maximumOpacity');
        }
    },
    
    get_forceLayoutInIE : function() {
        /// <value type="Boolean">
        /// Whether or not we should force a layout to be created for Internet Explorer by giving it a width and setting its
        /// background color (the latter is required in case the user has ClearType enabled). The default value is <code>true</code>.
        /// This is obviously ignored when working in other browsers.
        /// </value>
        return this._forceLayoutInIE;
    },
    set_forceLayoutInIE : function(value) {
        value = this._getBoolean(value);
        if (this._forceLayoutInIE != value) {
            this._forceLayoutInIE = value;
            this.raisePropertyChanged('forceLayoutInIE');
        }
    },
    
    set_startValue : function(value) {
        /// <value type="Number">
        /// Set the start value (so that child animations can set the current opacity as the start value when fading in or out)
        /// </value>
        value = this._getFloat(value);
        this._start = value;
    }
}
$AA.FadeAnimation.registerClass('AjaxControlToolkit.Animation.FadeAnimation', $AA.Animation);
$AA.registerAnimation('fade', $AA.FadeAnimation);


$AA.FadeInAnimation = function(target, duration, fps, minimumOpacity, maximumOpacity, forceLayoutInIE) {
    /// <summary>
    /// The <code>FadeInAnimation</code> will fade the target in by moving from hidden to visible.
    /// It starts the animation the target's current opacity.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="minimumOpacity" type="Number" mayBeNull="true" optional="true">
    /// Minimum opacity to use when fading in or out. Its value can range from between 0 to 1. The default value is 0.
    /// </param>
    /// <param name="maximumOpacity" type="Number" mayBeNull="true" optional="true">
    /// Maximum opacity to use when fading in or out. Its value can range from between 0 to 1. The default value is 1.
    /// </param>
    /// <param name="forceLayoutInIE" type="Boolean" mayBeNull="true" optional="true">
    /// Whether or not we should force a layout to be created for Internet Explorer by giving it a width and setting its
    /// background color (the latter is required in case the user has ClearType enabled). The default value is <code>true</code>.
    /// This is obviously ignored when working in other browsers.
    /// </param>
    /// <animation>FadeIn</animation>
    $AA.FadeInAnimation.initializeBase(this, [target, duration, fps, $AA.FadeEffect.FadeIn, minimumOpacity, maximumOpacity, forceLayoutInIE]);
}
$AA.FadeInAnimation.prototype = {
    onStart : function() {
    	/// <summary>
        /// The <code>onStart</code> method is called just before the animation is played each time.
        /// </summary>
        /// <returns />
        $AA.FadeInAnimation.callBaseMethod(this, 'onStart');
        
        if (this._currentTarget) {
            this.set_startValue($common.getElementOpacity(this._currentTarget));
        }
    }
}
$AA.FadeInAnimation.registerClass('AjaxControlToolkit.Animation.FadeInAnimation', $AA.FadeAnimation);
$AA.registerAnimation('fadeIn', $AA.FadeInAnimation);


$AA.FadeOutAnimation = function(target, duration, fps, minimumOpacity, maximumOpacity, forceLayoutInIE) {
    /// <summary>
    /// The FadeInAnimation will fade the element out by moving from visible to hidden. It starts the animation
    /// at the element's current opacity.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="minimumOpacity" type="Number" mayBeNull="true" optional="true">
    /// Minimum opacity to use when fading in or out. Its value can range from between 0 to 1. The default value is 0.
    /// </param>
    /// <param name="maximumOpacity" type="Number" mayBeNull="true" optional="true">
    /// Maximum opacity to use when fading in or out. Its value can range from between 0 to 1. The default value is 1.
    /// </param>
    /// <param name="forceLayoutInIE" type="Boolean" mayBeNull="true" optional="true">
    /// Whether or not we should force a layout to be created for Internet Explorer by giving it a width and setting its
    /// background color (the latter is required in case the user has ClearType enabled). The default value is <code>true</code>.
    /// This is obviously ignored when working in other browsers.
    /// </param>
    /// <animation>FadeOut</animation>
    $AA.FadeOutAnimation.initializeBase(this, [target, duration, fps, $AA.FadeEffect.FadeOut, minimumOpacity, maximumOpacity, forceLayoutInIE]);
}
$AA.FadeOutAnimation.prototype = {
    onStart : function() {
    	/// <summary>
        /// The <code>onStart</code> method is called just before the animation is played each time.
        /// </summary>
        /// <returns />
        $AA.FadeOutAnimation.callBaseMethod(this, 'onStart');

        if (this._currentTarget) {
            this.set_startValue($common.getElementOpacity(this._currentTarget));
        }
    }
}
$AA.FadeOutAnimation.registerClass('AjaxControlToolkit.Animation.FadeOutAnimation', $AA.FadeAnimation);
$AA.registerAnimation('fadeOut', $AA.FadeOutAnimation);


$AA.PulseAnimation = function(target, duration, fps, iterations, minimumOpacity, maximumOpacity, forceLayoutInIE) {
    /// <summary>
    /// The PulseAnimation fades an element in and our repeatedly to create a pulsating
    /// effect.  The iterations determines how many pulses there will be (which defaults
    /// to three, but it will repeat infinitely if given zero or less).  The duration
    /// property defines the duration of each fade in or fade out, not the duration of
    /// the animation as a whole.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="iterations" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of times to repeatedly play the sequence.  If zero or less iterations are specified, the sequence
    /// will repeat forever.  The default value is 1 iteration.
    /// </param>
    /// <param name="minimumOpacity" type="Number" mayBeNull="true" optional="true">
    /// Minimum opacity to use when fading in or out. Its value can range from between 0 to 1. The default value is 0.
    /// </param>
    /// <param name="maximumOpacity" type="Number" mayBeNull="true" optional="true">
    /// Maximum opacity to use when fading in or out. Its value can range from between 0 to 1. The default value is 1.
    /// </param>
    /// <param name="forceLayoutInIE" type="Boolean" mayBeNull="true" optional="true">
    /// Whether or not we should force a layout to be created for Internet Explorer by giving it a width and setting its
    /// background color (the latter is required in case the user has ClearType enabled). The default value is <code>true</code>.
    /// This is obviously ignored when working in other browsers.
    /// </param>
    /// <animation>Pulse</animation>
    $AA.PulseAnimation.initializeBase(this, [target, duration, fps, null, ((iterations !== undefined) ? iterations : 3)]);

    // Create the FadeOutAnimation
    this._out = new $AA.FadeOutAnimation(target, duration, fps, minimumOpacity, maximumOpacity, forceLayoutInIE);
    this.add(this._out);
    
    // Create the FadeInAnimation
    this._in = new $AA.FadeInAnimation(target, duration, fps, minimumOpacity, maximumOpacity, forceLayoutInIE);
    this.add(this._in);
}
$AA.PulseAnimation.prototype = {
   
    get_minimumOpacity : function() {
        /// <value type="Number">
        /// Minimum opacity to use when fading in or out. Its value can range from between 0 to 1. The default value is 0.
        /// </value>
        return this._out.get_minimumOpacity();
    },
    set_minimumOpacity : function(value) {
        value = this._getFloat(value);
        this._out.set_minimumOpacity(value);
        this._in.set_minimumOpacity(value);
        this.raisePropertyChanged('minimumOpacity');
    },
    
    get_maximumOpacity : function() {
        /// <value type="Number">
        /// Maximum opacity to use when fading in or out. Its value can range from between 0 to 1. The default value is 1.
        /// </value>
        return this._out.get_maximumOpacity();
    },
    set_maximumOpacity : function(value) {
        value = this._getFloat(value);
        this._out.set_maximumOpacity(value);
        this._in.set_maximumOpacity(value);
        this.raisePropertyChanged('maximumOpacity');
    },
    
    get_forceLayoutInIE : function() {
        /// <value type="Boolean">
        /// Whether or not we should force a layout to be created for Internet Explorer by giving it a width and setting its
        /// background color (the latter is required in case the user has ClearType enabled). The default value is <code>true</code>.
        /// This is obviously ignored when working in other browsers.
        /// </value>
        return this._out.get_forceLayoutInIE();
    },
    set_forceLayoutInIE : function(value) {
        value = this._getBoolean(value);
        this._out.set_forceLayoutInIE(value);
        this._in.set_forceLayoutInIE(value);
        this.raisePropertyChanged('forceLayoutInIE');
    },
    
    set_duration : function(value) {
        /// <value type="Number">
        /// Override the <code>duration</code> property
        /// </value>
        value = this._getFloat(value);
        $AA.PulseAnimation.callBaseMethod(this, 'set_duration', [value]);
        this._in.set_duration(value);
        this._out.set_duration(value);
    },
    
    set_fps : function(value) {
        /// <value type="Number" integer="true">
        /// Override the <code>fps</code> property
        /// </value>
        value = this._getInteger(value);
        $AA.PulseAnimation.callBaseMethod(this, 'set_fps', [value]);
        this._in.set_fps(value);
        this._out.set_fps(value);
    }
    
}
$AA.PulseAnimation.registerClass('AjaxControlToolkit.Animation.PulseAnimation', $AA.SequenceAnimation);
$AA.registerAnimation('pulse', $AA.PulseAnimation);


$AA.PropertyAnimation = function(target, duration, fps, property, propertyKey) {
    /// <summary>
    /// The <code>PropertyAnimation</code> is a useful base animation that will assign the value from
    /// <code>getAnimatedValue</code> to a specified <code>property</code>. You can provide the name of
    /// a <code>property</code> alongside an optional <code>propertyKey</code> (which indicates the value
    /// <code>property[propertyKey]</code>, like <code>style['backgroundColor']</code>).
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="property" type="String" mayBeNull="true" optional="true">
    /// Property of the <code>target</code> element to set when animating
    /// </param>
    /// <param name="propertyKey" type="String" mayBeNull="true" optional="true">
    /// Optional key of the property to be set (which indicates the value property[propertyKey], like style['backgroundColor']). Note that for the style property, the key must be in a JavaScript friendly format (i.e. backgroundColor instead of background-color).
    /// </param>
    /// <animation>Property</animation>
    $AA.PropertyAnimation.initializeBase(this, [target, duration, fps]);

    // Name of the property to set
    this._property = property;
    
    // Optional Key of the property to set (i.e., if the property were "style" then
    // this might be "backgroundColor")
    this._propertyKey = propertyKey;
    
    // Current target of the animation that is cached before the animation plays (since looking up
    // the target could mean walking all the way up to the root of the animation's tree, which we don't
    // want to do for every step of the animation)
    this._currentTarget = null;
}
$AA.PropertyAnimation.prototype = {
    onStart : function() {
    	/// <summary>
        /// The <code>onStart</code> method is called just before the animation is played each time.
        /// </summary>
        /// <returns />
        $AA.PropertyAnimation.callBaseMethod(this, 'onStart');

        this._currentTarget = this.get_target();
    },

    setValue : function(value) {
        /// <summary>
        /// Set the current value of the property
        /// </summary>
        /// <param name="value" type="Object" mayBeNull="true">
        /// Value to assign
        /// </param>
        /// <returns />

        var element = this._currentTarget;
        if (element && this._property && this._property.length > 0) { 
            if (this._propertyKey && this._propertyKey.length > 0 && element[this._property]) {
                element[this._property][this._propertyKey] = value;
            } else {
                element[this._property] = value;
            }
        }
        // Sys.TypeDescriptor.setProperty(this.get_target(), this._property, value, this._propertyKey);
    },
    
    getValue : function() {
        /// <summary>
        /// Get the current value from the property
        /// </summary>
        /// <returns type="Object" mayBeNull="true">
        /// Current value of the property
        /// </returns>

        var element = this.get_target();
        if (element && this._property && this._property.length > 0) { 
            var property = element[this._property];
            if (property) {
                if (this._propertyKey && this._propertyKey.length > 0) {
                    return property[this._propertyKey];
                }
                return property;
            }
        }
        return null;
        // return Sys.TypeDescriptor.getProperty(this.get_target(), this._property, this._propertyKey);
    },
    
    get_property : function() {
        /// <value type="String">
        /// Property of the <code>target</code> element to set when animating
        /// </value>
        return this._property;
    },
    set_property : function(value) {
        if (this._property != value) {
            this._property = value;
            this.raisePropertyChanged('property');
        }
    },
    
    get_propertyKey : function() {
        /// <value type="String" mayBeNull="true" optional="true">
        /// Optional key of the property to be set (which indicates the value property[propertyKey], like style['backgroundColor']). Note that for the style property, the key must be in a JavaScript friendly format (i.e. backgroundColor instead of background-color).
        /// </value>
        return this._propertyKey;
    },
    set_propertyKey : function(value) {
        if (this._propertyKey != value) {
            this._propertyKey = value;
            this.raisePropertyChanged('propertyKey');
        }
    }
}
$AA.PropertyAnimation.registerClass('AjaxControlToolkit.Animation.PropertyAnimation', $AA.Animation);
$AA.registerAnimation('property', $AA.PropertyAnimation);


$AA.DiscreteAnimation = function(target, duration, fps, property, propertyKey, values) {
    /// <summary>
    /// The <code>DiscreteAnimation</code> inherits from <see cref="AjaxControlToolkit.Animation.PropertyAnimation" />
    /// and sets the value of the <code>property</code> to the elements in a provided array of <code>values</code>.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="property" type="String" mayBeNull="true" optional="true">
    /// Property of the <code>target</code> element to set when animating
    /// </param>
    /// <param name="propertyKey" type="String" mayBeNull="true" optional="true">
    /// Optional key of the property to be set (which indicates the value property[propertyKey], like style['backgroundColor']). Note that for the style property, the key must be in a JavaScript friendly format (i.e. backgroundColor instead of background-color).
    /// </param>
    /// <param name="values" mayBeNull="true" optional="true" parameterArray="true" elementType="Object">
    /// Array of possible values of the property that will be iterated over as the animation is played
    /// </param>
    /// <animation>Discrete</animation>
    $AA.DiscreteAnimation.initializeBase(this, [target, duration, fps, property, propertyKey]);

    // Values to assign to the property
    this._values = (values && values.length) ? values : [];
}
$AA.DiscreteAnimation.prototype = {
    getAnimatedValue : function(percentage) {
        /// <summary>
        /// Assign the value whose index corresponds to the current percentage
        /// </summary>
        /// <param name="percentage" type="Number">
        /// Percentage of the animation already complete
        /// </param>
        /// <returns type="Object">
        /// State of the animation after the given percentage of its duration has elapsed that will
        /// be passed to <code>setValue</code>
        /// </returns>
        var index = Math.floor(this.interpolate(0, this._values.length - 1, percentage));
        return this._values[index];
    },
    
    get_values : function() {
        /// <value parameterArray="true" elementType="Object">
        /// Array of possible values of the property that will be iterated over as the animation is played
        /// </value>
        return this._values;
    },
    set_values : function(value) {
        if (this._values != value) {
            this._values = value;
            this.raisePropertyChanged('values');
        }
    }
}
$AA.DiscreteAnimation.registerClass('AjaxControlToolkit.Animation.DiscreteAnimation', $AA.PropertyAnimation);
$AA.registerAnimation('discrete', $AA.DiscreteAnimation);


$AA.InterpolatedAnimation = function(target, duration, fps, property, propertyKey, startValue, endValue) {
    /// <summary>
    /// The <code>InterpolatedAnimation</code> assigns a range of values between <code>startValue</code>
    /// and <code>endValue</code> to the designated property.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="property" type="String" mayBeNull="true" optional="true">
    /// Property of the <code>target</code> element to set when animating.  The default value is 'style'.
    /// </param>
    /// <param name="propertyKey" type="String" mayBeNull="true" optional="true">
    /// Optional key of the property to be set (which indicates the value property[propertyKey], like style['backgroundColor']). Note that for the style property, the key must be in a JavaScript friendly format (i.e. backgroundColor instead of background-color).
    /// </param>
    /// <param name="startValue" type="Number" mayBeNull="true" optional="true">
    /// Start of the range of values
    /// </param>
    /// <param name="endValue" type="Number" mayBeNull="true" optional="true">
    /// End of the range of values
    /// </param>
    /// <animation>Interpolated</animation>
    $AA.InterpolatedAnimation.initializeBase(this, [target, duration, fps, ((property !== undefined) ? property : 'style'), propertyKey]);

    // Start and end values
    this._startValue = startValue;
    this._endValue = endValue;
}
$AA.InterpolatedAnimation.prototype = {
    get_startValue : function() {
        /// <value type="Number">
        /// Start of the range of values
        /// </value>
        return this._startValue;
    },
    set_startValue : function(value) {
        value = this._getFloat(value);
        if (this._startValue != value) {
            this._startValue = value;
            this.raisePropertyChanged('startValue');
        }
    },
    
    get_endValue : function() {
        /// <value type="Number">
        /// End of the range of values
        /// </value>
        return this._endValue;
    },
    set_endValue : function(value) {
        value = this._getFloat(value);
        if (this._endValue != value) {
            this._endValue = value;
            this.raisePropertyChanged('endValue');
        }
    }   
}
$AA.InterpolatedAnimation.registerClass('AjaxControlToolkit.Animation.InterpolatedAnimation', $AA.PropertyAnimation);
$AA.registerAnimation('interpolated', $AA.InterpolatedAnimation);


$AA.ColorAnimation = function(target, duration, fps, property, propertyKey, startValue, endValue) {
    /// <summary>
    /// The <code>ColorAnimation</code> transitions the value of the <code>property</code> between
    /// two colors (although it does ignore the alpha channel). The colors must be 7-character hex strings
    /// (like <code>#246ACF</code>).
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="property" type="String" mayBeNull="true" optional="true">
    /// Property of the <code>target</code> element to set when animating.  The default value is 'style'.
    /// </param>
    /// <param name="propertyKey" type="String" mayBeNull="true" optional="true">
    /// Optional key of the property to be set (which indicates the value property[propertyKey], like style['backgroundColor']). Note that for the style property, the key must be in a JavaScript friendly format (i.e. backgroundColor instead of background-color).
    /// </param>
    /// <param name="startValue" type="String" mayBeNull="true" optional="true">
    /// Start of the range of colors
    /// </param>
    /// <param name="endValue" type="String" mayBeNull="true" optional="true">
    /// End of the range of colors
    /// </param>
    /// <animation>Color</animation>
    $AA.ColorAnimation.initializeBase(this, [target, duration, fps, property, propertyKey, startValue, endValue]);
    
    // Cached start/end RBG triplets
    this._start = null;
    this._end = null;
    
    // Flags indicating whether each dimension of color will be interpolated
    this._interpolateRed = false;
    this._interpolateGreen = false;
    this._interpolateBlue = false;
}
$AA.ColorAnimation.prototype = {
    onStart : function() {
        /// <summary>
        /// Determine which dimensions of color will be animated
        /// </summary>
        /// <returns />
        $AA.ColorAnimation.callBaseMethod(this, 'onStart');
       
        this._start = $AA.ColorAnimation.getRGB(this.get_startValue());
        this._end = $AA.ColorAnimation.getRGB(this.get_endValue());
        
        this._interpolateRed = (this._start.Red != this._end.Red);
        this._interpolateGreen = (this._start.Green != this._end.Green);
        this._interpolateBlue = (this._start.Blue != this._end.Blue);
    },
    
    getAnimatedValue : function(percentage) {
        /// <summary>
        /// Get the interpolated color values
        /// </summary>
        /// <param name="percentage" type="Number">
        /// Percentage of the animation already complete
        /// </param>
        /// <returns type="String">
        /// Current color formatted as a 7-character hex string (like <code>#246ACF</code>).
        /// </returns>

        var r = this._start.Red;
        var g = this._start.Green;
        var b = this._start.Blue;
        
        if (this._interpolateRed)
            r = Math.round(this.interpolate(r, this._end.Red, percentage));
        
        if (this._interpolateGreen)
            g = Math.round(this.interpolate(g, this._end.Green, percentage));
        
        if (this._interpolateBlue)
            b = Math.round(this.interpolate(b, this._end.Blue, percentage));
        
        return $AA.ColorAnimation.toColor(r, g, b);
    },
    
    set_startValue : function(value) {
        /// <value type="String">
        /// Starting color of the transition formatted as a 7-character hex string (like <code>#246ACF</code>).
        /// </value>

        if (this._startValue != value) {
            this._startValue = value;
            this.raisePropertyChanged('startValue');
        }
    },
    
    set_endValue : function(value) {
        /// <value type="String">
        /// Ending color of the transition formatted as a 7-character hex string (like <code>#246ACF</code>).
        /// </value>

        if (this._endValue != value) {
            this._endValue = value;
            this.raisePropertyChanged('endValue');
        }
    }   
}
$AA.ColorAnimation.getRGB = function(color) {
    /// <summary>
    /// Convert the color to an RGB triplet
    /// </summary>
    /// <param name="color" type="String">
    /// Color formatted as a 7-character hex string (like <code>#246ACF</code>)
    /// </param>
    /// <returns type="Object">
    /// Object representing the color with <code>Red</code>, <code>Green</code>, and <code>Blue</code> properties.
    /// </returns>

    if (!color || color.length != 7) {
        throw String.format(AjaxControlToolkit.Resources.Animation_InvalidColor, color);
    }
    return { 'Red': parseInt(color.substr(1,2), 16),
             'Green': parseInt(color.substr(3,2), 16),
             'Blue': parseInt(color.substr(5,2), 16) };
}
$AA.ColorAnimation.toColor = function(red, green, blue) {
    /// <summary>
    /// Convert an RBG triplet into a 7-character hex string (like <code>#246ACF</code>)
    /// </summary>
    /// <param name="red" type="Number" integer="true">
    /// Value of the color's red dimension
    /// </param>
    /// <param name="green" type="Number" integer="true">
    /// Value of the color's green dimension
    /// </param>
    /// <param name="blue" type="Number" integer="true">
    /// Value of the color's blue dimension
    /// </param>
    /// <returns type="String">
    /// Color as a 7-character hex string (like <code>#246ACF</code>)
    /// </returns>

    var r = red.toString(16);
    var g = green.toString(16);
    var b = blue.toString(16);
    if (r.length == 1) r = '0' + r;
    if (g.length == 1) g = '0' + g;
    if (b.length == 1) b = '0' + b;
    return '#' + r + g + b;
}
$AA.ColorAnimation.registerClass('AjaxControlToolkit.Animation.ColorAnimation', $AA.InterpolatedAnimation);
$AA.registerAnimation('color', $AA.ColorAnimation);


$AA.LengthAnimation = function(target, duration, fps, property, propertyKey, startValue, endValue, unit) {
    /// <summary>
    /// The <code>LengthAnimation</code> is identical to <see cref="AjaxControlToolkit.Animation.InterpolatedAnimation" />
    /// except it adds a <code>unit</code> to the value before assigning it to the <code>property</code>.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="property" type="String" mayBeNull="true" optional="true">
    /// Property of the <code>target</code> element to set when animating.  The default value is 'style'.
    /// </param>
    /// <param name="propertyKey" type="String" mayBeNull="true" optional="true">
    /// Optional key of the property to be set (which indicates the value property[propertyKey], like style['backgroundColor']). Note that for the style property, the key must be in a JavaScript friendly format (i.e. backgroundColor instead of background-color).
    /// </param>
    /// <param name="startValue" type="Number" mayBeNull="true" optional="true">
    /// Start of the range of values
    /// </param>
    /// <param name="endValue" type="Number" mayBeNull="true" optional="true">
    /// End of the range of values
    /// </param>
    /// <param name="unit" type="String" mayBeNull="true" optional="true">
    /// Unit of the interpolated values.  The default value is <code>'px'</code>.
    /// </param>
    /// <animation>Length</animation>
    $AA.LengthAnimation.initializeBase(this, [target, duration, fps, property, propertyKey, startValue, endValue]);
    
    // Unit of length (which defaults to px)
    this._unit = (unit != null) ? unit : 'px';
}
$AA.LengthAnimation.prototype = {

    getAnimatedValue : function(percentage) {
        /// <summary>
        /// Get the interpolated length value
        /// </summary>
        /// <param name="percentage" type="Number">
        /// Percentage of the animation already complete
        /// </param>
        /// <returns type="String">
        /// Interpolated length
        /// </returns>

        var value = this.interpolate(this.get_startValue(), this.get_endValue(), percentage);
        return Math.round(value) + this._unit;
    },
    
    get_unit : function() {
        /// <value type="String">
        /// Unit of the interpolated values.  The default value is <code>'px'</code>.
        /// </value>
        return this._unit;
    },
    set_unit : function(value) {
        if (this._unit != value) {
            this._unit = value;
            this.raisePropertyChanged('unit');
        }
    }
}
$AA.LengthAnimation.registerClass('AjaxControlToolkit.Animation.LengthAnimation', $AA.InterpolatedAnimation);
$AA.registerAnimation('length', $AA.LengthAnimation);


$AA.MoveAnimation = function(target, duration, fps, horizontal, vertical, relative, unit) {
    /// <summary>
    /// The <code>MoveAnimation</code> is used to move the <code>target</code> element. If the
    /// <code>relative</code> flag is set to <code>true</code>, then it treats the <code>horizontal</code>
    /// and <code>vertical</code> properties as offsets to move the element. If the <code>relative</code>
    /// flag is <code>false</code>, then it will treat the <code>horizontal</code> and <code>vertical</code>
    /// properties as coordinates on the page where the <code>target</code> element should be moved. It is
    /// important to note that the <code>target</code> must be positioned (i.e. <code>absolutely</code>) so
    /// that settings its <code>top</code>/<code>left<code> style attributes will change its location.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="horizontal" type="Number" mayBeNull="true" optional="true">
    /// If <code>relative</code>  is <code>true</code>, this is the offset to move horizontally. Otherwise this is the x
    /// coordinate on the page where the <code>target</code> should be moved.
    /// </param>
    /// <param name="vertical" type="Number" mayBeNull="true" optional="true">
    /// If <code>relative</code> is <code>true</code>, this is the offset to move vertically. Otherwise this is the y
    /// coordinate on the page where the <code>target</code> should be moved.
    /// </param>
    /// <param name="relative" type="Boolean" mayBeNull="true" optional="true">
    /// <code>true</code> if we are moving relative to the current position, <code>false</code> if we are moving absolutely
    /// </param>
    /// <param name="unit" type="String" mayBeNull="true" optional="true">
    /// Length unit for the size of the <code>target</code>. The default value is <code>'px'</code>.
    /// </param>
    /// <animation>Move</animation>
    $AA.MoveAnimation.initializeBase(this, [target, duration, fps, null]);

    // Distance to move horizontally and vertically
    this._horizontal = horizontal ? horizontal : 0;
    this._vertical = vertical ? vertical : 0;
    this._relative = (relative === undefined) ? true : relative;
    
    // Length animations representing the movememnts
    this._horizontalAnimation = new $AA.LengthAnimation(target, duration, fps, 'style', 'left', null, null, unit);
    this._verticalAnimation = new $AA.LengthAnimation(target, duration, fps, 'style', 'top', null, null, unit);
    this.add(this._verticalAnimation);
    this.add(this._horizontalAnimation);
}
$AA.MoveAnimation.prototype = {
    
    onStart : function() {
        /// <summary>
        /// Use the <code>target</code>'s current position as the starting point for the animation
        /// </summary>
        /// <returns />
        $AA.MoveAnimation.callBaseMethod(this, 'onStart');
        
        // Set the start and end values of the animations by getting
        // the element's current position and applying the offsets
        var element = this.get_target();
        this._horizontalAnimation.set_startValue(element.offsetLeft);
        this._horizontalAnimation.set_endValue(this._relative ? element.offsetLeft + this._horizontal : this._horizontal);
        this._verticalAnimation.set_startValue(element.offsetTop); 
        this._verticalAnimation.set_endValue(this._relative ? element.offsetTop + this._vertical : this._vertical);
    },
    
    get_horizontal : function() {
        /// <value type="Number">
        /// If <code>relative</code>  is <code>true</code>, this is the offset to move horizontally. Otherwise this is the x
        /// coordinate on the page where the <code>target</code> should be moved.
        /// </value>
        return this._horizontal;
    },
    set_horizontal : function(value) {
        value = this._getFloat(value);
        if (this._horizontal != value) {
            this._horizontal = value;
            this.raisePropertyChanged('horizontal');
        }
    },
    
    get_vertical : function() {
        /// <value type="Number">
        /// If <code>relative</code> is <code>true</code>, this is the offset to move vertically. Otherwise this is the y
        /// coordinate on the page where the <code>target</code> should be moved.
        /// </value>
        return this._vertical;
    },
    set_vertical : function(value) {
        value = this._getFloat(value);
        if (this._vertical != value) {
            this._vertical = value;
            this.raisePropertyChanged('vertical');
        }
    },
    
    get_relative : function() {
        /// <value type="Boolean">
        /// <code>true</code> if we are moving relative to the current position, <code>false</code> if we are moving absolutely
        /// </value>
        return this._relative;
    },
    set_relative : function(value) {
        value = this._getBoolean(value);
        if (this._relative != value) {
            this._relative = value;
            this.raisePropertyChanged('relative');
        }
    },
    
    get_unit : function() {
        /// <value type="String" mayBeNull="true">
        /// Length unit for the size of the <code>target</code>. The default value is <code>'px'</code>.
        /// </value>
        this._horizontalAnimation.get_unit();
    },
    set_unit : function(value) {
        var unit = this._horizontalAnimation.get_unit();
        if (unit != value) {
            this._horizontalAnimation.set_unit(value);
            this._verticalAnimation.set_unit(value);
            this.raisePropertyChanged('unit');
        }
    }
}
$AA.MoveAnimation.registerClass('AjaxControlToolkit.Animation.MoveAnimation', $AA.ParallelAnimation);
$AA.registerAnimation('move', $AA.MoveAnimation);


$AA.ResizeAnimation = function(target, duration, fps, width, height, unit) {
    /// <summary>
    /// The <code>ResizeAnimation</code> changes the size of the <code>target</code> from its
    /// current value to the specified <code>width</code> and <code>height</code>.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="width" type="Number" mayBeNull="true" optional="true">
    /// New width of the <code>target</code>
    /// </param>
    /// <param name="height" type="Number" mayBeNull="true" optional="true">
    /// New height of the <code>target</code>
    /// </param>
    /// <param name="unit" type="String" mayBeNull="true" optional="true">
    /// Length unit for the size of the <code>target</code>. The default value is <code>'px'</code>.
    /// </param>
    /// <animation>Resize</animation>
    $AA.ResizeAnimation.initializeBase(this, [target, duration, fps, null]);

    // New size of the element
    this._width = width;
    this._height = height;
    
    // Animations to set the size across both dimensions
    this._horizontalAnimation = new $AA.LengthAnimation(target, duration, fps, 'style', 'width', null, null, unit);
    this._verticalAnimation = new $AA.LengthAnimation(target, duration, fps, 'style', 'height', null, null, unit);
    this.add(this._horizontalAnimation);
    this.add(this._verticalAnimation);
}
$AA.ResizeAnimation.prototype = {
    
    onStart : function() {
        /// <summary>
        /// Use the <code>target</code>'s current size as the starting point for the animation
        /// </summary>
        /// <returns />

        $AA.ResizeAnimation.callBaseMethod(this, 'onStart');
        
        // Set the start and end values of the animations by getting
        // the element's current width and height
        var element = this.get_target();
        this._horizontalAnimation.set_startValue(element.offsetWidth);
        this._verticalAnimation.set_startValue(element.offsetHeight);
        this._horizontalAnimation.set_endValue((this._width !== null && this._width !== undefined) ?
            this._width : element.offsetWidth);
        this._verticalAnimation.set_endValue((this._height !== null && this._height !== undefined) ?
            this._height : element.offsetHeight);
    },
    
    get_width : function() {
        /// <value type="Number">
        /// New width of the <code>target</code>
        /// </value>

        return this._width;
    },
    set_width : function(value) {
        value = this._getFloat(value);
        if (this._width != value) {
            this._width = value;
            this.raisePropertyChanged('width');
        }
    },
    
    get_height : function() {
        /// <value type="Number">
        /// New height of the <code>target</code>
        /// </value>

        return this._height;
    },
    set_height : function(value) {
        value = this._getFloat(value);
        if (this._height != value) {
            this._height = value;   
            this.raisePropertyChanged('height');
        }
    },
    
    get_unit : function() {
        /// <value type="String">
        /// Length unit for the size of the <code>target</code>. The default value is <code>'px'</code>.
        /// </value>

        this._horizontalAnimation.get_unit();
    },
    set_unit : function(value) {
        var unit = this._horizontalAnimation.get_unit();
        if (unit != value) {
            this._horizontalAnimation.set_unit(value);
            this._verticalAnimation.set_unit(value);
            this.raisePropertyChanged('unit');
        }
    }
}
$AA.ResizeAnimation.registerClass('AjaxControlToolkit.Animation.ResizeAnimation', $AA.ParallelAnimation);
$AA.registerAnimation('resize', $AA.ResizeAnimation);









$AA.ScaleAnimation = function(target, duration, fps, scaleFactor, unit, center, scaleFont, fontUnit) {
    /// <summary>
    /// The <code>ScaleAnimation</code> scales the size of the <code>target</code> element by the given <code>scaleFactor</code>
    /// (i.e. a <code>scaleFactor</code> of <code>.5</code> will shrink it in half and a <code>scaleFactor</code> of <code>2.0</code>
    /// will double it).  If <code>scaleFont</code> is <code>true</code>, the size of the font will also scale with the element.  If
    /// <code>center</code> is <code>true</code>, then the element's center will not move as it is scaled.  It is important to note that
    /// the target must be positioned (i.e. absolutely) so that setting its <code>top</code>/<code>left</code> properties will change
    /// its location in order for <code>center</code> to have an effect.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 1.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="scaleFactor" type="Number" mayBeNull="true" optional="true">
    /// The amount to scale the <code>target</code> (a <code>scaleFactor</code> of <code>.5</code> will
    /// shrink it in half and a <code>scaleFactor</code> of <code>2.0</code> will double it). The default value is
    /// <code>1</code>, which does no scaling.
    /// </param>
    /// <param name="unit" type="String" mayBeNull="true" optional="true">
    /// Length unit for the size of the <code>target</code>.  The default value is <code>'px'</code>.
    /// </param>
    /// <param name="center" type="Boolean" mayBeNull="true" optional="true">
    /// Whether the <code>target</code> should stay centered while scaling
    /// </param>
    /// <param name="scaleFont" type="Boolean" mayBeNull="true" optional="true">
    /// Whether the font should be scaled along with the size
    /// </param>
    /// <param name="fontUnit" type="String" mayBeNull="true" optional="true">
    /// Unit of the font, which is only used if <code>scaleFont</code> is <code>true</code>.
    /// The default value is <code>'pt'</code>.
    /// </param>
    /// <animation>Scale</animation>
    $AA.ScaleAnimation.initializeBase(this, [target, duration, fps]);

    // Percentage to scale
    this._scaleFactor = (scaleFactor !== undefined) ? scaleFactor : 1;
    this._unit = (unit !== undefined) ? unit : 'px';
    
    // Center the content while scaling
    this._center = center;
    
    // Scale the font size as well
    this._scaleFont = scaleFont;
    this._fontUnit = (fontUnit !== undefined) ? fontUnit : 'pt';
    
    // Initial values
    this._element = null;
    this._initialHeight = null;
    this._initialWidth = null;
    this._initialTop = null;
    this._initialLeft = null;
    this._initialFontSize = null;
}
$AA.ScaleAnimation.prototype = {    
    getAnimatedValue : function(percentage) {
        /// <summary>
        /// Get the amount to scale the <code>target</code>
        /// </summary>
        /// <param name="percentage" type="Number">
        /// Percentage of the animation already complete
        /// </param>
        /// <returns type="Number">
        /// Percentage to scale the <code>target</code>
        /// </returns>
        return this.interpolate(1.0, this._scaleFactor, percentage);
    },
    
    onStart : function() {
        /// <summary>
        /// Cache the initial size because it will be used to determine how much to scale the element at each step of the animation
        /// </summary>
        /// <returns />
        $AA.ScaleAnimation.callBaseMethod(this, 'onStart');
        
        this._element = this.get_target();
        if (this._element) {
            this._initialHeight = this._element.offsetHeight;
            this._initialWidth = this._element.offsetWidth;
            if (this._center) {
                this._initialTop = this._element.offsetTop;
                this._initialLeft = this._element.offsetLeft;
            }
            if (this._scaleFont) {
                // Note: we're assuming this is in the same units as fontUnit
                this._initialFontSize = parseFloat(
                    $common.getCurrentStyle(this._element, 'fontSize'));
            }
        }
    },
    
    setValue : function(scale) {
        /// <summary>
        /// Scale the <code>target</code> by the given percentage
        /// </summary>
        /// <param name="scale" type="Number">
        /// Percentage to scale the <code>target</code>
        /// </param>
        /// <returns />

        if (this._element) {
            var width = Math.round(this._initialWidth * scale);
            var height = Math.round(this._initialHeight * scale);
            this._element.style.width = width + this._unit; 
            this._element.style.height = height + this._unit;
            
            if (this._center) {
                this._element.style.top = (this._initialTop +
                    Math.round((this._initialHeight - height) / 2)) + this._unit;
                this._element.style.left = (this._initialLeft +
                    Math.round((this._initialWidth - width) / 2)) + this._unit;
            }
            
            if (this._scaleFont) {
                var size = this._initialFontSize * scale;
                if (this._fontUnit == 'px' || this._fontUnit == 'pt') {
                    size = Math.round(size);
                }
                this._element.style.fontSize = size + this._fontUnit;
            }
        }
    },
    
    onEnd : function() {
        /// <summary>
        /// Wipe the cached values after the animation completes
        /// </summary>
        /// <returns />

        this._element = null;
        this._initialHeight = null;
        this._initialWidth = null;
        this._initialTop = null;
        this._initialLeft = null;
        this._initialFontSize = null;
        $AA.ScaleAnimation.callBaseMethod(this, 'onEnd');
    },
    
    get_scaleFactor : function() {
        /// <value type="Number">
        /// The amount to scale the <code>target</code> (a <code>scaleFactor</code> of <code>.5</code> will
        /// shrink it in half and a <code>scaleFactor</code> of <code>2.0</code> will double it). The default value is
        /// <code>1</code>, which does no scaling.
        /// </value>

        return this._scaleFactor;
    },
    set_scaleFactor : function(value) {
        value = this._getFloat(value);
        if (this._scaleFactor != value) {
            this._scaleFactor = value;
            this.raisePropertyChanged('scaleFactor');
        }
    },
    
    get_unit : function() {
        /// <value type="String">
        /// Length unit for the size of the <code>target</code>.  The default value is <code>'px'</code>.
        /// </value>
        return this._unit;
    },
    set_unit : function(value) {
        if (this._unit != value) {
            this._unit = value;
            this.raisePropertyChanged('unit');
        }
    },
    
    get_center : function() {
        /// <value type="Boolean">
        /// Whether the <code>target</code> should stay centered while scaling
        /// </value>
        return this._center;
    },
    set_center : function(value) {
        value = this._getBoolean(value);
        if (this._center != value) {
            this._center = value;
            this.raisePropertyChanged('center');
        }
    },
    
    get_scaleFont : function() {
        /// <value type="Boolean">
        /// Whether the font should be scaled along with the size
        /// </value>
        return this._scaleFont;
    },
    set_scaleFont : function(value) {
        value = this._getBoolean(value);
        if (this._scaleFont != value) {
            this._scaleFont = value;
            this.raisePropertyChanged('scaleFont');
        }
    },
    
    get_fontUnit : function() {
        /// <value type="String">
        /// Unit of the font, which is only used if <code>scaleFont</code> is <code>true</code>.
        /// The default value is <code>'pt'</code>.
        /// </value>
        return this._fontUnit;
    },
    set_fontUnit : function(value) {
        if (this._fontUnit != value) { 
            this._fontUnit = value; 
            this.raisePropertyChanged('fontUnit');
        }
    }
}
$AA.ScaleAnimation.registerClass('AjaxControlToolkit.Animation.ScaleAnimation', $AA.Animation);
$AA.registerAnimation('scale', $AA.ScaleAnimation);


$AA.Action = function(target, duration, fps) {
    /// <summary>
    /// <code>Action</code> is a base class for all "non-animating" animations that provides empty implementations
    /// for abstract methods and adds a <code>doAction</code> method that will be called to perform the action's
    /// operation.  While regular animations perform an operation in a sequence of small steps spread over an interval,
    /// the actions perform a single operation instantaneously.  By default, all actions have a <code>duration</code>
    /// of zero.  The actions are very useful for defining complex animations.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 0.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <animation>Action</animation>
    $AA.Action.initializeBase(this, [target, duration, fps]);

    // Set the duration to 0 if it wasn't specified
    if (duration === undefined) {
        this.set_duration(0);
    }
}
$AA.Action.prototype = {
    
    onEnd : function() {
        /// <summary>
        /// Call the <code>doAction</code> method when the animation completes
        /// </summary>
        /// <returns />
        this.doAction();
        $AA.Action.callBaseMethod(this, 'onEnd');
    },
    
    doAction : function() {
        /// <summary>
        /// The <code>doAction</code> method must be implemented by all actions
        /// </summary>
        /// <returns />
        throw Error.notImplemented();
    },
    
    getAnimatedValue : function() {
        /// <summary>
        /// Empty implementation of required abstract method
        /// </summary>
    },
    setValue : function() {
        /// <summary>
        /// Empty implementation of required abstract method
        /// </summary>
    }
}
$AA.Action.registerClass('AjaxControlToolkit.Animation.Action', $AA.Animation);
$AA.registerAnimation('action', $AA.Action);


$AA.EnableAction = function(target, duration, fps, enabled) {
    /// <summary>
    /// The <code>EnableAction</code> changes whether or not the <code>target</code> is disabled.
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 0.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="enabled" type="Boolean" mayBeNull="true" optional="true">
    /// Whether or not the <code>target</code> is disabled. The default value is <code>true</code>.
    /// </param>
    /// <animation>EnableAction</animation>
    $AA.EnableAction.initializeBase(this, [target, duration, fps]);

    // Whether to enable or disable
    this._enabled = (enabled !== undefined) ? enabled : true;
}
$AA.EnableAction.prototype = {
    doAction : function() {
    	/// <summary>
        /// Set the enabled property of the <code>target</code>
    	/// </summary>
    	/// <returns />
    	
        var element = this.get_target();
        if (element) {
            element.disabled = !this._enabled;
        }
    },
    
    get_enabled : function() {
        /// <value type="Boolean">
        /// Whether or not the <code>target</code> is disabled. The default value is <code>true</code>.
        /// </value>
        return this._enabled;
    },
    set_enabled : function(value) {
        value = this._getBoolean(value);
        if (this._enabled != value) {
            this._enabled = value;
            this.raisePropertyChanged('enabled');
        }
    }
}
$AA.EnableAction.registerClass('AjaxControlToolkit.Animation.EnableAction', $AA.Action);
$AA.registerAnimation('enableAction', $AA.EnableAction);


$AA.HideAction = function(target, duration, fps, visible) {
    /// <summary>
    /// The <code>HideAction</code> simply hides the <code>target</code> from view
    /// (by setting its style's <code>display</code> attribute to <code>'none'</code>)
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 0.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="visible" type="Boolean" mayBeNull="False">
    /// True to show the target, false to hide it.  The default value is false.
    /// </param>
    /// <animation>HideAction</animation>
    $AA.HideAction.initializeBase(this, [target, duration, fps]);

    this._visible = visible;
}
$AA.HideAction.prototype = {
    doAction : function() {
        /// <summary>
        /// Hide the <code>target</code>
        /// </summary>
        /// <returns />
        var element = this.get_target();
        if (element) {
            $common.setVisible(element, this._visible);
        }
    },
    
    get_visible : function() {
        /// <value type="Boolean" mayBeNull="False">
        /// True to show the target, false to hide it.  The default value is false.
        /// </value>
        return this._visible;
    },
    set_visible : function(value) {
        if (this._visible != value) {
            this._visible = value;
            this.raisePropertyChanged('visible');
        }
    }
}
$AA.HideAction.registerClass('AjaxControlToolkit.Animation.HideAction', $AA.Action);
$AA.registerAnimation('hideAction', $AA.HideAction);


$AA.StyleAction = function(target, duration, fps, attribute, value) {
    /// <summary>
    /// The <code>StyleAction<code> is used to set a particular <code>attribute</code> of the <code>target</code>'s style
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 0.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="attribute" type="String" mayBeNull="true" optional="true">
    /// Style attribute to set (this must be in a JavaScript friendly format, i.e. <code>backgroundColor</code>
    /// instead of <code>background-color</code>)
    /// </param>
    /// <param name="value" type="String" mayBeNull="true" optional="true">
    /// Value to set the <code>attribute</code>
    /// </param>
    /// <animation>StyleAction</animation>
    $AA.StyleAction.initializeBase(this, [target, duration, fps]);

    // Style attribute (like "backgroundColor" or "borderWidth"
    this._attribute = attribute;
    
    // Value to assign to the style attribute
    this._value = value;
    
}
$AA.StyleAction.prototype = {
    doAction : function() {
    	/// <summary>
        /// Assign the <code>value</code> to the style's <code>attribute</code>
    	/// </summary>
    	/// <returns />
        var element = this.get_target();
        if (element) {
            element.style[this._attribute] = this._value;
        }
    },
    
    get_attribute : function() {
        /// <value type="String">
        /// Style attribute to set (this must be in a JavaScript friendly format, i.e. <code>backgroundColor</code>
        /// instead of <code>background-color</code>)
        /// </value>
        return this._attribute;
    },
    set_attribute : function(value) {
        if (this._attribute != value) {
            this._attribute = value;
            this.raisePropertyChanged('attribute');
        }
    },
    
    get_value : function() {
        /// <value type="String">
        /// Value to set the <code>attribute</code>
        /// </value>
        return this._value;
    },
    set_value : function(value) {
        if (this._value != value) {
            this._value = value;
            this.raisePropertyChanged('value');
        }
    }
}
$AA.StyleAction.registerClass('AjaxControlToolkit.Animation.StyleAction', $AA.Action);
$AA.registerAnimation('styleAction', $AA.StyleAction);


$AA.OpacityAction = function(target, duration, fps, opacity) {
    /// <summary>
    /// <code>OpacityAction</code> allows you to set the <code>opacity</code> of the <code>target</code>
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 0.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="opacity" type="Number" mayBeNull="true" optional="true">
    /// Opacity to set the <code>target</code>
    /// </param>
    /// <animation>OpacityAction</animation>
    $AA.OpacityAction.initializeBase(this, [target, duration, fps]);
    
    // Opacity
    this._opacity = opacity;
}
$AA.OpacityAction.prototype = {
    doAction : function() {
    	/// <summary>
        /// Set the opacity
    	/// </summary>
    	/// <returns />
        var element = this.get_target();
        if (element) {
            $common.setElementOpacity(element, this._opacity);
        }
    },
    
    get_opacity : function() {
        /// <value type="Number">
        /// Opacity to set the <code>target</code>
        /// </value>
        return this._opacity;
    },
    set_opacity : function(value) {
        value = this._getFloat(value);
        if (this._opacity != value) {
            this._opacity = value;
            this.raisePropertyChanged('opacity');
        }
    }
}
$AA.OpacityAction.registerClass('AjaxControlToolkit.Animation.OpacityAction', $AA.Action);
$AA.registerAnimation('opacityAction', $AA.OpacityAction);


$AA.ScriptAction = function(target, duration, fps, script) {
    /// <summary>
    /// The <code>ScriptAction</code> is used to execute arbitrary JavaScript
    /// </summary>
    /// <param name="target" type="Sys.UI.DomElement" mayBeNull="true" optional="true" domElement="true">
    /// Target of the animation
    /// </param>
    /// <param name="duration" type="Number" mayBeNull="true" optional="true">
    /// Length of the animation in seconds.  The default is 0.
    /// </param>
    /// <param name="fps" type="Number" mayBeNull="true" optional="true" integer="true">
    /// Number of steps per second.  The default is 25.
    /// </param>
    /// <param name="script" type="String" mayBeNull="true" optional="true">
    /// JavaScript to execute
    /// </param>
    /// <animation>ScriptAction</animation>
    $AA.ScriptAction.initializeBase(this, [target, duration, fps]);

    // Script to execute
    this._script = script;
}
$AA.ScriptAction.prototype = {
    doAction : function() {
    	/// <summary>
        /// Execute the script
    	/// </summary>
    	/// <returns />
        try {
            eval(this._script);
        } catch (ex) {
        }
    },
    
    get_script : function() {
        /// <value type="String">
        /// JavaScript to execute
        /// </value>
        return this._script;
    },
    set_script : function(value) {
        if (this._script != value) {
            this._script = value;
            this.raisePropertyChanged('script');
        }
    }
}
$AA.ScriptAction.registerClass('AjaxControlToolkit.Animation.ScriptAction', $AA.Action);
$AA.registerAnimation('scriptAction', $AA.ScriptAction);

// (c) Copyright Microsoft Corporation.
// This source is subject to the Microsoft Permissive License.
// See http://www.microsoft.com/resources/sharedsource/licensingbasics/sharedsourcelicenses.mspx.
// All other rights reserved.


/// <reference name="MicrosoftAjax.debug.js" />
/// <reference name="MicrosoftAjaxTimer.debug.js" />
/// <reference name="MicrosoftAjaxWebForms.debug.js" />
/// <reference path="../ExtenderBase/BaseScripts.js" />
/// <reference path="../Compat/Timer/Timer.js" />
/// <reference path="../Common/Common.js" />
/// <reference path="../Animation/Animations.js" />


Type.registerNamespace('AjaxControlToolkit');

AjaxControlToolkit.HorizontalSide = function() {
    /// <summary>
    /// The HorizontalSide enumeration describes the horizontal side
    /// of the window used to anchor the element
    /// </summary>
    /// <field name="Left" type="Number" integer="true" />
    /// <field name="Center" type="Number" integer="true" />
    /// <field name="Right" type="Number" integer="true" />
    throw Error.invalidOperation();
}
AjaxControlToolkit.HorizontalSide.prototype = {
    Left : 0,
    Center : 1,
    Right : 2
}
AjaxControlToolkit.HorizontalSide.registerEnum("AjaxControlToolkit.HorizontalSide", false);


AjaxControlToolkit.VerticalSide = function() {
    /// <summary>
    /// The VerticalSide enumeration describes the vertical side
    /// of the window used to anchor the element
    /// </summary>
    /// <field name="Top" type="Number" integer="true" />
    /// <field name="Middle" type="Number" integer="true" />
    /// <field name="Bottom" type="Number" integer="true" />
    throw Error.invalidOperation();
}
AjaxControlToolkit.VerticalSide.prototype = {
    Top : 0,
    Middle : 1,
    Bottom : 2
}
AjaxControlToolkit.VerticalSide.registerEnum("AjaxControlToolkit.VerticalSide", false);


AjaxControlToolkit.AlwaysVisibleControlBehavior = function(element) {
    /// <summary>
    /// The AlwaysVisibleControl behavior is used to fix a particular control a specified distance
    /// from the top/left corner at all times regardless of how the users scrolls or sizes the window.
    /// </summary>
    /// <param name="element" type="Sys.UI.DomElement" domElement="true">
    /// The DOM element the behavior is associated with
    /// </param>
    AjaxControlToolkit.AlwaysVisibleControlBehavior.initializeBase(this, [element]);
    
    // Desired offset from the horizontal edge of the window
    this._horizontalOffset = 0;
    
    // Vertical side of the window used to anchor the element
    this._horizontalSide = AjaxControlToolkit.HorizontalSide.Left;
    
    // Desired offset from the vertical edge of the window
    this._verticalOffset = 0;
    
    // Vertical side of the window used to anchor the element
    this._verticalSide = AjaxControlToolkit.VerticalSide.Top;
    
    // Custom property indicating the desired
    // duration of the scrolling effect
    this._scrollEffectDuration = .1;
    
    // Member variable used to handle the window's scroll and resize events
    this._repositionHandler = null;
    
    // The _animate flag is used to decide if we should play the animations whenever
    // the page is scrolled or resized.  We only need to do this on browsers that don't
    // support CSS position: fixed (i.e., IE <= 6).
    this._animate = false;
    
    // Animation to handle moving the element
    this._animation = null;
}
AjaxControlToolkit.AlwaysVisibleControlBehavior.prototype = {
    initialize : function() {
        /// <summary>
        /// Initialize the behavior
        /// </summary>
        /// <returns />
        AjaxControlToolkit.AlwaysVisibleControlBehavior.callBaseMethod(this, 'initialize');
        
        var element = this.get_element();
        if (!element) throw Error.invalidOperation(AjaxControlToolkit.Resources.AlwaysVisible_ElementRequired);
        
        // Create the resposition handler used to place the element
        this._repositionHandler = Function.createDelegate(this, this._reposition);
        
        // Determine whether or not to use animations (i.e. whether or not the browser
        // supports CSS position: fixed).  All major browsers except IE 6 or earlier support it.
        // Don't animate if we're running a version of IE greater than 6
        this._animate = (Sys.Browser.agent == Sys.Browser.InternetExplorer && Sys.Browser.version < 7);
        if (this._animate) {
            // Initialize the animations to use the actual properties
            this._animation = new AjaxControlToolkit.Animation.MoveAnimation(
                element, this._scrollEffectDuration, 25, 0, 0, false, 'px');

            // Make the control use absolute positioning to hover
            // appropriately and move it to its new home
            element.style.position = 'absolute';
        } else {
            // Make the control use fixed positioning to keep it from moving
            // while the content behind it slides around
            element.style.position = 'fixed';
        }
        
        // Attach the onResize handler
        $addHandler(window, 'resize', this._repositionHandler);
        
        // Attach the onscroll event handler for the animations
        if (this._animate) {
            $addHandler(window, 'scroll', this._repositionHandler);
        }
        
        // Move to the initial position
        this._reposition();
    },
    
    dispose : function() {
        /// <summary>
        /// Dispose the behavior
        /// </summary>
        /// <returns />
    
        // Detach the event and wipe the delegate
        if (this._repositionHandler) {
            if (this._animate) {
                $removeHandler(window, 'scroll', this._repositionHandler);
            }
            $removeHandler(window, 'resize', this._repositionHandler);
            this._repositionHandler = null;
        }
        
        // Dispose the animation
        if (this._animation) {
            this._animation.dispose();
            this._animation = null;
        }
        
        AjaxControlToolkit.AlwaysVisibleControlBehavior.callBaseMethod(this, 'dispose');
    },

    _reposition : function(eventObject) {
        /// <summary>
        /// Handler to reposition the element and place it where it actually belongs
        /// whenever the browser is scrolled or resized
        /// </summary>
        /// <param name="eventObject" type="Sys.UI.DomEvent">
        /// Event info
        /// </param>
        /// <returns />

        var element = this.get_element();
        if (!element) return;
        
        this.raiseRepositioning(Sys.EventArgs.Empty);
        
        var x = 0;
        var y = 0;
        
        // Compute the initial offset if we're animating
        if (this._animate) {
            if (document.documentElement && document.documentElement.scrollTop) {
                x = document.documentElement.scrollLeft;
                y = document.documentElement.scrollTop;
            } else {
                x = document.body.scrollLeft;
                y = document.body.scrollTop;
            }
        }
        
        // Compute the width and height of the client
        var clientBounds = $common.getClientBounds();
        var width = clientBounds.width;
        var height = clientBounds.height;
        
        // Compute the horizontal coordinate
        switch (this._horizontalSide) {
            case AjaxControlToolkit.HorizontalSide.Center :
                x = Math.max(0, Math.floor(x + width / 2.0 - element.offsetWidth / 2.0 - this._horizontalOffset));
                break;
            case AjaxControlToolkit.HorizontalSide.Right :
                x = Math.max(0, x + width - element.offsetWidth - this._horizontalOffset);
                break;
            case AjaxControlToolkit.HorizontalSide.Left :
            default :
                x += this._horizontalOffset;
                break;
        }            
           
        // Compute the vertical coordinate
        switch (this._verticalSide) {
            case AjaxControlToolkit.VerticalSide.Middle :
                y = Math.max(0, Math.floor(y + height / 2.0 - element.offsetHeight / 2.0 - this._verticalOffset));
                break;
            case AjaxControlToolkit.VerticalSide.Bottom :
                y = Math.max(0, y + height - element.offsetHeight - this._verticalOffset);
                break;
            case AjaxControlToolkit.VerticalSide.Top :
            default :
                y += this._verticalOffset;
                break;
        }
        
        // Move the element to its new position
        if (this._animate && this._animation) {
            this._animation.stop();
            this._animation.set_horizontal(x);
            this._animation.set_vertical(y);
            this._animation.play();
        } else {
            element.style.left = x + 'px';
            element.style.top = y + 'px';
        }
        
        this.raiseRepositioned(Sys.EventArgs.Empty);
    },
    
    get_HorizontalOffset : function() {
        /// <value type="Number" integer="true">
        /// Distance to the horizontal edge of the browser in pixels from the same side of the target control. The default is 0 pixels.
        /// </value>
        return this._horizontalOffset;
    },
    set_HorizontalOffset : function(value) {
        if (this._horizontalOffset != value) {
            this._horizontalOffset = value;
            this._reposition();
            this.raisePropertyChanged('HorizontalOffset');
        }
    },
    
    get_HorizontalSide : function() {
        /// <value type="AjaxControlToolkit.HorizontalSide" integer="true">
        /// Horizontal side of the browser to anchor the control against.  The default is the Left side.
        /// </value>
        return this._horizontalSide;
    },
    set_HorizontalSide : function(value) {
        if (this._horizontalSide != value) {
            this._horizontalSide = value;
            this._reposition();
            this.raisePropertyChanged('HorizontalSide');
        }
    },
    
    get_VerticalOffset : function() {
        /// <value type="Number" integer="true">
        /// Distance to the vertical edge of the browser in pixels from the same side of the target control. The default is 0 pixels.
        /// </value>
        return this._verticalOffset;
    },
    set_VerticalOffset : function(value) {
        if (this._verticalOffset != value) {
            this._verticalOffset = value;
            this._reposition();
            this.raisePropertyChanged('VerticalOffset');
        }
    },
    
    get_VerticalSide : function() {
        /// <value type="AjaxControlToolkit.VerticalSide" integer="true">
        /// Vertical side of the browser to anchor the control against.  The default is the Top side.
        /// </value>
        return this._verticalSide;
    },
    set_VerticalSide : function(value) {
        if (this._verticalSide != value) {
            this._verticalSide = value;
            this._reposition();
            this.raisePropertyChanged('VerticalSide');
        }
    },
    
    get_ScrollEffectDuration : function() {
        /// <value type="Number">
        /// Length in seconds for the scrolling effect to last when the target control is repositioned. The default is .1 seconds.
        /// </value>
        return this._scrollEffectDuration;
    },
    set_ScrollEffectDuration : function(value) {
        if (this._scrollEffectDuration != value) {
            this._scrollEffectDuration = value;
            if (this._animation) {
                this._animation.set_duration(value); 
            }
            this.raisePropertyChanged('ScrollEffectDuration');
        }
    },
    
    add_repositioning : function(handler) {
        /// <summary>
        /// Add an event handler for the repositioning event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().addHandler('repositioning', handler);
    },
    remove_repositioning : function(handler) {
        /// <summary>
        /// Remove an event handler from the repositioning event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().removeHandler('repositioning', handler);
    },
    raiseRepositioning : function(eventArgs) {
        /// <summary>
        /// Raise the repositioning event
        /// </summary>
        /// <param name="eventArgs" type="Sys.EventArgs" mayBeNull="false">
        /// Event arguments for the repositioning event
        /// </param>
        /// <returns />
        
        var handler = this.get_events().getHandler('repositioning');
        if (handler) {
            handler(this, eventArgs);
        }
    },
    
    add_repositioned : function(handler) {
        /// <summary>
        /// Add an event handler for the repositioned event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().addHandler('repositioned', handler);
    },
    remove_repositioned : function(handler) {
        /// <summary>
        /// Remove an event handler from the repositioned event
        /// </summary>
        /// <param name="handler" type="Function" mayBeNull="false">
        /// Event handler
        /// </param>
        /// <returns />
        this.get_events().removeHandler('repositioned', handler);
    },
    raiseRepositioned : function(eventArgs) {
        /// <summary>
        /// Raise the repositioned event
        /// </summary>
        /// <param name="eventArgs" type="Sys.EventArgs" mayBeNull="false">
        /// Event arguments for the repositioned event
        /// </param>
        /// <returns />
        
        var handler = this.get_events().getHandler('repositioned');
        if (handler) {
            handler(this, eventArgs);
        }
    }
}
AjaxControlToolkit.AlwaysVisibleControlBehavior.registerClass('AjaxControlToolkit.AlwaysVisibleControlBehavior', AjaxControlToolkit.BehaviorBase);
//    getDescriptor : function() {
//        /// <summary>
//        /// Get the type descriptor for this object
//        /// </summary>
//        /// <returns type="???">Type descriptor for this object</returns>
//        var td = AjaxControlToolkit.AlwaysVisibleControlBehavior.callBaseMethod(this, 'getDescriptor');
//        
//        //  Add property declarations
//        td.addProperty('HorizontalOffset', Number);
//        td.addProperty('HorizontalSide', AjaxControlToolkit.HorizontalSide);
//        td.addProperty('VerticalOffset', Number);
//        td.addProperty('VerticalSide', AjaxControlToolkit.VerticalSide);
//        td.addProperty('ScrollEffectDuration', Number);
//    
//        return td;
//    },

S4N.OrderStatus = function() {
    throw Error.notImplemented();
};
S4N.OrderStatus.prototype = {
    enterTarget: 0,
    leaveTarget: 1,
    drop: 2
};
S4N.OrderStatus.registerEnum('S4N.OrderStatus');


S4N.OrderStatusArgs = function (item, st) {
    S4N.OrderStatusArgs.initializeBase(this);
    this.status = st;
    this.item = item;
};
S4N.OrderStatusArgs.registerClass('S4N.OrderStatusArgs', Sys.EventArgs);

$setIdx = function (el, idx) {
  el.idx = idx;
};
$getIdx = function (el) {
  return el.idx;
};

S4N.ReorderList = function(element) {
    S4N.ReorderList.initializeBase(this,[element]); //tabulka
    this.columnIdx = -1; //sloupec tabulky
    this.rowIdx = -1; //radek tabulky.
    this.doSwap = true; //vymena nebo posunuti
    this.dragTemplate = null; //template pro drag efekt
    this.initValue = null; //array of integer: pocatecni, zamichane poradi
    
    this.containers = []; //TD's
    this.items = []; //S4N.ReorderListItem, pripojeny k TD
    this.elements = []; //obsahy TD
    this.actOrder = []; //aktualni poradi
    this.itemTemplateInstance = null; //kopie dragTemplate 
};
S4N.ReorderList.prototype = { 
   
    initialize : function () {
        S4N.ReorderList.callBaseMethod(this, 'initialize');
        var el = this._element;
        $assert (this.columnIdx>=0 || this.rowIdx>=0, 'error 1');
        $assert (this.columnIdx<0 || this.rowIdx<0, 'error 2');
        //Containers
        if (this.rowIdx>=0) { //_element je row
            var row = el.rows[this.rowIdx];
            for (var i=0; i<row.cells.length; i++) 
                this.containers[i] = row.cells[i];
        } else { //el je table
            for (var i=0; i<el.rows.length; i++)
                this.containers[i] = el.rows[i].cells[this.columnIdx];
        }
        //Elements: zachovej prave jeden non text element
        for (var i=0; i<this.containers.length; i++) {
            var childs = this.containers[i].childNodes;
            this.elements[i] = null;
            for (var j=childs.length-1; j>=0; j--) {
                if (this.elements[i]!=null || childs[j].nodeType!=1) {
                    this.containers[i].removeChild (childs[j]);
                    continue;
                }
                this.elements[i] = childs[j];
                $setIdx (this.elements[i],i);
            }
            $assert (this.elements[i]!=null, 'error 1');
        }
        //Obal td tag D&D objektem
        for (var i=0; i<this.containers.length; i++) {
            this.items[i] = new S4N.ReorderListItem(this.containers[i], this, i);
            this.items[i].initialize();
        }
    },
    
    get_dragTemplate : function() { return this.dragTemplate; },
    set_dragTemplate : function(value) { this.dragTemplate = value; }, 

    get_initValue : function() { return this.initValue; },
    set_initValue : function(value) { this.initValue = value; }, 

    add_dragStatusChanged : function (handler) {this.get_events().addHandler('dragStatusChanged', handler); },
    add_acceptData : function (handler) {this.get_events().addHandler('acceptData', handler); },
    add_canDrop : function (handler) {this.get_events().addHandler('canDrop', handler); }, //zmena drag efekt elementu po najeti na target
    
    onCanDrop : function (value) {
        var ev = this.get_events().getHandler('canDrop'); if (ev) ev (this, new S4N.BoolArg (value));
    },
    
    dragStatusChanged : function (item, st) {
        var ev = this.get_events().getHandler('dragStatusChanged'); 
        if (ev) ev (this, new S4N.OrderStatusArgs (item, st));
    },

    getTemplate : function (el) {
      //clone template
        if (this.itemTemplateInstance==null) {
            this.itemTemplateInstance = this.dragTemplate.cloneNode( true );
	      } else 
	          this.onCanDrop (false);
        this.itemTemplateInstance.innerHTML = el.innerHTML;
        document.body.appendChild( this.itemTemplateInstance ); 
        return this.itemTemplateInstance;
    },
    
    setIdx : function (target, source) { 
        var cont = this.containers[target];
        if (source<0) { //odstraneni vsech elementu z TD
            while (cont.hasChildNodes()) cont.removeChild (cont.childNodes[0]);
            return;
        }
        source = this.actOrder[source];
        var targetIdx = (cont.hasChildNodes() ? cont.childNodes[0].temp_idx : -2);
        if (targetIdx==source) return;
        if (cont.hasChildNodes()) cont.removeChild (cont.childNodes[0]);
        cont.appendChild ( this.elements[source]);
    },
    
    reorderStart : function (srcIdx) {
        for (var i=0; i<this.elements.length; i++) this.elements[i].temp_idx = i;
        this.srcIdx = srcIdx;
    },
    
    reorderContinue : function (endIdx) {
        if (this.doSwap) {
            for (var i=0; i<this.elements.length; i++) 
                if (i!=this.setIdx && i!=endIdx) this.setIdx (i, i);
            this.setIdx (this.srcIdx, endIdx);
            this.setIdx (endIdx, this.srcIdx);
        } else {
            if (this.srcIdx==endIdx) {
                for (var i=0; i<this.elements.length; i++) this.setIdx (i, i);
            } else if (this.srcIdx<endIdx) {
                for (var i=0; i<this.srcIdx; i++) this.setIdx (i, i);
                for (var i=this.srcIdx; i<endIdx; i++)
                    this.setIdx (i, i+1);
                this.setIdx (endIdx, this.srcIdx);   
                for (var i=endIdx+1; i<this.elements.length; i++) this.setIdx (i, i);
            } else if (endIdx<this.srcIdx) {
                for (var i=0; i<endIdx; i++) this.setIdx (i, i);
                for (var i=endIdx; i<this.srcIdx; i++)
                    this.setIdx (i+1, i);
                this.setIdx (endIdx, this.srcIdx);
                for (var i=this.srcIdx+1; i<this.elements.length; i++) this.setIdx (i, i);
            }
        }
    },

    reorderEnd : function (cancel) {
        if (this.itemTemplateInstance.parentNode==null) return;
        this.itemTemplateInstance.parentNode.removeChild (this.itemTemplateInstance);
        if (cancel)//undo
            for (var i=0; i<this.elements.length; i++) { this.setIdx (i, i); }
        else 
            this.actOrder = this.get_value ();
    },
    
    // S4N.IScoreProvider
    get_sentenceText : function (isOk) {
        var sb = new Sys.StringBuilder ();
        if (isOk) {
            for (var i=0; i<this.elements.length; i++) sb.append (this.elements[i].innerHTML);
            return sb.toString (' ');
        } else {
            for (var i=0; i<this.elements.length; i++) sb.append (this.elements[this.actOrder[i]].innerHTML);
            return sb.toString (' ');
        }
    },
    
    get_dataValue : function (data) {
        var d = data[this.get_id()];
        return ($isEmpty(d) ? this.initValue : d); 
    },
    
    get_value : function () {
        var res = new Array();
        for (var i=0; i<this.elements.length; i++) 
            res[i] = $getIdx (this.containers[i].childNodes[0]);
        return res;
    },
    
    doAcceptData : function (exSt, data) {
        this.actOrder = this.get_dataValue( data);
        //Bug 235, 26.9.07
        //if (exSt!=S4N.ExerciseStatus.Evaluated) {
            for (var i=0; i<this.elements.length; i++) this.setIdx (i, -1); //odstraneni vsech elementu z TD
            for (var i=0; i<this.elements.length; i++) this.setIdx (i, i); //dosazeni elementu dle aktualniho poradi
        //}
        var ev = this.get_events().getHandler('acceptData'); if (!ev) return;
        ev (this, new S4N.AcceptDataArgs(exSt, this.get_dataValue(data)));
    },
    
    resetData : function (data) {
        data[this.get_id()] = undefined;
    },
    
    get_score : function () { 
        if (this.rowIdx>=0) { //word ordering
            var okText = this.get_sentenceText (true); var userText = this.get_sentenceText (false);
            return S4N.CreateScore (okText==userText ? 1 : 0, 1)
        } else {
            var ok = 0;
            for (var i=0; i<this.elements.length; i++) 
                if (i==$getIdx (this.containers[i].childNodes[0])) ok += 1;
            return S4N.CreateScore (ok, this.elements.length); 
        }
    },
    
    provideData : function (data) {
        data[this.get_id()] = this.get_value ();
    }
    
};
S4N.ReorderList.registerClass('S4N.ReorderList', S4N.Control, S4N.IScoreProvider);

S4N.ReorderListItem = function(element, owner, idx) { 
    S4N.ReorderListItem.initializeBase(this, [element]);
    this.owner = owner;
    this.idx = idx;
    
};
S4N.ReorderListItem.prototype = { 

    initialize : function () {
        S4N.ReorderListItem.callBaseMethod(this, 'initialize');
        $addHandler(this._element, "mousedown", Function.createDelegate(this, this.mouseDownHandler));        
        AjaxControlToolkit.DragDropManager.registerDropTarget(this);
    },
    
    mouseDownHandler : function (ev) {
        window._event = ev;
        var el = this._element;
        var templ = this.owner.getTemplate (el);
	    //template position
	      var dadMan = AjaxControlToolkit.DragDropManager._getInstance();
	      var location = { x: ev.clientX + 10 , y: ev.clientY - 10};
	      var scrollOffset = dadMan.getScrollOffset(document.body, true);
	      location = dadMan.addPoints(location, scrollOffset);
        Sys.UI.DomElement.setLocation(templ, location.x, location.y);
	    //prevent default
        ev.preventDefault();
      //start drag
        this.owner.reorderStart ( this.idx);
        AjaxControlToolkit.DragDropManager.startDragDrop(this, templ, null);
    },
    
    get_text : function (ok) {
        var res = (ok ? this.owner.elements[this.idx].innerHTML : this._element.childNodes[0].innerHTML);
        res = S4N.Sys.textFromHtml (res);
        return res;
    },
    
    //AjaxControlToolkit.IDragSource
    get_dragDataType: function() { //return Type
        return this.owner.get_id();
    },
    getDragData: function(Context) { //return Object
        return this;
    },
    get_dragMode: function() { //return DragMode
        return AjaxControlToolkit.DragMode.Move;
    },
    onDragStart: function() { // void
    },
    onDrag: function() { // void
    },
    onDragEnd: function(Cancelled) { // void
        this.owner.reorderEnd (Cancelled);
    },
    
    //AjaxControlToolkit.IDropTarget
    get_dropTargetElement: function() { // return element
        return this._element; 
    },
    canDrop: function(DragMode, DataType, Data) { //return bool
        return (DataType==this.owner.get_id());
    },
    drop: function(DragMode, DataType, Data) { // void
        this.owner.dragStatusChanged ( this, S4N.OrderStatus.leaveTarget);
        this.owner.dragStatusChanged ( this, S4N.OrderStatus.drop);
    },
    onDragEnterTarget: function(DragMode, DataType, Data) { // void
        this.owner.reorderContinue ( this.idx);
        this.owner.onCanDrop (true);
        this.owner.dragStatusChanged ( this, S4N.OrderStatus.enterTarget);
    },
    onDragLeaveTarget: function(DragMode, DataType, Data) { // void
        this.owner.onCanDrop (false);
        this.owner.dragStatusChanged ( this, S4N.OrderStatus.leaveTarget);
    },
    onDragInTarget: function(DragMode, DataType, Data) { // void
    }
    
};
S4N.ReorderListItem.registerClass('S4N.ReorderListItem', S4N.Control, AjaxControlToolkit.IDragSource, AjaxControlToolkit.IDropTarget);

/*********** CONTROL hide_control ***********/
S4N.HideControl = function (element) {
    S4N.HideControl.initializeBase(this, [element]);
    this.keepSpace = false; //display:none. Jinak visibility:hidden
    this.clickElement = null; //element pro osetreni expand x collapse kliku
    this.visible = null; //visibility
};    

S4N.HideControl.prototype = {

    initialize : function() {
        S4N.HideControl.callBaseMethod(this, 'initialize');
        var grp = $evalRoot(); 
        grp.get_events().addHandler("propertyChanged", Function.createDelegate(this, this.exerciseStatusChanged));
        if (this.clickElement!=null)
          $addHandler (this.clickElement, 'click', Function.createDelegate(this, this.doClick));
    },
    
    set_clickElement : function (value) { this.clickElement = value; },
    get_clickElement : function () { return this.clickElement; },
    add_visibleChanged : function (handler) {this.get_events().addHandler('visibleChanged', handler); },
    
    exerciseStatusChanged : function (sender, eventArgs) {
        if (eventArgs._propertyName != 'exerciseStatus') return;
        var st = sender.exerciseStatus;
        this.set_visible (st==S4N.ExerciseStatus.Evaluated);
    },
    
    set_visible : function (visible) {
        if (this.visible==visible) return;
        this.visible=visible;
        var ev = this.get_events().getHandler('visibleChanged'); if (!ev) return;
        ev (this, new S4N.BoolArg(visible));
    },
    
    doClick : function (ev) {
        this.set_visible (!this.visible);
    }
};
S4N.HideControl.registerClass('S4N.HideControl', Sys.UI.Control);
    
/*********** CONTROL hide_control ***********/
S4N.MemoryBox = function (element) {
    S4N.MemoryBox.initializeBase(this, [element]);
};    

S4N.MemoryBox.prototype = {

    initialize : function() {
        S4N.MemoryBox.callBaseMethod(this, 'initialize');
    },
    
    provideData: function(data) { 
        data[this.get_id()] = this._element.value;
    },
    acceptData: function(exSt, data) { 
        var val = data[this.get_id()];
        this._element.value = $isEmpty(val) ? '' : val;
    }, 
    resetData: function(data) { 
        data[this.get_id()] = undefined;
    },
    get_score: function() { return null; } 
};
S4N.MemoryBox.registerClass('S4N.MemoryBox', Sys.UI.Control, S4N.IScoreProvider);
    
    



/*REPLACE
S4N.CheckBoxStatus
S4N.CheckBoxResult
S4N.CheckBoxType
S4N.CheckBox
this.type
this.correct
this.checkStatus
this.initValue
*/
/*********** ENUM CheckBoxStatus ***********/
S4N.CheckBoxStatus = function() { throw Error.notImplemented(); };
S4N.CheckBoxStatus.prototype = {
    Unknown: 0,
    Unchecked: 1,
    Checked: 2,
    UncheckedWrong: 3,
    CheckedWrong: 4,
    UncheckedOK: 5,
    CheckedOK: 6,
    ReadOnly: 7,
    Undefined: 8,
    UndefinedChecked: 9,
    UndefinedUnchecked: 10
};
S4N.CheckBoxStatus.registerEnum('S4N.CheckBoxStatus');

/*********** ENUM CheckBoxResult ***********/
S4N.CheckBoxResult = function() { throw Error.notImplemented(); };
S4N.CheckBoxResult.prototype = {
    Undefined: 0,
    Checked: 1,
    Unchecked: 2
};
S4N.CheckBoxResult.registerEnum('S4N.CheckBoxResult');

/*********** ENUM CheckBoxType ***********/
S4N.CheckBoxType = function() {
    throw Error.notImplemented();
};
S4N.CheckBoxType.prototype = {
    CheckBox: 0,
    RadioButton: 1
};
S4N.CheckBoxType.registerEnum('S4N.CheckBoxType');

/*********** CONTROL CheckBox ***********/
S4N.CheckBox = function (element) {
    S4N.CheckBox.initializeBase(this, [element]);

    this.type = S4N.CheckBoxType.CheckBox;
    this.correct = false; //spravna odpoved
    this.checkStatus = S4N.CheckBoxStatus.Unknown; //stav kontrolky
    this.initValue = S4N.CheckBoxResult.Undefined; //inicialni hodnota
    this.example = false;
};

S4N.CheckBox.prototype = {
    
    initialize : function() {
        S4N.CheckBox.callBaseMethod(this, 'initialize');
        if ((this.type==S4N.CheckBoxType.RadioButton && this.initValue == S4N.CheckBoxResult.Undefined))
            this.initValue == S4N.CheckBoxResult.Unchecked;
        //init hodnota a correct hodnota musi odpovidat
        if (this.example)
            this.correct = (this.initValue == S4N.CheckBoxResult.Checked);
        $addHandler (this.get_element(), 'click', Function.createDelegate(this, this.doClick));
    },

    set_type : function (value) {this.type = S4N.CheckBoxType.parse(value,true); },
    get_type : function () { return this.type; },
    set_correct : function (value) { this.correct = value; },
    set_initValue : function (value) { this.initValue = S4N.CheckBoxResult.parse(value,true); },
    get_initValue : function () { return this.initValue; },
    add_statusChanged : function (handler) {this.get_events().addHandler('statusChanged', handler); },
    
    get_score : function () { 
        if (this.example) return null;
        return S4N.CreateScore (this.isCorrect() ? 1 : 0, 1); 
    },
    
    // STATUS management
    doClick : function (ev) {
        if (this.exerciseStatus!=S4N.ExerciseStatus.Normal) return;
        if (this.checkStatus == S4N.CheckBoxStatus.Undefined)
            this.set_CheckStatus ( S4N.CheckBoxStatus.Unchecked);
        else if (this.checkStatus == S4N.CheckBoxStatus.Unchecked)
            this.set_CheckStatus ( S4N.CheckBoxStatus.Checked);
        else if (this.type == S4N.CheckBoxType.CheckBox && this.checkStatus == S4N.CheckBoxStatus.Checked)
            this.set_CheckStatus ( S4N.CheckBoxStatus.Unchecked);
        ev.stopPropagation();
    },
    
    checkResult : function () {
        if (this.checkStatus == S4N.CheckBoxStatus.Undefined || this.checkStatus == S4N.CheckBoxStatus.UndefinedChecked || this.checkStatus == S4N.CheckBoxStatus.UndefinedUnchecked)
            return S4N.CheckBoxResult.Undefined;
        else if (this.checkStatus == S4N.CheckBoxStatus.Checked || this.checkStatus == S4N.CheckBoxStatus.CheckedWrong || this.checkStatus == S4N.CheckBoxStatus.CheckedOK)  
            return S4N.CheckBoxResult.Checked;
        else
            return S4N.CheckBoxResult.Unchecked;
    },
    
    set_CheckStatus : function (value) {
        if (this.checkStatus == value) return;
        this.checkStatus = value;

        var ev = this.get_events().getHandler('statusChanged');
        if (ev) ev (this, Sys.EventArgs.Empty);

        if (this.type != S4N.CheckBoxType.RadioButton || this.checkStatus != S4N.CheckBoxStatus.Checked) return;
        //pro radio: uncheck ostatnich prvku
        var siblings = this.evalGroup.scoreProviders;
        for (var i=0; i<siblings.length; i++) {
            if (siblings[i]==this || !S4N.CheckBox.isInstanceOfType (siblings[i]) || siblings[i].get_type()!=S4N.CheckBoxType.RadioButton) continue;
            siblings[i].set_CheckStatus (S4N.CheckBoxStatus.Unchecked);
        }
    },

    get_dataValue : function (data) {
        var d = data[this.get_id()];
        return $isEmpty(d) ? this.initValue/*.toString()*/ : d;
    },
    
    provideData : function (data) {
        data[this.get_id()] = this.checkResult().toString();
    },
    
    resetData : function (data) {
        data[this.get_id()] = null;
    },
    
    doAcceptData : function (exerciseStatus, data) {
        var es = exerciseStatus;
        if (exerciseStatus==S4N.ExerciseStatus.Evaluated && this.example)
            es = S4N.ExerciseStatus.Normal;
        switch (es) {
            case S4N.ExerciseStatus.Normal:
                var ch = this.get_dataValue (data);
                if (ch==S4N.CheckBoxResult.Undefined)
                    this.set_CheckStatus ( S4N.CheckBoxStatus.Undefined);
                else if (ch==S4N.CheckBoxResult.Checked)
                    this.set_CheckStatus ( S4N.CheckBoxStatus.Checked);
                else
                    this.set_CheckStatus ( S4N.CheckBoxStatus.Unchecked);
                break;
            case S4N.ExerciseStatus.Preview:
                this.set_CheckStatus ( S4N.CheckBoxStatus.ReadOnly);
                break;
            case S4N.ExerciseStatus.Evaluated:
                var ch = this.get_dataValue (data);
                if (ch==S4N.CheckBoxResult.Undefined) {
                    if (this.correct) 
                        this.set_CheckStatus ( S4N.CheckBoxStatus.UndefinedChecked);
                    else
                        this.set_CheckStatus ( S4N.CheckBoxStatus.UndefinedUnchecked);
                } else {
                    var checked = ch==S4N.CheckBoxResult.Checked;
                    if (checked && checked==this.correct)
                        this.set_CheckStatus ( S4N.CheckBoxStatus.CheckedOK);
                    else if (checked && checked!=this.correct)
                        this.set_CheckStatus ( S4N.CheckBoxStatus.CheckedWrong);
                    else if (!checked && checked==this.correct)
                        this.set_CheckStatus ( S4N.CheckBoxStatus.UncheckedOK);
                    else if (!checked && checked!=this.correct)
                        this.set_CheckStatus ( S4N.CheckBoxStatus.UncheckedWrong);
                }
                break;
        }
    },
    
    isCorrect : function () {
        if (this.example) {
            this.correct = this.initValue;
            return true;
        } else {
            var ch = this.checkResult ();
            if (ch == S4N.CheckBoxResult.Undefined) return false;
            var checked = ch == S4N.CheckBoxResult.Checked;
            return this.correct == checked;
        }
    }
    
};
S4N.CheckBox.registerClass('S4N.CheckBox', S4N.Control, S4N.IScoreProvider);

Type.registerNamespace('S4N');

S4N.SoundDriver = function () { throw Error.notImplemented(); };
S4N.SoundDriver.prototype = {
  no: 0,
  FlashPlayer: 1,
  MediaPlayer: 2,
  MediaPlayer6: 3,
  Silverlight: 4,
  SlNewEE: 5,
  HTML5: 6
};
S4N.SoundDriver.registerEnum('S4N.SoundDriver');

S4N.SoundPlayer = function (type) {
  S4N.SoundPlayer.initializeBase(this);

  this.driver = null;
  this.files = [];
  this.actSent = null; //aktualni S4N.SoundSent
  this.actMark = null; //aktualni S4N.SoundMark
  this.forceVersion = S4N.SoundDriver.no;
};

S4N.SoundPlayer.prototype = {

  initialize: function () {
    S4N.SoundPlayer.callBaseMethod(this, 'initialize');
    $addHandler(document.body, 'click', Function.createDelegate(this, this.bodyClick));

    var version = this.forceVersion != S4N.SoundDriver.no ? this.forceVersion : S4N.SoundPlayer.version;
    switch (version) {
      case S4N.SoundDriver.FlashPlayer:
      case S4N.SoundDriver.Silverlight:
      case S4N.SoundDriver.HTML5:
        var option = {
          Name: LMSnd.Player.selectDriver(),
          onTimeChanged: function (sec) { }, //empty
          onError: function (msg) { alert(msg); },
          SL: { xapUrl: xapPath + 'slplayer.xap' },
          Flash: { flashPlayerUrl: xapPath + 'player' },
          HTML5: { preloadSec: 3/10 },
          //Nahradit pro EA
          //getFileUrl: function (file) { return ''; },
          //onStoped: function () { },
          modifyUrl: function (driver, url) {
            url = url.toLowerCase();
            switch (driver) {
              case 'SL':
                //return url.replace('.mp3', '.wma');
              case 'Flash':
              case 'HTML5':
                return url.replace('.wma', '.mp3');
            }
          },
          getFileUrl: function (file) { return S4N.Sys.getAbsoluteUrl($page().globalId, file.spaceId, file.globalId); },
          onStoped: this.clearMarks
        };
        this.driver = LMSnd.Player;
        LMSnd.Player.init(option);
        break;
      case S4N.SoundDriver.MediaPlayer:
        this.driver = new S4N.SoundMediaPlayer(this);
        break;
      case S4N.SoundDriver.SlNewEE:
        this.driver = new S4N.SoundSlNewEE(this);
        break;
      default:
        $assert(false, 'S4N.SoundPlayer.initialize');
        break;
    }
  },

  dispose: function () {
    if (this.driver && this.driver.dispose) this.driver.dispose();
    S4N.SoundPlayer.callBaseMethod(this, 'dispose');
  },

  add_onSentFocus: function (handler) { this.get_events().addHandler('onSentFocus', handler); },
  add_onMarkFocus: function (handler) { this.get_events().addHandler('onMarkFocus', handler); },

  set_actMark: function (mark) {
    if (mark == this.actMark) return;
    if (this.actMark != null) this.setMarkFocus(this.actMark, false);
    this.actMark = mark;
    if (this.actMark != null) this.setMarkFocus(this.actMark, true);
  },

  set_actSent: function (sent) {
    if (sent == this.actSent) return;
    if (this.actSent != null) this.setSentFocus(this.actSent, false);
    this.actSent = sent;
    if (this.actSent != null) this.setSentFocus(this.actSent, true);
  },

  setMarkFocus: function (mark, isFocus) {
    var ev = this.get_events().getHandler('onMarkFocus');
    if (ev) ev(mark, new S4N.BoolArg(isFocus));
  },

  setSentFocus: function (sent, isFocus) {
    var ev = this.get_events().getHandler('onSentFocus');
    if (ev) ev(sent, new S4N.BoolArg(isFocus));
  },

  stop: function (endInt, isBodyClick) {
    this.set_actSent(null); if (isBodyClick) this.set_actMark(null);
    if (isBodyClick || endInt == null) { this.driver.stop(); return; }
    var nextInt = endInt.nextInterval();
    if (nextInt == null) { this.set_actMark(null); this.driver.stop(); return; }
    nextInt.play(null);
  },

  bodyClick: function (ev) {
    //this.driver.stop();
    LMSnd.file = null;
    this.stop (null, true);
  },

  clearMarks: function () {
    this.set_actMark(null);
    this.set_actSent(null);
  },

  playFile: function (url) {
    this.driver.playFile(url, 0);
  }

};
S4N.SoundPlayer.registerClass('S4N.SoundPlayer', Sys.Component);

S4N.SoundFile = function () {
  S4N.SoundFile.initializeBase(this);
  this.url = ''; //relativni url s prehravanym zvukem
  this.spaceId = '';
  this.globalId = '';
  this.player = null;

  this.intervals = []; //seznam intervalu se souvislymi sekvencemi zvuku. Slouzi k nalezeni actMark x actSent
  this.endPos = 0; //koncova pozice pro STOP zvuku, hlidana timerem
  this.endInterval = null; //S4N.SoundInterval, ktery dosadil hodnotu this.endPos
};

S4N.SoundFile.prototype = {

  initialize: function () {
    S4N.SoundFile.callBaseMethod(this, 'initialize');
    Array.add(this.player.files, this);
  },

  set_player: function (value) { this.player = value; },

  onPlaying: function (actPos) { //aktualizace
    if (this.endPos > 0 && actPos >= this.endPos) {
      Debug.$trace(S4N.Trace.Sound, 'S4N.SoundFile.onPlaying: actPos=' + actPos + ', endPos=  ' + this.endPos);
      this.stop();
    } else {
      var actInt = null;
      for (var i = 0; i < this.intervals.length; i++) {
        actInt = this.intervals[i];
        if (actInt.beg <= actPos && actInt.end > actPos) break; else actInt = null;
      }
      if (actInt == null) return;
      if (actInt.myGroup.mark != null) this.player.set_actMark(actInt.myGroup.mark);
      var actSent = null;
      for (var i = 0; i < actInt.sents.length; i++) {
        actSent = actInt.sents[i];
        if (actSent.beg <= actPos && actSent.end > actPos) break; else actSent = null;
      }
      if (actSent != null) this.player.set_actSent(actSent);
    }
  },

  stop: function () {
    if (this.endPos == 0) return;
    var endInt = this.endInterval; this.endInterval = null; this.endPos = 0;
    this.player.stop(endInt, false);
  },

  play: function (beg) {
    Debug.$trace(S4N.Trace.Sound, 'S4N.SoundFile.play: beg=' + beg + ', end=  ' + this.endPos);
    this.player.driver.play(this, beg);
  }

};
S4N.SoundFile.registerClass('S4N.SoundFile', Sys.Component);

S4N.SoundGroup = function () {
  S4N.SoundGroup.initializeBase(this);
  this.intervals = []; //seznam intervalu se souvislymi sekvencemi zvuku. Ridi se jim poradi prehravani nesouvisleho zvuku
  this.player = null;

  this.mark = null; //velka zvukova znacka
};

S4N.SoundGroup.prototype = {

  initialize: function () {
    S4N.SoundGroup.callBaseMethod(this, 'initialize');
    var it = this.intervals;
    for (var i = 0; i < it.length; i++) {
      it[i] = $find(it[i]);
      it[i].myGroup = this;
      it[i].groupIdx = i;
    }
  },

  set_intervals: function (value) { this.intervals = value; },
  get_intervals: function () { return this.intervals; },
  set_player: function (value) { this.player = value; }

};
S4N.SoundGroup.registerClass('S4N.SoundGroup', Sys.Component);

S4N.SoundInterval = function () {
  S4N.SoundInterval.initializeBase(this);
  this.beg = 0;
  this.end = 0;
  this.myFile = null; //S4N.SoundFile

  this.sents = []; //seznam S4N.Sentence
  this.myGroup = null; //S4N.SoundGroup
  this.groupIdx = -1; //index do this.myGroup.intervals
};

S4N.SoundInterval.prototype = {

  initialize: function () {
    S4N.SoundInterval.callBaseMethod(this, 'initialize');
    Array.add(this.myFile.intervals, this);
  },

  set_file: function (value) { this.myFile = value; },

  play: function (sent) { //prehraje budto cely interval (sent==null) nebo interval od zadane zvukove vety
    this.myFile.endPos = this.end;
    this.myFile.endInterval = this;
    this.myFile.play(sent == null ? this.beg : sent.beg);
  },

  nextInterval: function () {
    if (this.groupIdx >= this.myGroup.intervals.length - 1) return null;
    return this.myGroup.intervals[this.groupIdx + 1];
  }

};
S4N.SoundInterval.registerClass('S4N.SoundInterval', Sys.Component);

S4N.SoundSent = function (element) {
  S4N.SoundSent.initializeBase(this, [element]);
  this.myInterval = null; //muj S4N.SoundInterval
  this.beg = 0; //zacatek prehravani
  this.end = 0; //konec prehravani
};

S4N.SoundSent.prototype = {

  initialize: function () {
    S4N.SoundSent.callBaseMethod(this, 'initialize');
    Array.add(this.myInterval.sents, this);
    $addHandler(this._element, 'click', Function.createDelegate(this, this.doClick));
    //Pronunc
    var pronObj = null;
    var el = $(this._element);
    var pron = el.find('.sdPronuncMark');
    if (pron != null && pron.length == 1) {
      var file = this.myInterval.myFile;
      var url = file.spaceId + '/' + file.globalId;
      var pronObj = $(pron[0]);
      var par = { 'url': url, 'beg': this.beg.toString(), 'end': this.end.toString(), 'title': el.text() };
    }
    if (Hack()) {
      if (pronObj!=null) pronObj.click(function (ev) {
        return Pager.callCPV(ev, par.url, par.title, par.beg, par.end);
      });
    } else {
      if (typeof (dictConnector) == 'undefined') return;
      pronObj.click(par, dictConnector.listenTalkSentence);
    }
  },

  doClick: function (ev) {
    ev.stopPropagation();
    if (ev.target != null && ev.target.tagName.toLowerCase() == 'a') return; //click na pronunciation znacku
    this.play(false);
  },

  set_interval: function (value) { this.myInterval = value; },

  play: function (simple) { //prehraje aktualni vetu (simple=true) nebo grupu (simple=false) 
    if (simple) {
      var file = this.myInterval.myFile;
      this.myFile.endPos = this.end;
      this.myFile.endInterval = null;
      this.myFile.play(this.beg);
    } else {
      this.myInterval.play(this);
    }
    this.myInterval.myFile.player.set_actSent(this);
  }

};
S4N.SoundSent.registerClass('S4N.SoundSent', S4N.Control);

S4N.SoundMark = function (element) {
  S4N.SoundMark.initializeBase(this, [element]);
  this.myGroup = null; //muj S4N.SoundGroup
};

S4N.SoundMark.prototype = {

  initialize: function () {
    S4N.SoundMark.callBaseMethod(this, 'initialize');
    $assert(this.myGroup.mark == null, 'S4N.SoundMark: duplicated mark');
    this.myGroup.mark = this;
    $addHandler(this._element, 'click', Function.createDelegate(this, this.doClick));
  },

  set_group: function (value) { this.myGroup = value; },
  get_group: function () { return this.myGroup; },

  play: function () { //prehraje celou grupu
    this.myGroup.intervals[0].play(null);
    this.myGroup.player.set_actMark(this);
  },

  doClick: function (ev) {
    ev.stopPropagation();
    this.play();
  }

};
S4N.SoundMark.registerClass('S4N.SoundMark', S4N.Control);

//S4N.MediaPlayerStatus = function () { throw Error.notImplemented(); };
//S4N.MediaPlayerStatus.prototype = {
//  Undefined: 0,
//  Stopped: 1,
//  Paused: 2,
//  Playing: 3,
//  ScanForward: 4,
//  ScanReverse: 5,
//  Buffering: 6,
//  Waiting: 7,
//  MediaEnded: 8,
//  Transitioning: 9,
//  Ready: 10,
//  Reconnecting: 11
//};
//S4N.MediaPlayerStatus.registerEnum('S4N.MediaPlayerStatus');

//S4N.SoundMediaPlayer = function (player) {
//  this.player = player;
//  this.control = $get('MediaPlayer');
//  $assert(this.control != null, 'S4N.SoundMediaPlayer: missing MediaPlayer');
//  S4N.Sys.addHandlers(this.control, { Error: this.error, PlayStateChange: this.playStateChange }, this);
//  this.file = null;
//  this.url = null;
//  this.timer = null;
//  Debug.$trace(S4N.Trace.Sound, 'S4N.SoundMediaPlayer: OK');
//};

//S4N.SoundMediaPlayer.prototype = {

//  dispose: function () {
//    this.control.controls.stop();
//  },

//  playFile: function (url, sec) {
//    if (this.url != url) {
//      this.control.URL = url;
//      Debug.$trace(S4N.Trace.Sound, 'S4N.SoundMediaPlayer.play ' + this.fileId() + ' url=' + url);
//      this.url = url;
//    }
//    this.control.controls.currentPosition = sec;
//    this.control.controls.Play();
//  },

//  play: function (file, msec) {
//    //if ($isEmpty(this.control.controls,true)) return;
//    this.stop(null);
//    this.file = file;
//    var url = S4N.Sys.getAbsoluteUrl($page().globalId, file.spaceId, file.globalId);
//    this.playFile(url, msec / 1000);
//    Debug.$trace(S4N.Trace.Sound, 'S4N.SoundMediaPlayer.play play: ' + this.fileId() + ' ' + beg.toString());
//  },

//  stop: function (file) {
//    if (this.control.playState != S4N.MediaPlayerStatus.Playing) return;
//    $assert(file == null || file == this.file, 'S4N.SoundMediaPlayer.actPos');
//    this.control.controls.pause();
//    Debug.$trace(S4N.Trace.Sound, 'S4N.SoundMediaPlayer.stop ' + this.fileId());
//  },

//  error: function () {
//    Debug.$trace(S4N.Trace.Sound, '***** S4N.SoundMediaPlayer.onError: ' + this.control.error.item(0).errorDescription + '  ' + this.fileId());
//  },

//  playStateChange: function (newState) {
//    Debug.$trace(S4N.Trace.Sound, 'S4N.SoundMediaPlayer.playStateChange: ' + S4N.MediaPlayerStatus.toString(newState) + '  ' + this.fileId());
//    switch (newState) {
//      case S4N.MediaPlayerStatus.Stoped:
//      case S4N.MediaPlayerStatus.Paused:
//        this.file = null;
//        if (this.timer == null) return;
//        clearInterval(this.timer);
//        this.timer = null;
//        break;
//      case S4N.MediaPlayerStatus.Playing:
//        if (this.timer != null) return;
//        this.timer = setInterval(Function.createDelegate(this, this.onTimer), 10);
//        break;
//    }
//  },

//  onTimer: function () {
//    this.file.onPlaying(this.control.playState == S4N.MediaPlayerStatus.Playing ? this.control.controls.currentPosition * 1000 : 100000000);
//  },

//  fileId: function () { return this.file == null ? 'null' : this.file.url; }

//};

////SLEA
///*********************************/
//S4N.SoundSlNewEE = function (player) {
//  this.player = player;
//  this.file = null;
//  this.control = null;
//  S4N.SoundSlNewEE.instance = this;
//  //Prirazeni sound callbacku do parent frame, aby byla funkce dostupna z CSharp:
//  try {
//    window.parent.S4N_SoundSlNewEE_timeChanged = function S4N_SoundSlNewEE_timeChanged(time) {
//      try {
//        var thisObj = S4N.SoundSlNewEE.instance;
//        alert(time);
//        if (time >= 0) {
//          if (thisObj.file != null) thisObj.file.onPlaying(time);
//        } else { //Stop
//          if (thisObj.file != null) thisObj.file.onPlaying(100000.0);
//          thisObj.player.clearMarks();
//        }
//      } catch (e2) { }
//    };
//  } catch (e) { }
//  Debug.$trace(S4N.Trace.Sound, 'S4N.SoundSlNewEE: OK');
//};

//S4N.SoundSlNewEE.prototype = {

//  dispose: function () {
//    if (this.control == null) return;
//    //this.control.stop();
//  },

//  playFile: function (url, sec) {
//    window.external.Play(url, sec);
//  },

//  play: function (file, msec) {
//    var url = S4N.Sys.getAbsoluteUrl($page().globalId, file.spaceId, file.globalId);
//    this.playFile(url, msec / 1000);
//    //alert('play: ' + url.toString() + ' (' + beg.toString() + ')');
//    Debug.$trace(S4N.Trace.Sound, 'S4N.SoundSlNewEE.play play: ' + url + ' ' + beg.toString());
//  },

//  stop: function (file) {
//    window.external.Stop();
//    //alert('stop');
//    //Debug.$trace(S4N.Trace.Sound, 'S4N.SoundSlNewEE.stop ' + this.fileId());
//  }

//};

//S4N.SoundSlNewEE.instance = null;

S4N.EvalControlStatus = function() {
    throw Error.notImplemented();
};
S4N.EvalControlStatus.prototype = {
    Unknown: 0,
    DoEval: 1,
    DoReset: 2,
    Disabled: 3
};
S4N.EvalControlStatus.registerEnum('S4N.EvalControlStatus');


S4N.EvalControl = function (element) {
    S4N.EvalControl.initializeBase(this, [element]);
    
    this.allowReset = true;
    this.status = S4N.EvalControlStatus.Unknown;
    this.group = null;
};
    
S4N.EvalControl.prototype = {

    initialize : function() {
        S4N.EvalControl.callBaseMethod(this, 'initialize');
        if (this.group==null) this.group = $evalRoot();
        this.group.get_events().addHandler("propertyChanged", Function.createDelegate(this, this.exerciseStatusChanged));
        $addHandler(this._element,'click',Function.createDelegate(this, this.doClick));
    },
    
    set_evalGroup : function (value) { this.group = value; },
    set_allowReset : function (value) { this.allowReset = value; },
    add_statusChanged : function (handler) {this.get_events().addHandler('statusChanged', handler); },
    
    set_status: function (value) {
        if (this.status==value) return; 
        this.status = value;
        var ev = this.get_events().getHandler('statusChanged');
        if (ev) ev (this, Sys.EventArgs.Empty);
    },
    
    get_score : function () {
        return this.group.get_score();
    },
    
    exerciseStatusChanged : function (sender, eventArgs) {
        if (eventArgs._propertyName != 'exerciseStatus') return;
        var st = this.group.exerciseStatus;
        if (st == S4N.ExerciseStatus.Normal) {
            this.set_status (S4N.EvalControlStatus.DoEval);
        } else if (st == S4N.ExerciseStatus.Evaluated) {
            if (this.allowReset) this.set_status (S4N.EvalControlStatus.DoReset);
            else this.set_status (S4N.EvalControlStatus.Disabled);
        }
    },

    doClick : function (ev) {
        var data = $page().data;
        var st = this.group.exerciseStatus;
        if (st == S4N.ExerciseStatus.Normal) {
            this.group.provideData (data);
            this.group.acceptData (S4N.ExerciseStatus.Evaluated, data);
        } else if (st == S4N.ExerciseStatus.Evaluated && this.allowReset) {
            this.group.resetData (data);
            this.group.acceptData (S4N.ExerciseStatus.Normal, data);
        }
        ev.stopPropagation();
    }
};
S4N.EvalControl.registerClass('S4N.EvalControl', Sys.UI.Control);


Type.registerNamespace('S4N');

var $CourseMan = null;

/*********** ENUM Cst, odpovida LMScormLib.CourseTreeType ***********/
S4N.Cst = function () { throw Error.notImplemented(); };
S4N.Cst.prototype = {
  no: 0,
  content: 1, //Obsah kurzu
  run: 2, //spusteni kurzu
  result: 3, //vysledky kurzu
  setStart: 4 //obsah kurzu s moznosti rucne nastavit zacatek kurzu
};
S4N.Cst.registerEnum('S4N.Cst');

/*********** Folder stromove struktury kurzu ***********/
S4N.CourseFolder = function (tree) {
  S4N.CourseFolder.initializeBase(this);
  this.tree = tree;
};

S4N.CourseFolder.prototype = {

  initialize: function () {
    S4N.CourseFolder.callBaseMethod(this, 'initialize');
  },

  refreshStatus: function () {
  },

  buildControl: function (parent) {
  },

  getEl: function (node, subId) {
    var n = 'n' + this.tree.id + '_' + subId;
    return node != null && node.id == n ? node : $get(n, node);
  }

};
S4N.CourseFolder.registerClass('S4N.CourseFolder', Sys.Component);

/*********** Stav kurzu vzhledem k testu ***********/
S4N.TestMode = function () { throw Error.notImplemented(); };
S4N.TestMode.prototype = {
  first: 0, //startovaci stav
  testHome: 1, //test bezi, je na home
  testForm: 2, //test bezi, je na dotazniku
  testTest: 3, //test bezi, je v testu (ID testu je v )
  testTestFinished: 4, //test dobehl, nabidka nastavit zacatek kurzu
  tested: 5 //test dobehl, je nastaven zacatek kurzu
};
S4N.TestMode.registerEnum('S4N.TestMode');

/*********** Persistentni informace o stavu kurzu ***********/
S4N.CourseInfo = function () {
  this.testUrl = null; //pro this.testMode=testTest: identifikace rozpracovaneho vstupniho test
  this.testMode = S4N.TestMode.first;
  this.firstIdOK = false; //this.firstId obsahuje validni zacatek kurzu (plati nejenom pro this.testMode==tested)
  this.firstId = null; //JSON Id prvniho modulu kurzu (moduly pred nim jsou removed) - vysledek nastaveni zacatku kurzu.
  this.tempFirstIdTitle = null; //pro porvrzeni testovaci kapitoly: jeji titulek
  this.tempFirstId = null; //pro porvrzeni testovaci kapitoly: jeji JSON id
  this.testHistory = {}; //this.testHistory[<jsonId testu>] obsahuje procentuelni vyhodnoceni každého z testů
  this.licenceAgreeOK = false; //uzivatel vyjadril souhlas s licencni smlouvou
};

S4N.CourseInfo.load = function (courseId) {
  var inf = ScormAPIEx == null ? null : ScormAPIEx.getData(null, 'courseinfo.json', 0, courseId);
  if ($isEmpty(courseId)) courseId = $config().courseId;
  return $isEmpty(inf) ? new S4N.CourseInfo() : $deserialize(inf); //persistentni cast CourseMan
};

S4N.CourseInfo.save = function (courseInfo, courseId) {
  if (courseInfo == null || ScormAPIEx == null) return;
  if ($isEmpty(courseId)) courseId = $config().courseId;
  ScormAPIEx.setData(null, 'courseinfo.json', $serialize(courseInfo), 0, courseId);
};

/*********** Spravce kurzu, root stromove struktury kurzu ***********/
S4N.CourseMan = function () {
  S4N.CourseMan.initializeBase(this);
  $CourseMan = this;
  this.type = S4N.Cst.no;
  this.body = null; //CourseTree body - tag, do ktereho se generuje CourseTree
  this.courseId = S4N.CourseIds.no;
  this.greenArrow = null; //tag se zelenou sipkou
  this.moduleIds = null; //array of JSON idu vsech kapitol kurzu (chybi-li this.tree a je potreba najit prvni modul).

  this.courseInfo = null; //persistentni S4N.CourseInfo
  //this.readOnly = false; //=true iff se pri UnLoad neuklada CourseInfo
  this.actModule = null;
  this.allModules = [];
  this.allControls = [this];
  this.firstIndex = -1; //zacatek kurzu (definovany indexem do this.allModules)
  this.hasExercise = false; //v TreeView s obsahem kurzu je videt zeznam cviceni
};

S4N.CourseMan.prototype = {

  initialize: function () {
    S4N.CourseMan.callBaseMethod(this, 'initialize');
    Sys.Application.add_load(Function.createDelegate(this, this.onLoad));
    Sys.Application.add_unload(Function.createDelegate(this, function () { this.onUnload(); }));
    this.hasExercise = this.type == S4N.Cst.content || this.type == S4N.Cst.setStart;
    if (this.greenArrow != null)
      $addHandler(this.greenArrow, 'click', Function.createDelegate(this, this.runCourse));
    $adjustAPI();
    if (this.courseId == S4N.CourseIds.no) this.courseId = $config().courseId;
  },

  set_tree: function (value) { this.tree = value; this.tree.control = this; }, get_tree: function () { return this.tree; },
  set_body: function (value) { this.body = value; }, get_body: function () { return this.body; },
  set_courseId: function (value) { this.courseId = value; }, get_courseId: function () { return this.courseId; },
  set_moduleIds: function (value) { this.moduleIds = value; }, get_moduleIds: function () { return this.moduleIds; },
  set_greenArrow: function (value) { this.greenArrow = value; }, get_greenArrow: function () { return this.greenArrow; },

  onLoad: function () {
    this.refresh(true);
  },

  onUnload: function () {
    S4N.CourseInfo.save(this.courseInfo, this.courseId);
  },

  refresh: function (first) {
    if (this.courseInfo == null) { //mj. priznak prvniho volani refreshStatus
      this.courseInfo = S4N.CourseInfo.load(this.courseId);
      //var inf = ScormAPIEx==null ? null : ScormAPIEx.getData(null,'courseinfo.json',0,this.courseId);
      //this.courseInfo = $isEmpty(inf) ? new S4N.CourseInfo () : $deserialize(inf); //persistentni cast CourseMan
      //Linearizace modules
      if (this.tree != null) S4N.CourseMan.registerModules(this.tree, this);
    }
    if (this.tree == null) return;
    //Nastaveni firstIndex
    if (this.courseInfo != null && this.courseInfo.firstId != null)
      for (var i = 0; i < this.allModules.length; i++)
        if (this.allModules[i].dataId == this.courseInfo.firstId) {
          this.firstIndex = i; break;
        }
    //Aktualizace Tree s pomoci getCourseData, obsahujici JSON se strucnymi informacemi o vsech modulech 
    //ve formatu {JSONToId(spaceId, globalId):value;...}
    this.actModule = null;
    if (this.tree != null) {
      this.finishTree(this.tree, ScormAPIEx == null ? null : $deserialize(ScormAPIEx.getCourseData(this.courseId)));
      //this.finishTree (this.tree, ScormAPIEx==null ? null : ScormAPIEx.getCourseData(this.courseId) );
      //Nalezeni prvniho modulu k probrani
      for (var i = 0; i < this.allModules.length; i++) {
        if (i < this.firstIndex) continue;
        var st = this.allModules[i].data;
        st = st != null ? st.st : S4N.ExerciseStatus.notAttempted;
        if (st == S4N.ExerciseStatus.Normal || st == S4N.ExerciseStatus.notAttempted) {
          this.actModule = this.allModules[i]; break;
        }
      }
    }
    //prvni vstup do stranky: adjustuj viditelne uzly
    if (first)
      if (this.actModule == null || this.hasExercise)
        S4N.CourseMan.adjustControl(this.tree, true, true);
      else {
        S4N.CourseMan.adjustControl(this.actModule, false, true);
        this.actModule.control.expand(true, true);
      }
    for (var i = 0; i < this.allControls.length; i++) this.allControls[i].refreshStatus();
  },

  resetModule: function (spaceId, globalId) {
    if (ScormAPIEx == null) return;
    ScormAPIEx.setModuleData(spaceId, globalId, '', '', this.courseId);
    this.refresh(false);
  },

  /*runTest : function () {
      this.getCourseInfo().testRunning = true;
      window.top.navigate (url);
  },*/

  runCourse: function () {
    var actId = null;
    if (this.tree != null) { //aktualni kapitola je v this.actModule
      actId = this.actModule == null ? null : this.actModule.dataId;
    } else { //aktualni kapitolu nutno zjistit z "getCourseData" a z posloupnosti IDu kapitol (this.)
      if (this.moduleIds == null || this.moduleIds.length <= 0) return;
      var shortData = ScormAPIEx == null ? null : $deserialize(ScormAPIEx.getCourseData(this.courseId));
      var mids = this.moduleIds;
      var firstIdReached = this.courseInfo.firstId == null ? true : false; //nejdrive je potreba dosahnout firstId, pak se teprve zjistuje status
      for (var i = 0; i < mids.length; i++) {
        if (!firstIdReached)
          if (mids[i] == this.courseInfo.firstId) firstIdReached = true;
        if (firstIdReached) {
          var dt = shortData == null ? null : shortData[mids[i]];
          if ($isEmpty(dt) || dt.st == S4N.ExerciseStatus.Normal || dt.st == S4N.ExerciseStatus.notAttempted) {
            actId = mids[i]; break;
          }
        }
      }
    }
    if (actId == null) { //kurz hotov, jdi na vysledkovou stanku
      $config().navigateCrs(window.top, this.courseId, 'home.htm');
    } else { //jdi na SpaceId, GlobalId
      var sp_gl = $JSONFromId(actId);
      $config().navigate(window.top, sp_gl.spaceId, sp_gl.globalId);
    }
  },

  expand: function (doExpand) { },

  isRemoved: function (node) {
    if (node.id < this.firstIndex) return true;
    if ($isEmpty(node.data)) return false;
    return (node.data.st == S4N.ExerciseStatus.removed);
  },

  finishTree: function (node, crsData) {
    if (node.isModule) {
      node.data = crsData == null ? null : crsData[node.dataId];
      if ($isEmpty(node.data)) node.data = null;
    } else {
      var removed = 0; var completed = 0; var incomplete = 0; var notAttempted = 0; var all = node.childs.length;
      //inicializace
      node.maxModules = 0; node.modules = 0; node.data.ms = 0; node.data.s = 0; node.data.bt = 0; node.data.et = 0; node.data.t = 0;
      for (var i = 0; i < all; i++) {
        var child = node.childs[i];
        child.parent = node;
        this.finishTree(child, crsData);
        if (this.isRemoved(child)) { removed += 1; continue; }
        if (!child.isModule) {
          node.maxModules += child.maxModules;
          node.modules += child.modules;
          node.data.ms += child.data.ms;
          node.data.s += child.data.s;
        } else {
          node.maxModules += 1;
          if ($isEmpty(child.data)) { notAttempted += 1; continue; }
          if (child.data.st == S4N.ExerciseStatus.Evaluated) {
            node.modules += 1;
            if (child.data.ms == 0) { //nevyhodnotitelne cviceni prispiva 1/1
              node.data.ms += 100; node.data.s += 100;
            } else {
              node.data.ms += child.data.ms; node.data.s += child.data.s;
            }
          }
        }
        switch (child.data.st) {
          case S4N.ExerciseStatus.Evaluated:
            completed += 1;
            if (child.data.bt != 0)
              if (node.data.bt == 0 || node.data.bt > child.data.bt) node.data.bt = child.data.bt;
            if (child.data.et > node.data.et) node.data.et = child.data.et;
            node.data.t += child.data.t;
            break;
          case S4N.ExerciseStatus.notAttempted: notAttempted += 1; continue;
          default: incomplete += 1; continue;
        }
      }
      if (all == removed) node.data.st = S4N.ExerciseStatus.removed;
      else if (all == removed + completed) node.data.st = S4N.ExerciseStatus.Evaluated;
      else if (all == removed + notAttempted) node.data.st = S4N.ExerciseStatus.notAttempted;
      else node.data.st = S4N.ExerciseStatus.Normal;
    }
  },

  action: function (typ, nd) {
    if (typ == 'start') {
      if (ScormAPIEx == null) return;
      while (!nd.isModule) nd = nd.childs[0];
      if (!confirm(CSLocalize('7e1cd46186014c21b971f869981dfff4', 'Opravdu chcete nastavit začátek kurzu na kapitolu') + ' "' + S4N.CourseMan.fullTitle(nd) + '"?')) return;
      this.courseInfo.firstId = nd.dataId;
      ScormAPIEx.setData(null, 'courseinfo.json', $serialize(this.courseInfo), 0, this.courseId);
    } else {
      if (ScormAPIEx == null) return;
      var sp_gl = $JSONFromId(nd.dataId);
      var dt = ScormAPIEx.LMSInitializeEx(sp_gl.spaceId, sp_gl.globalId);
      var md = (!$isEmpty(dt) ? $deserialize(dt) : new S4N.ModuleData());
      switch (typ) {
        case 'add':
          if (!confirm(CSLocalize('d831ae9ba2bc418382d361c2c29a3763', 'Opravdu chcete zařadit kapitolu zpátky do výuky?'))) return;
          md = null; dt = null;
          break;
        case 'remove':
          if (!confirm(CSLocalize('2fb0c828db9141ca9dcf0890e3256a51', 'Opravdu chcete vyřadit kapitolu z výuky?'))) return;
          md.pages = [];
          md.st = S4N.ExerciseStatus.removed;
          break;
        case 'reset':
          if (!confirm(CSLocalize('e931e33b05af468e93c874190465fa52', 'Opravdu chcete obnovit kapitolu do původního stavu tak, aby jste ji mohli projít znova? Obnovením přijdete o výsledky všech cvičení kapitoly.'))) return;
          md = null; dt = null;
          break;
      }
      if (md == null) {
        ScormAPIEx.LMSCommitEx(sp_gl.spaceId, sp_gl.globalId, null, null);
      } else {
        var pages = md.pages; md.pages = undefined;
        var dataShort = $serialize(md);
        md.pages = pages;
        dt = $serialize(md);
        ScormAPIEx.LMSCommitEx(sp_gl.spaceId, sp_gl.globalId, dt, dataShort);
      }
      Debug.$trace(S4N.Trace.ScormClient, 'S4N.CourseTreeNode.Action: ' + (dt == null ? '0' : dt.length));
    }
    this.refresh(false);
  }

};

S4N.CourseMan.registerModules = function (node, courseMan) {
  if (node.isModule) {
    courseMan.allModules[node.id] = node;
  } else {
    for (var i = 0; i < node.childs.length; i++) S4N.CourseMan.registerModules(node.childs[i], courseMan);
  }
};

S4N.CourseMan.adjustControl = function (node, incChild, adjustParent) {
  if (node == null) return;
  //parent chain
  if (adjustParent) S4N.CourseMan.adjustControl(node.parent, true, true);
  //self
  if (node.control == null) {
    var tp = eval('S4N.CourseTreeNode');
    node.control = new tp(node);
    Array.add($CourseMan.allControls, node.control);
    node.control.buildControl(node.parent.control);
    node.control.refreshStatus();
  }
  //childs of self
  if (incChild && !node.isModule)
    for (var i = 0; i < node.childs.length; i++) S4N.CourseMan.adjustControl(node.childs[i], false, false);
};

S4N.CourseMan.renameElements = function (el, id) {
  var elId = el.id;
  if (!$isEmpty(elId))
    el.id = elId.replace('xxx', id);
  for (var i = 0; i < el.childNodes.length; i++)
    S4N.CourseMan.renameElements(el.childNodes[i], id);
};

S4N.CourseMan.fullTitle = function (node) {
  var res = '';
  while (node != null) {
    if (res != '') res = ': ' + res;
    res = node.title + res;
    node = node.parent;
  }
  return res;
};

S4N.CourseMan.registerClass('S4N.CourseMan', S4N.CourseFolder);

/*********** spolecny predchudce:
- home stranek kurzu (framework/controls/course/CourseHome.js)
- testovacich stranek (napr. englishtest/TestEnter.js)
)
**************/
S4N.TestLib = function () {
  S4N.TestLib.initializeBase(this);
  this.firstId = '';
};

S4N.TestLib.prototype = {

  initialize: function () {
    S4N.TestLib.callBaseMethod(this, 'initialize');
  },

  onLoad: function () {
    S4N.TestLib.callBaseMethod(this, 'onLoad');
    var startCtrl = $get('TestHomeStart');
    if (startCtrl == null) return;
    var ci = this.courseInfo;
    switch (ci.testMode) {
      case S4N.TestMode.testHome:
        S4N.Sys.setCssStatus($get('TestHomeStart'), false, 'displayNone'); break;
      case S4N.TestMode.testForm:
      case S4N.TestMode.testTest:
        S4N.Sys.setCssStatus($get('TestHomeContinue'), false, 'displayNone'); break;
      case S4N.TestMode.testTestFinished:
        S4N.Sys.setCssStatus($get('TestHomeEnd'), false, 'displayNone');
        $get('StartTitle').innerText = ci.tempFirstIdTitle;
        break;
    }
  },

  testContinue: function () { //pokracovani ve vstupnim testu
    var ci = this.courseInfo;
    switch (ci.testMode) {
      case S4N.TestMode.testHome:
      case S4N.TestMode.testTestFinished:
        window.location.href = $config().testUrl('TestEnter.htm'); break;
      case S4N.TestMode.testForm:
        window.location.href = $config().testUrl('TestForm.htm'); break;
      case S4N.TestMode.testTest:
        window.location.href = $config().testUrl(ci.testUrl); break;
    }
  },

  setStartFirst: function () { //nastaveni zacatku kurzu na zacatek
    var ci = this.courseInfo;
    ci.testUrl = null;
    ci.testMode = S4N.TestMode.tested;
    ci.firstIdOK = true;
    ci.firstId = this.firstId;
    ci.testHistory = {};
    window.location.href = $config().courseUrl('home.htm');
  },

  runTest: function () { //nastaveni zacatku kurzu spustenim vstupniho testu
    var ci = this.courseInfo;
    ci.testMode = S4N.TestMode.testHome;
    ci.testHistory = {};
    window.location.href = $config().testUrl('TestEnter.htm');
  },

  cancelTest: function () { //zrusit vstupni test
    var ci = this.courseInfo;
    ci.testUrl = null;
    ci.testMode = S4N.TestMode.first;
    ci.testHistory = {};
    window.top.location.href = $config().courseUrl('home.htm');
  },

  cancelSetStart: function () { //zrusit nastaveni zacatku kurzu
    var ci = this.courseInfo;
    ci.testUrl = null;
    ci.testMode = S4N.TestMode.tested;
    ci.testHistory = {};
    window.location.href = $config().courseUrl('home.htm');
  },

  setStartAgain: function () { //nove nastaveni zacatku kurzu
    var ci = this.courseInfo;
    ci.testUrl = null;
    ci.testMode = S4N.TestMode.first;
    ci.testHistory = {};
    window.location.href = window.location.href;
  },

  runTestForm: function () {
    var ci = this.courseInfo;
    ci.testMode = S4N.TestMode.testForm;
    window.location.href = $config().testUrl('TestForm.htm');
  },

  setCourseStart: function () { //finalni nastaveni zacatku kurzu
    var ci = this.courseInfo;
    ci.testMode = S4N.TestMode.tested;
    ci.firstId = ci.tempFirstId;
    ci.firstIdOK = true;
    ci.testUrl = null; ci.tempFirstId = null; ci.tempFirstIdTitle = null;
    var url;
    if (false) {

    } else
      url = $config().courseUrl('home.htm');
    window.location.href = url;
  }
};
S4N.TestLib.setLevel = function (ci, levelId) {
  alert(CSLocalize('43073e32fb5c4ee08d247e501c45a3df', 'Gratulujeme k ukončení vstupního testu.'));
  ci.testMode = S4N.TestMode.testTestFinished;
  ci.tempFirstIdTitle = S4N.TestEnter.titles[levelId];
  ci.tempFirstId = $JSONToId(S4N.TestEnter.spaceIds[levelId], S4N.TestEnter.globalIds[levelId]);
  window.top.location.href = $config().testUrl('TestEnter.htm');
};

S4N.TestLib.nextTestNoAlert = function (ci, testId) {
  ci.testUrl = S4N.TestEnter.testUrl[testId];
  ci.testMode = S4N.TestMode.testTest;
  ScormAPIEx.LMSCommitEx($config().testSpaceId(), ci.testUrl, null, null);
  window.top.location.href = $config().testUrl(ci.testUrl);
};

S4N.TestLib.nextTest = function (ci, testId) {
  alert(CSLocalize('a988706addc34fb9b23bb8ccde488bec', 'Pro přesnější zjištění úrovně vašich znalostí bude dále spuštěn') + ' "' + S4N.TestEnter.testTitles[testId] + '"');
  S4N.TestLib.nextTestNoAlert(ci, testId);
};

S4N.TestLib.registerClass('S4N.TestLib', S4N.CourseMan);


var gf_nt = [
'1040','A',
'1072','a',
'1042','B',
'1074','b',
'1045','E',
'1077','e',
'1050','K',
'1082','k',
'1052','M',
'1084','m',
'1053','H',
'1085','h',
'1054','O',
'1086','o',
'1056','P',
'1088','p',
'1057','C',
'1089','c',
'1058','T',
'1090','t',
'1059','Y',
'1091','y',
'1061','X',
'1093','x',
'1105','ë',
'161','!',
'160',' ',
'191','?',
'241','ň',
'39','’',
'96','’',
'180','’',
'733','"', 
'8216','’',
'8219','’',
'8220','"',
'8221','"',
'8222','"',
'8242','’',
'8243','"'
];
var gf_normTable = null;
gf_NormalizeString = function (s) {
    if ($isEmpty(s)) return s;
    if (gf_normTable==null) {
        gf_normTable = [];
        for (var i=1; i<gf_nt.length; i+=2)
            gf_normTable[parseInt(gf_nt[i-1])] = gf_nt[i];
    }
    for (var i=0; i<s.length; i++) {
        var nw = gf_normTable[s.charCodeAt(i)];
        if (typeof(nw)!='undefined') s = s.substring (0,i) + nw + s.substring (i+1);
    }
    return s;
};


/*********** ENUM GapFillEvalMode ***********/
S4N.GapFillEvalMode = function() {
    throw Error.notImplemented();
};
S4N.GapFillEvalMode.prototype = {
    no: 0,
    ignoreCase: 1,
    caseSensitive: 2,
    intelligent: 3
};
S4N.GapFillEvalMode.registerEnum('S4N.GapFillEvalMode');

/*********** CONTROL GapFill ***********/
S4N.GapFill = function (element) {
    S4N.GapFill.initializeBase(this, [element]);
    this.initValue = '';
    this.dragTarget = false;
    this.correct;
    this.evalMode = S4N.GapFillEvalMode.ignoreCase;
    this.isMulti = false;
    this.inline = true;
    this.isFake = false; //pro classification: pridany gapfill
    this.example = false; //priklad: nevyhodnocovat
};

S4N.GapFill.prototype = {

    initialize : function() {
        S4N.GapFill.callBaseMethod(this, 'initialize');
        this.isMulti = typeof (this.correct)=='object';
        //init hodnota a correct hodnota musi odpovidat
        if (this.example)
            this.correct = this.initValue;
        $addHandler(this._element,'click',Function.createDelegate(this, this.doClick));
    },
    
    set_correct : function (value) { this.correct = value; },
    get_correct : function (value) { return this.correct; },
    add_getValue : function (handler) {this.get_events().addHandler('getValue', handler); },
    add_acceptData : function (handler) {this.get_events().addHandler('acceptData', handler); },
    
    doClick : function (ev) {
        ev.stopPropagation();
    },
    
    get_dataValue : function (data) {
        var d = data[this.get_id()];
        return $isEmpty(d, true) ? this.initValue : d; 
    },
    
    get_value : function () {
        var ev = this.get_events().getHandler('getValue'); if (!ev) return;
        var arg = new S4N.AcceptDataArgs();
        ev (this, arg);
        return S4N.Sys.textFromHtml (arg.data).trim();
    },
    
    get_dragValue: function () {
        return this.get_value (); 
    },
    
    set_dragValue: function (value) {
        var ev = this.get_events().getHandler('acceptData'); if (!ev) return;
        ev (this, new S4N.AcceptDataArgs(S4N.ExerciseStatus.Normal, value));
    },
    
    resetData : function (data) {
        data[this.get_id()] = undefined;
    },
    
    get_score : function () { 
        if (this.example) return null;
        return S4N.CreateScore (this.isCorrect() ? 1 : 0, 1); 
    },
    
    isCorrect : function () {
        if (this.example) return null;
        var value = gf_NormalizeString (this.get_value ());
        if (this.isMulti) {
            switch (this.evalMode) {
                case S4N.GapFillEvalMode.intelligent: 
                case S4N.GapFillEvalMode.no: 
                case S4N.GapFillEvalMode.ignoreCase: 
                    for (var i=0; i<this.correct.length; i++)
                        if (gf_NormalizeString(this.correct[i]).toLowerCase() == value.toLowerCase()) return true;
                    return false;
                case S4N.GapFillEvalMode.caseSensitive:
                    for (var i=0; i<this.correct.length; i++)
                        if (gf_NormalizeString(this.correct[i]) == value) return true;
                    return false;
            }
        } else {
            switch (this.evalMode) {
                case S4N.GapFillEvalMode.intelligent:
                case S4N.GapFillEvalMode.no:
                case S4N.GapFillEvalMode.ignoreCase: return (gf_NormalizeString(this.correct).toLowerCase() == value.toLowerCase());
                case S4N.GapFillEvalMode.caseSensitive: return (gf_NormalizeString(this.correct) == value);
          }
        }
    },
    
    correctHTML : function () {
        return this.isMulti ? this.correct[0] : this.correct;
        //return _evalBehavior==null ? "" : _evalBehavior.correctHTML (this.get_value ());
    },
    
    provideData : function (data) {
        data[this.get_id()] = this.get_value ();
    },
    
    doAcceptData : function (exSt, data) {
        var ev = this.get_events().getHandler('acceptData'); if (!ev) return;
        var arg = new S4N.AcceptDataArgs(exSt, this.get_dataValue(data));
        ev (this, arg);
    }
};
S4N.GapFill.registerClass('S4N.GapFill', S4N.Control, S4N.IScoreProvider);

/*********** CONTROL GapFillSet ***********/
S4N.GapFillSet = function () {
    S4N.GapFillSet.initializeBase(this);
    this.corrects = [];
    this.correctUses = [];
    this.evalLen = 0;
};    
S4N.GapFillSet.prototype = {  
  
    initialize : function() {
        S4N.GapFillSet.callBaseMethod(this, 'initialize');
        var gapFills = this.get_scoreProviders();
        for (var i=0; i<gapFills.length; i++) {
            var gp = gapFills[i];
            if (!gp.isFake) this.evalLen += 1; 
            $assert (!gp.isMulti, 'Error');
            var c = gp.correct; if (c == '') continue;
            Array.add(this.corrects, c);
            //Array.add(this.corrects, gf_NormalizeString(c));
            Array.add (this.correctUses, false);        
        }
    },
    
    evalSet : function () {
        var _gapFills = this.get_scoreProviders();
        for (var i=0; i<this.correctUses.length; i++) this.correctUses[i] = false;
        //naplneni spravnych gap fills, oznaceni spatnych
        var bad = [];
        for (var i=0; i<_gapFills.length; i++) {
            var c = gf_NormalizeString(_gapFills[i].get_value()).toLowerCase();
            var ok = false;
            for (var j=0; j<this.corrects.length; j++) {
                if (this.correctUses[j]) continue;
                //if ($isEmpty(this.corrects[j]) || c != this.corrects[j].toLowerCase()) continue;
                if ($isEmpty(this.corrects[j]) || c != gf_NormalizeString(this.corrects[j]).toLowerCase()) continue;
                this.correctUses[j] = true;
                _gapFills[i].correct = this.corrects[j];
                ok = true;
            }
            if (!ok) Array.add (bad, _gapFills[i]);
        }
        //vyuziti zbylych gap fills
        var wrongNum = 0;
        for (var i=0; i<bad.length; i++) {
            var ok = false;
            for (var j=0; j<this.corrects.length; j++) {
                if (this.correctUses[j]) continue;
                bad[i].correct = this.corrects[j];
                this.correctUses[j] = true;
                ok = true;
                break;
            }
            if (!ok) bad[i].correct = '';
            if (!bad[i].isCorrect()) wrongNum++;
        }
        return wrongNum;
    },

    resetData : function (data) {
        S4N.GapFillSet.callBaseMethod(this, 'resetData', [data]);
    },
    
    get_score : function () {
        //var _gapFills = this.get_scoreProviders();
        //var len = _gapFills.length;
        var len = this.evalLen;
        var wrong = this.evalSet(); if (wrong>len) wrong = len;
        return S4N.CreateScore (len-wrong,len);
    },
    
    provideData : function (data) {
        var _gapFills = this.get_scoreProviders();
        for (var i = 0; i < _gapFills.length; i++) {
            _gapFills[i].provideData (data);
        }    
    },
    
    acceptData : function (exSt, data) {
        if (this.exerciseStatus == exSt) return;
        var _gapFills = this.get_scoreProviders();
        if (exSt==S4N.ExerciseStatus.Evaluated) {
            //1. pruchod: nastaveni hodnoty
            for (var i = 0; i < _gapFills.length; i++)
                _gapFills[i].acceptData (-1, data);
            //2. pruchod: preskladani hodnot mnozinovym algoritmem
            this.evalSet();
        }
        //3. pruchod: nastaveni stavu
        for (var i = 0; i < _gapFills.length; i++)
            _gapFills[i].acceptData (exSt, data);
        this.exerciseStatus = exSt;
    }
    
};
S4N.GapFillSet.registerClass('S4N.GapFillSet', S4N.EvalGroup, S4N.IScoreProvider);

/*********** CONTROL CrossWord ***********/
S4N.CrossWord = function (element) {
    S4N.CrossWord.initializeBase(this, [element]);
    this.correct = '';
};   

S4N.CrossWord.prototype = {

    initialize : function() {
        S4N.CrossWord.callBaseMethod(this, 'initialize');
    },
    add_acceptData : function (handler) {this.get_events().addHandler('acceptData', handler); },
    
    provideData: function(data) { 
        data[this.get_id()] = this._element.value;
    },
    doAcceptData: function(exSt, data) { 
        var ev = this.get_events().getHandler('acceptData'); if (!ev) return;
        var dt = data[this.get_id()];
        if ($isEmpty(dt)) dt = '';
        var arg = new S4N.AcceptDataArgs(exSt, dt);
        ev (this, arg);
    }, 
    resetData: function(data) { 
        data[this.get_id()] = undefined;
    },
    isCorrect : function () {
        return (this._element.value.toLowerCase()==this.correct.toLowerCase());
    }
    
};
S4N.CrossWord.registerClass('S4N.CrossWord', S4N.Control, S4N.IScoreProvider);
    

//*********** EVENT ARG  SourceDisabledArg ***********/
S4N.SourceDisabledArg = function (disable) {
  S4N.SourceDisabledArg.initializeBase(this);
  this.disable = disable;
};
S4N.SourceDisabledArg.registerClass('S4N.SourceDisabledArg', Sys.EventArgs);

/**/
S4N.DragSourceGroup = function () {
  S4N.DragSourceGroup.initializeBase(this);

  this.members = []; //prvky seznamy DAD objektu (S4N.DragSourceBehavior)
  this.mode = AjaxControlToolkit.DragMode.Copy; //copy x move
  this.dragTemplate = null;
};

S4N.DragSourceGroup.prototype = {

  initialize: function () {
    S4N.DragSourceGroup.callBaseMethod(this, 'initialize');
    $addHandler(document.body, 'selectstart', Function.createDelegate(this, this.onSelectStart));
    //S4N.DragSourceBehavior k prvkum drag source
    for (var i = 0; i < this.members.length; i++) {
      this.members[i] = new S4N.DragSourceBehavior(this.members[i], this, i, null);
      this.members[i].initialize();
    }
  },

  get_members: function () { return members; },
  set_members: function (value) { this.members = value; },

  get_dragTemplate: function () { return this.dragTemplate; },
  set_dragTemplate: function (value) { this.dragTemplate = value; },

  add_sourceDisabled: function (handler) { this.get_events().addHandler('sourceDisabled', handler); }, //disabled pouziteho drag item
  add_targetFullChange: function (handler) { this.get_events().addHandler('targetFullChange', handler); }, //zmena vzhledu gapfillu po Drop
  add_canDrop: function (handler) { this.get_events().addHandler('canDrop', handler); }, //zmena drag efekt elementu po najeti na target

  onCanDrop: function (dragSource, value) {
    var ev = this.get_events().getHandler('canDrop'); if (ev) ev(dragSource, new S4N.BoolArg(value));
  },

  onSelectStart: function () {
    return false;
  },

  memberDisable: function (idx, disable) {
    if (this.mode == AjaxControlToolkit.DragMode.Copy) return;
    if ($isEmpty(disable)) disable = false;
    this.members[idx].disabled = disable;
    var ev = this.get_events().getHandler('sourceDisabled');
    if (ev) ev(this.members[idx], new S4N.SourceDisabledArg(disable));
  }

};
S4N.DragSourceGroup.registerClass('S4N.DragSourceGroup', Sys.Component);


S4N.DropTargetBehavior = function (element) {
  S4N.DropTargetBehavior.initializeBase(this, [element]);

  this.group = null; //S4N.DragSourceGroup
  this.attachedSource = null; //S4N.DragSourceBehavior: DropTargetBehavior je zaroven dragsource. Pro isTrash je null.
  //this.isTrash = false; //drag target k body tagu pro realizaci Trash
};

S4N.DropTargetBehavior.prototype = {

  initialize: function () {
    S4N.DropTargetBehavior.callBaseMethod(this, 'initialize');
    AjaxControlToolkit.DragDropManager.registerDropTarget(this);
    this.attachedSource = new S4N.DragSourceBehavior(this._element, this.group, -1, this);
    this.attachedSource.initialize();
    var root = $evalRoot();
    if (root != null) root.addScoreProvider(this);
  },

  get_owner: function () { return this.group; },
  set_owner: function (value) { this.group = value; },

  // IDropTarget members.
  get_dropTargetElement: function () { return this._element; },

  adjustEdit: function (attachedSource, idx) {
    if (attachedSource == null) return;
    attachedSource._element.control.set_dragValue(idx < 0 ? '' : $innerText(this.group.members[idx]._element));
    attachedSource.ownerIdx = idx;
    var ev = this.group.get_events().getHandler('targetFullChange');
    if (ev) ev(attachedSource, new S4N.BoolArg(idx >= 0));
  },

  drop: function (dragMode, type, dragSource) {
    //draguji do plneho GapFillu
    if (this.attachedSource.ownerIdx >= 0)
      this.group.memberDisable(this.attachedSource.ownerIdx, false); //dragSource, odpovidajici staremu obsahu gapfillu, dej enabled
    //napln edit
    this.adjustEdit(
      this.attachedSource,
      dragSource.ownerIdx);
    //aktualizuj zdroj dragovani
    if (dragSource.target == null)
      this.group.memberDisable(dragSource.ownerIdx, true); //nedraguji attachedSource, dragSource dej disable
    else
      this.adjustEdit(dragSource, -1); //draguji attachedSource, zdrojovy edit dej prazdny
  },

  canDrop: function (dragMode, dataType, dragSource) {
    return (dragSource != null && dragSource.ownerIdx != this.attachedSource.ownerIdx && dataType == this.group.get_id());
  },

  onDragEnterTarget: function (dragMode, type, dragSource) {
    //data je 4N.UI.DragSourceBehavior
    if (!this.canDrop(dragMode, type, dragSource)) return;
    this.group.onCanDrop(dragSource, true);
  },

  onDragLeaveTarget: function (dragMode, type, dragSource) {
    this.group.onCanDrop(dragSource, false);
  },

  onDragInTarget: function (dragMode, type, dragSource) {
  },

  //IScoreProvider members
  resetData: function (data) {
    data[this.get_id()] = undefined;
  },
  get_score: function () {
    return null;
  },
  provideData: function (data) {
    //pamatuje si ID drag source
    if (this.attachedSource.ownerIdx < 0) { data[this.get_id()] = undefined; return; }
    data[this.get_id()] = this.group.members[this.attachedSource.ownerIdx].get_id();
  },
  acceptData: function (exSt, data) {
    //Dle ID drag source nalezni jeho ownerIdx
    var srcId = data[this.get_id()];
    if ($isEmpty(srcId)) { this.attachedSource.ownerIdx = -1; return; }
    for (var i = 0; i < this.group.members.length; i++) {
      var mem = this.group.members[i];
      if (mem.get_id() == srcId) {
        this.attachedSource.ownerIdx = mem.ownerIdx; break;
      }
    }
  }

};
S4N.DropTargetBehavior.registerClass('S4N.DropTargetBehavior', Sys.UI.Behavior, AjaxControlToolkit.IDropTarget, S4N.IScoreProvider);

S4N.DragSourceBehavior = function (element, group, ownerIdx, target) {
  S4N.DragSourceBehavior.initializeBase(this, [element]);
  this.group = group; //S4N.DragSourceGroup
  this.ownerIdx = ownerIdx; //Index v DragSourceGroup.members. Pro target!=null je -1 (je-li target prazdny) nebo index prvku, odkud jsem dragoval.
  this.target = target; //Drag Source je pripojen k S4N.DropTargetBehavior (kvuli moznosti Drag UnDo)
  this.disabled = false; //pro Move scenar: kontrolka je droped, neni ji tedy mozno dragovat
  this.itemTemplateInstance = null; //clone dragovane kontrolky
};

S4N.DragSourceBehavior.prototype = {

  initialize: function () {
    S4N.DragSourceBehavior.callBaseMethod(this, 'initialize');
    $addHandler(this._element, "mousedown", Function.createDelegate(this, this.mouseDownHandler));
    if (this.target == null && this.group.mode == AjaxControlToolkit.DragMode.Move) { //move dragsource si potrebuje pamatovat disable
      var root = $evalRoot();
      if (root != null) root.addScoreProvider(this);
    }
  },

  mouseDownHandler: function (ev) {
    if (this.ownerIdx < 0 || this.disabled || $evalRoot().exerciseStatus != S4N.ExerciseStatus.Normal) return;
    window._event = ev;
    var el = this._element;
    //clone template
    if (this.itemTemplateInstance == null) {
      this.itemTemplateInstance = this.group.dragTemplate.cloneNode(true);
      this.itemTemplateInstance.innerHTML = this.target != null ? this._element.control.get_dragValue() : this._element.innerHTML;
    } else {
      this.group.onCanDrop(this, false);
    }
    document.body.appendChild(this.itemTemplateInstance);
    //template position
    var dadMan = AjaxControlToolkit.DragDropManager._getInstance();
    var location = { x: ev.clientX + 10, y: ev.clientY - 10 };
    var scrollOffset = dadMan.getScrollOffset(document.body, true);
    location = dadMan.addPoints(location, scrollOffset);
    Sys.UI.DomElement.setLocation(this.itemTemplateInstance, location.x, location.y);
    //prevent default
    ev.preventDefault();
    //start drag
    AjaxControlToolkit.DragDropManager.startDragDrop(this, this.itemTemplateInstance, null);
  },

  // IDragSource members.
  get_dragDataType: function () {
    return this.group.get_id();
  },
  getDragData: function () {
    return this;
  },
  get_dragMode: function () {
    return this.group.mode;
  },
  onDragStart: function () {
  },
  onDrag: function () {
  },
  onDragEnd: function (canceled) {
    if (this.itemTemplateInstance.parentNode == null) return;
    this.itemTemplateInstance.parentNode.removeChild(this.itemTemplateInstance);
    if (!canceled || this.target == null) return;
    //Trash:
    this.group.memberDisable(this.ownerIdx, false); //prislusny dragSource dej enable
    this.target.adjustEdit(this, -1); //edit dej prazdny
  },
  get_id: function () {
    return this._element.id;
  },
  //IScoreProvider members
  resetData: function (data) {
    data[this.get_id()] = undefined;
  },
  get_score: function () {
    return null;
  },
  provideData: function (data) {
    data[this.get_id()] = this.disabled;
  },
  acceptData: function (exSt, data) {
    if (exSt != S4N.ExerciseStatus.Normal)
      this.group.memberDisable(this.ownerIdx, true); //nastav disable
    else
      this.group.memberDisable(this.ownerIdx, data[this.get_id()]); //nastav disable
  }

};
S4N.DragSourceBehavior.registerClass('S4N.DragSourceBehavior', Sys.UI.Behavior, AjaxControlToolkit.IDragSource, S4N.IScoreProvider);



S4N.HideTextMark = function (element) {
    S4N.HideTextMark.initializeBase(this, [element]);
    
    this.hideId = null;
    this.words = [];
    this.marks = [];
    this.marksText = null;
};   

S4N.HideTextMark.prototype = {
    
    initialize : function() {
        S4N.HideTextMark.callBaseMethod(this, 'initialize');
        
        $addHandler(this._element, 'click', Function.createDelegate(this, this.doClick));
        if (this.marksText!=null) {
            for (var i=0; i<this.marksText.length; i++) {
                this.marks[i] = $find(this.marksText[i]);
            }
        }
        if (this.hideId!=null) {
          var childs = S4N.Sys.DocumentAll ();
          for (var i=0; i<childs.length; i++) {
              if (childs[i].getAttribute('s4n_hideId')==this.hideId)
                  Array.add (this.words,childs[i]);
          }
        }

        var grp = $evalRoot(); if (grp==null) return;
        grp.get_events().addHandler("propertyChanged", Function.createDelegate(this, this.exerciseStatusChanged));
    },
    
    set_hideId : function (value) { this.hideId = value; },
    get_marks : function () { return this.marks; },
    set_marks : function (value) { this.marksText = value; },
    
    exerciseStatusChanged : function (sender, eventArgs) {
        if (eventArgs._propertyName != 'exerciseStatus') return;
        this.setVisible (sender.exerciseStatus==S4N.ExerciseStatus.Evaluated);
    },
    
    doClick : function (ev) {
        ev.stopPropagation();
        this.toggleVisible();
    },
    
    getVisible : function () {
        if (this.words.length!=0)
            return !Sys.UI.DomElement.containsCssClass(this.words[0], 'htHidden');
        else if (this.marks.length!=0)
            return this.marks[0].getVisible();
        else
            return false;
    },
    setVisible : function (visible) {
        for (var i=0; i<this.words.length; i++) {
            S4N.Sys.setCssStatus (this.words[i], !visible, 'htHidden');
            //S4N.Sys.setCssStatus (this.words[i].childNodes[0], visible, 'visible', !visible, 'visibleHidden');
        }
        for (var i=0; i<this.marks.length; i++) {
            this.marks[i].setVisible(visible);
        }
    },
    toggleVisible : function () {
        var visible = this.getVisible();
        this.setVisible (!visible);
    }
};
S4N.HideTextMark.registerClass('S4N.HideTextMark', S4N.Control);

function hc_VisibleChanged (sender, eventArgs) {
    var visible = eventArgs.value;
    S4N.Sys.setCssStatus (sender._element, visible, 'hcStateOpen', !visible, 'hcStateClosed');
};

snd_sentenceFocus = function (sender, arg) {
    var markCtrl = sender.get_control('Mark', true); 
    if (markCtrl!=null) 
        S4N.Sys.setCssStatus (markCtrl, arg.value, 'sdMarkOn', !arg.value, 'sdMark');
    markCtrl = sender.get_control('Pronunc', true);
    if (markCtrl != null)
        S4N.Sys.setCssStatus(markCtrl, arg.value, 'sdPronuncMarkOn', !arg.value, 'sdPronuncMark');
    S4N.Sys.setCssStatus(sender._element, arg.value, 'sdSentencePlaying');
};

snd_markFocus = function (sender, arg) {
    S4N.Sys.setCssStatus (sender._element, arg.value, 'sdMarkBigOn', !arg.value, 'sdMarkBig'); 
};
function gf_GetValue (sender, eventArgs) {
    eventArgs.data = sender.get_control('Input').value;
};

function gf_AdjustText (val, emptyNbsp) {
  if (val==null || typeof(val)=='undefined' || val=='') return emptyNbsp ? '&nbsp;' : '';
  return val;
};

function gf_Refresh (tags) {
  //FireFox hack: jinak se spatne aktualizuje sirka divu
  if (tags.ul.style.position=='relative')
    tags.ul.style.position = '';
  else 
    tags.ul.style.position = 'relative'
};

function gf_DisplayAll (tags, l1, l2, l3) {
  gf_Display (tags.line1, l1);  
  gf_Display (tags.line2, l2);  
  gf_Display (tags.line3, l3);  
};

function gf_Display (el, visible) {
  el.style.display = visible ? '' : 'none';
};

/*function gf_Content2 (tags, value, strike) {
  tags.cont2.innerHTML = gf_AdjustText (value, true);
  //S4N.Sys.setCssStatus (tags.cont2, strike, 'evaStrike');
};*/

//mode: 0..dragtarget, 1..start, 2..OK, 3..empty user, 4..not empty user, 5..preview mode
function gf_SetStatus (tags, mode, value1, value2) {
  switch (mode) {
    case 0: //drag target
    case 2: //po vyhodnoceni - OK
    //readonly normal text v line2
      tags.cont2.innerHTML = gf_AdjustText (value1, true);
      //gf_Content2 (tags, value1, false);
      gf_DisplayAll (tags, false, true, false);
      break;
    case 1: //start
    //gapfill s init hodnotou
      tags.input.value = gf_AdjustText (value1, false);
      gf_DisplayAll (tags, false, false, true);
      break;
    case 3: //po vyhodnoceni: wrong, prazdna odpoved uzivatele
    //cervene text v line1
      tags.cont1.innerHTML = gf_AdjustText (value2, true);
      gf_DisplayAll (tags, true, false, false);
      break;
    case 4: //po vyhodnoceni: wrong, neprazdna odpoved uzivatele
    //cervene text v line1, preskrtnuty text v line2
      tags.cont1.innerHTML = gf_AdjustText (value2, true);
      //gf_Content2 (tags, value1, true);
      tags.cont2.innerHTML = gf_AdjustText (value1, true);
      gf_DisplayAll (tags, true, true, false);
      break;
    case 5: //preview
      tags.input.value = gf_AdjustText (value1, false);
      gf_DisplayAll (tags, false, false, true);
      tags.input.readOnly = true;
      break;
  }
};

function gf_AcceptData (sender, eventArgs) {
    var st = eventArgs.exerciseStatus; var data = eventArgs.data.replace (/(&nbsp;)/g,' ');
    var tags = {
      'div': sender._element,
      'ul': sender.get_control('Table'),
      'line1': sender.get_control('1'),
      'cont1': sender.get_control('c1'),
      'line2': sender.get_control('2'),
      'cont2': sender.get_control('c2'),
      'line3': sender.get_control('3'),
      'input': sender.get_control('Input'),
      'ffHack': sender.inline && Sys.Browser.agent == Sys.Browser.Firefox
    }
    var isDragTarget = sender.dragTarget;
    tags.input.value = data; //nosic dat bez ohledu na isDragTarget
    switch (st) {
        case S4N.ExerciseStatus.Preview:
            S4N.Sys.setCssStatus (tags.ul, false, 'evaCorrect', false, 'evaIncorrect', false, 'evaEmpty');
            gf_SetStatus (tags, 5, data);
        case S4N.ExerciseStatus.Normal:
            S4N.Sys.setCssStatus (tags.ul, false, 'evaCorrect', false, 'evaIncorrect', false, 'evaEmpty');
            gf_SetStatus (tags, isDragTarget ? 0 : 1, data);
            break;
        case S4N.ExerciseStatus.Evaluated:
            var correctData = sender.correctHTML (); 
            var empty = $isEmpty(data);
            var isCorrect = sender.example ? true : sender.isCorrect();
            var mode;
            if (isCorrect) mode = 2; else if (empty) mode = 3; else mode = 4;
            S4N.Sys.setCssStatus (tags.ul, false, 'dtDropped', false, 'dtItem', isCorrect, 'evaCorrect', !isCorrect && !empty, 'evaIncorrect', !isCorrect && empty, 'evaEmpty');
            gf_SetStatus (tags, mode, data, correctData);
            break;
    }
    if (tags.ffHack) gf_Refresh (tags);
};

function evm_ScoreText (sender) {
    var score = sender.group.get_score();
    if (score==null || score[1]==0) return '0%';
    var sc = score[0]/score[1]*100;
    return Math.floor (sc).toString() + '%';
};
function evm_Status (sender, eventArgs) {
    var st = sender.status;
    var el = sender._element;
    var normalCtrl = $getEx(sender, 'Normal'); var evaluatedCtrl = $getEx(sender, 'Evaluated');
    switch (st) {
        case S4N.EvalControlStatus.DoEval:
            S4N.Sys.setCssStatus (evaluatedCtrl, true, 'displayNone', false, 'displayInline');
            S4N.Sys.setCssStatus (normalCtrl, false, 'displayNone', true, 'displayInline');
            S4N.Sys.setCssStatus (el, true, 'emEvaluate', false, 'emResult', false, 'emAgain');
            break;
        case S4N.EvalControlStatus.Disabled:
        case S4N.EvalControlStatus.DoReset:
            var textCtrl = $getEx(sender, 'Text'); var widthCtrl = $getEx(sender, 'Width');
            S4N.Sys.setCssStatus (evaluatedCtrl, false, 'displayNone', true, 'displayInline');
            S4N.Sys.setCssStatus (normalCtrl, true, 'displayNone', false, 'displayInline');
            S4N.Sys.setCssStatus (el, false, 'emEvaluate', true, 'emResult', st==S4N.EvalControlStatus.DoReset, 'emAgain');
            var txt = evm_ScoreText (sender);
            textCtrl.innerHTML = txt;
            widthCtrl.style.width = txt;
            break;
    }
};


ord_canDrop = function (dragSource, arg) {
    S4N.Sys.setCssStatus (dragSource.itemTemplateInstance, arg.value, 'dsDraggedCanDrop'); 
};

ord_dragStatusChanged = function (sender, arg) {
    var isInsert = arg.status == S4N.OrderStatus.enterTarget;
    S4N.Sys.setCssStatus (arg.item._element, isInsert, 'ordInsertBetween');
};

ordw_acceptData  = function (sender, arg) {
    var trEval = sender.get_control('Eval',false); 
    var isEval = arg.exerciseStatus==S4N.ExerciseStatus.Evaluated;
    S4N.Sys.setCssStatus (trEval, !isEval, 'displayNone');
    S4N.Sys.setCssStatus (sender._element, isEval, 'displayNone');
    if (isEval) {
        var trOk = sender.get_control('Ok',false); var trUser = sender.get_control('User',false); 
        var trOkText = sender.get_control('OkText'); var trUserText = sender.get_control('UserText');
        var okText = sender.get_sentenceText (true); var userText = sender.get_sentenceText (false);
        var isCorrect = okText==userText;
        trOkText.innerHTML = okText;
        S4N.Sys.setCssStatus (trEval, isCorrect, 'evaCorrect', !isCorrect, 'evaIncorrect');
        S4N.Sys.setCssStatus (trOk, isCorrect, 'displayNone');
        trUserText.innerHTML = userText;
    }
};

ords_acceptData  = function (sender, arg) {
    var isEval = arg.exerciseStatus==S4N.ExerciseStatus.Evaluated;
    for (var i=0; i<sender.items.length; i++) {
        var item = sender.items[i];
        //Not eval: uved do puvodniho stavu
        if (!isEval) {
            S4N.Sys.setCssStatus (item._element, false, 'evaCorrect', false, 'evaIncorrect', true, 'dsItem', false, 'dtItem');
            continue;                    
        }
        //priprava
        var okText = item.get_text (true); var userText = item.get_text (false);
        var isCorrect = okText==userText;
        S4N.Sys.setCssStatus (item._element, isCorrect, 'evaCorrect', !isCorrect, 'evaIncorrect', false, 'dsItem', true, 'dtItem');
        var idx = $getIdx (item._element.childNodes[0]); //pro vyhodnocovani: puvodni index itemu. Vyuzije se v S4N.ReorderList.isCorrect
        //nahrada Dragable obsahu:
        while (item._element.hasChildNodes()) item._element.removeChild ( item._element.childNodes[0]);
        var innerHtml = '';
        if (isCorrect) {
            innerHtml = '<div class="evaUserValue"><nobr>' + okText + '</nobr></div>';
        } else {
            innerHtml = '<div class="evaCorrectValue"><nobr>' + okText + '</nobr></div><div class="evaUserValue"><nobr class="evaStrike">' + userText + '</nobr></div>';
        }
        item._element.innerHTML = innerHtml;
        $setIdx(item._element.childNodes[0],idx); //PZ 20.6.08: ve firefox se neprenese idx z innerHTML do vlastnosti
    }
};

ordp_dragStatusChanged  = function (sender, arg) {
    if (arg.status==S4N.OrderStatus.drop)
        S4N.Sys.setCssStatus (arg.item._element.parentNode, true, 'ordPairingStateLine', false, 'ordPairingStateAvailable');
    else
        ord_dragStatusChanged (sender, arg);
};

ordp_acceptData  = function (sender, arg) {
    var isEval = arg.exerciseStatus==S4N.ExerciseStatus.Evaluated;
    if (isEval) {
        for (var i=0; i<sender.items.length; i++) {
            var item = sender.items[i];
            var divCtrl = item._element.childNodes[0]; //"div class=dsItem je jediny element v TD
            var okText = item.get_text (true); var userText = item.get_text (false);
            var isCorrect = okText==userText;
            var idx = $getIdx (item._element.childNodes[0]); //pro vyhodnocovani: puvodni index itemu. Vyuzije se v S4N.ReorderList.isCorrect
            //odstran vsechny elementy:
            while (item._element.hasChildNodes()) item._element.removeChild ( item._element.childNodes[0]);
            //pomoci innerHTML vloz nove, vyhodnocovaci:
            var innerHtml = '<div class="dtItem ' + (isCorrect ? 'evaCorrect' : 'evaIncorrect') + '">';
            if (isCorrect) {
                innerHtml += '<div class="evaUserValue"><nobr>' + okText + '</nobr></div>';
            } else {
                innerHtml += '<div class="evaCorrectValue"><nobr>' + okText + '</nobr></div><div class="evaUserValue"><nobr class="evaStrike">' + userText + '</nobr></div>';
            }
            innerHtml += '</div>';
            item._element.innerHTML = innerHtml;
            $setIdx(item._element.childNodes[0],idx); //PZ 20.6.08: ve firefox se neprenese idx z innerHTML do vlastnosti
        }
    }
    //nastav prostredni sloupec
    for (var i=0; i<sender.items.length; i++) 
        S4N.Sys.setCssStatus (sender.items[i]._element.parentNode, isEval, 'ordPairingStateLine', !isEval, 'ordPairingStateAvailable');
};

function chb_StatusChanged (sender, eventArgs) {
    var iconCtrl = sender.get_control('Icon'); 
    var isCheckItem = sender.type == S4N.CheckBoxType.CheckBox; //isCheckItem=true pak checkbox, jinak radiobutton
    switch (sender.checkStatus) {
        case S4N.CheckBoxStatus.Undefined:
            if (isCheckItem) S4N.Sys.setCssStatus (iconCtrl,
               false, 'selCBChecked', false, 'selCBUnchecked', false, 'selCBEvaChecked', false, 'selCBEvaUnchecked', true, 'selCBUndefined', false, 'selCBUndEvaUnchecked', false, 'selCBUndEvaChecked');
            break;
        case S4N.CheckBoxStatus.UndefinedChecked:
            if (isCheckItem) S4N.Sys.setCssStatus (iconCtrl,
               false, 'selCBChecked', false, 'selCBUnchecked', false, 'selCBEvaChecked', false, 'selCBEvaUnchecked', false, 'selCBUndefined', false, 'selCBUndEvaUnchecked', true, 'selCBUndEvaChecked');
            break;
        case S4N.CheckBoxStatus.UndefinedUnchecked:
            if (isCheckItem) S4N.Sys.setCssStatus (iconCtrl,
               false, 'selCBChecked', false, 'selCBUnchecked', false, 'selCBEvaChecked', false, 'selCBEvaUnchecked', false, 'selCBUndefined', true, 'selCBUndEvaUnchecked', false, 'selCBUndEvaChecked');
            break;
        case S4N.CheckBoxStatus.ReadOnly:
        case S4N.CheckBoxStatus.UncheckedOK:
        case S4N.CheckBoxStatus.Unchecked:
            if (isCheckItem) S4N.Sys.setCssStatus (iconCtrl,
               false, 'selCBChecked', true, 'selCBUnchecked', false, 'selCBEvaChecked', false, 'selCBEvaUnchecked', false, 'selCBUndefined', false, 'selCBUndEvaUnchecked', false, 'selCBUndEvaChecked');
            else S4N.Sys.setCssStatus (iconCtrl,
               false, 'selRBChecked', true, 'selRBUnchecked', false, 'selRBEvaChecked', false, 'selRBEvaUnchecked');
            break;
        case S4N.CheckBoxStatus.CheckedOK:
        case S4N.CheckBoxStatus.Checked:
            if (isCheckItem) S4N.Sys.setCssStatus (iconCtrl,
               true, 'selCBChecked', false, 'selCBUnchecked', false, 'selCBEvaChecked', false, 'selCBEvaUnchecked', false, 'selCBUndefined', false, 'selCBUndEvaUnchecked', false, 'selCBUndEvaChecked');
            else S4N.Sys.setCssStatus (iconCtrl,
               true, 'selRBChecked', false, 'selRBUnchecked', false, 'selRBEvaChecked', false, 'selRBEvaUnchecked');
            break;
        case S4N.CheckBoxStatus.UncheckedWrong:
            if (isCheckItem) S4N.Sys.setCssStatus (iconCtrl,
               false, 'selCBChecked', false, 'selCBUnchecked', false, 'selCBEvaChecked', true, 'selCBEvaUnchecked', false, 'selCBUndefined', false, 'selCBUndEvaUnchecked', false, 'selCBUndEvaChecked');
            else S4N.Sys.setCssStatus (iconCtrl,
               false, 'selRBChecked', false, 'selRBUnchecked', false, 'selRBEvaChecked', true, 'selRBEvaUnchecked');
            break;
        case S4N.CheckBoxStatus.CheckedWrong:
            if (isCheckItem) S4N.Sys.setCssStatus (iconCtrl,
               false, 'selCBChecked', false, 'selCBUnchecked', true, 'selCBEvaChecked', false, 'selCBEvaUnchecked', false, 'selCBUndefined', false, 'selCBUndEvaUnchecked', false, 'selCBUndEvaChecked');
            else S4N.Sys.setCssStatus (iconCtrl,
               false, 'selRBChecked', false, 'selRBUnchecked', true, 'selRBEvaChecked', false, 'selRBEvaUnchecked');
            break;
    }
};

function chbw_StatusChanged (sender, eventArgs) {
    var ctrl = sender._element;
    switch (sender.checkStatus) {
        case S4N.CheckBoxStatus.UndefinedUnchecked:
        case S4N.CheckBoxStatus.UndefinedChecked:
        case S4N.CheckBoxStatus.Undefined:
            break;
        case S4N.CheckBoxStatus.UncheckedOK:
        case S4N.CheckBoxStatus.Unchecked:
        case S4N.CheckBoxStatus.ReadOnly:
            S4N.Sys.setCssStatus (ctrl, true, 'selWordUnchecked', false, 'selWordChecked', false, 'selWordEvaUnchecked', false, 'selWordEvaChecked');
            break;
        case S4N.CheckBoxStatus.CheckedOK:
        case S4N.CheckBoxStatus.Checked:
            S4N.Sys.setCssStatus (ctrl, false, 'selWordUnchecked', true, 'selWordChecked', false, 'selWordEvaUnchecked', false, 'selWordEvaChecked');
            break;
        case S4N.CheckBoxStatus.UncheckedWrong:
            S4N.Sys.setCssStatus (ctrl, false, 'selWordUnchecked', false, 'selWordChecked', true, 'selWordEvaUnchecked', false, 'selWordEvaChecked');
            break;
        case S4N.CheckBoxStatus.CheckedWrong:
            S4N.Sys.setCssStatus (ctrl, false, 'selWordUnchecked', false, 'selWordChecked', false, 'selWordEvaUnchecked', true, 'selWordEvaChecked');
            break;
    }
};

function cw_AcceptData (sender, eventArgs) {
    var st = eventArgs.exerciseStatus; var data = eventArgs.data;
    var cellCtrl = sender.get_control('Cell');
    var textCtrl = sender._element; 
    var userCtrl = sender.get_control('User');  
    var correctCtrl = sender.get_control('Ok');  
    switch (st) {
        case S4N.ExerciseStatus.Normal:
        case S4N.ExerciseStatus.Preview:
            if (st==S4N.ExerciseStatus.Normal) textCtrl.value = data; 
            textCtrl.readOnly = st==S4N.ExerciseStatus.Preview;
            S4N.Sys.setCssStatus (textCtrl, false, 'displayNone');
            S4N.Sys.setCssStatus (userCtrl, true, 'displayNone'); 
            S4N.Sys.setCssStatus (correctCtrl, true, 'displayNone'); 
            S4N.Sys.setCssStatus (textCtrl, false, 'evaCorrect', false, 'evaEmpty', false, 'evaIncorrect'); 
            break;
        case S4N.ExerciseStatus.Evaluated:
            var userText = sender.get_control('UserText');
            userText.innerHTML = data;
            textCtrl.value = data;
            var empty = $isEmpty (data);
            correctCtrl.innerHTML = sender.correct;
            var isCorrect = sender.isCorrect();
            S4N.Sys.setCssStatus (textCtrl, true, 'displayNone');
            S4N.Sys.setCssStatus (userCtrl, false, 'displayNone'); 
            S4N.Sys.setCssStatus (correctCtrl, isCorrect, 'displayNone'); 
            S4N.Sys.setCssStatus (cellCtrl, isCorrect, 'evaCorrect', !isCorrect && empty, 'evaEmpty', !isCorrect && !empty, 'evaIncorrect'); 
            break;
    }
};

//Droped DragItem: set disable
gps_sourceDisabled = function (dragSource, arg) {
    S4N.Sys.setCssStatus (dragSource._element, arg.disable, 'dsUsed');
 };

gps_targetFullChange = function (attachedSource, arg) {
    //S4N.Sys.setCssStatus (attachedSource._element, arg.value, 'dtDropped');
};

gps_canDrop = function (dragSource, arg) {
    S4N.Sys.setCssStatus (dragSource.itemTemplateInstance, arg.value, 'dsDraggedCanDrop'); 
};

/// <reference path="../../../../../../../LMCom/rew/Web4/JsLib/JSD/JQuery.d.ts" />
/// <reference path="../../../../../../../LMCom/rew/Web4/JsLib/JS/GenLMComLib.ts" />
/// <reference path="../../../../../../../LMCom/rew/Web4/JsLib/JSD/Globalize.d.ts" />
/// <reference path="../../../../../../../LMCom/rew/Web4/JsLib/JS/Utils.ts" />
/// <reference path="new_slplayer.ts" />
var SLPlayer;
(function (SLPlayer) {
    var actFormat = "2";//format licence
    
    var LicencePlayerOptions = (function () {
        function LicencePlayerOptions() {
            SLPlayer.options = this;
        }
        return LicencePlayerOptions;
    })();
    SLPlayer.LicencePlayerOptions = LicencePlayerOptions;    
    ;
    SLPlayer.options;
    var LicHolder = (function () {
        function LicHolder() { }
        LicHolder.Eq = function Eq(lic, lic2) {
            return lic.LMS == lic2.LMS && lic.Lang == lic2.Lang && lic.Site == lic2.Site && lic.SubSite == lic2.SubSite && lic.isAuthenticated == lic2.isAuthenticated && lic.LMS_size == lic2.LMS_size && lic.lmcomUserId == lic2.lmcomUserId && lic.CrsId == lic2.CrsId;
        };
        LicHolder.FromString = //static FromBytes(data: number[]): LicHolder {
        //  return null; //Serializer.BytesToObject$1(LicHolder.ctor, data);
        //}
        function FromString(str) {
            return JSON.parse(str);//LicHolder.FromBytes(LowUtils.HexEncode(str));
            
        };
        LicHolder.toString = //ToBytes() {
        //  return null; //Serializer.ObjectToBytes(this);
        //}
        function toString(lic) {
            return JSON.stringify(lic);//LowUtils.HexDecode(this.ToBytes());
            
        };
        return LicHolder;
    })();
    SLPlayer.LicHolder = LicHolder;    
    ;
    var LicenceManager = (function () {
        function LicenceManager() { }
        LicenceManager.MoodlePlayerUrl = "/mod/scorm/player.php";
        LicenceManager.notFreeCourses = [
            LMComLib.CourseIds.EuroEnglish, 
            LMComLib.CourseIds.Russian
        ];
        LicenceManager.LMSGetValue = function LMSGetValue(name) {
            return $LMSGetValue(name);
        };
        LicenceManager.findAPIWindowPathName = function findAPIWindowPathName() {
            return LicenceManager.findAPIWindowPathName();
        };
        LicenceManager.licenceNotify = function licenceNotify(mode, json) {
            $licenceNotify(mode, json);
        };
        LicenceManager.hostOK = [
            "www.langmaster.com", 
            "pl.langmaster.com", 
            "www.langmaster.cz", 
            "tr.langmaster.com", 
            "kalbos.manodienynas.lt", 
            "langmaster.europe-today.ru", 
            "langmaster.letsolutions.sk", 
            "www.etestme.vn", 
            "langmaster.lbenet.com", 
            "test.langmaster.com"
        ];
        LicenceManager.getHost = //LMComLib.SubDomainCommon.Hosts;
        function getHost() {
            return window.location.host;
        };
        LicenceManager.documentUrl = function documentUrl() {
            return window.location.href;
        };
        LicenceManager.parentLmsQuery = function parentLmsQuery(name) {
            var win = window.parent;
            if(win == null || win == window) {
                return null;
            }
            return LowUtils.getQueryParams(name);
        };
        LicenceManager.InitLicHolder = function InitLicHolder(licHolder) {
            licHolder.LMS = SLPlayer.options.lms;
            licHolder.Lang = SLPlayer.options.lang;
            licHolder.Site = SLPlayer.options.site;
            licHolder.SubSite = SLPlayer.options.subsite;
            licHolder.CrsId = SLPlayer.options.crsid;
            licHolder.LMS_size = SLPlayer.options.lms_size;
        };
        LicenceManager.LicenceOK = function LicenceOK() {
            return LicenceManager.NoProtection || LicenceManager.licHolder.errId == LMComLib.errorId.no || LicenceManager.licHolder.errId == LMComLib.errorId.expiredServices || LicenceManager.licHolder.errId == LMComLib.errorId.notLogged;
        };
        LicenceManager.LicenceServiceOK = function LicenceServiceOK() {
            return LicenceManager.NoProtection || LicenceManager.licHolder.errId == LMComLib.errorId.no;
        };
        LicenceManager.LicenceErrorMessage = function LicenceErrorMessage() {
            return LicenceManager.licHolder.errMsg;
        };
        LicenceManager.FinishLicenceAnchor = function FinishLicenceAnchor(url) {
            var res = {
                isOk: LicenceManager.LicenceOK(),
                isServiceOk: LicenceManager.LicenceServiceOK(),
                error: LicenceManager.LicenceErrorMessage(),
                modifiedUrl: url
            };
            return res;
        };
        LicenceManager.isAuthenticated = function isAuthenticated() {
            var cook = LMStatus.getCookie();
            return {
                res: cook == null ? false : !Utils.IsNullOrEmpty(cook.EMail),
                userId: cook == null ? 0 : cook.id
            };
        };
        LicenceManager.Init = function Init(cont) {
            LicenceManager.onContinue = cont;
            Debug.trace_lic("Init 1");
            LicenceManager.licHolder = new LicHolder();
            LicenceManager.licHolder.errId = LMComLib.errorId.no;
            LicenceManager.InitLicHolder(LicenceManager.licHolder);
            if(LicenceManager.isFakeMoodle) {
                LicenceManager.licHolder.LMS_size = LMComLib.LMSSize.self;
            }
            if(LicenceManager.licHolder.LMS == LMComLib.LMSType.Moodle) {
                try  {
                    LicenceManager.isFakeMoodle = LicenceManager.parentLmsQuery("as_moodle") == "true";
                } catch ($$e3) {
                }
            }
            var isAuth = LicenceManager.isAuthenticated();
            LicenceManager.licHolder.isAuthenticated = isAuth.res;
            LicenceManager.licHolder.lmcomUserId = isAuth.userId;
            Debug.trace_lic(Utils.string_format("Init 2: {0} {1} {2} {3} {4}", [
                LowUtils.EnumToString(LMComLib.LMSType, LicenceManager.licHolder.LMS), 
                LowUtils.EnumToString(LMComLib.Langs, LicenceManager.licHolder.Lang), 
                LowUtils.EnumToString(LMComLib.Domains, LicenceManager.licHolder.Site), 
                LowUtils.EnumToString(LMComLib.SubDomains, LicenceManager.licHolder.SubSite), 
                LowUtils.EnumToString(LMComLib.CourseIds, LicenceManager.licHolder.CrsId)
            ]));
            try  {
                var licStr = Cook.read(LMComLib.CookieIds.lms_licence, null);
                if(!Utils.IsNullOrEmpty(licStr)) {
                    var cookieLic = LicHolder.FromString(licStr);
                    Debug.trace_lic(Utils.string_format("Init 3: lic={0}", [
                        JSON.stringify(cookieLic)
                    ]));
                    if(LicHolder.Eq(cookieLic, LicenceManager.licHolder)) {
                        Debug.trace_lic(Utils.string_format("Init 1.2: from cookie {0} ", [
                            LicenceManager.licHolder.lmcomUserId
                        ]));
                        LicenceManager.licHolder = cookieLic;
                        LicenceManager.doContinue();
                        return;
                    }
                }
            } catch (e) {
            }
            switch(LicenceManager.licHolder.LMS) {
                case LMComLib.LMSType.Moodle:
                    if(LicenceManager.licHolder.LMS == LMComLib.LMSType.Moodle) {
                        try  {
                            LicenceManager.licHolder.LmsUserId = LicenceManager.LMSGetValue("cmi.core.student_id").toString();
                            LicenceManager.licHolder.LmsUserName = LicenceManager.LMSGetValue("cmi.core.student_name").toString();
                        } catch (e) {
                        }
                    }
                    LicenceManager.InitLms();
                    break;
                case LMComLib.LMSType.LMCom:
                    LicenceManager.InitLMCom();
                    break;
                default:
                    break;
            }
        };
        LicenceManager.doContinue = function doContinue() {
            try  {
                var licStr = LicHolder.toString(LicenceManager.licHolder);
                Cook.write(LMComLib.CookieIds.lms_licence, licStr);
                Debug.trace_lic("doContinue 1");
                if(LicenceManager.LicenceServiceOK() || !LicenceManager.licHolder.Lic.HideLicenceServiceControls) {
                    LicenceManager.licenceNotify("ShowLicenceServiceControls", null);
                }
                if(LicenceManager.licHolder.Lic.HideLicenceServiceControls && !LicenceManager.LicenceServiceOK()) {
                    LicenceManager.licenceNotify("HideLicenceServiceControls", null);
                }
                Debug.trace_lic("doContinue 2");
                var par = null;
                var days = 0;
                var logged = LicenceManager.licHolder.errId != LMComLib.errorId.notLogged && LicenceManager.licHolder.errId != LMComLib.errorId.notLoggedTrial;
                if(logged) {
                    switch(LicenceManager.licHolder.Lic.LicenceType) {
                        case SLPlayer.LicenceType.trialAll:
                            days = LicenceManager.LicenceOK() ? Math.max(0, 1 + Utils.MSecToDays(SLPlayer.Licence.get_Expired(LicenceManager.licHolder.Lic).getTime() - new Date().getTime())) : 0;
                            break;
                        case SLPlayer.LicenceType.trialServices:
                            days = LicenceManager.LicenceServiceOK() ? Math.max(0, 1 + Utils.MSecToDays(SLPlayer.Licence.get_ExpiredService(LicenceManager.licHolder.Lic).getTime() - new Date().getTime())) : 0;
                            break;
                    }
                }
                var parObj = {
                    logged: logged,
                    days: Utils.toInt(days),
                    showImportant: days < 14,
                    showBuy: LicenceManager.licHolder.Lic.ShowBuy,
                    showDays: LicenceManager.licHolder.Lic.ShowDays,
                    isELand: LicenceManager.licHolder.Lic.IsELand
                };
                par = JSON.stringify(parObj);
                Debug.trace_lic(Utils.string_format("doContinue Licence Notify, par={0}", [
                    par
                ]));
                LicenceManager.licenceNotify("DaysLeft", par);
                Debug.trace_lic("doContinue end");
            } catch (exp) {
                Debug.trace_lic(Utils.string_format("doContinue error: {0}", [
                    exp
                ]));
            }
            if(LicenceManager.onContinue != null) {
                LicenceManager.onContinue();
            }
        };
        LicenceManager.InitLMCom = function InitLMCom() {
            Debug.trace_lic("InitLMCom 1");
            var lic = LicenceManager.licHolder.Lic = new SLPlayer.Licence();
            SLPlayer.Licence.set_ExpiredService(lic, new Date(2000, 1, 1));
            lic.LicenceType = SLPlayer.LicenceType.trialServices;
            lic.ShowDays = false;
            LicenceManager.licHolder.errId = LMComLib.errorId.notLogged;
            LicenceManager.licHolder.errMsg = "Please login first!";
            if(!LicenceManager.licHolder.isAuthenticated) {
                Debug.trace_lic("InitLMCom !isAuthenticated");
                if(SLPlayer.Licence.notFreeLicence(LicenceManager.licHolder.Lang, LicenceManager.licHolder.CrsId)) {
                    var expired = Utils.addDays(new Date(), -1);
                    lic = LicenceManager.licHolder.Lic = new SLPlayer.Licence();
                    lic.LicenceType = SLPlayer.LicenceType.trialAll;
                    lic.ShowDays = false;
                    lic.ShowBuy = true;
                    SLPlayer.Licence.set_Expired(lic, expired);
                    SLPlayer.Licence.set_ExpiredService(lic, expired);
                    LicenceManager.licHolder.errId = LMComLib.errorId.notLoggedTrial;
                    LicenceManager.licHolder.errMsg = "To try out the course, please login!";
                    Debug.trace_lic(Utils.string_format("processSignature licHolder.errId={0}, licHolder.errMsg={1}", [
                        LowUtils.EnumToString(LMComLib.errorId, LicenceManager.licHolder.errId), 
                        LicenceManager.licHolder.errMsg
                    ]));
                }
                LicenceManager.doContinue();
                return;
            }
            var host = LicenceManager.getHost();
            var sigUrl = Utils.string_format("http://{0}/lmcom/services/lmslicence.aspx?lang={1}&site={2}&subsite={3}&courseId={4}&lmcomUserId={5}&format={6}", [
                host, 
                LicenceManager.licHolder.Lang, 
                LicenceManager.licHolder.Site, 
                LicenceManager.licHolder.SubSite, 
                LicenceManager.licHolder.CrsId, 
                LicenceManager.licHolder.lmcomUserId, 
                actFormat
            ]);
            Debug.trace_lic(Utils.string_format("InitLMCom 4: url={0}", [
                sigUrl
            ]));
            LicenceManager.processSignature(sigUrl);
        };
        LicenceManager.InitLms = function InitLms() {
            var host = window.location.host.toLowerCase();
            var lic = LicenceManager.licHolder.Lic = new SLPlayer.Licence();
            SLPlayer.Licence.set_ExpiredService(lic, new Date(2000, 1, 1));
            lic.LicenceType = SLPlayer.LicenceType.trialServices;
            lic.ShowDays = false;
            var actUrl = window.location.href.toLowerCase();
            var isDemo = false;
            var demos = SLPlayer.Licence.demoModules;
            for(var i = 0; i < demos.length; i++) {
                if(actUrl.indexOf(demos[i]) >= 0) {
                    isDemo = true;
                    break;
                }
            }
            //oprava 12.4.2013, po dohode s PJ neni potreba
            //for (var j = 0; j < LicenceManager.hostOK.length; j++)
            //  if (LicenceManager.hostOK[j] == host) {
            //    isDemo = true;
            //    break;
            //  }
            if(isDemo) {
                Debug.trace_lic("InitLms, demo module");
                SLPlayer.Licence.set_Expired(LicenceManager.licHolder.Lic, new Date(2100, 1, 1));
                LicenceManager.doContinue();
            } else {
                var signatureUrlReaded = function (sigUrl) {
                    if(sigUrl == null) {
                        sigUrl = Utils.string_format("{0}?host={1}&courseId={2}&lms_size={3}&lang={4}&userId={5}&userName={6}&format=2", [
                            SLPlayer.Licence.FixLicenceUrl, 
                            encodeURIComponent(host), 
                            LicenceManager.licHolder.CrsId.toString(), 
                            LicenceManager.licHolder.LMS_size, 
                            LicenceManager.licHolder.Lang, 
                            encodeURIComponent(LicenceManager.licHolder.LmsUserId), 
                            encodeURIComponent(LicenceManager.licHolder.LmsUserName)
                        ]);
                    }
                    Debug.trace_lic(Utils.string_format("InitLms: url={0}", [
                        sigUrl
                    ]));
                    LicenceManager.processSignature(sigUrl);
                };
                $.ajax({
                    url: SLPlayer.Licence.LicenceUrl,
                    async: true,
                    dataType: "text",
                    error: function (jqXHR, code, error) {
                        Debug.trace_lic("InitLms, signature.url Ajax.Error");
                        signatureUrlReaded(null);
                    },
                    success: function (obj, status, jqXHR) {
                        Debug.trace_lic("InitLms, signature.url Ajax.success:" + obj);
                        signatureUrlReaded(obj);
                    },
                    beforeSend: function (xhr, sett) {
                        Debug.trace_lic("signature.url=" + sett.url);
                    }
                });
            }
        };
        LicenceManager.erroMsg = function erroMsg(msg) {
            if(LicenceManager.licHolder.LMS == LMComLib.LMSType.LMCom || LicenceManager.licHolder.Lic == null) {
                return msg;
            }
            return Utils.string_format("Wrong licence, contact your administrator\r\n{8} ({9})\r\nAdmin: {0} {1} ({2})\r\nCompany: {3} ({4})\r\nHost name: {5}\r\nCourse: {6}\r\nExpired: {7}\r\n", [
                LicenceManager.licHolder.Lic.FirstName, 
                LicenceManager.licHolder.Lic.LastName, 
                LicenceManager.licHolder.Lic.AdminEmail, 
                LicenceManager.licHolder.Lic.Company, 
                LicenceManager.licHolder.Lic.CompanyUrl, 
                LicenceManager.licHolder.Lic.Host, 
                LicenceManager.licHolder.Lic.SpaceId, 
                Globalize.format(SLPlayer.Licence.get_Expired(LicenceManager.licHolder.Lic), "d"), 
                msg, 
                LicenceManager.licHolder.Lic == null ? null : LicenceManager.licHolder.Lic.LicenceType.toString()
            ]);
        };
        LicenceManager.RemoveLicencoFromCookie = function RemoveLicencoFromCookie() {
            Cook.remove(LMComLib.CookieIds.lms_licence);
        };
        LicenceManager.processSignature = function processSignature(sigUrl) {
            Debug.trace_lic("processSignature start");
            var actUrl = LicenceManager.documentUrl();
            LicenceManager.licHolder.errId = LMComLib.errorId.no;
            LicenceManager.licHolder.errMsg = null;
            $.ajax({
                url: sigUrl,
                async: true,
                dataType: "jsonp",
                error: function (jqXHR, code, error) {
                    LicenceManager.licHolder.errId = LMComLib.errorId.licRead;
                    LicenceManager.licHolder.errMsg = "Cannot read signature.bin: " + error.toString() + ", url=" + sigUrl;
                    Debug.trace_lic(Utils.string_format("processSignature licHolder.errId={0}, licHolder.errMsg={1}", [
                        LicenceManager.licHolder.errId, 
                        LicenceManager.licHolder.errMsg
                    ]));
                },
                success: function (obj, status, jqXHR) {
                    try  {
                        try  {
                            LicenceManager.licHolder.Lic = SLPlayer.Licence.FromString(obj.data)// obj;
                            ;
                            if(LicenceManager.licHolder.Lic == null) {
                                LicenceManager.licHolder.errId = LMComLib.errorId.missingLicence;
                                LicenceManager.licHolder.errMsg = LicenceManager.erroMsg("Licence null");
                                Debug.trace_lic(Utils.string_format("processSignature licHolder.errId={0}, licHolder.errMsg={1}", [
                                    LicenceManager.licHolder.errId, 
                                    LicenceManager.licHolder.errMsg
                                ]));
                                return;
                            }
                            Debug.trace_lic(Utils.string_format("Expired={0}, ExpiredService={1}, Lic={2}", [
                                SLPlayer.Licence.get_Expired(LicenceManager.licHolder.Lic), 
                                SLPlayer.Licence.get_ExpiredService(LicenceManager.licHolder.Lic), 
                                JSON.stringify(LicenceManager.licHolder.Lic)
                            ]));
                            if(LicenceManager.licHolder.LMS == LMComLib.LMSType.LMCom) {
                                Debug.trace_lic("processSignature licHolder.LMS == LMSType.LMCom");
                                switch(LicenceManager.licHolder.Lic.LicenceType) {
                                    case SLPlayer.LicenceType.trialAll:
                                    case SLPlayer.LicenceType.trialServices:
                                        if(SLPlayer.Licence.get_Expired(LicenceManager.licHolder.Lic) < new Date()) {
                                            LicenceManager.licHolder.errId = LMComLib.errorId.expiredAll;
                                            LicenceManager.licHolder.errMsg = "License expired on " + Globalize.format(SLPlayer.Licence.get_Expired(LicenceManager.licHolder.Lic), "d") + ". Buy it now (Sound playing disabled)!";
                                            return;
                                        } else if(LicenceManager.licHolder.Lic.LicenceType == SLPlayer.LicenceType.trialServices && SLPlayer.Licence.get_ExpiredService(LicenceManager.licHolder.Lic) < new Date()) {
                                            LicenceManager.licHolder.errId = LMComLib.errorId.expiredServices;
                                            LicenceManager.licHolder.errMsg = "License expired on " + Globalize.format(SLPlayer.Licence.get_ExpiredService(LicenceManager.licHolder.Lic), "d") + ". Buy it now (Learning services disabled)!";
                                            return;
                                        }
                                        break;
                                }
                            } else {
                                Debug.trace_lic("processSignature licHolder.LMS != LMSType.LMCom");
                                var pathNameObj = null;
                                try  {
                                    try  {
                                        try  {
                                            pathNameObj = LicenceManager.findAPIWindowPathName();
                                        }finally {
                                            if(pathNameObj == null) {
                                                pathNameObj = actUrl;
                                            }
                                        }
                                    } catch ($$e6) {
                                    }
                                    var pathName = pathNameObj.toString().toLowerCase();
                                    Debug.trace_lic(Utils.string_format("processSignature pathName={0}", [
                                        pathName
                                    ]));
                                    if(pathName == null || pathName.indexOf(LicenceManager.licHolder.Lic.Host) < 0) {
                                        LicenceManager.licHolder.errId = LMComLib.errorId.wrongHost;
                                        LicenceManager.licHolder.errMsg = LicenceManager.erroMsg("wrong host: " + pathName);
                                        Debug.trace_lic(Utils.string_format("processSignature licHolder.errId={0}, licHolder.errMsg={1}", [
                                            LicenceManager.licHolder.errId, 
                                            LicenceManager.licHolder.errMsg
                                        ]));
                                        return;
                                    }
                                    switch(LicenceManager.licHolder.Lic.LicenceType) {
                                        case SLPlayer.LicenceType.trialAll:
                                        case SLPlayer.LicenceType.trialServices:
                                            if(SLPlayer.Licence.get_Expired(LicenceManager.licHolder.Lic) < new Date()) {
                                                var isMoodle = LicenceManager.isFakeMoodle || pathName.indexOf(LicenceManager.MoodlePlayerUrl) < 0;
                                                if(isMoodle && LicenceManager.licHolder.Lic.MoodleNotExpired) {
                                                    LicenceManager.licHolder.errId = LMComLib.errorId.expiredServices;
                                                    LicenceManager.licHolder.errMsg = LicenceManager.erroMsg("expired, Now: " + Globalize.format(new Date(), "d"));
                                                } else {
                                                    LicenceManager.licHolder.errId = LMComLib.errorId.expiredAll;
                                                    LicenceManager.licHolder.errMsg = LicenceManager.erroMsg("expired, Now: " + Globalize.format(new Date(), "d"));
                                                }
                                            } else if(LicenceManager.licHolder.Lic.LicenceType == SLPlayer.LicenceType.trialServices && SLPlayer.Licence.get_ExpiredService(LicenceManager.licHolder.Lic) < new Date()) {
                                                LicenceManager.licHolder.errId = LMComLib.errorId.expiredServices;
                                                LicenceManager.licHolder.errMsg = LicenceManager.erroMsg("expired, Now: " + Globalize.format(new Date(), "d"));
                                            }
                                            break;
                                        default:
                                            LicenceManager.licHolder.errId = LMComLib.errorId.missingLicence;
                                            LicenceManager.licHolder.errMsg = LicenceManager.erroMsg("");
                                            break;
                                    }
                                } catch (exp) {
                                    LicenceManager.licHolder.errId = LMComLib.errorId.noMoodle;
                                    LicenceManager.licHolder.errMsg = LicenceManager.erroMsg("LicenceType.trial, exception: " + exp);
                                }
                            }
                        } catch (exp) {
                            LicenceManager.licHolder.errId = LMComLib.errorId.licFormat;
                            LicenceManager.licHolder.errMsg = "OpenReadCompleted exception: " + exp;
                        }
                    }finally {
                        Debug.trace_lic(Utils.string_format("processSignature licHolder.errId={0}, licHolder.errMsg={1}", [
                            LicenceManager.licHolder.errId, 
                            LicenceManager.licHolder.errMsg
                        ]));
                        LicenceManager.doContinue();
                    }
                },
                beforeSend: function (xhr, sett) {
                    Debug.trace_lic("signature.url=" + sett.url);
                }
            });
        };
        return LicenceManager;
    })();
    SLPlayer.LicenceManager = LicenceManager;    
})(SLPlayer || (SLPlayer = {}));
///#DEBUG
var Debug;
(function (Debug) {
    function trace_lic(msg) {
        Debug.trace("Licence", msg);
    }
    Debug.trace_lic = trace_lic;
})(Debug || (Debug = {}));
///#ENDDEBUG

/// <reference path="../../../../../../../LMCom/rew/Web4/JsLib/JS/GenLMComLib.ts" />
/// <reference path="../../../../../../../LMCom/rew/Web4/JsLib/JS/Utils.ts" />
var SLPlayer;
(function (SLPlayer) {
    (function (LicenceType) {
        LicenceType._map = [];
        LicenceType.no = 0;
        LicenceType.trialAll = 1;
        LicenceType.trialServices = 2;
    })(SLPlayer.LicenceType || (SLPlayer.LicenceType = {}));
    var LicenceType = SLPlayer.LicenceType;
    ;
    var Licence = (function () {
        function Licence() {
            this.LicenceType = LicenceType.no;
            this.ExpiredInt = Utils.dateToInt(new Date());
            this.Expired__ = null;
            this.ExpiredServiceInt = Utils.dateToInt(new Date());
            this.ExpiredService__ = null;
            this.Host = null;
            this.SpaceId = null;
            this.MoodleNotExpired = false;
            this.HideLicenceServiceControls = false;
            this.AmountUsers = 0;
            this.ShowDays = false;
            this.ShowBuy = false;
            this.IsELand = false;
            this.FirstName = null;
            this.LastName = null;
            this.AdminEmail = null;
            this.Company = null;
            this.CompanyUrl = null;
            this.CreatedInt = Utils.dateToInt(new Date());
            this.Created__ = null;
        }
        Licence.demoModules = [
            "english1/l02/a", 
            "english2/l05/b", 
            "english3/l05/a", 
            "english4/l05/a", 
            "english5/l34/j", 
            "german1/les4/chapc", 
            "german2/les3/chapb", 
            "german3/les1/chapa", 
            "spanish1/l06/a", 
            "spanish2/l01/b", 
            "spanish3/l04/b", 
            "french1/l04/a", 
            "french2/l08/b", 
            "french3/l06/a", 
            "italian1/l05/a", 
            "italian2/l04/b", 
            "italian3/l01/b", 
            "russian1/lesson4/chaptera", 
            "russian2/lesson1/chapterc", 
            "russian3/lesson1/chaptera", 
            "euroenglish/chapter1"
        ];
        Licence.LicenceFileName = "signature.bin";
        Licence.LicenceUrl = "signature.url";
        Licence.FixLicenceUrl = "http://www.langmaster.com/lmcom/services/lmslicence.aspx";
        Licence.LicenceFileNameLen = 1024;
        Licence.notFreeLicence = function notFreeLicence(lng, crsId) {
            return lng == LMComLib.Langs.vi_vn || lng == LMComLib.Langs.no || crsId == LMComLib.CourseIds.Russian || crsId == LMComLib.CourseIds.EuroEnglish;
        };
        Licence.get_Expired = function get_Expired(self) {
            return Utils.intToDate(self.ExpiredInt);
        };
        Licence.set_Expired = function set_Expired(self, value) {
            self.ExpiredInt = Utils.dateToInt(value);
            self.Expired__ = value;
        };
        Licence.get_ExpiredService = function get_ExpiredService(self) {
            return Utils.intToDate(self.ExpiredServiceInt);
        };
        Licence.set_ExpiredService = function set_ExpiredService(self, value) {
            self.ExpiredServiceInt = Utils.dateToInt(value);
            self.ExpiredService__ = value;
        };
        Licence.FromString = //ToBytes() {
        //  return null;  //Serializer.ObjectToBytes(this);
        //}
        //static FromBytes(data: number[]): Licence {
        //  return null;  //Serializer.BytesToObject$1(Licence.ctor, data);
        //}
        function FromString(str) {
            return Utils.unpack(str);
            //Licence.FromBytes(LowUtils.HexEncode(str));
                    };
        return Licence;
    })();
    SLPlayer.Licence = Licence;    
    //toString() {
    //  return null;  //LowUtils.HexDecode(this.ToBytes());
    //}
    })(SLPlayer || (SLPlayer = {}));

/// <reference path="../../../../../../../LMCom/rew/Web4/JsLib/JS/Utils.ts" />
/// <reference path="new_Licence.ts" />
/// <reference path="../../../../../../../LMCom/rew/Web4/JsLib/JS/sound/sound.d.ts" />
/// <reference path="../../../../../../../LMCom/rew/Web4/JsLib/JS/unicode.ts" />
var LicencePlayer;
(function (LicencePlayer) {
    function playFile(url, position) {
        LMSnd.audio.playFile(url, 0);
    }
    LicencePlayer.playFile = playFile;
    function play(spaceId, globalId, position) {
        alert("LicencePlayer.play: missing code here");
    }
    LicencePlayer.play = play;
    function stop() {
        alert("LicencePlayer.stop: missing code here");
    }
    LicencePlayer.stop = stop;
    function pause() {
        alert("LicencePlayer.pause: missing code here");
    }
    LicencePlayer.pause = pause;
    function wordWrap(sentences) {
        var res = new Array(sentences.length);
        for(var i = 0; i < sentences.length; i++) {
            var sentRes = LicencePlayer.dict_words_txt(sentences[i]);
            res[i] = sentRes;
        }
        return res;
    }
    LicencePlayer.wordWrap = wordWrap;
    function isWordChar(ch) {
        return Unicode.d(ch);
    }
    LicencePlayer.isWordChar = isWordChar;
    ;
    function dict_words_txt(txt) {
        var ws = [];
        var sb = [];
        var status = 0;
        var act = 0;
        var read = function () {
            return act >= txt.length ? "\0" : txt.charAt(act++);
        };
        var flush = function () {
            ws.push(sb.join(""));
            sb = [];
        };
        var ch = read();
        while(ch.charCodeAt(0) > 0) {
            sb.push(ch);
            switch(status) {
                case 0:
                    if(ch == "$") {
                        status = 30;
                    } else if(isWordChar(ch)) {
                        status = 1;
                    }
                    break;
                case 1:
                    if(!isWordChar(ch)) {
                        status = 2;
                    }
                    break;
                case 2:
                    if(ch == "$") {
                        status = 32;
                    } else if(isWordChar(ch)) {
                        act--;
                        sb.pop();
                        status = 1;
                        flush();
                    }
                    break;
                case 30:
                    if(ch == ";") {
                        status = 0;
                    }
                    break;
                case 32:
                    if(ch == ";") {
                        status = 2;
                    }
                    break;
            }
            ch = read();
        }
        flush();
        return ws;
    }
    LicencePlayer.dict_words_txt = dict_words_txt;
    function finishLicenceAnchor(url) {
        Debug.trace_player("FinishLicenceAnchor");
        try  {
            return SLPlayer.LicenceManager.FinishLicenceAnchor(url);
        } catch (exp) {
            Debug.error_player("FinishLicenceAnchor", exp);
            return {
            };
        }
    }
    LicencePlayer.finishLicenceAnchor = finishLicenceAnchor;
    function licenceServiceOK() {
        Debug.trace_player("LicenceServiceOK");
        try  {
            return SLPlayer.LicenceManager.LicenceServiceOK();
        } catch (exp) {
            Debug.error_player("LicenceServiceOK", exp);
            return false;
        }
    }
    LicencePlayer.licenceServiceOK = licenceServiceOK;
    function licenceOK() {
        Debug.trace_player("licenceOK");
        try  {
            return SLPlayer.LicenceManager.LicenceOK();
        } catch (exp) {
            Debug.error_player("licenceOK", exp);
            return false;
        }
    }
    LicencePlayer.licenceOK = licenceOK;
    function licenceErrorMessage() {
        try  {
            Debug.trace_player("LicenceErrorMessage");
            return SLPlayer.LicenceManager.LicenceErrorMessage();
        } catch (exp) {
            Debug.error_player("LicenceErrorMessage", exp);
            return exp.toString();
        }
    }
    LicencePlayer.licenceErrorMessage = licenceErrorMessage;
    function removeLicencoFromCookie() {
        try  {
            Debug.trace_player("RemoveLicencoFromCookie");
            SLPlayer.LicenceManager.RemoveLicencoFromCookie();
        } catch (exp) {
            Debug.error_player("RemoveLicencoFromCookie", exp);
        }
    }
    LicencePlayer.removeLicencoFromCookie = removeLicencoFromCookie;
    function Init() {
        SLPlayer.LicenceManager.Init(function () {
            if(!LicencePlayer.licenceOK()) {
                var msg = LicencePlayer.licenceErrorMessage();
                alert(msg);
            }
        });
    }
    LicencePlayer.Init = Init;
})(LicencePlayer || (LicencePlayer = {}));
///#DEBUG
var Debug;
(function (Debug) {
    function trace_player(msg) {
        Debug.trace("Player", msg);
    }
    Debug.trace_player = trace_player;
    function error_player(msg, exp) {
        Debug.error("Player", msg, exp);
    }
    Debug.error_player = error_player;
})(Debug || (Debug = {}));
///#ENDDEBUG
/*xxx*/

var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../jsd/jquery.d.ts" />
/// <reference path="../jsd/knockout.d.ts" />
/// <reference path="../jsd/jsrender.d.ts" />
/// <reference path="../jsd/underscore.d.ts" />
/// <reference path="Utils.ts" />
/// <reference path="../../login/GenLogin.ts" />
/// <reference path="Ajax.ts" />
var Pager;
(function (Pager) {
    (function (ButtonType) {
        ButtonType._map = [];
        ButtonType.okCancel = 0;
        ButtonType.ok = 1;
        ButtonType.cancel = 2;
    })(Pager.ButtonType || (Pager.ButtonType = {}));
    var ButtonType = Pager.ButtonType;
    //Page musi vzdy na konci konstruktoru naplnit crc!!!
    var Page = (function () {
        function Page(type, base) {
            if (typeof base === "undefined") { base = null; }
            this.type = type;
            this.base = base;
            this.sessId = sessionId;
        }
        Page.prototype.update = //podpis statusu pomoci sessionId. Aby se 'stare' URL redirektovaly na home
        function (completed) {
            completed();
        };
        Page.prototype.saveStatus = //vybudovani stranky
        function () {
        };
        Page.prototype.root = function () {
            return Pager.rootVM;
        };
        return Page;
    })();
    Pager.Page = Page;    
    //loaded(): void { }
    var Url = (function () {
        function Url(locator) {
            this.locator = locator;
        }
        Url.prototype.toString = function () {
            throw "notImplemented";
            return null;
        };
        return Url;
    })();
    Pager.Url = Url;    
    Pager.ignoreUrl = new Url(null);
    Pager.ignorePage = new Page(null);
    var locators = [];//name hash of functions (url: Url, completed: (pg: Page) => void )
    
    var urlFromStrings = [];//appName, Url creator
    
    function getPageLow(url, completed) {
        if(url == null) {
            completed(null);
            return;
        }
        if(url == Pager.ignoreUrl) {
            completed(Pager.ignorePage);
            return;
        }
        var proc = locators[url.locator.toLowerCase()];
        proc(url, completed);
    }
    function registerLocator(name, getProc) {
        locators[name.toLowerCase()] = getProc;
    }
    Pager.registerLocator = registerLocator;
    function registerUrlFromString(appId, getProc) {
        urlFromStrings[appId.toLowerCase()] = getProc;
    }
    Pager.registerUrlFromString = registerUrlFromString;
    function getPage(hash, completed) {
        if(Pager.rootVM == null) {
            completed(null);
        }
        getPageLow(Pager.rootVM.urlFromString(hash), function (res) {
            if(res == null) {
                if(!hash || hash.length < 2) {
                    getPageLow(Pager.initUrl, completed);
                } else {
                    window.location.hash = "";
                    completed(null);
                }
            } else {
                completed(res);
            }
        });
    }
    Pager.getPage = getPage;
    //root ViewModel
    var ViewModelRoot = (function () {
        function ViewModelRoot() { }
        ViewModelRoot.prototype.urlFromString = function (hash) {
            throw "NotImplemented";
        };
        ViewModelRoot.prototype.navigated = function (page, completed) {
            completed();
        };
        ViewModelRoot.prototype.doNavigated = //ActPage = ko.observable(<Object>null);
        //ActPage(): Page { return ActPage; }
        //refresh(): void { }
        function (page, completed) {
            Pager.ActPage = page;
            this.navigated(page, completed);
        };
        return ViewModelRoot;
    })();
    Pager.ViewModelRoot = ViewModelRoot;    
    Pager.ActPage;
    $.views.helpers({
        ActPage: function () {
            return Pager.ActPage;
        },
        HomeUrl: function () {
            return Pager.initUrl.toString();
        }
    });
    function HomeUrl() {
        return "#";
    }
    Pager.HomeUrl = HomeUrl;
    //function setPage(pg: Page) {
    //rootVM.setPage(pg);
    //}
    //export function setInitPageModel(url: Url, model: ViewModelRoot = null) {
    //rootVM = model==null ? new RootModelEx() : model;
    //initUrl = url;
    //}
    function navigateTo2(pg) {
        //ActPage.saveStatus();
        location.hash = pg == null ? '' : '#' + pg.url.toString();
    }
    Pager.navigateTo2 = navigateTo2;
    function navigateTo(url) {
        //ActPage.saveStatus();
        location.hash = '#' + url.toString();
    }
    Pager.navigateTo = navigateTo;
    Pager.viewServices;
    var sessionId = new Date().getTime();
    var dummyUrl = new Page("DummyModel");
    var UrlEx = (function (_super) {
        __extends(UrlEx, _super);
        function UrlEx(type, path) {
                _super.call(this, type);
            this.path = path;
        }
        UrlEx.fromString = function fromString(hash) {
            if(_.isEmpty(hash) || hash.length < 3) {
                return null;
            }
            if(hash.charAt(0) == '#') {
                hash = hash.substring(1);
            }
            var parts = hash.split('@');
            return new UrlEx(parts[0], _.rest(parts, 1));
        };
        UrlEx.prototype.toString = function () {
            return this.str == null ? (this.str = this.locator + '@' + this.path.join('@')) : this.str;
        };
        return UrlEx;
    })(Url);
    Pager.UrlEx = UrlEx;    
    var ModelEx = (function (_super) {
        __extends(ModelEx, _super);
        function ModelEx(name, base) {
            if (typeof base === "undefined") { base = null; }
                _super.call(this, name, base);
        }
        ModelEx.prototype.adjustUrl = function () {
            var b = this.base;
            this.base = null;
            var s = JSON.stringify(this);
            this.base = b;
            this.hash = Utils.Hash(s).toString();
            var arr = null;
            if(this.base != null) {
                var arr = _.toArray(((this.base.url)).path);
                arr.push(this.hash);
            } else {
                arr = [
                    this.hash
                ];
            }
            this.url = new UrlEx(this.type, arr);
        };
        return ModelEx;
    })(Page);
    Pager.ModelEx = ModelEx;    
    var RootModelEx = (function (_super) {
        __extends(RootModelEx, _super);
        function RootModelEx() {
            _super.apply(this, arguments);

            this.rootTemplate = ko.observable('');
        }
        RootModelEx.prototype.urlFromString = function (hash) {
            if(hash != null && hash.indexOf("access_token=") >= 0) {
                //navrat z externiho loginu
                OAuth.checkForToken(function (obj) {
                    Pager.ajax(//dle externiho ID zjisti LM Id (a ev. zaloz usera)
                    Pager.pathType.restServices, Login.CmdAdjustUser_Type, Login.CmdAdjustUser_Create(obj.providerid, obj.id, obj.email, obj.firstName, obj.lastName), function (res) {
                        //dej usera do cookie a proved redirekt
                        LMStatus.logged(res.Cookie, false);
                    });
                });
                return Pager.ignoreUrl;
            }
            if(hash != null && hash.charAt(0) == '#') {
                hash = hash.substring(1);
            }
            if(hash == null || hash.length < 3) {
                return null;
            }
            hash = hash.toLowerCase();
            var parts = hash.split("@");
            var proc = urlFromStrings[parts[0]];
            if(!proc) {
                return null;
            }
            return proc(parts.length == 1 ? "" : hash.substring(parts[0].length + 1));
        };
        RootModelEx.prototype.navigated = function (page, completed) {
            this.reload(page, completed);
        };
        RootModelEx.prototype.reload = function (page, completed) {
            if (typeof completed === "undefined") { completed = null; }
            var _this = this;
            Debug.trace("ModelBase.reload: url=", Pager.ActPage.url.toString() + ", template=" + Pager.viewServices.viewLocator(page.type));
            this.rootTemplate('Dummy')//vycisti stranky
            ;
            page.update(function () {
                //aktualizuj Model
                _this.rootTemplate(Pager.viewServices.viewLocator(page.type))//vybuduj View
                ;
                setTimeout(Pager.viewServices.loaded, 1);
                if(completed) {
                    completed();
                }
            });
        };
        return RootModelEx;
    })(ViewModelRoot);
    Pager.RootModelEx = RootModelEx;    
    //refresh(page: Pager.Page = null, tmpl: string = null): void {
    //  if (tmpl == null) tmpl = this.rootTemplate();
    //  this.rootTemplate('Dummy');
    //  this.rootTemplate(tmpl);
    //  Pager.viewServices.loaded();
    //  (page == null ? ActPage : page).loaded();
    //}
    Pager.rootVM = new RootModelEx();
    Pager.initUrl;
})(Pager || (Pager = {}));
/*
interface KnockoutStatic {
//InitObservable(getInit?: () => any): KnockoutComputed;
DeferedRead(observable: KnockoutObservableAny, getValue: (any) => any): KnockoutComputed;
}

//http://knockoutjs.com/documentation/computedObservables.html
(<any>ko)['InitObservable'] = function (getInitValue?: () => any) {
var value = ko.observable();
var initiated = typeof getInitValue != 'function';
return ko.computed({
read: () => { if (!initiated) { initiated = true; value(getInitValue()); }; return value(); },
write: (val) => { initiated = true; value(val); },
deferEvaluation: true,
});
};


(<any>ko)['DeferedRead'] = function (observable: KnockoutObservableAny, getValue: (val) => any) {
var myObs = observable;
return ko.computed({
read: () => getValue(myObs()),
deferEvaluation: true,
});

};
*/

/// <reference path="../jsd/jquery.d.ts" />
/// <reference path="../jsd/jsrender.d.ts" />
/// <reference path="../jsd/globalize.d.ts" />
/// <reference path="external/ClosureLib.ts" />
/// <reference path="external/ClosureLibLow.ts" />
/// <reference path="GenLMComLib.ts" />
/// <reference path="OAuth.ts" />
/// <reference path="ajax.ts" />
var colors;
(function (colors) {
    colors.teal = "teal";
    colors.blue = "blue";
    colors.purple = "purple";
    colors.dark_purple = "dark-purple";
    colors.red = "red";
    colors.orange = "orange";
    colors.green = "green";
    colors.sky_blue = "sky-blue";
})(colors || (colors = {}));
var Utils;
(function (Utils) {
    function createLayoutCell(width, tmpl, data) {
        return {
            width: width,
            tmpl: tmpl,
            data: data
        };
    }
    Utils.createLayoutCell = createLayoutCell;
    function longToByteArray(num) {
        // we want to represent the input as a 8-bytes array
        var byteArray = [
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0, 
            0
        ];
        for(var index = 0; index < byteArray.length; index++) {
            var byte = num & 0xff;
            byteArray[index] = byte;
            num = (num - byte) / 256;
        }
        return byteArray;
    }
    Utils.longToByteArray = longToByteArray;
    ;
    function byteArrayToLong(byteArray) {
        var value = 0;
        for(var i = byteArray.length - 1; i >= 0; i--) {
            value = (value * 256) + byteArray[i];
        }
        return value;
    }
    Utils.byteArrayToLong = byteArrayToLong;
    ;
    function Empty(val) {
        return typeof val == "undefined" || !val || val == null || val == '' || val == 0;
    }
    Utils.Empty = Empty;
    if($.views) {
        $.views.helpers({
            empty: Empty,
            notEmpty: function (val) {
                return !Empty(val);
            },
            extend: function (src, byStr) {
                var res = JSON.parse("{" + byStr + "}");
                return $.extend(src, res);
            },
            intToDate: function (val) {
                return Globalize.format(Utils.intToDate(val), 'd');
            },
            reverse: function (val) {
                return val.reverse();
            },
            smallFlagCls: function (line) {
                return "flag-small flag-small-" + LowUtils.EnumToString(LMComLib.LineIds, line).toLowerCase();
            }
        });
    }
    function tuples(items) {
        var res = [];
        if(items == null || items.length == 0) {
            return res;
        }
        for(var i = 0; i < items.length; i += 2) {
            res.push([
                items[i], 
                i + 1 < items.length ? items[i + 1] : null
            ]);
        }
    }
    Utils.tuples = tuples;
    function guid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    Utils.guid = guid;
    function encodeURL(url, params) {
        var res = url;
        var k, i = 0;
        var firstSeparator = (url.indexOf("?") === -1) ? '?' : '&';
        for(k in params) {
            res += (i++ === 0 ? firstSeparator : '&') + encodeURIComponent(k) + '=' + encodeURIComponent(params[k]);
        }
        return res;
    }
    Utils.encodeURL = encodeURL;
    function dateToNum(dt) {
        return dt.getTime() / 1000;
    }
    Utils.dateToNum = dateToNum;
    function numToDate(num) {
        return new Date(num * 1000);
    }
    Utils.numToDate = numToDate;
    function dateToInt(dt) {
        return dt.getTime();
    }
    Utils.dateToInt = dateToInt;
    function intToDate(num) {
        return new Date(num);
    }
    Utils.intToDate = intToDate;
    function toInt(n) {
        return parseInt(n.toString());
    }
    Utils.toInt = toInt;
    function formatTimeSpan(secs) {
        var s = toInt(secs % 60);
        secs = secs / 60;
        var m = toInt(secs % 60);
        var h = toInt(secs / 60);
        return h.toString() + ":" + (m < 10 ? "0" : "") + m.toString() + ":" + (s < 10 ? "0" : "") + s.toString();
    }
    Utils.formatTimeSpan = formatTimeSpan;
    function preferedLanguage() {
        var language = navigator.language;
        if(language == null) {
            language = navigator.userLanguage;
            if(language == null) {
                language = "??";
            }
        }
        //language = language.substring(0, 2);
        return navigator.language + "|" + navigator.browserLanguage + "|" + navigator.userLanguage + "|" + navigator.systemLanguage;
    }
    Utils.preferedLanguage = preferedLanguage;
    function string_format(str, obj) {
        return str.replace(/{([^{}]*)}/g, function (match, group_match) {
            var data = obj[group_match];
            return data == null ? '' : data.toString();// typeof data === 'string' ? data : match;
            
        });
    }
    Utils.string_format = string_format;
    //http://erlycoder.com/49/javascript-hash-functions-to-convert-string-into-integer-hash-
    function Hash(str) {
        var hash = 5381;
        for(var i = 0; i < str.length; i++) {
            var ch = str.charCodeAt(i);
            hash = ((hash << 5) + hash) + ch;
        }
        return hash;
    }
    Utils.Hash = Hash;
    //http://stevenbenner.com/2010/03/javascript-regex-trick-parse-a-query-string-into-an-object/
    //var parseQueryRx = new RegExp("([^?=&]+)(=([^&]*))?", "g");
    //export function parseQuery(url: string): Object {
    //  var queryString = {};
    //  url.replace(parseQueryRx, (substring: string, ...args: any[]) => { queryString[args[0].toLowerCase()] = args[2]; });
    //  return queryString;
    //}
    function unpack(data) {
        data = gCrypt.utf8ByteArrayToString(LowUtils.decrypt(gBase64.LMdecodeString(data)));
        return JSON.parse(data);
    }
    Utils.unpack = unpack;
    function pack(obj) {
        return gBase64.LMencodeString(LowUtils.encrypt(gCrypt.stringToUtf8ByteArray(JSON.stringify(obj))));
    }
    Utils.pack = pack;
    //export function unpack_(data: string): msgpack.typedObj {
    //  return <msgpack.typedObj>msgpack.unpackBytes(gBase64.LMdecodeString(data));
    //}
    //export function pack_(obj: msgpack.typedObj): string {
    //  return gBase64.LMencodeString(msgpack.packBytes(obj));
    //}
    //export function getQueryVariable(win: Window, name: string): string {
    //  var match = RegExp('[?&]' + name + '=([^&]*)').exec(win.location.search);
    //  return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
    //};
    function IsNullOrEmpty(s) {
        return s == null || s.length == 0;
    }
    Utils.IsNullOrEmpty = IsNullOrEmpty;
    function addDays(date, days) {
        var ms = date.getTime() + (86400000 * days);
        return new Date(ms);
    }
    Utils.addDays = addDays;
    function MSecToDays(msec) {
        return toInt(msec / msecInDay);
    }
    Utils.MSecToDays = MSecToDays;
    var msecInDay = 60 * 60 * 24 * 1000;
    function initStorage() {
        var dt = new Date().getTime().toString();
        var st = window.localStorage;
        try  {
            st.setItem(dt, dt);
            if(st.getItem(dt) != dt) {
                st = null;
            } else {
                st.removeItem(dt);
            }
        } catch (msg) {
            st = null;
        }
        if(st == null) {
            window.localStorage = {
                remainingSpace: 0,
                length: 0,
                getItem: function (key) {
                    return null;
                },
                setItem: function (key, data) {
                },
                clear: function () {
                },
                removeItem: function (key) {
                },
                key: function (index) {
                    return null;
                }
            };
        }
    }
    initStorage();
})(Utils || (Utils = {}));
///#DEBUG
var Debug;
(function (Debug) {
    var ids = [
        "Scorm", 
        "Exercise"
    ];
    function write(msg) {
        if(!window.console) {
            return;
        }
        window.console.log(msg);
    }
    Debug.write = write;
    ;
    function trace(appId, msg) {
        if(ids.length == 0 || _.indexOf(ids, appId) >= 0) {
            write(appId + ": " + msg);
        }
    }
    Debug.trace = trace;
    function error(appId, msg, error) {
        write("*** ERROR " + error + ": " + appId + ": " + msg);
    }
    Debug.error = error;
})(Debug || (Debug = {}));
///#ENDDEBUG
var Cook;
(function (Cook) {
    //var c_Lang = "lang"; //cookie ve formatu en-gb
    //var c_Logout = "logout"; //cookie pro logout
    //var c_LMTicket = "LMTicket";
    //export enum Ids {
    //  lang,
    //  //logout,
    //  LMTicket,
    //  schools_info, //pro schools aplikaci, objekt s napr return url
    //  lms_licence, //pro
    //  //includeData
    //}
    function read(id, def) {
        if (typeof def === "undefined") { def = ""; }
        return gCookie.getCookie(LowUtils.EnumToString(LMComLib.CookieIds, id), def);
    }
    Cook.read = read;
    function write(id, value, persist) {
        if (typeof persist === "undefined") { persist = false; }
        gCookie.setCookie(LowUtils.EnumToString(LMComLib.CookieIds, id), value, persist ? 100000000 : undefined, "/", LowUtils.cookieDomain());
    }
    Cook.write = write;
    function remove(id) {
        gCookie.remove(LowUtils.EnumToString(LMComLib.CookieIds, id), "/", LowUtils.cookieDomain());
    }
    Cook.remove = remove;
})(Cook || (Cook = {}));
var LowUtils;
(function (LowUtils) {
    function isMobile() {
        /**
        * jQuery.browser.mobile (http://detectmobilebrowser.com/)
        *
        * jQuery.browser.mobile will be true if the browser is a mobile device
        *
        **/
        var nav = navigator;
        var win = window;
        var agent = nav.userAgent || nav.vendor || win.opera;
        var res = /android.+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|meego.+mobile|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(agent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(agent.substr(0, 4));
        return res;
    }
    LowUtils.isMobile = isMobile;
    /******  ENCRYPT x DECRYPT */
    function Int64ToByte(val) {
        return val & 255;
    }
    ;
    function Int64ToUShort(val) {
        return val & 65535;
    }
    ;
    var encryptKey = 18475;
    function EncryptString(data) {
        return bytesToHex(EncryptLow(data, 0, data.length, encryptKey));
    }
    LowUtils.EncryptString = EncryptString;
    function DecryptString(data) {
        return DecryptLow(hexToBytes(data), 0, data.length, encryptKey);
    }
    LowUtils.DecryptString = DecryptString;
    function encrypt(data) {
        return EncryptLow(data, 0, data.length, encryptKey);
    }
    LowUtils.encrypt = encrypt;
    function decrypt(data) {
        return DecryptLow(data, 0, data.length, encryptKey);
    }
    LowUtils.decrypt = decrypt;
    function EncryptLow(data, start, len, key) {
        for(var i = 0; i < data.length; i++) {
            data[i] = Int64ToByte(data[i] ^ (key >> 8));
            key = Int64ToUShort((data[i] + key) * 52845 + 22719);
        }
        return data;
    }
    function DecryptLow(data, start, len, key) {
        var old;
        for(var i = 0; i < data.length; i++) {
            old = data[i];
            data[i] = Int64ToByte(old ^ (key >> 8));
            key = Int64ToUShort((old + key) * 52845 + 22719);
        }
        return data;
    }
    function bytesToHex(bytes) {
        if(!bytes) {
            return "";
        }
        var hs = [];
        var c = 0;
        for(var i = 0; i < bytes.length; i++) {
            hs[c++] = dec2hex(bytes[i]);
        }
        return hs.join('');
    }
    ;
    function hexToBytes(str) {
        if(!str) {
            return null;
        }
        var hs = [];
        var c = 0;
        for(var i = 0; i < str.length; i += 2) {
            hs[c++] = hex2dec(str.substring(i, i + 2));
        }
        return hs;
    }
    LowUtils.hexToBytes = hexToBytes;
    ;
    var hexDigits = [
        '0', 
        '1', 
        '2', 
        '3', 
        '4', 
        '5', 
        '6', 
        '7', 
        '8', 
        '9', 
        'A', 
        'B', 
        'C', 
        'D', 
        'E', 
        'F'
    ];
    function dec2hex(dec) {
        return (hexDigits[dec >> 4] + hexDigits[dec & 15]);
    }
    ;
    function hex2dec(hex) {
        return (parseInt(hex, 16));
    }
    ;
    function parseQuery(query) {
        var res = [];
        if(typeof query == 'undefined' || query == '' || query == null) {
            return res;
        }
        var fch = query.charAt(0);
        if(fch == "#" || fch == "?") {
            query = query.substr(1);
        }
        var vars = query.split('&');
        for(var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            res[decodeURIComponent(pair[0]).toLowerCase()] = pair.length == 2 ? decodeURIComponent(pair[1]) : "";
        }
        return res;
    }
    LowUtils.parseQuery = parseQuery;
    function getQuery(query, name, default_val) {
        if (typeof default_val === "undefined") { default_val = ""; }
        if(query == null) {
            return default_val;
        }
        var res = query[name.toLowerCase()];
        return typeof res == "undefined" ? default_val : res;
    }
    LowUtils.getQuery = getQuery;
    function getQueryParams(name, default_val) {
        if (typeof default_val === "undefined") { default_val = ""; }
        initQueryParams();
        return getQuery(queryParams, name, default_val);
    }
    LowUtils.getQueryParams = getQueryParams;
    function initQueryParams() {
        if(queryParams == null) {
            queryParams = parseQuery(window.location.search);
        }
    }
    var queryParams = null;
    function EnumToString(enumType, val) {
        var map = enumType["map_"];
        if(typeof map == "undefined") {
            map = {
            };
            enumType["map_"] = map;
            for(var p in enumType) {
                map[enumType[p].toString()] = p;
            }
        }
        return map[val.toString()];
    }
    LowUtils.EnumToString = EnumToString;
    function EnumParse(enumType, val) {
        return enumType[val];
    }
    LowUtils.EnumParse = EnumParse;
    function cookieDomain() {
        var parts = window.location.host.split('.');
        if(parts.length < 3) {
            return undefined;
        }
        return parts[parts.length - 2] + "." + parts[parts.length - 1];
    }
    LowUtils.cookieDomain = cookieDomain;
    function documentReady(callback) {
        if(readyCalled) {
            callback();
        } else {
            callbacks.push(callback);
        }
    }
    LowUtils.documentReady = documentReady;
    function doReady() {
        readyCalled = true;
        for(var i = 0; i < callbacks.length; i++) {
            callbacks[i]();
        }
    }
    var readyCalled = false;
    var callbacks = [];
    if(window.addEventListener) {
        // W3C standard
        window.addEventListener('load', doReady, false)// NB **not** 'onload'
        ;
    } else if(window.attachEvent) {
        // Microsoft
        window.attachEvent('onload', doReady);
    }
    function globalEval(src) {
        if(window.execScript) {
            window.execScript(src);
            return;
        }
        eval.call(window, src);
    }
    LowUtils.globalEval = globalEval;
    ;
})(LowUtils || (LowUtils = {}));
var LMStatus;
(function (LMStatus) {
    function ToString(ck) {
        return Utils.pack(ck);
    }
    function FromString(s) {
        return Utils.unpack(s);
    }
    function getCookie() {
        if(LMStatus.Cookie == null) {
            try  {
                var cookStr = Cook.read(LMComLib.CookieIds.LMTicket);
                if(cookStr != "") {
                    LMStatus.Cookie = FromString(cookStr);
                }
                if(LMStatus.Cookie.id <= 0) {
                    LMStatus.Cookie = null;
                }
            } catch (msg) {
                return null;
            }
        }
        return LMStatus.Cookie;
    }
    LMStatus.getCookie = getCookie;
    function setCookie(cook, persistent) {
        if (typeof persistent === "undefined") { persistent = false; }
        if(cook == null) {
            Cook.remove(LMComLib.CookieIds.LMTicket);
        } else {
            Cook.write(LMComLib.CookieIds.LMTicket, ToString(cook), persistent);
        }
        LMStatus.Cookie = cook;
    }
    LMStatus.setCookie = setCookie;
    function logged(cook, persistent) {
        if (typeof persistent === "undefined") { persistent = false; }
        setCookie(cook, persistent);
        adjustCookie(function () {
            window.location.hash = Cook.read(LMComLib.CookieIds.returnUrl);
        });
    }
    LMStatus.logged = logged;
    function loginUrl() {
        return "http://" + location.host + "/lmcom/Services/LMLive/LMLive.aspx?returnurl=" + encodeURIComponent(location.href);
    }
    LMStatus.loginUrl = loginUrl;
    function setReturnUrl(newHash) {
        if (typeof newHash === "undefined") { newHash = null; }
        Cook.write(LMComLib.CookieIds.returnUrl, location.hash);
        if(newHash == null) {
            return;
        }
        if(newHash.charAt(0) != "#") {
            newHash = "#" + newHash;
        }
        location.hash = newHash;
    }
    LMStatus.setReturnUrl = setReturnUrl;
    function gotoReturnUrl() {
        var url = Cook.read(LMComLib.CookieIds.returnUrl);
        if(url || url == "") {
            location.hash = url;
        }
    }
    LMStatus.gotoReturnUrl = gotoReturnUrl;
    LMStatus.Cookie = null;
    function adjustCookie(completed) {
        getCookie();
        var logged = !_.isEmpty(LMStatus.Cookie) && LMStatus.Cookie.id && LMStatus.Cookie.id > 0;
        if(!logged) {
            $('body').removeClass("logged");
            setCookie(null);
        } else {
            $('body').addClass("logged");
        }
        if(LMStatus.onLogged) {
            LMStatus.onLogged(completed);
        } else {
            completed();
        }
    }
    LMStatus.adjustCookie = adjustCookie;
    LMStatus.onLogged = null;
    if($.views) {
        $.views.helpers({
            Cookie: getCookie,
            userName: friendlyName,
            isLMComCookie: isLMComCookie
        });
    }
    function Logout(obj, ev) {
        if(LMStatus.Cookie == null) {
            return;
        }
        try  {
            if(!isLMComCookie()) {
                var a = ev.currentTarget;
                if(a.tagName.toLowerCase() != "a") {
                    throw "OAuth.logoutEx";
                }
                a.href = OAuth.logoutUrl(LMStatus.Cookie.Type);
                return true;
            } else {
                return false;
            }
        }finally {
            LMStatus.setCookie(null);
            location.reload();
        }
    }
    LMStatus.Logout = Logout;
    function friendlyName() {
        if(LMStatus.Cookie == null) {
            return "";
        }
        return LMStatus.Cookie.Type == LMComLib.OtherType.LANGMasterNoEMail ? LMStatus.Cookie.Login : LMStatus.Cookie.EMail;
    }
    LMStatus.friendlyName = friendlyName;
    function isLMComCookie() {
        return !LMStatus.Cookie.Type || LMStatus.Cookie.Type == 0 || LMStatus.Cookie.Type == LMComLib.OtherType.LANGMasterNoEMail || LMStatus.Cookie.Type == LMComLib.OtherType.LANGMaster;
    }
    LMStatus.isLMComCookie = isLMComCookie;
})(LMStatus || (LMStatus = {}));
var LMComLib;
(function (LMComLib) {
    var LMJsContext = (function () {
        function LMJsContext() { }
        LMJsContext.actLocale = null;
        LMJsContext.jQueryLocale = function jQueryLocale() {
            switch(LMJsContext.actLocale) {
                case "cs-cz":
                    return "cs";
                default:
                    return "en-GB";
            }
        };
        return LMJsContext;
    })();
    LMComLib.LMJsContext = LMJsContext;    
    ;
})(LMComLib || (LMComLib = {}));
var JsRenderHelpers;
(function (JsRenderHelpers) {
    if($.views) {
        $.views.helpers({
            nextToLast: function () {
                return this.index === this.parent.data.length - 2;
            },
            notLast: function () {
                return this.index !== this.parent.data.length - 1;
            },
            tuppleRightEnd: function () {
                return this.index === this.parent.data.length - 1 || this.index % 2 === 1;
            },
            tuppleDelimiter: function () {
                return this.index % 2 === 1 && this.index !== this.parent.data.length - 1;
            },
            tuppleLeft: function () {
                return this.index % 2 === 0;
            },
            tuppleRight: function () {
                return this.index % 2 === 1;
            },
            boolConverter: function (par, trueVal, falseVal) {
                if(typeof par == "function") {
                    par = par();
                }
                return Utils.Empty(par) ? falseVal : trueVal;
            },
            numConverter: function (par) {
                var pars = [];
                for (var _i = 0; _i < (arguments.length - 1); _i++) {
                    pars[_i] = arguments[_i + 1];
                }
                if(typeof par == "function") {
                    par = par();
                }
                var idx = Utils.Empty(par) ? 0 : par;
                if(idx >= pars.length) {
                    throw "numConverter";
                }
                return pars[idx];
            }
        });
    }
})(JsRenderHelpers || (JsRenderHelpers = {}));
/****************** Localization *************************/
var tradosData = typeof (tradosData) == undefined ? [] : tradosData;
var CSLocalize = null;
var Trados;
(function (Trados) {
    var rxLocComment = new RegExp("\\(\\*.*?\\*\\)", "g");
    Trados.actLang = 0;
    Trados.actLangStr = "en_gb";
    Trados.actLangCode = "en-gb";
    function Localize(id, def) {
        if(id == null || tradosData == null) {
            return def.replace(rxLocComment, '');
        }
        var res = tradosData[id];
        if(typeof (res) == 'undefined') {
            return def.replace(rxLocComment, '');
        }
        return res;
    }
    ;
    if($.views) {
        $.views.helpers({
            CSLocalize: function (s, d) {
                try  {
                    return CSLocalize(s, d);
                } catch (exp) {
                    throw exp;
                }
            }
        });
    }
    CSLocalize = Localize;
    function adjustLoc(/*lng: string, loadLocJSScript: bool,*/ completed) {
        var fromCookie = "";
        var lng = null;
        //Hash string:
        var hash = LowUtils.parseQuery(location.hash);
        if(hash != null && hash["lang"]) {
            lng = hash["lang"];
            location.hash = "";
        }
        //Cookie:
        if(Utils.Empty(lng)) {
            fromCookie = lng = Cook.read(LMComLib.CookieIds.lang);
        }
        //default:
        if(lng == "" || lng == null) {
            lng = "en-gb";
        }
        //save to cookie:
        if(fromCookie != lng) {
            Cook.write(LMComLib.CookieIds.lang, lng);
        }
        //use lang
        var newLng = LowUtils.EnumParse(LMComLib.Langs, lng.replace('-', '_'));
        var isOK = Trados.actLang == newLng;
        Trados.actLang = newLng;
        var doCompleted = function () {
            Trados.actLangStr = LowUtils.EnumToString(LMComLib.Langs, Trados.actLang);
            Trados.actLangCode = Trados.actLangStr.replace("_", "-");
            completed();
        };
        if(isOK || Trados.actLang == LMComLib.Langs.en_gb) {
            doCompleted();
            return;
        }//anglictina se neladuje
        
        var url = Utils.string_format("loc/tradosData.{0}.js", [
            lng
        ]);
        $.getScript(url).done(function (script, textStatus) {
            return doCompleted();
        }).fail(function (jqxhr, settings, exception) {
            Trados.actLang = LMComLib.Langs.en_gb;
            doCompleted()/*noop, pouzije se difotni lokalizace, tj anglictina */ ;
        });
    }
    Trados.adjustLoc = adjustLoc;
})(Trados || (Trados = {}));
ko.bindingHandlers["width"] = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        valueAccessor($(element).width());
    },
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        $(element).width(ko.utils.unwrapObservable(valueAccessor()));
    }
};
ko.bindingHandlers["height"] = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        valueAccessor($(element).height());
    },
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        $(element).height(ko.utils.unwrapObservable(valueAccessor()));
    }
};

/// <reference path="../jsd/jquery.d.ts" />
/// <reference path="../jsd/jqueryMobile.d.ts" />
/// <reference path="../jsd/LmJsd.d.ts" />
/// <reference path="../jsd/knockout.d.ts" />
/// <reference path="../jsd/jsrender.d.ts" />
/// <reference path="external/closurelib.ts" />
/// <reference path="ModelBase.ts" />
var ViewBase;
(function (ViewBase) {
    var loaded = [];
    function addLoaded(ld) {
        loaded.push(ld);
    }
    ViewBase.addLoaded = addLoaded;
    Pager.viewServices = {
        viewLocator: function (modelName) {
            modelIdToScriptIdInit();
            var res = modelIdToScriptId[modelName];
            if(!res) {
                throw "ViewBase.ts ModelBase.viewLocator: Missing view " + modelName + " in Rewise\DefaultMobile.aspx.cs";
            }
            return res;
        },
        back: function () {
            history.back();
        },
        loaded: function () {
            _.each(loaded, function (l) {
                return l();
            });
            $(window).trigger("resize")//nektere komponenty, napr. progress bar, potrebuji inicializovat
            ;
        }
    };
    var initModel;
    var modelIdToScriptId;
    function modelIdToScriptIdInit() {
        if(modelIdToScriptId != null) {
            return;
        }
        modelIdToScriptId = [];
        $('script[data-for]').each(function (idx, el) {
            var th = $(el);
            var fors = th.attr('data-for').toLowerCase().split(",");
            _.each(fors, function (f) {
                return modelIdToScriptId[f + "Model".toLowerCase()] = th.attr('id');
            });
        });
    }
    //******************* mobile
    var ignoreNext_pagebeforechange = false;
    var appPage;//single app page
    
    //******************** Bootstrap
    function initBootStrapApp() {
        var first = true;
        $(window).hashchange(function () {
            Pager.getPage(location.hash, function (page) {
                if(page == null || page == Pager.ignorePage) {
                    return;
                }
                Pager.rootVM.doNavigated(page, function () {
                    if(first) {
                        ko.applyBindings(Pager.rootVM, $('#root')[0]);
                        //page.loaded();
                        first = false;
                    }
                });
            });
        });
        $(window).hashchange();
    }
    ViewBase.initBootStrapApp = initBootStrapApp;
    function template(id) {
    }
    ViewBase.template = template;
})(ViewBase || (ViewBase = {}));

/// <reference path="../jsd/jquery.d.ts" />
/// <reference path="../jsd/knockout.d.ts" />
/// <reference path="../jsd/jsrender.d.ts" />
/// <reference path="../jsd/underscore.d.ts" />
/// <reference path="../js/Utils.ts" />
var Pager;
(function (Pager) {
    (function (pathType) {
        pathType._map = [];
        pathType._map[0] = "eTestMe";
        pathType.eTestMe = 0;//lmcom/eTestMe.com/Test.aspx
        
        pathType._map[1] = "restServices";
        pathType.restServices = 1;//lmcom/rew/service.ashx
        
        pathType._map[2] = "eaScormServer";
        pathType.eaScormServer = 2;//lmcom/services/rpc/ea/scormserver.aspx
        
        pathType._map[3] = "eaData";
        pathType.eaData = 3;//comcz/
        
        pathType._map[4] = "schoolCourse";
        pathType.schoolCourse = 4;//lmcom/rew/schools/courses/
        
        pathType._map[5] = "cpv";
        pathType.cpv = 5;//
        
    })(Pager.pathType || (Pager.pathType = {}));
    var pathType = Pager.pathType;
    Pager.basicUrl = location.protocol + '//' + location.host + '/';
    function path(type, url, loc) {
        if (typeof url === "undefined") { url = ""; }
        if (typeof loc === "undefined") { loc = 0; }
        var res = null;
        switch(type) {
            case pathType.eTestMe:
                res = 'lmcom/eTestMe.com/Test.aspx';
                break;
            case pathType.restServices:
                res = 'lmcom/rew/service.ashx';
                break;
            case pathType.eaScormServer:
                res = 'lmcom/services/rpc/ea/scormserver.aspx';
                break;
            case pathType.eaData:
                res = LMComLib.LangToEADir[loc.toString()] + "/";
                break;
            case pathType.schoolCourse:
                res = 'lmcom/rew/schools/courses/';
                break;
            case pathType.cpv:
                res = "lmcom/eTestMe.com/site/" + Trados.actLangCode + '/ListeningAndPronunc.aspx#/AppPronunc/FactSoundView.xaml?IsFactOnly=true&';
                break;
            default:
                throw "NotImplemented";
        }
        return Pager.basicUrl + res + url;
    }
    Pager.path = path;
    function cpvUrl(url, title, begPos, endPos) {
        if(url.toLowerCase().indexOf("http://") < 0) {
            url = path(pathType.eaData, url, LMComLib.Langs.cs_cz);
        }
        var res = path(Pager.pathType.cpv, "FactUrl=" + encodeURIComponent(url) + '&FactTitle=' + encodeURIComponent(title) + (begPos ? '&sentBeg=' + begPos : "") + (endPos ? '&sentEnd=' + endPos : ""));
        return res;
    }
    Pager.cpvUrl = cpvUrl;
    function callCPV(ev, url, title, begPos, endPos) {
        (ev.currentTarget).href = cpvUrl(url, title, begPos, endPos);
        return true;
    }
    Pager.callCPV = callCPV;
    function ajax(pthType, type, data, completed, error) {
        if (typeof error === "undefined") { error = null; }
        var url = Pager.path(pthType);
        return $.ajax(url, {
            async: true,
            type: 'POST',
            dataType: 'text',
            data: type == null ? JSON.stringify(data) : {
                type: type,
                par: JSON.stringify(data)
            }
        }).then(function (dt, textStatus, jqXHR) {
            var res = JSON.parse(dt);
            if(res.error != 0) {
                if(error == null) {
                    alert(res.error.toString() + ": " + res.errorText + ", " + url);
                } else {
                    error(res.error, res.errorText);
                }
            } else if(completed != null) {
                completed(res.result);
            }
        }, function (jqXHR, textStatus, errorThrow) {
            return alert(textStatus + " (" + errorThrow + ": " + url + ")");
        });
    }
    Pager.ajax = ajax;
})(Pager || (Pager = {}));

/*! waitForImages jQuery Plugin - v1.4.2 - 2013-01-19
* https://github.com/alexanderdickson/waitForImages
* Copyright (c) 2013 Alex Dickson; Licensed MIT */

(function ($) {
  // Namespace all events.
  var eventNamespace = 'waitForImages';

  // CSS properties which contain references to images.
  $.waitForImages = {
    hasImageProperties: ['backgroundImage', 'listStyleImage', 'borderImage', 'borderCornerImage']
  };

  // Custom selector to find `img` elements that have a valid `src` attribute and have not already loaded.
  $.expr[':'].uncached = function (obj) {
    // Ensure we are dealing with an `img` element with a valid `src` attribute.
    if (!$(obj).is('img[src!=""]')) {
      return false;
    }

    // Firefox's `complete` property will always be `true` even if the image has not been downloaded.
    // Doing it this way works in Firefox.
    var img = new Image();
    img.src = obj.src;
    return !img.complete;
  };

  $.fn.waitForImages = function (finishedCallback, eachCallback, waitForAll) {

    var allImgsLength = 0;
    var allImgsLoaded = 0;

    // Handle options object.
    if ($.isPlainObject(arguments[0])) {
      waitForAll = arguments[0].waitForAll;
      eachCallback = arguments[0].each;
      // This must be last as arguments[0]
      // is aliased with finishedCallback.
      finishedCallback = arguments[0].finished;
    }

    // Handle missing callbacks.
    finishedCallback = finishedCallback || $.noop;
    eachCallback = eachCallback || $.noop;

    // Convert waitForAll to Boolean
    waitForAll = !!waitForAll;

    // Ensure callbacks are functions.
    if (!$.isFunction(finishedCallback) || !$.isFunction(eachCallback)) {
      throw new TypeError('An invalid callback was supplied.');
    }

    return this.each(function () {
      // Build a list of all imgs, dependent on what images will be considered.
      var obj = $(this);
      var allImgs = [];
      // CSS properties which may contain an image.
      var hasImgProperties = $.waitForImages.hasImageProperties || [];
      // To match `url()` references.
      // Spec: http://www.w3.org/TR/CSS2/syndata.html#value-def-uri
      var matchUrl = /url\(\s*(['"]?)(.*?)\1\s*\)/g;

      if (waitForAll) {

        // Get all elements (including the original), as any one of them could have a background image.
        obj.find('*').andSelf().each(function () {
          var element = $(this);

          // If an `img` element, add it. But keep iterating in case it has a background image too.
          if (element.is('img:uncached')) {
            allImgs.push({
              src: element.attr('src'),
              element: element[0]
            });
          }

          $.each(hasImgProperties, function (i, property) {
            var propertyValue = element.css(property);
            var match;

            // If it doesn't contain this property, skip.
            if (!propertyValue) {
              return true;
            }

            // Get all url() of this element.
            while (match = matchUrl.exec(propertyValue)) {
              allImgs.push({
                src: match[2],
                element: element[0]
              });
            }
          });
        });
      } else {
        // For images only, the task is simpler.
        obj.find('img:uncached')
            .each(function () {
              allImgs.push({
                src: this.src,
                element: this
              });
            });
      }

      allImgsLength = allImgs.length;
      allImgsLoaded = 0;

      // If no images found, don't bother.
      if (allImgsLength === 0) {
        finishedCallback.call(obj[0]);
      }

      $.each(allImgs, function (i, img) {

        var image = new Image();

        // Handle the image loading and error with the same callback.
        $(image).bind('load.' + eventNamespace + ' error.' + eventNamespace, function (event) {
          allImgsLoaded++;

          // If an error occurred with loading the image, set the third argument accordingly.
          eachCallback.call(img.element, allImgsLoaded, allImgsLength, event.type == 'load');

          if (allImgsLoaded == allImgsLength) {
            finishedCallback.call(obj[0]);
            return false;
          }

        });

        image.src = img.src;
      });
    });
  };
}(jQuery));


var Course;
(function (Course) {
    (function (TestStatus) {
        TestStatus._map = [];
        TestStatus.no = 0;
        TestStatus.Invitated = 1;
        TestStatus.InvitationAccepted = 2;
        TestStatus.Started_selfTesting = 3;
        TestStatus.Started_levelsKnown = 4;
        TestStatus.Started_testing = 5;
        TestStatus.Interrupted = 6;
        TestStatus.SendedToEvaluation = 7;
        TestStatus.Evaluated = 8;
        TestStatus.EvalAssigned = 9;
    })(Course.TestStatus || (Course.TestStatus = {}));
    var TestStatus = Course.TestStatus;
})(Course || (Course = {}));

/// <reference path="../jslib/js/GenLMComLib.ts" />
/// <reference path="GenCourse.ts" />
var schools;
(function (schools) {
    schools.SchoolCmdCreateTest_Type = 'schools.SchoolCmdCreateTest';
    function SchoolCmdCreateTest_Create(dbTestFileName, lmcomUserId, email, firstName, lastName, companyEMail) {
        return {
            dbTestFileName: dbTestFileName,
            lmcomUserId: lmcomUserId,
            email: email,
            firstName: firstName,
            lastName: lastName,
            companyEMail: companyEMail
        };
    }
    schools.SchoolCmdCreateTest_Create = SchoolCmdCreateTest_Create;
    schools.SchoolCmdTestInfo_Type = 'schools.SchoolCmdTestInfo';
    function SchoolCmdTestInfo_Create(getIds, id, RepStart, RepEnd, RepInterruptions, RepScore, status) {
        return {
            getIds: getIds,
            id: id,
            RepStart: RepStart,
            RepEnd: RepEnd,
            RepInterruptions: RepInterruptions,
            RepScore: RepScore,
            status: status
        };
    }
    schools.SchoolCmdTestInfo_Create = SchoolCmdTestInfo_Create;
    schools.SchoolCmdGetDict_Type = 'schools.SchoolCmdGetDict';
    function SchoolCmdGetDict_Create(dictId, word) {
        return {
            dictId: dictId,
            word: word
        };
    }
    schools.SchoolCmdGetDict_Create = SchoolCmdGetDict_Create;
})(schools || (schools = {}));

/// <reference path="../jslib/js/GenLMComLib.ts" />
/// <reference path="GenCourse.ts" />
/// <reference path="GenSchools.ts" />
var schools;
(function (schools) {
    (function (ExerciseStatus) {
        ExerciseStatus._map = [];
        ExerciseStatus.Unknown = 0;
        ExerciseStatus.Normal = 1;
        ExerciseStatus.Preview = 2;
        ExerciseStatus.Evaluated = 3;
        //pro modul
        ExerciseStatus.notAttempted = 4;
        ExerciseStatus.removed = 5;
    })(schools.ExerciseStatus || (schools.ExerciseStatus = {}));
    var ExerciseStatus = schools.ExerciseStatus;
    ;
    //stav cviceni
    ;
    //****************** informace o kurzech a testech
    (function (PretestMode) {
        PretestMode._map = [];
        PretestMode.first = 0;//startovaci stav
        
        PretestMode.testHome = 1;//test bezi, je na home
        
        PretestMode.testForm = 2;//test bezi, je na dotazniku
        
        PretestMode.testTest = 3;//test bezi, je v testu (ID testu je v testUrl)
        
        PretestMode.testTestFinished = 4;//test dobehl, nabidka nastavit zacatek kurzu
        
        PretestMode.tested = 5;
    })(schools.PretestMode || (schools.PretestMode = {}));
    var PretestMode = schools.PretestMode;
    //test dobehl, je nastaven zacatek kurzu
    ;
    //uzivatel vyjadril souhlas s licencni smlouvou
    ;
    //index do initResult.modUser.pages[index]
    //****************** metakurz s testy, persistentni dato v SCORM databazi
    (function (taskStatus) {
        taskStatus._map = [];
        taskStatus._map[0] = "toRun";
        taskStatus.toRun = 0;//budouci kurzy
        
        taskStatus._map[1] = "testFailed";
        taskStatus.testFailed = 1;//budouci test (jako toRun), predchozi test nebyl uspesny
        
        taskStatus._map[2] = "toStart";
        taskStatus.toStart = 2;//vse je splneno pro start kurzu, jeste ale neni nastartovan. Temporery priznak, ktery vzdy pri nacteni metakurzu meni na toRun
        
        taskStatus._map[3] = "started";
        taskStatus.started = 3;//kurz je nastartovan
        
        taskStatus._map[4] = "completed";
        taskStatus.completed = 4;
        taskStatus._map[5] = "skipped";
        taskStatus.skipped = 5;//Preskoc
        
        taskStatus._map[6] = "canceled";
        taskStatus.canceled = 6;//pro archiv testu: test se dostal do archivu operaci cancelTestSkip
        
    })(schools.taskStatus || (schools.taskStatus = {}));
    var taskStatus = schools.taskStatus;
})(schools || (schools = {}));

if (typeof LMSnd == 'undefined') LMSnd = [];
if (typeof S4N == 'undefined') S4N = [];
if (typeof S4N.SoundPlayer == 'undefined') S4N.SoundPlayer = [];
if (typeof S4N.SoundPlayer.flashPlayer == 'undefined') S4N.SoundPlayer.flashPlayer = [];
if (typeof LMSnd.Player == 'undefined') LMSnd.Player = [];

/*************  HTML5 ******************************************************/
//http://msdn.microsoft.com/en-us/library/ie/hh772500(v=vs.85).aspx
LMSnd.HTML5 = function (options) {
  try {
    Debug.trace_lmsnd('HTML5 constr start');
    LMSnd.HTML5.instance = this;
    this.audio = null;
    this.options = $.extend({ onTimeChanged: function (sec) { }, preloadSec: 3/10 }, options);
    Debug.trace_lmsnd('constr end');
  } catch (msg) {
    Debug.error_snd('constr', msg);
    throw msg;
  }
};

LMSnd.HTML5.isInstalled = function () { return true; }

LMSnd.HTML5.prototype = {
  init: function () {
    try {
      Debug.trace_lmsnd('HTML5.init start');
      var audio = $('<audio></audio>');
      this.audio = audio[0]; $('body').prepend(this.audio);
      if (!this.audio.load) //kontrola audio objektu
        throw 'LMSnd.HTML5.prototype: cannot find load method of audio tag';
      audio.bind('error', this, function (ev) {
        Debug.error_snd('Audio error',ev.target.error.code.toString());
        ev.data.options.onError("HTML5 Error code: " + ev.target.error.code.toString());
      });
      Debug.trace_lmsnd('HTML5.init end');
    } catch (msg) {
      Debug.error_snd('HTML5.init', msg);
      throw msg;
    }
  },
  playFile: function (url, sec) {
    Debug.trace_lmsnd('HTML5.playFile start: url=' + url + ', sec=' + sec.toString());
    var timerStatus = 3; //0..set muted position, 1..waiting for muted end, set position, 3..playing
    try {
      url = url.toLowerCase();
      this.audio.muted = false;
      if (url == this.audio.src) { //stejne URL
        Debug.trace_lmsnd('HTML5.stejne URL');
        //this.audio.pause();
        this.audio.currentTime = sec;
        this.audio.play();
      } else if (sec == 0) { //jine URL, od zacatku
        Debug.trace_lmsnd('HTML5.jine URL, od zacatku');
        //this.audio.autoplay = true;
        this.audio.src = url;
        this.audio.load();
        this.audio.play();
      } else { //jine URL, nastaveni pozice
        Debug.trace_lmsnd('HTML5.jine URL, nastaveni pozice');
        this.audio.src = url;
        this.audio.load();
        this.audio.play();
        this.audio.muted = true;
        var timerStatus = 0; //=> buffering pomoci muted prehrani
      }
    } catch (msg) {
      this.audio.src = null;
      Debug.error_snd('HTML5.playFile', msg);
      throw msg;
    }
    //Timer
    var self = this; var pos = sec; var mutedEnd = 0; //koncova muted pozice
    Debug.trace_lmsnd('HTML5.start timer');
    var timerId = window.setInterval(function () {
      try {
        if (self.audio.error != null) { clearInterval(timerId); return; }
        if (self.audio.paused || self.audio.ended) { //jiz se nehraje => -1
          Debug.trace_lmsnd('HTML5.jiz se nehraje');
          clearInterval(timerId); self.options.onTimeChanged(-1);
          return;
        }
        if (timerStatus == 3) { //playing, posilej info o pozici
          self.audio.muted = false;
          self.options.onTimeChanged(self.audio.currentTime); //pozice v sec
        } else { //priprava na hrani s nastavenim pozice
          if (timerStatus == 0) { //nastav muted pozici
            if (self.audio.currentTime == 0) return; //initializing
            mutedEnd = Math.min(pos + self.options.preloadSec, self.audio.duration - 2/10); //prehraj kousek potichu (napr. 0.3 sec) => zvuk do bufferu
            Debug.trace_lmsnd('HTML5.nastav muted pozici ' + pos.toString() + "-" + mutedEnd.toString());
            //self.audio.currentTime = Math.max(pos-0.2, 0);
            self.audio.currentTime = pos;
            timerStatus = 1;
          } else if (timerStatus == 1) {  //cekani na konec muted pozice
            //Debug.trace_lmsnd(self.audio.currentTime.toString() + "-" + mutedEnd.toString());
            if (self.audio.currentTime >= mutedEnd) { //konec muted pozice
              Debug.trace_lmsnd('HTML5.konec muted, nastav pravou pozici');
              //self.audio.pause();
              self.audio.currentTime = pos; //nastav ostrou pozici. self.audio.muted = false; az v dalsi otocce timeru (preskakoval zvuk)
              //self.audio.play();
              timerStatus = 3;
              //self.audio.pause();
            }
          }
        }
      } catch (msg) {
        clearInterval(timerId);
        self.audio.src = null;
        Debug.error_snd('HTML5.playFile timer', msg);
        throw msg;
      }
    }, 50);
    return;
  },
  stop: function () {
    Debug.trace_lmsnd('HTML5.stop start');
    try {
      this.audio.pause();
      Debug.trace_lmsnd('HTML5.stop end');
    } catch (msg) {
      Debug.error_snd('HTML5.stop', msg);
      throw msg;
    }
  }
};

/*************  Flash ******************************************************/
LMSnd.Flash = function (options) {
  Debug.trace_lmsnd('Flash constr start');
  try {
    LMSnd.Flash.instance = this;
    this.audio = null;
    this.audioActive = false;
    this.audioDiv = null;
    this.playing = false;
    this.options = $.extend({ onTimeChanged: function (sec) { }, flashPlayerUrl: '' }, options);
    Debug.trace_lmsnd('constr end');
  } catch (msg) {
    Debug.error_snd('constr', msg);
    throw msg;
  }
};
LMSnd.Flash.isInstalled = function () { return DetectFlashVer(8, 0, 0); }
LMSnd.Flash.prototype = {
  init: function () {
    Debug.trace_lmsnd('init start ' + GetSwfVer());
    try {
      //debugger;
      if (!LMSnd.Flash.isInstalled()) {
        Debug.trace_lmsnd('not installed');
        if (confirm('Adobe Flash Installation required!'))
          window.top.location.href = 'http://www.macromedia.com/go/getflashplayer';
        else
          window.top.location.href = 'about:blank';
      } else {
        var src = flashScript(LMSnd.Flash.instance.options.flashPlayerUrl);
        //src = flashScript("http://www.langmaster.com/comen/player");
        this.audioDiv = $(src);
        //this.audio = div.children(':first')[0];
        $('body').prepend(this.audioDiv[0]);
        //alert(this.audio.outerHTML);
        //alert(typeof LMSnd.Flash.instance.audio.playThis);
        //var audioDiv = this.audioDiv;
        //setTimeout(function () { LMSnd.Flash.instance.audio = audioDiv.children(':first')[0]; alert(typeof LMSnd.Flash.instance.audio.playThis); }, 1000);
      }
      Debug.trace_lmsnd('init start');
    } catch (msg) {
      Debug.error_snd('init', msg);
      throw msg;
    }
  },
  audioActivate: function () {
    if (this.audioActive) return;
    this.audioActive = true;
    LMSnd.Flash.instance.audio = this.audioDiv.children(':first')[0]
  },
  playFile: function (url, sec) {
    Debug.trace_lmsnd('playFile start');
    try {
      this.audioActivate();
      this.playing = true;
      this.audio.playThis(url, sec);
      Debug.trace_lmsnd('playFile end');
    } catch (msg) {
      Debug.error_snd('playFile', msg);
      throw msg;
    }
  },
  stop: function () {
    this.audioActivate();
    this.audio.stopThis();
  }
};
function flashScript(flashPlayerUrl) {
  Debug.trace_lmsnd('flashScript start ' + flashPlayerUrl);
  try {
    return AC_FL_RunContent(
  'codebase', 'http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,24,0',
        'width', '5',
        'height', '5',
        'src', flashPlayerUrl,
        'quality', 'high',
        'pluginspage', 'http://www.macromedia.com/go/getflashplayer',
        'align', 'middle',
        'play', 'true',
        'loop', 'true',
        'scale', 'showall',
        'wmode', 'window',
        'devicefont', 'false',
        'id', 'flashPlayer',
        'bgcolor', '#ffffff',
        'name', 'flashPlayer',
        'menu', 'true',
        'allowScriptAccess', 'sameDomain',
        'allowFullScreen', 'false',
        'movie', flashPlayerUrl,
        'salign', '');
  } catch (msg) {
    Debug.error_snd('flashScript', msg);
    throw msg;
  }
};

S4N.SoundPlayer.flashPlayer.statusChanged = function (arg) {
  var st = arg[0];
  switch (st) {
    case 'Playing':
      break;
    case 'Sound stopped':
    case 'Sound complete':
      LMSnd.Flash.instance.options.onTimeChanged(-1);
      LMSnd.Flash.instance.playing = false;
      break;
  }
};

S4N.SoundPlayer.flashPlayer.timeChanged = function (arg) {
  if (!LMSnd.Flash.instance.playing) return;
  LMSnd.Flash.instance.options.onTimeChanged(arg[0] / 1000);
};


/*************  SL ******************************************************/
LMSnd.SL = function (options) {
  try {
    Debug.trace_lmsnd('Silverlight constr start');
    LMSnd.Flash.instance = this;
    LMSnd.SL.instance = this;
    this.options = $.extend({ onTimeChanged: function (sec) { }, xapUrl: '', onLoad: function (ev) { }, onError: function (ev) { } }, options);
    this.audio = null;
    Debug.trace_lmsnd('constr end');
  } catch (msg) {
    Debug.error_snd('constr', msg);
    throw msg;
  }
};

LMSnd.SL.isInstalled = function () { return Silverlight.isInstalled('4.0.60310.0'); }
LMSnd.SL.onLoad = function (ev) {
  try {
    Debug.trace_lmsnd('onLoad start');
    LMSnd.SL.instance.audio = $('#SilverlightPlayer')[0].content.Player;
    LMSnd.SL.instance.audio.addEventListener("OnTimeChanged", function (sender, arg) {
      LMSnd.SL.instance.options.onTimeChanged(arg.Time / 1000);
    });
    LMSnd.SL.instance.options.onLoad(ev);
    Debug.trace_lmsnd('onLoad end');
  } catch (msg) {
    Debug.error_snd('onLoad', msg);
    throw msg;
  }
}
//LMSnd.SL.onError = function (ev) { LMSnd.SL.instance.options.onError(ev); };

LMSnd.SL.prototype = {
  init: function () {
    try {
      Debug.trace_lmsnd('init start');
      if (!LMSnd.SL.isInstalled()) {
        Debug.trace_lmsnd('not installed');
        if (confirm('Microsoft Silverlight Installation required!'))
          window.top.location.href = 'http://www.microsoft.com/getsilverlight';
        else
          window.top.location.href = 'about:blank';
      } else {
        var opt = LMSnd.SL.instance.options;
        var src = Silverlight.createObject(opt.xapUrl, null, 'SilverlightPlayer',
    { autoUpgrade: 'true', background: 'white', minRuntimeVersion: '4.0.60310.0', width: '1px', height: '1px', alt: 'XXX' },
    { onError: LMSnd.SL.onError, onLoad: LMSnd.SL.onLoad },
    'soundonly=true'
    );
        var div = $(src);
        $('body').prepend(div[0]);
      }
      Debug.trace_lmsnd('init end');
    } catch (msg) {
      Debug.error_snd('init', msg);
      throw msg;
    }
  },
  playFile: function (url, sec) {
    try {
      Debug.trace_lmsnd('playFile start');
      this.audio.playFile(url, sec * 1000);
      Debug.trace_lmsnd('playFile end');
    } catch (msg) {
      Debug.error_snd('playFile', msg);
      throw msg;
    }
  },
  stop: function () {
    try {
      Debug.trace_lmsnd('stop start');
      this.audio.pause();
      Debug.trace_lmsnd('stop end');
    } catch (msg) {
      Debug.error_snd('stop', msg);
      throw msg;
    }
  }
};

/*************  Player ******************************************************/
LMSnd.Player.init = function (options, onStoped) {
  try {
    Debug.trace_lmsnd('Player.init start');
    LMSnd.onStoped = onStoped;
    LMSnd.options = $.extend({
      Name: 'Flash',
      modifyUrl: function (driver, url) { return url; },
      getFileUrl: function (file) { return ''; },
      onStoped: function () { },
      onTimeChanged: function (sec) { },
      onError: function (msg) { alert(msg); },
      onStoped: null, //player.clearMarks()
      Shared: {
        onTimeChanged: function (sec) {
          if (LMSnd.file != null && sec < 0 /*zadany usek prehran*/) {
            LMSnd.file.onPlaying(10000000.0) /*notifikace o prehrani zadaneho useku*/;
            if (LMSnd.options.stoped) LMSnd.options.stoped();
            LMSnd.file = null;
          } else if (LMSnd.file != null)
            LMSnd.file.onPlaying(sec * 1000); //
          LMSnd.options.onTimeChanged(sec);
        },
        onError: function (msg) { LMSnd.options.onError(msg); }
      },
      SL: {},
      Flash: {},
      HTML5: {}
    }, options);
    LMSnd.file = null;

    switch (options.Name) {
      case 'Flash': $.extend(LMSnd.options.Flash, LMSnd.options.Shared); LMSnd.audio = new LMSnd.Flash(LMSnd.options.Flash); break;
      case 'SL': $.extend(LMSnd.options.SL, LMSnd.options.Shared); LMSnd.audio = new LMSnd.SL(LMSnd.options.SL); break;
      case 'HTML5': $.extend(LMSnd.options.HTML5, LMSnd.options.Shared); LMSnd.audio = new LMSnd.HTML5(LMSnd.options.HTML5); break;
    }
    $(document).ready(function () { LMSnd.audio.init(); });
    Debug.trace_lmsnd('Player.init end');
  } catch (msg) {
    Debug.error_snd('Player.init', msg);
    throw msg;
  }
};
LMSnd.Player.playFile = function (url, sec) {
  try {
    Debug.trace_lmsnd('Player.playFile start');
    url = LMSnd.options.modifyUrl(LMSnd.options.Name, url);
    Debug.trace_lmsnd('Player.playFile sec=' + sec.toString() + 'url=' + url);
    LMSnd.audio.playFile(url, sec);
    Debug.trace_lmsnd('Player.playFile end');
  } catch (msg) {
    Debug.error_snd('Player.playFile', msg);
    throw msg;
  }
};
LMSnd.Player.stop = function () {
  LMSnd.audio.stop();
};
LMSnd.Player.play = function (file, msec) {
  try {
    Debug.trace_lmsnd('Player.play start');
    LMSnd.file = file;
    var url = LMSnd.options.getFileUrl(file);
    LMSnd.Player.playFile(url, msec / 1000);
    Debug.trace_lmsnd('Player.play end');
  } catch (msg) {
    Debug.error_snd('Player.playFile', msg);
    throw msg;
  }
};
LMSnd.Player.selectDriver = function () {
  var testAudio = function () {
    var elem = document.createElement('audio'), bool = false;
    try {
      if (bool = !!elem.canPlayType) {
        bool = new Boolean(bool);
        bool.ogg = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, '');
        bool.mp3 = elem.canPlayType('audio/mpeg;').replace(/^no$/, '');
        bool.wav = elem.canPlayType('audio/wav; codecs="1"').replace(/^no$/, '');
        bool.m4a = (elem.canPlayType('audio/x-m4a;') || elem.canPlayType('audio/aac;')).replace(/^no$/, '');
      }
    } catch (e) { }
    return bool;
  };
  var fnc = function () {
    try {
      Debug.trace_lmsnd('Player.selectDriver start');
      //for CD ROM LMS - SL
      if (typeof (actLms) != 'undefined' && actLms == 1/*LMSType.NewEE*/) return 'SL';
      var compVer = function (a, b) { return compVerRec(a.split("."), b.split(".")); }

      var compVerRec = function (a, b) {
        if (a.length == 0) a = [0];
        if (b.length == 0) b = [0];
        if (a[0] != b[0] || (a.length == 1 && b.length == 1)) return a[0] - b[0];
        return compVerRec(a.slice(1), b.slice(1));
      }
      var isSL = LMSnd.SL.isInstalled();
      var isFlash = LMSnd.Flash.isInstalled();

      if (navigator.userAgent.toLowerCase().indexOf("android") >= 0) return 'HTML5'; //android
      else if (navigator.userAgent.toLowerCase().indexOf("ipad") >= 0) return 'HTML5'; //ipad
      else if (navigator.userAgent.toLowerCase().indexOf("tablet") >= 0) return 'HTML5'; //windows tablet
      else if ($.browser.msie && compVer($.browser.version, '10.0.0') >= 0) return 'HTML5'; //msie 10 a lepsi, HTML5
      else if ($.browser.msie && compVer($.browser.version, '9.0.0') < 0) return 'SL'; //msie mensi nez 9, SL
      else if (isFlash) return 'Flash'; //nainstalovan Flash => dej Flash
      else if (isSL) return 'SL'; //nainstalovan SL => dej SL
      else {
        var audio = testAudio();
        if (audio && audio.mp3!='') return 'HTML5';
        else return 'Flash'; //neni nic nainstalovano => dej Flash
      }
      Debug.trace_lmsnd('Player.selectDriver end');
    } catch (msg) {
      Debug.error_snd('Player.selectDriver', msg);
      throw msg;
    }
  };
  var res = fnc();
  //Debug.trace_lmsnd('*** ' + res);
  return res;
};

///#DEBUG
Debug.trace_lmsnd = function (msg) {
  Debug.trace("Sound", msg);
  //if (log && log.log) log.log('sound', msg);
};
Debug.error_snd = function (where, msg) {
  Debug.error("Sound", where, msg);
};
///#ENDDEBUG
var noop = null;
var Unicode;
(function (Unicode) {
    var a = new RegExp("\\w{4}", "g");
    var b = "0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05270531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A008A2-08AC0904-0939093D09500958-09610971-09770979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A697A6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A793A7A0-A7AAA7F8-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC".replace(a, "\\u$&");
    var c = new RegExp("[" + b + "\']");
    function d(ch) {
        return c.test(ch);
    }
    Unicode.d = d;
})(Unicode || (Unicode = {}));

/// <reference path="../jsd/jquery.d.ts" />
/// <reference path="../../schools/model.ts" />
/// <reference path="../js/GenLMComLib.ts" />
/// <reference path="../../schools/GenSchools.ts" />
var EA;
(function (EA) {
    function DataPath() {
        return schools.cfg.EADataPath;
    }
    EA.DataPath = DataPath;
    function startAjax() {
        Sys.Application.dispose();
        Sys.Application.beginCreateComponents();
    }
    EA.startAjax = startAjax;
    function endAjax() {
        setTimeout(function () {
            Sys.Application.endCreateComponents();
            Sys.Application._doInitialize();
            //aktualizace licence
            //if (SLPlayer.options == null) {
            //  var op = new SLPlayer.LicencePlayerOptions();
            //  op.lms = actLms;
            //  op.lang = Trados.actLang;
            //  op.site = LMComLib.Domains.com;
            //  op.subsite = LMComLib.SubDomains.com;
            //  op.lms_size = LMComLib.LMSSize.self;
            //}
            //if (SLPlayer.options.crsid != exerciseInfo.CrsId) {
            //  SLPlayer.options.crsid = exerciseInfo.CrsId;
            //  LicencePlayer.Init();
            //}
            //v obrazcich nahrad cestu k datum (easrc plnen v q:\LMNet2\WebApps\EduAuthorNew\app_code\Localize.cs)
            $("[easrc]").each(function (idx, el) {
                var e = $(el);
                e.attr("src", DataPath() + e.attr("easrc"));
            });
        }, 1);
    }
    EA.endAjax = endAjax;
    //export function callCPV(url: string, title: string, begPos?: number, endPos?: number) {
    //  var url = Pager.cpv(url, title, begPos, endPos);
    //}
    })(EA || (EA = {}));
var xapPath = '';
var actLms = 3;//LMSType.LMCom

function DictConnector_listenTalk(url, word) {
    return serviceRoot(actLms.toString(), true) + '/site/' + Trados.actLangCode + '/ListeningAndPronunc.aspx#/AppPronunc/FactSoundView.xaml?IsFactOnly=true&FactUrl=' + encodeURIComponent(url) + '&FactTitle=' + encodeURIComponent(word);
}
;
function DictConnector_listenTalkSentence(pars) {
    return serviceRoot(actLms.toString(), true) + '/site/' + Trados.actLangCode + '/ListeningAndPronunc.aspx#/AppPronunc/FactSoundView.xaml?IsFactOnly=true&FactUrl=' + encodeURIComponent(listenTalkBase(actLms.toString()) + '/' + pars.url) + '&sentBeg=' + pars.beg + '&sentEnd=' + pars.end + '&FactTitle=' + encodeURIComponent(pars.title);
}
;

var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/underscore.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/utils.ts" />
/// <reference path="../JsLib/js/ViewBase.ts" />
/// <reference path="../JsLib/controls/dict/Dict.ts" />
/// <reference path="../JsLib/js/GenLMComLib.ts" />
/// <reference path="GenCourse.ts" />
/// <reference path="GenSchools.ts" />
/// <reference path="my.ts" />
/// <reference path="home.ts" />
/// <reference path="interfaces.ts" />
/// <reference path="exercise.ts" />
/// <reference path="Persist.ts" />
/// <reference path="PersistLocal.ts" />
/// <reference path="PersistNewEA.ts" />
/// <reference path="Products.ts" />
var schools;
(function (schools) {
    var appId = "school";
    schools.data;
    schools.cfg;
    //export var myData: Login.MyData; //info o mojich firmach, produktech a rolich
    //export var isDebug = false;
    function LMComUserId() {
        return LMStatus.Cookie == null ? -1 : LMStatus.Cookie.id;
    }
    schools.LMComUserId = LMComUserId;
    //var courseFile: string; //identifikace naladovaneho kurzu
    //var moduleId: string; //identifikace naladovane kapitoly (pro modul a cviceni)
    function parseModuleData(data) {
        var parts = data.split("$$$");
        var res = [
            null
        ];//fake polozka, odpovidajici Home strance
        
        for(var i = 0; i < parts.length; i += 3) {
            if(!parts[i]) {
                break;
            }
            var m = {
                url: parts[i],
                title: parts[i + 1],
                html: parts[i + 2],
                index: res.length
            };
            res.push(m);
        }
        return res;
    }
    schools.parseModuleData = parseModuleData;
    function getParentChain(isHome, jsonId) {
        var home = {
            jsonId: null,
            typeName: schoolMy.typeName,
            src: null,
            index: -1,
            title: CSLocalize('77a6533d40034f1491e0310eff87b314', 'My Online language school')
        };
        if(!schools.data || isHome) {
            return [
                home
            ];
        }
        var res = [];
        var less = null, md = null;
        var crs = _.find(schools.data.crsStatic.courses, function (c) {
            return c.jsonId == jsonId || (less = _.find(c.lessons, function (l) {
                return l.jsonId == jsonId || (md = _.find(l.modules, function (m) {
                    return m.jsonId == jsonId;
                })) != null;
            })) != null;
        });
        var addPath = function (f, typeName, res) {
            if(f != null) {
                res.push({
                    src: f,
                    jsonId: f.jsonId,
                    title: f.title,
                    typeName: typeName
                });
            }
        };
        addPath(md, schoolModule.typeName, res);
        addPath(less, schoolLesson.typeName, res);
        addPath(crs, schoolCourse.typeName, res);
        var pth = {
            src: null,
            jsonId: null,
            title: schools.data.crsStatic.title,
            typeName: schoolHome.typeName,
            index: -1
        };
        res.push(pth);
        res.push(home);
        return res;
    }
    var Model2 = (function (_super) {
        __extends(Model2, _super);
        function Model2(typeName, companyId, courseId, jsonId) {
                _super.call(this, typeName);
            this.companyId = companyId;
            this.courseId = courseId;
            this.jsonId = jsonId;
            this.url = new Url(typeName, companyId, courseId, jsonId);
            if(LMStatus.Cookie == null) {
                return;
            }
            if(typeName == schoolEx.typeName) {
                //pro cviceni, jsonId je formatu <moduleId>/<exId>
                var parts = jsonId.split("/");
                this.parentChain = getParentChain(false, parts[0])//chain pro modul
                ;
                if(schools.data.modId != parts[0]) {
                    throw "Error";
                }//kontrola
                
                //pridej prvni prvek s URL cviceni
                var src = _.find(schools.data.modStatic, function (ex) {
                    return ex != null && ex.url == parts[1];
                });
                var pth = {
                    src: null,
                    jsonId: jsonId,
                    title: src.title,
                    typeName: typeName,
                    index: src.index
                };
                this.parentChain.unshift(pth);
            } else {
                this.parentChain = getParentChain(courseId == 0, jsonId);
            }
        }
        Model2.prototype.update = //loaded() { if (schoolHome.onLoaded != null) schoolHome.onLoaded(); }
        function (completed) {
            if(LMStatus.Cookie == null) {
                completed();
                return;
            }
            this.doUpdate(completed);
        };
        Model2.prototype.doUpdate = function (completed) {
        };
        Model2.prototype.breadcrumbs = function () {
            var res = [];
            for(var i = this.parentChain.length - 1; i > 0; i--) {
                var p = this.parentChain[i];
                res.push({
                    url: "#" + new Url(p.typeName, schools.data.companyId, schools.data.courseId, p.jsonId).toString(),
                    title: p.title
                });
            }
            return res;
        };
        Model2.prototype.hasBreadcrumb = function () {
            return this.parentChain != null && this.parentChain.length > 1;
        };
        Model2.prototype.title = function () {
            return this.parentChain[0].title;
        };
        Model2.prototype.action = function (id, jsonId) {
        };
        Model2.prototype.browse = function (sender, par) {
            this.action(schoolHome.menuAction.browse, par);
        };
        Model2.prototype.skip = function (sender, par) {
            this.action(schoolHome.menuAction.skip, par);
        };
        Model2.prototype.unskip = function (sender, par) {
            this.action(schoolHome.menuAction.unskip, par);
        };
        Model2.prototype.run = function (sender, par) {
            this.action(schoolHome.menuAction.run, par);
        };
        Model2.prototype.archive = function (sender, par) {
            this.action(schoolHome.menuAction.archive, par);
        };
        Model2.prototype.runTestAgain = function (sender, par) {
            this.action(schoolHome.menuAction.runTestAgain, par);
        };
        Model2.prototype.cancelTestSkip = function (sender, par) {
            this.action(schoolHome.menuAction.cancelTestSkip, par);
        };
        Model2.prototype.resetCourseRunAgain = function (sender, par) {
            this.action(schoolHome.menuAction.resetCourseRunAgain, par);
        };
        Model2.prototype.noop = function (sender, par) {
        };
        Model2.prototype.continueCrs = //noop
        function () {
            alert("continue");
        };
        Model2.prototype.gramClick = function () {
            alert("TODO: grammar");
        };
        Model2.prototype.dictClick = function () {
            alert("TODO: dictionary");
        };
        return Model2;
    })(Pager.Page);
    schools.Model2 = Model2;    
    var Url = (function (_super) {
        __extends(Url, _super);
        function Url(typeName, companyId, courseId, jsonId) {
                _super.call(this, typeName);
            this.companyId = companyId;
            this.courseId = courseId;
            this.jsonId = jsonId;
            this.courseId = this.courseId;
        }
        Url.fromString = function fromString(hash) {
            if(_.isEmpty(hash) || hash.length < 3) {
                return null;
            }
            if(hash.charAt(0) == '#') {
                hash = hash.substring(1);
            }
            var parts = hash.split('@');
            if(parts.length != 4) {
                return null;
            }
            return new Url(parts[0], parseInt(parts[1]), parseInt(parts[2]), parts[3]);
        };
        Url.prototype.toString = function () {
            return (appId + "@" + this.locator + "@" + this.companyId.toString() + "@" + this.courseId.toString() + "@" + this.jsonId).toLowerCase();
        };
        return Url;
    })(Pager.Url);
    schools.Url = Url;    
    Pager.registerUrlFromString(appId, Url.fromString);
    function findModule(url, completed) {
        if(LMStatus.Cookie != null && (schools.data == null || url.courseId != schools.data.courseId || url.companyId != schools.data.companyId)) {
            initCourseFile(url.companyId, url.courseId, function () {
                return createModule(url, completed);
            });
        } else {
            createModule(url, completed);
        }
    }
    schools.findModule = findModule;
    function createModule(url, completed) {
        switch(url.locator) {
            case schoolMy.typeName:
                completed(new schoolMy.Model());
                break;
            case schoolHome.typeName:
                completed(new schoolHome.Model(url.companyId, url.courseId));
                break;
            case schoolCourse.typeName:
                completed(new schoolCourse.Model(url.companyId, url.courseId, url.jsonId));
                break;
            case schoolLesson.typeName:
                completed(new schoolLesson.Model(url.companyId, url.courseId, url.jsonId));
                break;
            case schoolModule.typeName:
                if(LMStatus.Cookie != null && url.jsonId != schools.data.modId) {
                    initModule(url.jsonId, function () {
                        return completed(new schoolModule.Model(url.companyId, url.courseId, url.jsonId));
                    });
                } else {
                    completed(new schoolModule.Model(url.companyId, url.courseId, url.jsonId));
                }
                break;
            case schoolEx.typeName:
                var modId = url.jsonId.split('/')[0];
                if(LMStatus.Cookie != null && modId != schools.data.modId) {
                    initModule(modId, function () {
                        return completed(new schoolEx.Model(url.companyId, url.courseId, url.jsonId));
                    });
                } else {
                    completed(new schoolEx.Model(url.companyId, url.courseId, url.jsonId));
                }
                break;
            default:
                throw "Not implemented exception";
        }
    }
    schools.initUrl = function () {
        return new Url(schoolMy.typeName, -1, 0, null);
    };
    //
    function InitModel(_cfg, completed) {
        schools.cfg = _cfg;
        if(schools.cfg.offline) {
            scormLocal.makeLocal();
        } else {
            if(schools.cfg.newEA) {
                scorm.makeNewEA();
            }
            LMStatus.adjustCookie(//login
            function () {
                return prods.init(//nacteni infos o vsech produktech
                function () {
                    return Trados.adjustLoc(completed);
                });
            });
            //zajisteni spravne lokalizace
                    }
    }
    schools.InitModel = InitModel;
    var RootModel = (function (_super) {
        __extends(RootModel, _super);
        function RootModel() {
            _super.apply(this, arguments);

        }
        RootModel.prototype.urlFromString = function (hash) {
            return Url.fromString(hash);
        };
        return RootModel;
    })(Pager.RootModelEx);
    schools.RootModel = RootModel;    
    function firstModule(courseJsonId) {
        var crs = _.find(schools.data.crsStatic.courses, function (c) {
            return c.jsonId == courseJsonId;
        });
        var mod = null;
        var les = _.find(crs.lessons, function (l) {
            mod = _.find(l.modules, function (m) {
                return !m.skipped && (m.myModule == null || m.myModule.status != schools.ExerciseStatus.Evaluated);
            });
            return mod != null;
        });
        return les == null ? null : mod.jsonId;
    }
    function nextModule(modJsonId) {
        var mod = null;
        var les = null;
        var crs = _.find(schools.data.crsStatic.courses, function (c) {
            les = _.find(c.lessons, function (l) {
                mod = _.find(l.modules, function (m) {
                    return m.jsonId == modJsonId;
                });
                return mod != null;
            });
            return mod != null;
        });
        do {
            if(les.modules[les.modules.length - 1] == mod) {
                if(crs.lessons[crs.lessons.length - 1] == les) {
                    return null;
                } else {
                    mod = (les = crs.lessons[crs.lessons.indexOf(les) + 1]).modules[0];
                }
            } else {
                mod = les.modules[les.modules.indexOf(mod) + 1];
            }
        }while(mod.skipped);
        return mod;
    }
    schools.nextModule = nextModule;
    function runTest(userTestId) {
        var url = Pager.path(Pager.pathType.eTestMe, "?SingleTestId=" + userTestId.toString() + "&MyLMComUrl=" + encodeURIComponent(location.href) + "&MyLMComTitle=" + encodeURIComponent("My Learning"));
        location.href = url;
    }
    schools.runTest = runTest;
    function runCourse() {
        ////kontrola
        //var metaTask: metaTask = _.find(data.metaCourse.tasks, (c: metaTask) => c.jsonId == jsonId);
        //if (metaTask.course.status != taskStatus.toStart && metaTask.course.status != taskStatus.started) throw "wrong status";
        ////najdi prvni modul
        //var id = firstModule(jsonId);
        //if (id == null) throw "missing not evaluated module";
        if(schools.data.greenMod == null) {
            throw "missing not evaluated module";
        }
        runModule(schools.data.greenMod.jsonId);
    }
    schools.runCourse = runCourse;
    function runPretest(data) {
        var inf = {
            retUrl: window.location.href,
            retTitle: CSLocalize('9b269fa5f8c846b2a4d69f0c40a5eea4', 'Back to') + ' ' + data.crsStatic.title,
            isPretest: true
        };
        Cook.write(LMComLib.CookieIds.schools_info, JSON.stringify(inf));
        var url;
        var testName = LowUtils.EnumToString(LMComLib.CourseIds, data.pretestCrsId) + "Test";
        if(data.courseInfo.testMode == schools.PretestMode.testTest) {
            url = testName + "/" + data.courseInfo.testUrl;
        } else {
            url = testName + "/TestForm.htm";
        }
        location.href = Pager.path(Pager.pathType.eaData, url, Trados.actLang);
    }
    schools.runPretest = runPretest;
    function runModule(jsonId) {
        if(schools.cfg.newEA) {
            initModule(jsonId, function () {
                //najdi prvni nesplnene cviceni
                var pg = _.find(schools.data.modUser.pages, function (pg) {
                    return pg != null && pg.st != schools.ExerciseStatus.Evaluated;
                });
                var exId = schools.data.modStatic[pg ? pg.i : 1].url;
                Pager.navigateTo(createExerciseUrl(jsonId, exId));
            });
            //var mod = new schoolModule.Model(courseFile, jsonId);
                    } else {
            var inf = {
                retUrl: window.location.href,
                retTitle: CSLocalize('ddb499dea7ed4ba6b477ac16f654ab2e', 'Back to') + ' ' + schools.data.crsStatic.title,
                isPretest: false
            };
            Cook.write(LMComLib.CookieIds.schools_info, JSON.stringify(inf));
            var sg = schools.JSONFromId(jsonId);
            location.href = Pager.path(Pager.pathType.eaData, sg.spaceId + '/' + sg.globalId, Trados.actLang);
        }
    }
    schools.runModule = runModule;
    function initModule(moduleId, completed) {
        var url = "EAData/" + Trados.actLangStr + "/" + moduleId + ".txt";
        schools.readLocalData(url, function (res) {
            schools.data.modStatic = schools.parseModuleData(res);
            schools.data.modId = moduleId;
            schools.readModuleResults(LMComUserId(), schools.data.companyId, schools.data.crsStatic.courseId, moduleId, function (res) {
                //nacteni vysledku cviceni z LMComData DB
                schools.data.modUser = res == null ? {
                    st: schools.ExerciseStatus.Normal,
                    ms: 0,
                    s: 0,
                    bt: new Date().getTime(),
                    et: new Date().getTime(),
                    t: 0,
                    pages: [
                        null
                    ],
                    scormData: null
                } : res;
                for(var i = 1; i < schools.data.modStatic.length; i++) {
                    if(schools.data.modUser.pages.length > i) {
                        //page existuje
                        if(schools.data.modUser.pages[i].i != i) {
                            throw "pages[i].i != i";
                        }//kontrola
                        
                    } else {
                        //vytvor empty page
                        schools.data.modUser.pages[i] = {
                            i: i,
                            s: 0,
                            ms: 0,
                            st: schools.ExerciseStatus.Normal
                        };
                    }
                }
                //saveActModule(() => {
                //  readModuleResults(LMComUserId(), data.crsTree.courseId, moduleId, json => completed());
                //})
                completed();
            });
        });
    }
    function saveActModule(completed) {
        //data.modUserRaw.data = JSON.stringify(data.modUser);
        var mod = schools.data.modUser;
        var shortMod = {
            st: mod.st,
            ms: mod.ms,
            s: mod.s,
            bt: mod.bt,
            et: mod.et,
            t: mod.t,
            pages: null,
            scormData: null
        };
        schools.writeModuleResults(LMComUserId(), schools.data.companyId, schools.data.crsStatic.courseId, schools.data.modId, schools.data.modUser, shortMod, function () {
            moduleChanged(schools.data.modId, shortMod, completed)//prepocitani vseho a ulozeni metainformaci
            ;
        });
    }
    schools.saveActModule = saveActModule;
    function initCourseFile(companyId, courseId, completed) {
        if(courseId == 0 || companyId < 0) {
            completed();
            return;
        }
        prods.read(courseId, function (crsTree) {
            //staticka data, sitemap kurzu
            DictConnector.initDict(crsTree.line, Trados.actLang);
            readMetaCourse(LMComUserId(), companyId, courseId, function (metaCrs) {
                //nacteni meta dat o kurzu
                var isStart = metaCrs == null;
                schools.readCrsInfo(LMComUserId(), companyId, courseId, function (res) {
                    //globalni info o kurzu
                    var courseInfo = res != null ? res : {
                        testUrl: null,
                        testMode: schools.PretestMode.first,
                        firstId: null,
                        tempFirstIdTitle: null,
                        tempFirstId: null,
                        testHistory: null,
                        licenceAgreeOK: true
                    };
                    schools.readCrsResults(isStart, LMComUserId(), companyId, courseId, function (res) {
                        //uzivatelovy vysledky kurzu
                        var crsResults = res;
                        var testIds = isStart ? null : _.filter(_.map(metaCrs.tasks, function (c) {
                            return c.test != null && c.test.userTestId;
                        }), function (id) {
                            return id != 0;
                        });
                        schools.readTestResults(isStart, testIds, function (testResults) {
                            // pro rozjete testy: vysledky testu
                            schools.data = {
                                courseId: courseId,
                                companyId: companyId,
                                pretestCrsId: crsTree.pretestCrsId,
                                metaCourse: metaCrs,
                                crsStatic: crsTree,
                                crsUser: crsResults,
                                testResults: testResults,
                                courseInfo: courseInfo,
                                modId: null,
                                modStatic: null,
                                modUserRaw: null,
                                modUser: null,
                                previewMode: false,
                                greenMod: null
                            };
                            refreshData(function () {
                                return writeMetaCourse(schools.data.metaCourse, completed);
                            });
                        });
                    });
                });
            });
        });
    }
    //dosad data.crsUser dosad nove vysledky modulu a vse prepocitej
    function moduleChanged(modId, shortMod, completed) {
        schools.data.crsUser[modId] = shortMod;
        refreshData(function () {
            return writeMetaCourse(schools.data.metaCourse, completed);
        });
    }
    function refreshData(completed) {
        if (typeof completed === "undefined") { completed = null; }
        //inicializace meta informaci o kurzu
        if(schools.data.metaCourse == null) {
            schools.data.metaCourse = {
                companyId: //courseFile: null,
                schools.data.companyId,
                courseId: schools.data.courseId,
                pretest: null,
                tasks: _.map(schools.data.crsStatic.courses, function (c) {
                    var tsk = {
                        title: c.title,
                        jsonId: c.jsonId,
                        testFileName: c.testFileName,
                        course: null,
                        test: null,
                        removedModules: null,
                        resetedForTestFailes: false
                    };
                    newTestAttempt(tsk, 0);
                    newCourseAttempt(tsk, 0);
                    return tsk;
                })
            };
        }
        //aktualizuj Pretest
        if(schools.data.crsStatic.pretestCrsId != LMComLib.CourseIds.no) {
            //neignoruj pretest
            if(schools.data.metaCourse.pretest == null) {
                schools.data.metaCourse.pretest = {
                    status: 0,
                    start: 0,
                    end: 0,
                    result: null
                };
            }
            var pretest = schools.data.metaCourse.pretest;
            if(pretest.status != schools.taskStatus.skipped) {
                switch(schools.data.courseInfo.testMode) {
                    case schools.PretestMode.first:
                        pretest.status = schools.taskStatus.toStart;
                        break;
                    case schools.PretestMode.testTestFinished:
                    case schools.PretestMode.tested:
                        pretest.status = schools.taskStatus.completed;
                        if(pretest.end == 0) {
                            //prave splnen pretest => nastav skip pro preskakovane testy
                            var modId = schools.data.courseInfo.tempFirstId;
                            if(modId != null) {
                                var actCrs = _.find(schools.data.crsStatic.courses, function (crs) {
                                    return _.any(crs.lessons, function (l) {
                                        return _.any(l.modules, function (m) {
                                            return m.jsonId == modId;
                                        });
                                    });
                                });
                                //najdi prvni metakurz, obsahujici modId kapitolu
                                for(var i = 0; i < schools.data.metaCourse.tasks.length; i++) {
                                    var tsk = schools.data.metaCourse.tasks[i];
                                    if(tsk.jsonId == actCrs.jsonId) {
                                        break;
                                    }
                                    tsk.course.status = tsk.test.status = schools.taskStatus.skipped;
                                }
                                pretest.result = actCrs.jsonId;
                                pretest.end = 1;
                            }
                        }//else
                        
                        //pretest.result = null;
                        break;
                    default:
                        pretest.status = schools.taskStatus.started;
                        break;
                }
            }
        }
        //do statickeho crsTree napln informace z vysledku studia
        finishCourse(schools.data.crsStatic, createMyModules(schools.data.crsUser), schools.data.metaCourse);
        //sekvence pokusu kurz,test, ...
        var atempts = _.flatten(_.map(schools.data.metaCourse.tasks, function (t) {
            return t.test == null ? [
                t.course
            ] : [
                t.course, 
                t.test
            ];
        }));
        //pretestActive => ostatni toRun
        if(pretest != null && pretest.status != schools.taskStatus.completed && pretest.status != schools.taskStatus.skipped) {
            _.each(atempts, function (att) {
                return att.status = schools.taskStatus.toRun;
            });
            completed();
            return;
        }
        //zmen toStart, completed, started => toRun
        _.each(atempts, function (att) {
            if(att.status == schools.taskStatus.toStart || att.status == schools.taskStatus.started || att.status == schools.taskStatus.completed) {
                att.status = schools.taskStatus.toRun;
            }
        });
        var finishTask = null;
        //Zjisti status kurzu a testu a aktualizuj nepersistentni informace (elapsed, score apod.)
        for(var i = 0; i < schools.data.crsStatic.courses.length; i++) {
            var crs = schools.data.crsStatic.courses[i];
            var metaTask = schools.data.metaCourse.tasks[i];
            //aktualizuj toRun na started nebo completed
            if(metaTask.course.status == schools.taskStatus.toRun && crs.started) {
                //zacat alespon 1 modul => started
                metaTask.course.status = schools.taskStatus.started;
            }
            ;
            if(metaTask.course.status == schools.taskStatus.started && crs.modCount == crs.evalCount + crs.skipedCount) {
                //completed: budto skiped nebo dokoncene moduly
                metaTask.course.status = schools.taskStatus.completed;
            }
            if(metaTask.course.status == schools.taskStatus.started || metaTask.course.status == schools.taskStatus.completed) {
                //pro rozjete a ukoncene tasky aktualizuj statistiku
                //if (!isDebug) {
                metaTask.course.elapsedSeconds = crs.elapsedSeconds;
                metaTask.course.start = crs.beg;
                metaTask.course.end = crs.end;
                metaTask.course.score = crs.score;
                var cnt = crs.modCount - crs.skipedCount;
                metaTask.course.progress = cnt == 0 ? 0 : Utils.toInt(100 * crs.evalCount / cnt);
                //}
                            }
            var tst = _.find(schools.data.testResults, function (t) {
                return t.id == metaTask.test.userTestId;
            });
            if(tst != null) {
                //aktualizuj toRun na started nebo completed
                if(metaTask.test.status == schools.taskStatus.toRun || metaTask.test.status == schools.taskStatus.testFailed) {
                    //test ma zaznam v databazi => started
                    metaTask.test.status = schools.taskStatus.started;
                }
                if(metaTask.test.status == schools.taskStatus.started && tst.status == Course.TestStatus.Evaluated) {
                    //zmena stavu testu na Dokonceno nebo failed
                    metaTask.test.status = tst.RepScore < schools.cfg.failLimit ? schools.taskStatus.testFailed : schools.taskStatus.completed;
                    if(metaTask.test.status == schools.taskStatus.testFailed && !metaTask.resetedForTestFailes) {
                        finishTask = metaTask;
                        metaTask.resetedForTestFailes = true;
                    }
                }
                if(metaTask.test.status == schools.taskStatus.started || metaTask.test.status == schools.taskStatus.completed || metaTask.test.status == schools.taskStatus.testFailed) {
                    //pro rozjete a ukoncene tasky aktualizuj statistiku
                    metaTask.test.start = tst.RepStart / 1000;
                    metaTask.test.end = tst.RepEnd / 1000;
                    metaTask.test.interruptions = tst.RepInterruptions;
                    metaTask.test.score = tst.RepScore;
                }
            }
        }
        try  {
            //Nastav dalsi pokracovani (tj. nastaveni stavu ostatnich kurzu a testu)
            var greenCrs = null;
            _.each(atempts, function (att) {
                if(greenCrs != null) {
                    if(att.status == schools.taskStatus.toStart || att.status == schools.taskStatus.started) {
                        att.status = schools.taskStatus.toRun;
                    }
                } else if(att.status == schools.taskStatus.toRun || att.status == schools.taskStatus.testFailed || att.status == schools.taskStatus.toStart || att.status == schools.taskStatus.started) {
                    if(att.status != schools.taskStatus.started) {
                        att.status = schools.taskStatus.toStart;
                    }
                    greenCrs = att;
                }
            });
            //debugger;
            //var started = _.filter(atempts, (att: taskAttempt) => att.status == taskStatus.toStart || att.status == taskStatus.started);
            //var firstToRun: taskAttempt = _.find(atempts, (att: taskAttempt) => att.status == taskStatus.toRun || att.status == taskStatus.testFailed); //prvni se stavem toRun nebo testFailed
            //if (firstToRun == null) return;
            //var firstStarted = _.find(atempts, (att: taskAttempt) => att.status == taskStatus.toStart || att.status == taskStatus.started) //prvni na rade
            ////neni zadny firstStarted nebo firstToRun je pred firstStarted => nastav firstToRun priznak toStart
            //if (firstStarted == null || _.indexOf(atempts, firstStarted) > _.indexOf(atempts, firstToRun)) { firstToRun.status = taskStatus.toStart; return; }
                    }finally {
            if(finishTask != null) {
                //prave zjisteny failed test => resetuj predchozi kurz
                schoolHome.Model.resetCourse(true, finishTask, function () {
                    return refreshData(completed);
                });
            } else if(completed != null) {
                completed();
            }
        }
    }
    schools.refreshData = refreshData;
    function newTestAttempt(tsk, date) {
        if(tsk.testFileName == null) {
            return null;
        }
        var test = {
            status: schools.taskStatus.toRun,
            start: date,
            end: 0,
            score: 0,
            archive: null,
            userTestId: 0,
            interruptions: 0
        };
        if(tsk.test != null) {
            test.archive = tsk.test.archive;
            tsk.test.archive = null;
            if(test.archive == null) {
                test.archive = [];
            }
            test.archive.push(tsk.test);
        }
        tsk.test = test;
        tsk.resetedForTestFailes = false;
        return test;
    }
    schools.newTestAttempt = newTestAttempt;
    function newCourseAttempt(tsk, date) {
        var crs = {
            status: schools.taskStatus.toRun,
            start: date,
            end: 0,
            elapsedSeconds: 0,
            score: 0,
            archive: null,
            progress: 0
        };
        if(tsk.course != null) {
            crs.archive = tsk.course.archive;
            tsk.course.archive = null;
            if(crs.archive == null) {
                crs.archive = [];
            }
            crs.archive.push(tsk.course);
        }
        tsk.course = crs;
        return crs;
    }
    schools.newCourseAttempt = newCourseAttempt;
    function createExerciseUrl(modId, exId) {
        return new Url(schoolEx.typeName, schools.data.companyId, schools.data.courseId, modId + "/" + exId);
    }
    schools.createExerciseUrl = createExerciseUrl;
    function createModuleUrl(modId) {
        return new Url(schoolModule.typeName, schools.data.companyId, schools.data.courseId, modId);
    }
    schools.createModuleUrl = createModuleUrl;
    function createLessonUrl(lessId) {
        return new Url(schoolLesson.typeName, schools.data.companyId, schools.data.courseId, lessId);
    }
    schools.createLessonUrl = createLessonUrl;
    function createCourseUrl(crsId) {
        return new Url(schoolCourse.typeName, schools.data.companyId, schools.data.courseId, crsId);
    }
    schools.createCourseUrl = createCourseUrl;
    function createHomeUrl(companyId, courseId) {
        return new Url(schoolHome.typeName, companyId, courseId, "");
    }
    schools.createHomeUrl = createHomeUrl;
    function createHomeUrlStd() {
        return new Url(schoolHome.typeName, schools.data.companyId, schools.data.courseId, "");
    }
    schools.createHomeUrlStd = createHomeUrlStd;
    function readMetaCourse(lmcomUserId, companyId, crsId, completed) {
        schools.getMetaCourse(lmcomUserId, companyId, crsId, completed);
    }
    function writeMetaCourse(metaCrs, completed) {
        schools.setMetaCourse(LMComUserId(), metaCrs.companyId, metaCrs.courseId, metaCrs, completed);
    }
    schools.writeMetaCourse = writeMetaCourse;
    function startable(st) {
        return st == schools.taskStatus.started || st == schools.taskStatus.toStart;
    }
    schools.startable = startable;
    function finishCourse(crss, myMods, metaCrs) {
        var greenOK = false;
        for(var i = 0; i < crss.courses.length; i++) {
            var crs = crss.courses[i];
            crs.modCount = crs.evalCount = crs.score = crs.skipedCount = 0;
            crs.started = crs.isGreen = false;
            crs.isCompleted = true;
            var crsScrCnt = 0;
            crs.beg = 0;
            crs.end = 0;
            crs.elapsedSeconds = 0;
            var task = _.find(metaCrs.tasks, function (t) {
                return t.jsonId == crs.jsonId;
            });
            if(task.course.status == schools.taskStatus.skipped) {
                continue;
            }
            for(var j = 0; j < crs.lessons.length; j++) {
                var les = crs.lessons[j];
                les.evalCount = les.score = les.beg = les.end = les.elapsedSeconds = les.skipedCount = 0;
                var lesScrCnt = 0;
                les.started = les.isGreen = false;
                les.isCompleted = true;
                crs.modCount += les.modules.length;
                for(var k = 0; k < les.modules.length; k++) {
                    var mod = les.modules[k];
                    mod.skipped = _.indexOf(task.removedModules, mod.jsonId) >= 0;
                    mod.isCompleted = mod.isGreen = false;
                    if(mod.skipped) {
                        les.skipedCount++ , crs.skipedCount++;
                        continue;
                    }
                    //Skore a completed
                    var myMod = mod.myModule = myMods[mod.jsonId];
                    //prvni nevyhodnoceny modul => aktualni pro zelenou sipku
                    if(!greenOK && (_.isEmpty(myMod) || myMod.status != schools.ExerciseStatus.Evaluated)) {
                        greenOK = true;
                        schools.data.greenMod = mod;
                        mod.isGreen = true;
                        crs.isGreen = true;
                        les.isGreen = true;
                    }
                    //prazdne vysledky modulu => pokracuj
                    if(_.isEmpty(myMod)) {
                        crs.isCompleted = false;
                        les.isCompleted = false;
                        continue;
                    }
                    //zpracuj vysledky modulu
                    les.started = crs.started = true;
                    les.elapsedSeconds += myMod.elapsedSeconds;
                    crs.elapsedSeconds += myMod.elapsedSeconds;
                    crs.beg = setDate(myMod.beg, crs.beg, true);
                    crs.end = setDate(myMod.end, crs.end, false);
                    les.beg = setDate(myMod.beg, les.beg, true);
                    les.end = setDate(myMod.end, les.end, false);
                    if(myMod.status != schools.ExerciseStatus.Evaluated) {
                        crs.isCompleted = false;
                        les.isCompleted = false;
                        continue;
                    }
                    //score a progress pouze pro hotove moduly
                    ;
                    les.evalCount++;
                    crs.evalCount++;
                    mod.isCompleted = true;
                    if(myMod.score != null) {
                        crsScrCnt++;
                        lesScrCnt++;
                        crs.score += myMod.score;
                        les.score += myMod.score;
                    }
                }
                les.skipped = les.skipedCount == les.modules.length// !_.find(les.modules, (m: mod) => !m.skipped);
                ;
                if(lesScrCnt > 0) {
                    les.score = Utils.toInt(les.score / lesScrCnt);
                }
            }
            if(crsScrCnt > 0) {
                crs.score = Utils.toInt(crs.score / crsScrCnt);
            }
        }
    }
    function setDate(mod, res, min) {
        if(mod == 0) {
            return res;
        }
        if(res == 0) {
            return mod;
        }
        if(min) {
            return res > mod ? mod : res;
        } else {
            return res < mod ? mod : res;
        }
    }
    function createMyModules(crsResults) {
        var res = [];
        for(var i in crsResults) {
            var inf = crsResults[i];
            var score = inf.ms == 0 ? null : Utils.toInt(inf.s / inf.ms * 100);
            var resIt = {
                status: inf.st,
                beg: inf.bt / 1000,
                end: inf.et / 1000,
                elapsedSeconds: Utils.toInt(inf.t / 1000),
                score: inf.st == schools.ExerciseStatus.Evaluated ? score : 0
            };
            res[i] = resIt;
        }
        return res;
    }
    function JSONToId(spaceId, globalId) {
        var res = globalId.toLowerCase();
        res = res.replace(/(\_)/g, '_u').replace(/(\.)/g, '_d').replace(/(\/)/g, '_s').replace(/(\-)/g, '_c');
        return spaceId.toLowerCase().replace(/(\-)/g, '_c') + '_x' + res;
    }
    ;
    function JSONFromId(id) {
        var idx = id.indexOf('_x');
        var sp = id.substring(0, idx).replace(/(_c)/g, '-');
        var gl = id.substring(idx + 2, id.length);
        gl = gl.replace(/(_s)/g, '/').replace(/(_d)/g, '.').replace(/(_u)/g, '_').replace(/(_c)/g, '-');
        return {
            spaceId: sp,
            globalId: gl
        };
    }
    schools.JSONFromId = JSONFromId;
    ;
    function PathFromId(moduleId, exId) {
        var sg = JSONFromId(moduleId);
        return sg.spaceId + "/" + sg.globalId.replace("home.htm", exId);
    }
    schools.PathFromId = PathFromId;
    function UrlFromId(moduleId, exId) {
        var sg = JSONFromId(moduleId);
        return sg.spaceId + "/" + sg.globalId.replace("home.htm", exId).replace(/\//g, "-") + ".txt";
    }
    schools.UrlFromId = UrlFromId;
})(schools || (schools = {}));

/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/underscore.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/utils.ts" />
/// <reference path="../JsLib/js/ViewBase.ts" />
/// <reference path="../JsLib/js/Ajax.ts" />
/// <reference path="../JsLib/js/GenLMComLib.ts" />
/// <reference path="GenCourse.ts" />
/// <reference path="GenSchools.ts" />
/// <reference path="home.ts" />
/// <reference path="interfaces.ts" />
/// <reference path="exercise.ts" />
/// <reference path="model.ts" />
var schools;
(function (schools) {
    schools.readLocalData = function (relUrl, completed) {
        $.get(relUrl).done(function (res) {
            return completed(res);
        }).fail(function (err) {
            return alert(err + " " + relUrl);
        });
    };
    schools.createTest = function (testFileName, lmcomUserId, email, firstName, lastName, companyEMail, completed) {
        Pager.ajax(Pager.pathType.restServices, schools.SchoolCmdCreateTest_Type, schools.SchoolCmdCreateTest_Create(testFileName, lmcomUserId, email, firstName, lastName, companyEMail), function (res) {
            return completed(parseInt(res));
        });
    };
    schools.readTestResults = function (isStart, testIds, completed) {
        if(isStart || testIds == null || testIds.length == 0) {
            completed(null);
            return;
        }
        Pager.ajax(Pager.pathType.restServices, schools.SchoolCmdTestInfo_Type, schools.SchoolCmdTestInfo_Create(_.map(testIds, function (t) {
            return t.toString();
        }).join(','), 0, 0, 0, 0, 0, 0), function (res) {
            return completed(res);
        });
    };
    schools.resetModules = function (LMComUserId, companyId, crsId, modJsonIds, completed) {
        //uvolni data aktualniho modulu
        schools.data.modId = null;
        schools.data.modStatic = null;
        schools.data.modUser = null;
        //vymaz moduly na klientovi
        _.each(modJsonIds, function (key) {
            return delete schools.data.crsUser[key];
        });
        //vymaz moduly na serveru
        var rpcPar = {
            site: 'com',
            userId: LMComUserId,
            companyId: companyId,
            courseId: crsId,
            spaceId: null,
            globalId: null,
            data: null
        };
        var body = {
            name: 'scorm.resetModules',
            pars: rpcPar
        };
        Pager.ajax(Pager.pathType.eaScormServer, null, body, function (str) {
            return completed();
        });
    };
    schools.readCrsResults = function (isStart, lmcomUserId, companyId, crsId, completed) {
        if(isStart) {
            completed(null);
            return;
        }
        var rpcPar = {
            site: 'com',
            userId: lmcomUserId,
            companyId: companyId,
            courseId: crsId,
            spaceId: '',
            globalId: '',
            data: ''
        };
        var body = {
            name: 'scorm.getCourseData',
            pars: rpcPar
        };
        Pager.ajax(Pager.pathType.eaScormServer, null, body, function (res) {
            return completed(res == null ? null : JSON.parse(res));
        });
    };
    //Scorm konstanty, pouzivaji se pouze v opravdovem SCORM, v lm.com-EA a REW ne
    schools.readModuleResults = function (lmcomUserId, companyId, crsId, moduleJsonId, completed) {
        var sg = schools.JSONFromId(moduleJsonId);
        var rpcPar = {
            site: 'com',
            userId: lmcomUserId,
            companyId: companyId,
            courseId: crsId,
            spaceId: sg.spaceId,
            globalId: sg.globalId,
            data: ''
        };
        var body = {
            name: 'scorm.getData',
            pars: rpcPar
        };
        Pager.ajax(Pager.pathType.eaScormServer, null, body, function (res) {
            if(res == null) {
                completed(null);
            }
            var mdr = JSON.parse(res);
            var md = JSON.parse(mdr.data);
            md.scormData = mdr.scormData;
            completed(md);
        });
    };
    schools.writeModuleResults = function (lmcomUserId, companyId, crsId, moduleJsonId, data, dataShort, completed) {
        var sg = schools.JSONFromId(moduleJsonId);
        var dataStr = null;
        if(data != null) {
            var scormData = data.scormData;
            data.scormData = null;
            dataStr = JSON.stringify(data);
            data.scormData = scormData;
        }
        var rpcPar = {
            site: 'com',
            userId: lmcomUserId,
            companyId: companyId,
            courseId: crsId,
            spaceId: sg.spaceId,
            globalId: sg.globalId,
            data: dataStr,
            dataShort: dataShort == null ? null : JSON.stringify(dataShort)
        };
        var body = {
            name: 'scorm.setModuleData',
            pars: rpcPar
        };
        Pager.ajax(Pager.pathType.eaScormServer, null, body, completed);
    };
    schools.readCrsInfo = function (lmcomUserId, companyId, crsId, completed) {
        var rpcPar = {
            site: 'com',
            userId: lmcomUserId,
            companyId: companyId,
            courseId: crsId,
            spaceId: '',
            globalId: 'courseinfo.json',
            data: ''
        };
        var body = {
            name: 'scorm.getData',
            pars: rpcPar
        };
        Pager.ajax(Pager.pathType.eaScormServer, null, body, function (res) {
            return completed(res == null ? null : JSON.parse(res));
        });
    };
    schools.setMetaCourse = function (lmcomUserId, companyId, crsId, value, completed) {
        var rpcPar = {
            site: 'com',
            userId: lmcomUserId,
            companyId: companyId,
            courseId: crsId,
            spaceId: "metaCourse",
            globalId: '',
            data: value == null ? null : JSON.stringify(value)
        };
        var body = {
            name: 'scorm.setData',
            pars: rpcPar
        };
        Pager.ajax(Pager.pathType.eaScormServer, null, body, completed == null ? null : function (str) {
            return completed();
        });
    };
    schools.getMetaCourse = function (lmcomUserId, companyId, crsId, completed) {
        var rpcPar = {
            site: 'com',
            userId: lmcomUserId,
            companyId: companyId,
            courseId: crsId,
            spaceId: "metaCourse",
            globalId: '',
            data: ''
        };
        var body = {
            name: 'scorm.getData',
            pars: rpcPar
        };
        Pager.ajax(Pager.pathType.eaScormServer, null, body, function (res) {
            return completed(res == null ? null : JSON.parse(res));
        });
    };
})(schools || (schools = {}));

/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/underscore.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/utils.ts" />
/// <reference path="../JsLib/js/ViewBase.ts" />
/// <reference path="../JsLib/js/Ajax.ts" />
/// <reference path="../JsLib/js/GenLMComLib.ts" />
/// <reference path="GenCourse.ts" />
/// <reference path="GenSchools.ts" />
/// <reference path="home.ts" />
/// <reference path="interfaces.ts" />
/// <reference path="exercise.ts" />
/// <reference path="model.ts" />
var scormLocal;
(function (scormLocal) {
    function makeLocal() {
        schools.readLocalData = readLocalData;
        schools.createTest = createTest;
        schools.readTestResults = readTestResults;
        schools.resetModules = resetModules;
        schools.readCrsResults = readCrsResults;
        schools.readModuleResults = readModuleResults;
        schools.writeModuleResults = writeModuleResults;
        schools.readCrsInfo = readCrsInfo;
        schools.setMetaCourse = setMetaCourse;
        schools.getMetaCourse = getMetaCourse;
    }
    scormLocal.makeLocal = makeLocal;
    var readLocalData = function (relUrl, completed) {
    };
    var createTest = function (testFileName, lmcomUserId, email, firstName, lastName, companyEMail, completed) {
        debugger;

        throw "notImplemented";
    };
    var readTestResults = function (isStart, testIds, completed) {
        debugger;

        throw "notImplemented";
    };
    var resetModules = function (lmcomUserId, companyId, crsId, modJsonIds, completed) {
    };
    var readCrsResults = function (isStart, lmcomUserId, companyId, crsId, completed) {
    };
    var readModuleResults = function (lmcomUserId, companyId, crsId, moduleJsonId, completed) {
    };
    var writeModuleResults = function (lmcomUserId, companyId, crsId, moduleJsonId, data, dataShort, completed) {
    };
    var readCrsInfo = function (lmcomUserId, companyId, crsId, completed) {
    };
    var setMetaCourse = function (lmcomUserId, companyId, crsId, value, completed) {
    };
    var getMetaCourse = function (lmcomUserId, companyId, crsId, completed) {
    };
})(scormLocal || (scormLocal = {}));

var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../JsLib/jsd/jquery.d.ts" />
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/jsd/globalize.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/GenLMComLib.ts" />
/// <reference path="GenCourse.ts" />
/// <reference path="GenSchools.ts" />
/// <reference path="Model.ts" />
/// <reference path="Interfaces.ts" />
/// <reference path="Course.ts" />
/// <reference path="Lesson.ts" />
/// <reference path="Module.ts" />
var schoolHome;
(function (schoolHome) {
    function createLayoutCell(width, tmpl, data) {
        return {
            width: width,
            tmpl: tmpl,
            data: data
        };
    }
    var Panel = (function () {
        function Panel() {
            this.icon = "play";
            this.menu = [];
            //isRunnable: bool = false;
            this.progress = -1;
            this.score = 0;
            this.date = null;
            this.notRunnableMsg = null;
        }
        Panel.prototype.setView = function (st, disabled, icon) {
            if (typeof disabled === "undefined") { disabled = false; }
            if (typeof icon === "undefined") { icon = null; }
            this.isDisabled = disabled;
            switch(st) {
                case schools.taskStatus.completed:
                    this.icon = "ok";
                    this.color = colors.green;
                    break;
                case schools.taskStatus.toStart:
                case schools.taskStatus.started:
                    this.icon = "play";
                    this.color = colors.green;
                    break;
                case schools.taskStatus.testFailed:
                    this.icon = "thumbs-down";
                    this.color = colors.red;
                    break;
                case schools.taskStatus.skipped:
                    this.isDisabled = true;
                    this.icon = "trash";
                    this.color = colors.teal;
                    break;
                case schools.taskStatus.toRun:
                    this.icon = "folder-open";
                    break;
                    //default: this.color = colors.sky_blue; break;
                                }
            if(icon != null) {
                this.icon = icon;
            }
        };
        Panel.prototype.actionName = function () {
            return LowUtils.EnumToString(schoolHome.menuAction, this.isDisabled ? schoolHome.menuAction.nop : (this.runInMenu() ? schoolHome.menuAction.run : schoolHome.menuAction.browse));
        };
        Panel.prototype.statusText = function () {
            return schoolHome.crsTst.statusText(this.status);
        };
        Panel.prototype.runInMenu = function () {
            return _.any(this.menu, function (mi) {
                return mi.action == menuAction.run;
            });
        };
        return Panel;
    })();
    schoolHome.Panel = Panel;    
    //export var onLoaded: () => void;
    schoolHome.homePage;
    schoolHome.typeName = "schoolHomeModel".toLowerCase();
    var Model = (function (_super) {
        __extends(Model, _super);
        function Model(companyId, courseId) {
                _super.call(this, schoolHome.typeName, companyId, courseId, null);
            schoolHome.homePage = this;
        }
        Model.prototype.doUpdate = function (completed) {
            this.createViewModel();
            completed();
        };
        Model.prototype.rootData = function () {
            return schools.data;
        };
        Model.prototype.createViewModel = function () {
            var _this = this;
            var tasks = schools.data.metaCourse.tasks;
            var withTests = _.any(tasks, function (t) {
                return t.test != null;
            });
            this.viewModel = schools.data.metaCourse.pretest == null ? [] : [
                [
                    createLayoutCell(withTests ? 7 : 6, "TPretest", new Pretest(schools.data)), 
                    null
                ]
            ];
            if(withTests) {
                _.each(tasks, function (t) {
                    _this.viewModel.push([
                        createLayoutCell(7, "TCourse", new course(t)), 
                        createLayoutCell(5, "TTest", new test(t))
                    ]);
                });
            } else {
                for(var i = 0; i < tasks.length; i += 2) {
                    this.viewModel.push([
                        createLayoutCell(6, "TCourse", new course(tasks[i])), 
                        (i >= tasks.length - 1) ? null : createLayoutCell(6, "TCourse", new course(tasks[i + 1]))
                    ]);
                }
            }
        };
        Model.prototype.refresh = function (completed) {
            if (typeof completed === "undefined") { completed = null; }
            var _this = this;
            schools.refreshData(function () {
                Pager.rootVM.reload(_this, completed);
            });
        };
        Model.prototype.action = function (id, jsonId) {
            var _this = this;
            var saveMetaCourse = function (completed) {
                schools.writeMetaCourse(schools.data.metaCourse, function () {
                    if(completed != null) {
                        completed();
                    } else {
                        _this.refresh();
                    }
                });
            };
            var crsId = parseInt(jsonId);
            //Pretest actions
            if(crsId == c_PretestId) {
                var meta = schools.data.metaCourse.pretest;
                switch(id) {
                    case menuAction.run:
                        saveMetaCourse(function () {
                            return schools.runPretest(schools.data);
                        });
                        break;
                    case menuAction.skip:
                        meta.status = schools.taskStatus.skipped;
                        saveMetaCourse(null);
                        break;
                    case menuAction.unskip:
                        meta.status = schools.taskStatus.toRun;
                        saveMetaCourse(null);
                        break;
                }
                return;
            }
            var isTest = crsId < 0;
            var crsId = Math.abs(crsId);
            var actTask = _.find(schools.data.metaCourse.tasks, function (t) {
                return t.jsonId == crsId.toString();
            });
            var tstAtt = actTask.test, crsAtt = actTask.course;
            var att = isTest ? tstAtt : crsAtt;
            switch(id) {
                case menuAction.browse:
                    if(isTest) {
                        schools.runTest(tstAtt.userTestId);
                    } else {
                        Pager.navigateTo(schools.createCourseUrl(crsId.toString()));
                    }
                    break;
                case menuAction.runTestAgain:
                    //pro test ve stavu completed
                    if(!isTest) {
                        throw "!isTest";
                    }
                    att = tstAtt = schools.newTestAttempt(actTask, Utils.dateToNum(new Date()));
                    schools.createTest(actTask.testFileName, 0, "", "", "", "", function (id) {
                        //zalozeni testu a doplneni jeho ID do userTestId
                        tstAtt.userTestId = id;
                        saveMetaCourse(function () {
                            schools.runTest(tstAtt.userTestId);
                        });
                    });
                    break;
                case menuAction.cancelTestSkip:
                    //pro rozbehnuty test
                    if(!isTest) {
                        throw "!isTest";
                    }
                    if(!confirm(CSLocalize('05109a8fe0d94788ba02f51f6a3ad93e', 'Do you really want to cancel and skip the test?'))) {
                        return;
                    }
                    tstAtt.status = schools.taskStatus.skipped;
                    saveMetaCourse(null);
                    break;
                case menuAction.resetCourseRunAgain:
                    if(isTest) {
                        throw "isTest";
                    }
                    Model.resetCourse(false, actTask);
                    break;
                case menuAction.run:
                    if(!isTest) {
                        return;
                    }
                    if(att.status == schools.taskStatus.toStart) {
                        //z libovolneho stavu do started
                        //if (isTest) {
                        att = tstAtt = schools.newTestAttempt(actTask, Utils.dateToNum(new Date()));
                        schools.createTest(actTask.testFileName, 0, "", "", "", "", function (id) {
                            //zalozeni testu a doplneni jeho ID do userTestId
                            tstAtt.userTestId = id;
                            saveMetaCourse(function () {
                                return schools.runTest(tstAtt.userTestId);
                            });
                        });
                        //} else
                        //  saveMetaCourse(() => schools.runCourse(actTask.jsonId));
                                            } else if(att.status == schools.taskStatus.started) {
                        //ze stavu started
                        saveMetaCourse(function () {
                            //if (isTest) schools.runTest(actTask.test.userTestId); else schools.runCourse(actTask.jsonId);
                            schools.runTest(actTask.test.userTestId);
                        });
                    }
                    break;
                case menuAction.skip:
                    att.status = schools.taskStatus.skipped;
                    saveMetaCourse(null);
                    break;
                case menuAction.unskip:
                    if(isTest) {
                        if(tstAtt.userTestId) {
                            //test jiz bezel
                            tstAtt.status = schools.taskStatus.canceled;
                            att = tstAtt = schools.newTestAttempt(actTask, Utils.dateToNum(new Date()));
                        } else {
                            //test jeste nebezel, pouze undo skip akce
                            tstAtt.status = schools.taskStatus.toRun;
                        }
                    } else {
                        crsAtt.status = crsAtt.start > 0 ? schools.taskStatus.started : schools.taskStatus.toStart;
                    }
                    saveMetaCourse(null);
                    break;
            }
        };
        Model.resetCourse = function resetCourse(resetWhenTestFailed, actTask, completed) {
            if (typeof completed === "undefined") { completed = null; }
            var _this = this;
            if(resetWhenTestFailed) {
                alert(CSLocalize('6f313743eb77414eaf3b712ee8169d54', 'Test result: failed. Run again the previous course.'));
            } else {
                if(!confirm(CSLocalize('3d29be736a484f3bb4b77ff3ad21e556', 'Do you really want to reset the course and start from beginning?'))) {
                    return;
                }
            }
            schools.newCourseAttempt(actTask, Utils.dateToNum(new Date()));
            if(resetWhenTestFailed) {
                actTask.course.status = schools.taskStatus.started;
            }
            var crs = _.find(schools.data.crsStatic.courses, function (c) {
                return c.jsonId == actTask.jsonId;
            });
            var modIds = _.map(_.flatten(_.map(crs.lessons, function (l) {
                return l.modules;
            })), function (m) {
                return m.jsonId;
            });
            schools.resetModules(schools.LMComUserId(), schools.data.companyId, schools.data.crsStatic.courseId, modIds, function () {
                if(resetWhenTestFailed) {
                    if(completed != null) {
                        completed();
                    }
                    return;
                }
                schools.writeMetaCourse(schools.data.metaCourse, _this.refresh);
            });
        };
        return Model;
    })(schools.Model2);
    schoolHome.Model = Model;    
    var c_PretestId = 123456;
    var Pretest = (function (_super) {
        __extends(Pretest, _super);
        function Pretest(data) {
                _super.call(this);
            var menus = [];
            var runMsg = CSLocalize('f38e0fa893f346048483834dabfe6ec2', 'We recommend to Run the Pretest. Based on the results of the Pretest you will be recommended to start with the course that corresponds to the level of your knowledge.');
            var st = data.metaCourse.pretest.status;
            this.setView(st);
            switch(st) {
                case schools.taskStatus.toStart:
                    menus.push(menuAction.run);
                    if(schools.cfg.canSkipCourse) {
                        menus.push(menuAction.skip);
                    }
                    this.notRunnableMsg = runMsg;
                    break;
                case schools.taskStatus.started:
                    menus.push(menuAction.run);
                    if(schools.cfg.canSkipCourse) {
                        menus.push(menuAction.skip);
                    }
                    this.notRunnableMsg = runMsg;
                    break;
                case schools.taskStatus.completed:
                    if(data.metaCourse.pretest.result == null) {
                        this.notRunnableMsg = CSLocalize('17366a0facea46e29ba1838a39117605', 'Pretest ignored');
                    } else {
                        var crs = _.find(schools.data.crsStatic.courses, function (c) {
                            return c.jsonId == data.metaCourse.pretest.result;
                        });
                        this.runCrsTitle = crs.title;
                    }
                    break;
                case schools.taskStatus.skipped:
                    menus.push(menuAction.unskip);
                    this.notRunnableMsg = CSLocalize('3aae6e3d4c044ecd9018077cb7c5afd9', 'Pretest skipped. To run the Pretest choose Undo Skip the Pretest.');
                    break;
            }
            this.menu = menuItem.create(menus, c_PretestId.toString(), menuContext.pretest);
            this.isMoreDisabled = menus.length == 0;
            this.status = data.metaCourse.pretest.status;
        }
        Pretest.prototype.id = function () {
            return c_PretestId.toString();
        };
        return Pretest;
    })(Panel);
    schoolHome.Pretest = Pretest;    
    var crsTst = (function (_super) {
        __extends(crsTst, _super);
        function crsTst(task) {
                _super.call(this);
            this.task = task;
            this.status = this.getStatus();
        }
        crsTst.prototype.id = function () {
            debugger;

            throw "notImplemented";
            return null;
        };
        crsTst.prototype.isTest = function () {
            debugger;

            throw "notImplemented";
            return null;
        };
        crsTst.prototype.getStatus = function () {
            return (this.isTest() ? this.task.test : this.task.course).status;
        };
        crsTst.statusText = function statusText(st) {
            switch(st) {
                case schools.taskStatus.toRun:
                    return CSLocalize('b7ed3c7fc67640ceb98417153f731d63', 'browse');
                case schools.taskStatus.toStart:
                    return CSLocalize('381bf5d883fa4895955daa0fa72aefc0', 'to start');
                case schools.taskStatus.started:
                    return CSLocalize('1fe40e2548924e519e9b226d4ced7bce', 'run');
                case schools.taskStatus.completed:
                    return CSLocalize('01fbc5f8a77c4e2491a9ed3ede74e966', 'completed');
                case schools.taskStatus.testFailed:
                    return CSLocalize('4e083b7741dc40b89560d7aeb4e43069', 'failed');
                case schools.taskStatus.skipped:
                    return CSLocalize('d96c8f11b16d4c9aa91ac8d8142267fa', 'skipped');
                case schools.taskStatus.canceled:
                    return CSLocalize('63717d47e114498ca265f024fec4eee3', 'canceled');
                default:
                    debugger;

                    throw 'notImplemented';
            }
        };
        return crsTst;
    })(Panel);
    schoolHome.crsTst = crsTst;    
    var course = (function (_super) {
        __extends(course, _super);
        function course(task) {
                _super.call(this, task);
            var crsModel = task.course;
            this.elapsed = Utils.formatTimeSpan(0);
            var menus = [];
            var st = crsModel.status;
            this.setView(st);
            switch(st) {
                case schools.taskStatus.toStart:
                    //menus.push(menuAction.run);
                    if(schools.cfg.canSkipCourse) {
                        menus.push(menuAction.skip);
                    }
                    break;
                case schools.taskStatus.started:
                    //menus.push(menuAction.run);
                    if(schools.cfg.canSkipCourse) {
                        menus.push(menuAction.skip);
                    }
                    if(schools.cfg.canResetCourse) {
                        menus.push(menuAction.resetCourseRunAgain);
                    }
                    this.date = Globalize.format(Utils.numToDate(crsModel.start), 'd');
                    this.elapsed = Utils.formatTimeSpan(crsModel.elapsedSeconds);
                    this.score = crsModel.score;
                    this.progress = crsModel.progress;
                    break;
                case schools.taskStatus.completed:
                    if(this.task.course.status != schools.taskStatus.started && schools.cfg.canResetCourse) {
                        menus.push(menuAction.resetCourseRunAgain);
                    }
                    this.date = Globalize.format(Utils.numToDate(crsModel.start), 'd') + " - " + Globalize.format(Utils.numToDate(crsModel.end), 'd');
                    this.elapsed = Utils.formatTimeSpan(crsModel.elapsedSeconds);
                    this.score = crsModel.score;
                    break;
                case schools.taskStatus.skipped:
                    menus.push(menuAction.unskip);
                    this.notRunnableMsg = CSLocalize('1b7b9ad29b5e426eacd29a9efe93c6b7', 'Course skipped. To run the course choose Undo Skip the course.');
                    break;
                case schools.taskStatus.toRun:
                    this.notRunnableMsg = CSLocalize('11fe4e08393c4cb980c746b2ccb55b9f', 'To run the course you must complete (or skip) all the preceding courses and tests.');
                    break;
                default:
                    debugger;

                    throw "notImplemented";
            }
            if(crsModel.archive != null && crsModel.archive.length > 0) {
                menus.push(menuAction.archive);
            }
            menus.push(menuAction.browse);
            this.menu = menuItem.create(menus, this.id(), menuContext.course);
            this.isMoreDisabled = menus.length == 0;
        }
        course.prototype.title = function () {
            var _this = this;
            var crs = _.find(schools.data.crsStatic.courses, function (c) {
                return c.jsonId == _this.task.jsonId;
            });
            return this.task.title + " (" + crs.level + ")";
        };
        course.prototype.id = function () {
            return this.task.jsonId;
        };
        course.prototype.isTest = function () {
            return false;
        };
        return course;
    })(crsTst);
    schoolHome.course = course;    
    var test = (function (_super) {
        __extends(test, _super);
        function test(task) {
                _super.call(this, task);
            var tstModel = task.test;
            this.interrupts = 0;
            var menus = [];
            var st = tstModel.status;
            this.setView(st);
            switch(st) {
                case schools.taskStatus.toStart:
                    menus.push(menuAction.run);
                    if(schools.cfg.canResetTest) {
                        menus.push(menuAction.skip);
                    }
                    break;
                case schools.taskStatus.started:
                    menus.push(menuAction.run);
                    if(schools.cfg.canResetTest && schools.cfg.canSkipTest) {
                        menus.push(menuAction.cancelTestSkip);
                    }
                    this.date = tstModel.start == 0 ? "" : Globalize.format(Utils.numToDate(tstModel.start), 'd');
                    break;
                case schools.taskStatus.testFailed:
                    menus.push(menuAction.browse);
                    if(schools.cfg.canResetTest) {
                        menus.push(menuAction.runTestAgain);
                    }
                    this.date = Globalize.format(Utils.numToDate(tstModel.start), 'd') + " - " + Globalize.format(Utils.numToDate(tstModel.end), 'd');
                    this.score = tstModel.score;
                    this.interrupts = tstModel.interruptions;
                    this.notRunnableMsg = CSLocalize('7f7aecea0dc64aafbb3188b625128c29', 'Finish preceding course.');
                    break;
                case schools.taskStatus.completed:
                    menus.push(menuAction.browse);
                    if(schools.cfg.canResetTest) {
                        menus.push(menuAction.runTestAgain);
                    }
                    this.date = Globalize.format(Utils.numToDate(tstModel.start), 'd') + " - " + Globalize.format(Utils.numToDate(tstModel.end), 'd');
                    this.score = tstModel.score;
                    this.interrupts = tstModel.interruptions;
                    break;
                case schools.taskStatus.skipped:
                    menus.push(menuAction.unskip);
                    this.notRunnableMsg = CSLocalize('3950f59b1b7f439da2b82e88bfd79316', 'Test skipped');
                    break;
                case schools.taskStatus.toRun:
                    this.notRunnableMsg = CSLocalize('91f1efd1387c4cddb76d404acfcd2cb2', 'Run (or skip) the preceding course.');
                    break;
                default:
                    debugger;

                    throw "notImplemented";
            }
            if(tstModel.archive != null && tstModel.archive.length > 0) {
                menus.push(menuAction.archive);
            }
            this.menu = menuItem.create(menus, this.id(), menuContext.test);
            this.isMoreDisabled = menus.length == 0;
        }
        test.prototype.id = function () {
            return '-' + this.task.jsonId.toString();
        };
        test.prototype.isTest = function () {
            return true;
        };
        return test;
    })(crsTst);
    schoolHome.test = test;    
    (function (menuContext) {
        menuContext._map = [];
        menuContext.course = 0;
        menuContext.course_less = 1;
        menuContext.course_mod = 2;
        menuContext.test = 3;
        menuContext.pretest = 4;
    })(schoolHome.menuContext || (schoolHome.menuContext = {}));
    var menuContext = schoolHome.menuContext;
    var menuTitle = [
        //browse
        [
            function () {
                return CSLocalize('55b73fd8debb4cd993b8a69480141874', 'Browse course content');
            }, 
            function () {
                return CSLocalize('7be446083ce341be9265b0f637c2084d', 'Browse lesson content');
            }, 
            function () {
                return CSLocalize('5f756179ce0e4471a86b21cbf50e2a38', 'View chapter results');
            }, 
            function () {
                return CSLocalize('3476307aac984bf79f9ea07ba2a4a5e0', 'View test result');
            }        ], 
        [
            function () {
                return CSLocalize('9f6bfa008c7f4b5e8843cc6423702944', 'Skip the course');
            }, 
            function () {
                return CSLocalize('6e65c6869c924d5ab78fefe38e652d59', 'Skip the lesson');
            }, 
            function () {
                return CSLocalize('d0ac7207b8164662a24d6125ecb6fbc6', 'Skip the chapter');
            }, 
            function () {
                return CSLocalize('964144e0cfd7452cb8d88af1876a29c0', 'Skip the test');
            }, 
            function () {
                return CSLocalize('ca05ae323b144e83986da9a3069ab9f5', 'Skip the Pretest');
            }        ], 
        [
            function () {
                return CSLocalize('fcc0a4037d9b473c91febefc2623a9e1', 'Run the course');
            }, 
            null, 
            function () {
                return CSLocalize('c11e0c688dd247f0a54e3368da34e70b', 'Run the chapter');
            }, 
            function () {
                return CSLocalize('ea9dfc516aea4e63bfd52d579db56065', 'Run the test');
            }, 
            function () {
                return CSLocalize('4c5dabcdf7eb402f9bc53eb1be50adc2', 'Run the Pretest');
            }        ], 
        [
            function () {
                return CSLocalize('04287b7da4dd4f77b7b7398435e19470', 'View course archive');
            }, 
            null, 
            null, 
            function () {
                return CSLocalize('1f3afc11aafc4c368fd34d5a28b2f339', 'View test archive');
            }        ], 
        [
            function () {
                return CSLocalize('77c7cb9f586a4fe289c57803909a3cea', 'Undo Skip the course');
            }, 
            function () {
                return CSLocalize('8de6281e0a424efaa0e370f5f74b38f6', 'Undo Skip the lesson');
            }, 
            function () {
                return CSLocalize('cba154c268c24692aec11a665678bf4c', 'Undo Skip the chapter');
            }, 
            function () {
                return CSLocalize('7e590105e1e54b5eb59f335094dd7682', 'Undo Skip the test');
            }, 
            function () {
                return CSLocalize('79542014a7634a8aa8bb63786670638d', 'Undo Skip the Pretest');
            }        ], 
        [], 
        [
            function () {
                return CSLocalize('301edf9b48f44ae784938b471c0e8884', 'Reset the course');
            }, 
            function () {
                return CSLocalize('ddfd3a0b4f414d32a8e5e3473b0d188e', 'Reset the lesson');
            }, 
            function () {
                return CSLocalize('52d23241ee794a2a9d0c185ef14d21c3', 'Reset the chapter');
            }, 
            null
        ], 
        [
            null, 
            null, 
            null, 
            function () {
                return CSLocalize('dfa333535fdc4c4e82a909f615450c59', 'Run a new test');
            }        ], 
        [
            null, 
            null, 
            null, 
            function () {
                return CSLocalize('e8b0d2878f8a43168fea81d6eb5c2744', 'Cancel and skip the test');
            }        ]
    ];
    (function (menuAction) {
        menuAction._map = [];
        //pro oba
        menuAction.browse = 0;
        menuAction.skip = 1;
        menuAction.run = 2;
        menuAction.archive = 3;
        menuAction.unskip = 4;
        menuAction.nop = 5;
        //pro kurz
        menuAction.resetCourseRunAgain = 6;
        //pro test
        menuAction.runTestAgain = 7;
        menuAction.cancelTestSkip = 8;
    })(schoolHome.menuAction || (schoolHome.menuAction = {}));
    var menuAction = schoolHome.menuAction;
    var menuItem = (function () {
        function menuItem(action, id, context) {
            this.action = action;
            this.id = id;
            this.title = menuTitle[action][context]();
            switch(action) {
                case menuAction.browse:
                    this.icon = "folder-open";
                    break;
                case menuAction.skip:
                    this.icon = "trash";
                    break;
                case menuAction.run:
                    this.icon = "play";
                    break;
                case menuAction.archive:
                    this.icon = "briefcase";
                    break;
                case menuAction.unskip:
                    this.icon = "plus";
                    break;
                case menuAction.resetCourseRunAgain:
                    this.icon = "refresh";
                    break;
                case menuAction.runTestAgain:
                    this.icon = "refresh";
                    break;
                case menuAction.cancelTestSkip:
                    this.icon = "trash";
                    break;
            }
        }
        menuItem.prototype.actionName = function () {
            return LowUtils.EnumToString(menuAction, this.action);
        };
        menuItem.create = function create(actions, id, ctx) {
            return _.map(actions, function (m) {
                return new menuItem(m, id, ctx);
            });
        };
        return menuItem;
    })();
    schoolHome.menuItem = menuItem;    
    Pager.registerLocator(schoolHome.typeName, function (url, completed) {
        if(LMStatus.Cookie == null) {
            completed(new schoolHome.Model(-1, 0));
        } else {
            schools.findModule(url, completed);
        }
    });
})(schoolHome || (schoolHome = {}));

var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../JsLib/jsd/jquery.d.ts" />
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/GenLMComLib.ts" />
/// <reference path="GenCourse.ts" />
/// <reference path="GenSchools.ts" />
/// <reference path="Model.ts" />
/// <reference path="Home.ts" />
/// <reference path="Interfaces.ts" />
var schoolCourse;
(function (schoolCourse) {
    schoolCourse.typeName = "schoolCourseModel".toLowerCase();
    var Model = (function (_super) {
        __extends(Model, _super);
        function Model(companyId, courseId, jsonId) {
                _super.call(this, schoolCourse.typeName, companyId, courseId, jsonId);
            if(LMStatus.Cookie == null) {
                return;
            }
            this.task = _.find(schools.data.metaCourse.tasks, function (t) {
                return t.jsonId == jsonId;
            });
            this.src = this.parentChain[0].src;
            this.metaCourse = schools.data.metaCourse;
            //modely pro zobrazeni kurzu a testu
            this.course = new schoolHome.course(this.task);
        }
        Model.prototype.rootData = function () {
            return schools.data;
        };
        Model.prototype.doUpdate = function (completed) {
            this.createViewModel();
            completed();
        };
        Model.prototype.createViewModel = function () {
            this.viewModel = [];
            var less = this.src.lessons;
            var crs = this.task.course;
            for(var i = 0; i < less.length; i += 2) {
                var l = less[i], r = less[i + 1];
                this.viewModel.push([
                    createLayoutCell(6, "TLesson", new lessItem(crs, l)), 
                    createLayoutCell(6, "TLesson", r ? new lessItem(crs, r) : null)
                ]);
            }
        };
        Model.prototype.action = function (id, lessJsonId) {
            var _this = this;
            /*** akce ***/
            var saveMetaCourse = function (completed) {
                if (typeof completed === "undefined") { completed = null; }
                return schools.refreshData(function () {
                    return schools.writeMetaCourse(_this.rootData().metaCourse, function () {
                        Pager.rootVM.reload(_this, completed);
                    });
                });
            };
            var lc = _.find(_.flatten(this.viewModel, true), function (l) {
                return l.data.jsonId == lessJsonId;
            });
            var lessPage = lc.data;
            var less = lessPage.src;
            switch(id) {
                case schoolHome.menuAction.skip:
                    less.skipped = true;
                    //all lesson skipped => course is skipped
                    this.task.removedModules = _.union(this.task.removedModules, _.map(less.modules, function (m) {
                        return m.jsonId;
                    }));
                    _.each(less.modules, function (m) {
                        return m.skipped = true;
                    });
                    lessPage.status = schools.taskStatus.skipped;
                    saveMetaCourse();
                    break;
                case schoolHome.menuAction.unskip:
                    this.task.removedModules = _.difference(this.task.removedModules, _.map(less.modules, function (m) {
                        return m.jsonId;
                    }));
                    _.each(less.modules, function (m) {
                        return m.skipped = false;
                    });
                    less.skipped = false;
                    saveMetaCourse();
                    break;
                case schoolHome.menuAction.browse:
                    Pager.navigateTo(schools.createLessonUrl(less.jsonId));
                    break;
                case schoolHome.menuAction.resetCourseRunAgain:
                    var modIds = _.map(less, function (m) {
                        return m.jsonId;
                    });
                    schools.resetModules(schools.LMComUserId(), schools.data.companyId, schools.data.crsStatic.courseId, modIds, function () {
                        return saveMetaCourse();
                    });
                    break;
            }
        };
        return Model;
    })(schools.Model2);
    schoolCourse.Model = Model;    
    function createLayoutCell(width, tmpl, data) {
        return {
            width: width,
            tmpl: tmpl,
            data: data
        };
    }
    var lessItem = (function (_super) {
        __extends(lessItem, _super);
        function lessItem(course, src) {
                _super.call(this);
            this.src = src;
            this.jsonId = src.jsonId;
            this.elapsed = Utils.formatTimeSpan(0);
            if(src.skipped || course.status == schools.taskStatus.skipped) {
                this.status = schools.taskStatus.skipped;
            } else if(src.isCompleted) {
                this.status = schools.taskStatus.completed;
            } else if(src.isGreen && schools.startable(course.status)) {
                this.status = src.evalCount > 0 ? schools.taskStatus.started : schools.taskStatus.toStart;
            } else {
                this.status = schools.taskStatus.toRun;
            }
            var st = this.status;
            var menus = [];
            //if (src.skipped || course.status == schools.taskStatus.skipped)
            //  this.status = schools.taskStatus.skipped;
            //else if (src.evalCount + src.skipedCount == src.modules.length)
            //  this.status = schools.taskStatus.completed;
            //else if (course.status != schools.taskStatus.started && course.status != schools.taskStatus.toStart)
            //  this.status = schools.taskStatus.toRun;
            //else if (src.evalCount > 0)
            //  this.status = schools.taskStatus.started;
            //else
            //  this.status = schools.taskStatus.toStart;
            //var st = this.status;
            switch(st) {
                case schools.taskStatus.skipped:
                    if(src.skipped && course.status != schools.taskStatus.skipped) {
                        menus.push(schoolHome.menuAction.unskip);
                    }
                    this.setView(st);
                    break;
                case schools.taskStatus.completed:
                    if(schools.cfg.canResetCourse) {
                        menus.push(schoolHome.menuAction.resetCourseRunAgain);
                    }
                    this.setView(st);
                    this.date = Globalize.format(Utils.numToDate(src.beg), 'd') + " - " + Globalize.format(Utils.numToDate(src.end), 'd');
                    this.elapsed = Utils.formatTimeSpan(src.elapsedSeconds);
                    this.score = src.score;
                    this.progress = 100;
                    break;
                case schools.taskStatus.toStart:
                    if(schools.cfg.canSkipCourse) {
                        menus.push(schoolHome.menuAction.skip);
                    }
                    this.setView(st);
                    this.date = src.beg ? Globalize.format(Utils.numToDate(src.beg), 'd') : '';
                    this.elapsed = Utils.formatTimeSpan(src.elapsedSeconds);
                    break;
                case schools.taskStatus.started:
                    if(schools.cfg.canResetCourse) {
                        menus.push(schoolHome.menuAction.resetCourseRunAgain);
                    }
                    if(schools.cfg.canSkipCourse) {
                        menus.push(schoolHome.menuAction.skip);
                    }
                    this.setView(st);
                    this.date = src.beg ? Globalize.format(Utils.numToDate(src.beg), 'd') : '';
                    this.elapsed = Utils.formatTimeSpan(src.elapsedSeconds);
                    this.score = src.score;
                    var cnt = src.modules.length - src.skipedCount;
                    this.progress = cnt == 0 ? 0 : Utils.toInt(100 * src.evalCount / cnt);
                    break;
                case schools.taskStatus.toRun:
                    menus.push(schoolHome.menuAction.skip);
                    this.setView(st);
                    break;
            }
            menus.push(schoolHome.menuAction.browse);
            this.menu = schoolHome.menuItem.create(menus, this.id(), schoolHome.menuContext.course_less);
        }
        lessItem.prototype.id = function () {
            return this.jsonId;
        };
        lessItem.prototype.title = function () {
            return this.src.title;
        };
        return lessItem;
    })(schoolHome.Panel);
    schoolCourse.lessItem = lessItem;    
    Pager.registerLocator(schoolCourse.typeName, function (url, completed) {
        return schools.findModule(url, completed);
    });
})(schoolCourse || (schoolCourse = {}));

var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../JsLib/jsd/jquery.d.ts" />
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/GenLMComLib.ts" />
/// <reference path="GenCourse.ts" />
/// <reference path="GenSchools.ts" />
/// <reference path="Model.ts" />
/// <reference path="Home.ts" />
/// <reference path="Interfaces.ts" />
var schoolLesson;
(function (schoolLesson) {
    schoolLesson.typeName = "schoolLessonModel".toLowerCase();
    var Model = (function (_super) {
        __extends(Model, _super);
        function Model(companyId, courseId, jsonId, task) {
            if (typeof task === "undefined") { task = null; }
            var _this = this;
                _super.call(this, schoolLesson.typeName, companyId, courseId, jsonId);
            if(LMStatus.Cookie == null) {
                return;
            }
            this.src = this.parentChain[0].src;
            this.task = task != null ? task : _.find(schools.data.metaCourse.tasks, function (t) {
                return t.jsonId == _this.parentChain[1].jsonId;
            });
        }
        Model.prototype.rootData = function () {
            return schools.data;
        };
        Model.prototype.createViewModel = function () {
            this.viewModel = [];
            var mods = this.src.modules;
            for(var i = 0; i < mods.length; i += 2) {
                var l = mods[i], r = mods[i + 1];
                this.viewModel.push([
                    createLayoutCell(6, "TModule", new modItem(this, l)), 
                    createLayoutCell(6, "TModule", r ? new modItem(this, r) : null)
                ]);
            }
        };
        Model.prototype.doUpdate = function (completed) {
            this.createViewModel();
            completed();
        };
        Model.prototype.gotoOwner = function () {
            Pager.navigateTo2(this.base);
        };
        Model.prototype.gotoOwnerOwner = function () {
            Pager.navigateTo2(null);
        };
        Model.prototype.action = function (id, modJsonId) {
            var _this = this;
            /*** akce ***/
            var saveMetaCourse = function (completed) {
                if (typeof completed === "undefined") { completed = null; }
                return schools.refreshData(function () {
                    return schools.writeMetaCourse(_this.rootData().metaCourse, function () {
                        Pager.rootVM.reload(_this, completed);
                        //this.createViewModel(); if (completed != null) completed();
                        //Pager.rootVM.refresh();
                                            });
                });
            };
            var lc = _.find(_.flatten(this.viewModel, true), function (l) {
                return l.data.mod.jsonId == modJsonId;
            });
            var modPage = lc.data;//.find(this.viewModel, (m: modItem) => m.mod.jsonId == modJsonId);
            
            var mod = modPage.mod;
            switch(id) {
                case schoolHome.menuAction.skip:
                    mod.skipped = true;
                    this.task.removedModules = _.union(this.task.removedModules, [
                        mod.jsonId
                    ]);
                    modPage.status = schools.taskStatus.skipped;
                    saveMetaCourse();
                    break;
                case schoolHome.menuAction.unskip:
                    mod.skipped = false;
                    this.task.removedModules = _.difference(this.task.removedModules, [
                        mod.jsonId
                    ]);
                    saveMetaCourse();
                    break;
                case schoolHome.menuAction.run:
                case schoolHome.menuAction.browse:
                    Pager.navigateTo(schools.createModuleUrl(mod.jsonId));
                    //schools.runModule(mod.jsonId);
                    break;
                case schoolHome.menuAction.resetCourseRunAgain:
                    schools.resetModules(schools.LMComUserId(), schools.data.companyId, schools.data.crsStatic.courseId, [
                        mod.jsonId
                    ], function () {
                        return saveMetaCourse();
                    });
                    break;
            }
        };
        return Model;
    })(schools.Model2);
    schoolLesson.Model = Model;    
    function createLayoutCell(width, tmpl, data) {
        return {
            width: width,
            tmpl: tmpl,
            data: data
        };
    }
    //var greenUsed: bool;
    //function modStatus(less: schools.lesson, mod: schools.mod): schools.taskStatus {
    //  if (mod.skipped || less.skipped) return schools.taskStatus.skipped;
    //  if (mod.myModule != null && mod.myModule.status == schools.ExerciseStatus.Evaluated) return schools.taskStatus.completed;
    //  if (greenUsed) return schools.taskStatus.toRun;
    //  greenUsed = true;
    //  return mod.myModule != null ? schools.taskStatus.started : schools.taskStatus.toStart;
    //}
    var modItem = (function (_super) {
        __extends(modItem, _super);
        function modItem(base, mod) {
                _super.call(this);
            this.base = base;
            this.mod = mod;
            var less = (base).src;
            var task = (base).task;
            var menus = [];
            if(mod.skipped || less.skipped) {
                this.status = schools.taskStatus.skipped;
            } else if(mod.isCompleted) {
                this.status = schools.taskStatus.completed;
            } else if(mod.isGreen && schools.startable(task.course.status)) {
                this.status = mod.myModule != null ? schools.taskStatus.started : schools.taskStatus.toStart;
            } else {
                this.status = schools.taskStatus.toRun;
            }
            //if (mod.skipped || less.skipped || task.course.status == schools.taskStatus.skipped)
            //  this.status = schools.taskStatus.skipped;
            //else if (mod.myModule != null && mod.myModule.status == schools.ExerciseStatus.Evaluated)
            //  this.status = schools.taskStatus.completed;
            //else if (mod.myModule != null)
            //  this.status = schools.taskStatus.started;
            //else
            //  this.status = schools.taskStatus.toRun;
            var st = this.status;
            switch(st) {
                case schools.taskStatus.skipped:
                    if(mod.skipped/* && this.status != schools.taskStatus.skipped*/ ) {
                        menus.push(schoolHome.menuAction.unskip);
                    }
                    this.setView(st);
                    break;
                case schools.taskStatus.completed:
                    if(schools.cfg.canResetCourse) {
                        menus.push(schoolHome.menuAction.resetCourseRunAgain);
                    }
                    menus.push(schoolHome.menuAction.browse);
                    this.setView(st);
                    //this.icon = "icon-ok-2";
                    this.date = Globalize.format(Utils.numToDate(this.mod.myModule.beg), 'd') + " - " + Globalize.format(Utils.numToDate(this.mod.myModule.end), 'd');
                    this.elapsed = Utils.formatTimeSpan(this.mod.myModule.elapsedSeconds);
                    this.score = this.mod.myModule.score;
                    this.progress = 100;
                    break;
                case schools.taskStatus.toStart:
                    menus.push(schoolHome.menuAction.run);
                    if(schools.cfg.canSkipCourse) {
                        menus.push(schoolHome.menuAction.skip);
                    }
                    this.setView(st);
                    //this.icon = "icon-folder-open";
                    this.date = this.mod.myModule && this.mod.myModule.beg ? Globalize.format(Utils.numToDate(this.mod.myModule.beg), 'd') : '';
                    this.elapsed = this.mod.myModule ? Utils.formatTimeSpan(this.mod.myModule.elapsedSeconds) : '';
                    break;
                case schools.taskStatus.started:
                    menus.push(schoolHome.menuAction.run);
                    if(schools.cfg.canSkipCourse) {
                        menus.push(schoolHome.menuAction.skip);
                    }
                    if(schools.cfg.canResetCourse) {
                        menus.push(schoolHome.menuAction.resetCourseRunAgain);
                    }
                    this.setView(st);
                    this.date = this.mod.myModule && this.mod.myModule.beg ? Globalize.format(Utils.numToDate(this.mod.myModule.beg), 'd') : '';
                    this.elapsed = this.mod.myModule ? Utils.formatTimeSpan(this.mod.myModule.elapsedSeconds) : '';
                    this.score = this.mod.myModule ? this.mod.myModule.score : 0;
                    break;
                case schools.taskStatus.toRun:
                    menus.push(schoolHome.menuAction.skip);
                    this.setView(st);
                    //this.isDisabled = "disabled";
                    //this.icon = "icon-ban";
                    break;
            }
            this.menu = schoolHome.menuItem.create(menus, this.id(), schoolHome.menuContext.course_mod);
        }
        modItem.prototype.id = //actionName(): string { return LowUtils.EnumToString(schoolHome.menuAction, this.disabled == "disabled" ? schoolHome.menuAction.disabled : schoolHome.menuAction.browse); }
        function () {
            return this.mod.jsonId;
        };
        modItem.prototype.title = //statusText(): string { return schoolHome.crsTst.statusText(this.status); }
        function () {
            return this.mod.title;
        };
        return modItem;
    })(schoolHome.Panel);
    schoolLesson.modItem = modItem;    
    Pager.registerLocator(schoolLesson.typeName, function (url, completed) {
        return schools.findModule(url, completed);
    });
})(schoolLesson || (schoolLesson = {}));

var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
/// <reference path="../JsLib/jsd/jquery.d.ts" />
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/GenLMComLib.ts" />
/// <reference path="GenCourse.ts" />
/// <reference path="GenSchools.ts" />
/// <reference path="Model.ts" />
/// <reference path="Home.ts" />
/// <reference path="Interfaces.ts" />
var schoolModule;
(function (schoolModule) {
    schoolModule.typeName = "schoolModuleModel".toLowerCase();
    var Model = (function (_super) {
        __extends(Model, _super);
        function Model(companyId, courseId, jsonId) {
                _super.call(this, schoolModule.typeName, companyId, courseId, jsonId);
        }
        Model.prototype.doUpdate = function (completed) {
            this.src = (this.parentChain[0].src);
            this.createViewModel();
            completed();
        };
        Model.prototype.createViewModel = function () {
            if(schools.data.modId != this.jsonId) {
                throw "exception";
            }
            this.viewModel = [];
            var exs = schools.data.modUser.pages;
            greenUsed = false;
            for(var i = 1; i < exs.length; i += 2) {
                var l = exs[i], r = exs[i + 1];
                this.viewModel.push([
                    createLayoutCell(6, "TExercise", new exItem(this, l)), 
                    createLayoutCell(6, "TExercise", r ? new exItem(this, r) : null)
                ]);
            }
        };
        Model.prototype.action = function (id, exJsonId) {
            switch(id) {
                case schoolHome.menuAction.run:
                case schoolHome.menuAction.browse:
                    Pager.navigateTo(schools.createExerciseUrl(this.src.jsonId, exJsonId));
                    break;
            }
        };
        return Model;
    })(schools.Model2);
    schoolModule.Model = Model;    
    function createLayoutCell(width, tmpl, data) {
        return {
            width: width,
            tmpl: tmpl,
            data: data
        };
    }
    //pouze prvni cviceni isGreen modulu je toStart:
    var greenUsed;
    function exStatus(mod, exData) {
        if(mod.skipped) {
            return schools.taskStatus.skipped;
        } else if(exData.st == schools.ExerciseStatus.Evaluated) {
            return schools.taskStatus.completed;
        }
        if(greenUsed || !mod.isGreen) {
            return schools.taskStatus.toRun;
        }
        greenUsed = true;
        return schools.taskStatus.toStart;
    }
    var exItem = (function (_super) {
        __extends(exItem, _super);
        function exItem(parent, userData) {
                _super.call(this);
            this.userData = userData;
            var menus = [];
            var st = this.status = exStatus(parent.src, userData);
            switch(st) {
                case schools.taskStatus.toStart:
                    this.setView(st);
                    break;
                case schools.taskStatus.completed:
                    this.setView(st);
                    this.progress = 100;
                    break;
                case schools.taskStatus.toRun:
                    this.setView(st);
                    break;
                case schools.taskStatus.skipped:
                    this.setView(st);
                    break;
            }
            this.menu = schoolHome.menuItem.create(menus, this.id(), schoolHome.menuContext.course_mod);
        }
        exItem.prototype.staticData = //url: schools.Url;
        function () {
            return schools.data.modStatic[this.userData.i];
        };
        exItem.prototype.id = //status: schools.taskStatus;
        //score: number;
        function () {
            return this.staticData().url;
        };
        exItem.prototype.title = //statusText(): string { return schoolHome.crsTst.statusText(this.status); }
        function () {
            return this.staticData().title;
        };
        return exItem;
    })(schoolHome.Panel);
    schoolModule.exItem = exItem;    
    //actionName(): string { return ""; }
    Pager.registerLocator(schoolModule.typeName, function (url, completed) {
        return schools.findModule(url, completed);
    });
})(schoolModule || (schoolModule = {}));

var __extends = this.__extends || function (d, b) {
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var schoolEx;
(function (schoolEx) {
    schoolEx.typeName = "schoolExModel".toLowerCase();
    var Model = (function (_super) {
        __extends(Model, _super);
        function Model(companyId, courseId, jsonId) {
                _super.call(this, schoolEx.typeName, companyId, courseId, jsonId);
            this.exerciseHtml = ko.observable();
            this.greenArrowMode = ko.observable();
        }
        Model.prototype.doUpdate = function (completed) {
            var _this = this;
            this.index = this.parentChain[0].index;
            this.exerciseHtml(this.staticData().html)//render HTML
            ;
            completed();
            setTimeout(function () {
                var eval = $evalRoot();
                eval.acceptData(schools.data.previewMode ? schools.ExerciseStatus.Preview : _this.userData().st, _this.userData())//assign user data do cviceni
                ;
                _this.exEnter();
                _this.refreshGreenArrowMode()//aktualizuj stav zelene sipky
                ;
                //cekej na naladovani vsech obrazku
                var root = $(".visibleHidden");
                root.waitForImages(function () {
                    return root.removeClass("visibleHidden");
                }, $.noop, false);
            }, 1);
        };
        Model.prototype.exEnter = function () {
            this.startTime = new Date().getTime();
        };
        Model.prototype.exLeave = function () {
            var now = new Date().getTime();
            var delta = Math.min(Model.maxDelta, now - this.startTime);
            schools.data.modUser.t += delta;
            schools.data.modUser.et = now;
            this.startTime = now;
        };
        Model.maxDelta = 10 * 60 * 1000;
        Model.prototype.userData = //poradove cislo cviceni
        function () {
            return schools.data.modUser.pages[this.index];
        };
        Model.prototype.staticData = function () {
            return schools.data.modStatic[this.index];
        };
        Model.prototype.myModuleId = function () {
            return this.parentChain[1].src.jsonId;
        };
        Model.prototype.greenArrowClick = function () {
            var _this = this;
            var st = this.greenArrowMode();
            Debug.trace_exrc("greenArrowClick, arrowMode=" + LowUtils.EnumToString(greenArrowMode, st));
            var gotoNextEx = function () {
                return Pager.navigateTo(schools.createExerciseUrl(_this.myModuleId(), schools.data.modStatic[_this.index + 1].url));
            };
            var gotoNextModule = function () {
                return Pager.navigateTo(schools.createModuleUrl(schools.nextModule(_this.myModuleId()).jsonId));
            };
            var gotoHome = function () {
                return Pager.navigateTo(schools.createHomeUrlStd());
            };
            this.exLeave();
            switch(st) {
                case greenArrowMode.toEval:
                    if(!this.evaluate()) {
                        return;
                    }
                    schools.saveActModule(function () {
                        $evalRoot().acceptData(schools.ExerciseStatus.Evaluated, _this.userData());
                        _this.refreshGreenArrowMode();
                        window.focus()//po ev. askUser
                        ;
                    });
                    break;
                case greenArrowMode.toEvalNextEx:
                    if(!this.evaluate()) {
                        return;
                    }
                    schools.saveActModule($.noop);
                    gotoNextEx();
                    break;
                case greenArrowMode.toEvalNextModule:
                    if(!this.evaluate()) {
                        return;
                    }
                    schools.saveActModule($.noop);
                    gotoNextModule();
                    break;
                case greenArrowMode.toEvalNextCourse:
                    schools.saveActModule($.noop);
                    gotoHome();
                    break;
                case greenArrowMode.previewNextEx:
                    gotoNextEx();
                    break;
                case greenArrowMode.previewNextModule:
                    gotoNextModule();
                    break;
                case greenArrowMode.previewNextCourse:
                    gotoHome();
                    break;
            }
        };
        Model.prototype.refreshGreenArrowMode = function () {
            var _this = this;
            var isLastPage = function () {
                return _this.index == schools.data.modStatic.length - 1;
            };
            var isLastModule = function () {
                return schools.nextModule(_this.myModuleId()) == null;
            };
            var res;
            if(schools.data.previewMode || this.userData().st == schools.ExerciseStatus.Evaluated) {
                res = isLastPage() ? (isLastModule() ? greenArrowMode.previewNextCourse : greenArrowMode.previewNextModule) : greenArrowMode.previewNextEx;
            } else {
                if(!exerciseInfo.isPassive && this.userData().st == schools.ExerciseStatus.Normal) {
                    res = greenArrowMode.toEval;
                } else {
                    res = isLastPage() ? (isLastModule() ? greenArrowMode.toEvalNextCourse : greenArrowMode.toEvalNextModule) : greenArrowMode.toEvalNextEx;
                }
            }
            this.greenArrowMode(res);
        };
        Model.prototype.evaluate = function () {
            var data = this.userData();
            var eval = $evalRoot();
            if(eval == null) {
                data.st = schools.ExerciseStatus.Evaluated;
                return true;
            }//muze eval == null nastat?
            
            //zjisteni score
            var score = exerciseInfo.isPassive ? null : fromS4NScore(eval.get_score());
            //cviceni je mozne vyhodnotit
            var exerciseOK = score == null || score.From == 0 || (score.Correct / score.From * 100) >= 75;
            Debug.trace_exrc("evaluate, exercise score=" + (score == null || score.From == 0 ? "null" : (score.Correct / score.From * 100).toString()));
            if(!exerciseOK && !this.askUser()) {
                return false;
            }//je hodne chyb a uzivatel chce cviceni znova
            
            data.st = schools.ExerciseStatus.Evaluated;
            data.ms = score == null ? 0 : score.From;
            data.s = score == null ? 0 : score.Correct;
            //*********** refresh data modulu, q:\LMNet2\WebApps\EduAuthorNew\framework\script\lm\LMScormModule.js, line 190)
            var mod = schools.data.modUser;
            mod.ms = 0;
            mod.s = 0;
            mod.et = new Date().getTime();
            //mod.t = this.oldT + mod.et - this.startDate;
            mod.et = new Date().getTime();
            var allEval = true;
            var ms = 0;
            var s = 0;
            for(var i = 1; i < mod.pages.length; i++) {
                var pg = mod.pages[i];
                if(pg == null || pg.st != schools.ExerciseStatus.Evaluated) {
                    allEval = false;
                    break;
                }
                if(pg.ms <= 0) {
                    continue;
                }
                s += Utils.toInt(pg.s / pg.ms * 100);
                ms += 1;
            }
            if(allEval) {
                mod.st = schools.ExerciseStatus.Evaluated;
                mod.ms = 100;
                mod.s = ms <= 0 ? 100 : (s <= 0 ? 0 : Utils.toInt(s / ms))//prumer procent
                ;
                Debug.trace_exrc("evaluate, module evaluated, score=" + mod.s.toString());
                //TODO: refresh module status v course tree
                            }
            return true;
        };
        Model.prototype.askUser = function () {
            return true;
        };
        return Model;
    })(schools.Model2);
    schoolEx.Model = Model;    
    (function (greenArrowMode) {
        greenArrowMode._map = [];
        greenArrowMode._map[0] = "toEval";
        greenArrowMode.toEval = 0;
        greenArrowMode._map[1] = "toEvalNextEx";
        greenArrowMode.toEvalNextEx = 1;
        greenArrowMode._map[2] = "toEvalNextModule";
        greenArrowMode.toEvalNextModule = 2;
        greenArrowMode._map[3] = "toEvalNextCourse";
        greenArrowMode.toEvalNextCourse = 3;
        greenArrowMode._map[4] = "previewNextEx";
        greenArrowMode.previewNextEx = 4;
        greenArrowMode._map[5] = "previewNextModule";
        greenArrowMode.previewNextModule = 5;
        greenArrowMode._map[6] = "previewNextCourse";
        greenArrowMode.previewNextCourse = 6;
    })(schoolEx.greenArrowMode || (schoolEx.greenArrowMode = {}));
    var greenArrowMode = schoolEx.greenArrowMode;
    function fromS4NScore(S4NScore) {
        return S4NScore.length != 2 ? null : {
            Correct: S4NScore[0],
            From: S4NScore[1]
        };
    }
    Pager.registerLocator(schoolEx.typeName, function (url, completed) {
        return schools.findModule(url, completed);
    });
})(schoolEx || (schoolEx = {}));
///#DEBUG
var Debug;
(function (Debug) {
    function trace_exrc(msg) {
        Debug.trace("Exercise", msg);
    }
    Debug.trace_exrc = trace_exrc;
})(Debug || (Debug = {}));
///#ENDDEBUG
var exrc_dict = null;


var schools;
(function (schools) {
    schools.appId = "school";
})(schools || (schools = {}));
var testMe;
(function (testMe) {
    testMe.appId = "test";
})(testMe || (testMe = {}));
var Login;
(function (Login) {
    Login.appId = "login";
})(Login || (Login = {}));
var schoolAdmin;
(function (schoolAdmin) {
    schoolAdmin.appId = "schoolAdmin".toLowerCase();
})(schoolAdmin || (schoolAdmin = {}));
var xref;
(function (xref) {
    xref.appId = "xref";
})(xref || (xref = {}));
var doc;
(function (doc) {
    doc.appId = "doc";
})(doc || (doc = {}));
var vsNet;
(function (vsNet) {
    vsNet.appId = "vsNet".toLowerCase();
})(vsNet || (vsNet = {}));
var grafia;
(function (grafia) {
    grafia.appId = "grafia";
})(grafia || (grafia = {}));
var skrivanek;
(function (skrivanek) {
    skrivanek.appId = "skrivanek";
})(skrivanek || (skrivanek = {}));
var hashDelim = '/';
var oldPrefix = '/pg/old/';
var encMask = new RegExp('/', 'g');
var decMask = new RegExp('@', 'g');
function encodeUrlHash(url) { return url ? url.replace(encMask, '@') : ''; }
function decodeUrlHash(url) { return url ? url.replace(decMask, '/') : null; }
var Pager;
(function (Pager) {
    (function (ButtonType) {
        ButtonType[ButtonType["okCancel"] = 0] = "okCancel";
        ButtonType[ButtonType["ok"] = 1] = "ok";
        ButtonType[ButtonType["cancel"] = 2] = "cancel";
    })(Pager.ButtonType || (Pager.ButtonType = {}));
    var ButtonType = Pager.ButtonType;
    var ViewModelRoot = (function () {
        function ViewModelRoot() {
        }
        ViewModelRoot.prototype.pageChanged = function (oldPage, newPage) { }; //pozadavek na novou stranku
        ViewModelRoot.prototype.loaded = function () { }; //nova stranka naladovana a nabindovana
        return ViewModelRoot;
    })();
    Pager.ViewModelRoot = ViewModelRoot;
    var Page = (function () {
        function Page(appId, type, urlParts /*, public base: Page = null*/) {
            this.appId = appId;
            this.type = type;
            this.urlParts = urlParts;
        }
        Page.prototype.update = function (completed) { completed(); }; //vybudovani stranky
        Page.prototype.loaded = function () { }; //naladovani HTML stranky
        Page.prototype.leave = function () { }; //pred opustenim stranky
        Page.prototype.htmlClearing = function () { }; //pred zrusenim HTML se strankou
        Page.prototype.getHash = function () { return [this.appId, this.type].concat(this.urlParts).join(hashDelim); }; //my hash
        return Page;
    })();
    Pager.Page = Page;
    function registerAppLocator(appId, type, pageCreator) {
        if (!regApps[appId])
            regApps[appId] = {};
        regApps[appId][type] = pageCreator;
    }
    Pager.registerAppLocator = registerAppLocator;
    var regApps = {};
    function locatePageFromHash(hash, completed) {
        //if (!cfg.noAngularjsApp) { alert('locatePageFromHash cannot be called'); return; }
        alert('locatePageFromHash cannot be called');
        return;
        locatePageFromHashLow(hash, function (pg) {
            if (pg) {
                completed(pg);
                return;
            }
            if (!hash || hash.length < 2)
                locatePageFromHashLow(Pager.initHash(), completed);
            else {
                window.location.hash = "";
                completed(null);
            }
        });
    }
    Pager.locatePageFromHash = locatePageFromHash;
    //reakce na callback z OAuth2 login
    function angularJS_OAuthLogin(hash, completed) {
        if (hash != null && hash.indexOf("access_token=") >= 0) {
            OAuth.checkForToken(function (obj) {
                if (!obj.email) {
                    alert('Povolte prosím poskytnutí vašeho emailu!');
                    LMStatus.LogoutLow();
                    return false;
                }
                Pager.ajaxGet(//dle externiho ID zjisti LM Id (a ev. zaloz usera)  
                Pager.pathType.restServices, Login.CmdAdjustUser_Type, Login.CmdAdjustUser_Create(obj.providerid, obj.id, obj.email, obj.firstName, obj.lastName), function (res) {
                    LMStatus.logged(res.Cookie, false);
                    blended.checkOldApplicationStart();
                });
            });
            return true;
        }
        return false;
    }
    Pager.angularJS_OAuthLogin = angularJS_OAuthLogin;
    function locatePageFromHashLow(hash, completed) {
        //if (!cfg.noAngularjsApp) { alert('locatePageFromHash cannot be called'); return; }
        alert('locatePageFromHash cannot be called');
        return;
        if (hash != null && hash.indexOf("access_token=") >= 0) {
            OAuth.checkForToken(function (obj) {
                Pager.ajaxGet(//dle externiho ID zjisti LM Id (a ev. zaloz usera)
                Pager.pathType.restServices, Login.CmdAdjustUser_Type, Login.CmdAdjustUser_Create(obj.providerid, obj.id, obj.email, obj.firstName, obj.lastName), function (res) {
                    LMStatus.logged(res.Cookie, false);
                });
            });
            completed(Pager.ignorePage);
            return;
        }
        if (hash && hash.charAt(0) == '#')
            hash = hash.substring(1);
        //if (blended.isAngularHash(hash)) { completed(angularPage); return; }
        if (!hash || hash.length < 3) {
            completed(null);
            return;
        }
        //hash = hash.toLowerCase();
        var parts = hash.split(hashDelim);
        if (parts[0] == 'old' || parts[1] == 'old') {
            var removeNum = parts[0] == 'old' ? 1 : 2;
            parts.splice(0, removeNum);
        }
        if (parts.length < 2) {
            completed(null);
            return;
        }
        var app = regApps[parts[0].toLowerCase()];
        if (!app) {
            completed(null);
            return;
        }
        var proc = app[parts[1].toLowerCase()];
        if (!proc) {
            completed(null);
            return;
        }
        proc(parts.length <= 2 ? null : parts.slice(2), completed);
    }
    Pager.ignorePage = new Page(null, null, null);
    Pager.angularPage = new Page(null, null, null);
    $.views.helpers({
        ActPage: function () { return Pager.ActPage; },
        Pager: Pager,
    });
    //export function HomeUrl(): string { return "#"; }
    function getHomeUrl() { return LMStatus.isLogged() ? Pager.initHash() : Login.loginUrl(); }
    Pager.getHomeUrl = getHomeUrl;
    function gotoHomeUrl() { navigateToHash(getHomeUrl()); }
    Pager.gotoHomeUrl = gotoHomeUrl;
    function navigateToHash(hash) {
        if (!hash)
            hash = '';
        if (hash.length > 0 && hash.charAt(0) != '#')
            hash = '#' + hash;
        Logger.trace('Pager', 'navigateToHash: ' + hash);
        location.hash = hash;
    }
    Pager.navigateToHash = navigateToHash;
    function closePanels() { anim.collapseExpanded(); }
    Pager.closePanels = closePanels;
    //export function orceLoadPage(page: Pager.Page) {
    //  if (page == null) locatePageFromHash('', loadPageLow); else loadPageLow(page);
    //}
    function loadPageHash(hash) {
        debugger;
        locatePageFromHash(hash, function (pg) { return loadPage(pg); });
    }
    Pager.loadPageHash = loadPageHash;
    function loadPage(page) {
        if (page == null || page == Pager.ignorePage)
            return;
        if (Pager.ActPage != page) {
            var oldPg = Pager.ActPage;
            Pager.ActPage = page;
            if (oldPg != null)
                oldPg.leave();
            Pager.rootVM.pageChanged(oldPg, Pager.ActPage);
        }
        if (page == Pager.angularPage) {
            renderTemplate('Dummy');
            return;
        }
        reloadPage();
    }
    Pager.loadPage = loadPage;
    function beforeLoadPage(page) {
        if (Pager.ActPage == page)
            return;
        var oldPg = Pager.ActPage;
        Pager.ActPage = page;
        if (oldPg != null)
            oldPg.leave();
        Pager.rootVM.pageChanged(oldPg, Pager.ActPage);
    }
    Pager.beforeLoadPage = beforeLoadPage;
    function reloadPage(page) {
        if (page === void 0) { page = null; }
        if (!page)
            page = Pager.ActPage;
        if (!page)
            throw 'Missing page';
        Logger.trace("ModelBase.reload: url=", page.getHash() + ", template=" + ViewBase.viewLocator(page.type));
        blockGui(true);
        //clearHtml(); 16.9.2014, optimalizace:
        clearNode();
        page.update(function () { renderHtml(page); callLoaded(); page.loaded(); });
    }
    Pager.reloadPage = reloadPage;
    //stranka dokoncena => zavolej dokoncovaci akce
    function callLoaded() {
        setTimeout(function () {
            Pager.rootVM.loaded();
            blockGui(false);
        }, 1);
    }
    Pager.callLoaded = callLoaded;
    function blockGui(isBlock) {
        var el = $('#block-gui-element');
        //if (blockGuiTimer != 0) { clearTimeout(blockGuiTimer); blockGuiTimer = 0; }
        if (isBlock) {
            el.show();
        }
        else {
            el.hide();
        }
    }
    Pager.blockGui = blockGui; //var blockGuiTimer = 0;
    function renderTemplateEx(tagId, templateId, bindingObject) {
        var root = $('#' + tagId);
        var oldObj = root.data('binding-obj');
        if (oldObj) {
            if (oldObj.dispose)
                oldObj.dispose();
            root.data('binding-obj', null);
            ko.cleanNode(root[0]);
            root.html('');
        }
        if (templateId != 'Dummy') {
            var html = JsRenderTemplateEngine.render(templateId, bindingObject);
            root.html(html);
            ko.applyBindings(bindingObject, root[0]);
            root.data('binding-obj', bindingObject);
        }
    }
    Pager.renderTemplateEx = renderTemplateEx;
    function renderTemplate(templateId) {
        var root = $('#root');
        if (templateId == 'Dummy') {
            ko.cleanNode(root[0]);
            clearNode();
            root.html('');
        }
        else {
            root.html(JsRenderTemplateEngine.render(templateId, Pager.rootVM));
            ko.applyBindings(Pager.rootVM, root[0]);
        }
    }
    Pager.renderTemplate = renderTemplate;
    //Vymaz obsah stranky
    function clearHtml() { renderTemplate('Dummy'); }
    Pager.clearHtml = clearHtml;
    function clearNode() { try {
        ko.cleanNode($('#root')[0]);
    }
    catch (e) { } if (!Pager.htmlOwner)
        return; Pager.htmlOwner.htmlClearing(); Pager.htmlOwner = null; }
    //vygeneruj HTML a navaz ho do stranky. Proved ko-binding
    function renderHtml(page) {
        if (page === void 0) { page = Pager.ActPage; }
        clearNode();
        renderTemplate(ViewBase.viewLocator(page.type));
        Pager.htmlOwner = page;
    }
    Pager.renderHtml = renderHtml;
    function renderHtmlEx(isStart, style, page) {
        if (style === void 0) { style = null; }
        if (page === void 0) { page = Pager.ActPage; }
        var root = $('#root');
        if (isStart) {
            if (bowser.agent.msie && bowser.agent.version > 8)
                root.addClass('contentHidden');
            //dynamicke pridani x odstraneni lokalnich page stylu
            var hd = $('head');
            //http://stackoverflow.com/questions/3182840/removing-or-replacing-a-stylesheet-a-link-with-javascript-jquery
            var cs = hd.find('#current-style');
            if (cs.length > 0) {
                cs.prop('disabled', true);
                cs.remove();
            }
            if (!_.isEmpty(style)) {
                var st = document.createElement('style');
                st.id = 'current-style';
                st.type = 'text/css';
                if (st.styleSheet)
                    st.styleSheet.cssText = style;
                else
                    st.appendChild(document.createTextNode(style));
                hd.append(st);
            }
        }
        if (isStart)
            renderHtml(page);
        if (!isStart)
            root.waitForImages(function () { return root.removeClass("contentHidden"); }, $.noop, false);
    }
    Pager.renderHtmlEx = renderHtmlEx;
    Pager.rootVM = new ViewModelRoot();
})(Pager || (Pager = {}));
var LMComLib;
(function (LMComLib) {
    (function (CookieIds) {
        CookieIds[CookieIds["lang"] = 0] = "lang";
        CookieIds[CookieIds["LMTicket"] = 1] = "LMTicket";
        CookieIds[CookieIds["schools_info"] = 2] = "schools_info";
        CookieIds[CookieIds["lms_licence"] = 3] = "lms_licence";
        CookieIds[CookieIds["subsite"] = 4] = "subsite";
        CookieIds[CookieIds["returnUrl"] = 5] = "returnUrl";
        CookieIds[CookieIds["oauth"] = 6] = "oauth";
        CookieIds[CookieIds["loginEMail"] = 7] = "loginEMail";
        CookieIds[CookieIds["loginLogin"] = 8] = "loginLogin";
        CookieIds[CookieIds["LMJSTicket"] = 9] = "LMJSTicket";
    })(LMComLib.CookieIds || (LMComLib.CookieIds = {}));
    var CookieIds = LMComLib.CookieIds;
    (function (CompRole) {
        CompRole[CompRole["Keys"] = 1] = "Keys";
        CompRole[CompRole["Products"] = 2] = "Products";
        CompRole[CompRole["Department"] = 4] = "Department";
        CompRole[CompRole["Results"] = 8] = "Results";
        CompRole[CompRole["Publisher"] = 16] = "Publisher";
        CompRole[CompRole["HumanEvalManager"] = 32] = "HumanEvalManager";
        CompRole[CompRole["HumanEvalator"] = 64] = "HumanEvalator";
        CompRole[CompRole["Admin"] = 32768] = "Admin";
        CompRole[CompRole["All"] = 32895] = "All";
    })(LMComLib.CompRole || (LMComLib.CompRole = {}));
    var CompRole = LMComLib.CompRole;
    (function (Role) {
        Role[Role["Admin"] = 1] = "Admin";
        Role[Role["Comps"] = 2] = "Comps";
        Role[Role["All"] = 255] = "All";
    })(LMComLib.Role || (LMComLib.Role = {}));
    var Role = LMComLib.Role;
    (function (CourseIds) {
        CourseIds[CourseIds["no"] = 0] = "no";
        CourseIds[CourseIds["English"] = 1] = "English";
        CourseIds[CourseIds["German"] = 2] = "German";
        CourseIds[CourseIds["Spanish"] = 3] = "Spanish";
        CourseIds[CourseIds["Italian"] = 4] = "Italian";
        CourseIds[CourseIds["French"] = 5] = "French";
        CourseIds[CourseIds["Chinese"] = 6] = "Chinese";
        CourseIds[CourseIds["Russian"] = 7] = "Russian";
        CourseIds[CourseIds["KurzTest"] = 8] = "KurzTest";
        CourseIds[CourseIds["Vyspa1"] = 9] = "Vyspa1";
        CourseIds[CourseIds["Vyspa2"] = 10] = "Vyspa2";
        CourseIds[CourseIds["Vyspa3"] = 11] = "Vyspa3";
        CourseIds[CourseIds["Vyspa4"] = 12] = "Vyspa4";
        CourseIds[CourseIds["Vyspa5"] = 13] = "Vyspa5";
        CourseIds[CourseIds["Vyspa6"] = 14] = "Vyspa6";
        CourseIds[CourseIds["Vyspa7"] = 15] = "Vyspa7";
        CourseIds[CourseIds["Vyspa8"] = 16] = "Vyspa8";
        CourseIds[CourseIds["Vyspa9"] = 17] = "Vyspa9";
        CourseIds[CourseIds["Vyspa10"] = 18] = "Vyspa10";
        CourseIds[CourseIds["Vyspa11"] = 19] = "Vyspa11";
        CourseIds[CourseIds["Vyspa12"] = 20] = "Vyspa12";
        CourseIds[CourseIds["Vyspa13"] = 21] = "Vyspa13";
        CourseIds[CourseIds["Vyspa"] = 22] = "Vyspa";
        CourseIds[CourseIds["NNOUcto"] = 23] = "NNOUcto";
        CourseIds[CourseIds["ZSAJ61"] = 24] = "ZSAJ61";
        CourseIds[CourseIds["ZSAJ71"] = 25] = "ZSAJ71";
        CourseIds[CourseIds["ZSAJ81"] = 26] = "ZSAJ81";
        CourseIds[CourseIds["ZSAJ91"] = 27] = "ZSAJ91";
        CourseIds[CourseIds["ZSNJ61"] = 28] = "ZSNJ61";
        CourseIds[CourseIds["ZSNJ71"] = 29] = "ZSNJ71";
        CourseIds[CourseIds["ZSNJ81"] = 30] = "ZSNJ81";
        CourseIds[CourseIds["ZSNJ91"] = 31] = "ZSNJ91";
        CourseIds[CourseIds["ZSAJ62"] = 32] = "ZSAJ62";
        CourseIds[CourseIds["ZSAJ72"] = 33] = "ZSAJ72";
        CourseIds[CourseIds["ZSAJ82"] = 34] = "ZSAJ82";
        CourseIds[CourseIds["ZSAJ92"] = 35] = "ZSAJ92";
        CourseIds[CourseIds["ZSNJ62"] = 36] = "ZSNJ62";
        CourseIds[CourseIds["ZSNJ72"] = 37] = "ZSNJ72";
        CourseIds[CourseIds["ZSNJ82"] = 38] = "ZSNJ82";
        CourseIds[CourseIds["ZSNJ92"] = 39] = "ZSNJ92";
        CourseIds[CourseIds["MVAJtesty"] = 40] = "MVAJtesty";
        CourseIds[CourseIds["MVSPtesty"] = 41] = "MVSPtesty";
        CourseIds[CourseIds["MVFRtesty"] = 42] = "MVFRtesty";
        CourseIds[CourseIds["MVRJtesty"] = 43] = "MVRJtesty";
        CourseIds[CourseIds["MVtesty"] = 44] = "MVtesty";
        CourseIds[CourseIds["EuroEnglish"] = 45] = "EuroEnglish";
        CourseIds[CourseIds["RewiseEnglish"] = 46] = "RewiseEnglish";
        CourseIds[CourseIds["RewiseGerman"] = 47] = "RewiseGerman";
        CourseIds[CourseIds["RewiseSpanish"] = 48] = "RewiseSpanish";
        CourseIds[CourseIds["RewiseItalian"] = 49] = "RewiseItalian";
        CourseIds[CourseIds["RewiseFrench"] = 50] = "RewiseFrench";
        CourseIds[CourseIds["RewiseChinese"] = 51] = "RewiseChinese";
        CourseIds[CourseIds["RewiseRussian"] = 52] = "RewiseRussian";
        CourseIds[CourseIds["Holiday_English"] = 53] = "Holiday_English";
        CourseIds[CourseIds["ZSAj"] = 54] = "ZSAj";
        CourseIds[CourseIds["ZSNj"] = 55] = "ZSNj";
        CourseIds[CourseIds["Ucto1"] = 56] = "Ucto1";
        CourseIds[CourseIds["Ucto2"] = 57] = "Ucto2";
        CourseIds[CourseIds["Ucto3"] = 58] = "Ucto3";
        CourseIds[CourseIds["UctoAll"] = 59] = "UctoAll";
        CourseIds[CourseIds["SurvEnglish"] = 60] = "SurvEnglish";
        CourseIds[CourseIds["SurvGerman"] = 61] = "SurvGerman";
        CourseIds[CourseIds["SurvSpanish"] = 62] = "SurvSpanish";
        CourseIds[CourseIds["SurvFrench"] = 63] = "SurvFrench";
        CourseIds[CourseIds["SurvItalian"] = 64] = "SurvItalian";
        CourseIds[CourseIds["Ptas"] = 65] = "Ptas";
        CourseIds[CourseIds["Esd"] = 66] = "Esd";
        CourseIds[CourseIds["Usschpor"] = 67] = "Usschpor";
        CourseIds[CourseIds["Ustelef"] = 68] = "Ustelef";
        CourseIds[CourseIds["Usprez"] = 69] = "Usprez";
        CourseIds[CourseIds["Usobchjed"] = 70] = "Usobchjed";
        CourseIds[CourseIds["EnglishBerlitz"] = 71] = "EnglishBerlitz";
        CourseIds[CourseIds["GermanBerlitz"] = 72] = "GermanBerlitz";
        CourseIds[CourseIds["SpanishBerlitz"] = 73] = "SpanishBerlitz";
        CourseIds[CourseIds["ItalianBerlitz"] = 74] = "ItalianBerlitz";
        CourseIds[CourseIds["FrenchBerlitz"] = 75] = "FrenchBerlitz";
        CourseIds[CourseIds["ChineseBerlitz"] = 76] = "ChineseBerlitz";
        CourseIds[CourseIds["RussianBerlitz"] = 77] = "RussianBerlitz";
        CourseIds[CourseIds["AholdDemoAnim"] = 78] = "AholdDemoAnim";
        CourseIds[CourseIds["AholdDemoVideo"] = 79] = "AholdDemoVideo";
        CourseIds[CourseIds["IsEduLand_Other"] = 80] = "IsEduLand_Other";
        CourseIds[CourseIds["IsEduLand_EuroEnglish"] = 81] = "IsEduLand_EuroEnglish";
        CourseIds[CourseIds["EnglishE"] = 82] = "EnglishE";
        CourseIds[CourseIds["ElementsAndTest"] = 83] = "ElementsAndTest";
        CourseIds[CourseIds["eTestMeBig"] = 90] = "eTestMeBig";
        CourseIds[CourseIds["eTestMeSmall"] = 91] = "eTestMeSmall";
        CourseIds[CourseIds["eTestMe_EnglishBig"] = 92] = "eTestMe_EnglishBig";
    })(LMComLib.CourseIds || (LMComLib.CourseIds = {}));
    var CourseIds = LMComLib.CourseIds;
    (function (Domains) {
        Domains[Domains["no"] = 0] = "no";
        Domains[Domains["cz"] = 1] = "cz";
        Domains[Domains["com"] = 2] = "com";
        Domains[Domains["sz"] = 3] = "sz";
        Domains[Domains["el"] = 4] = "el";
        Domains[Domains["org"] = 5] = "org";
        Domains[Domains["sk"] = 6] = "sk";
        Domains[Domains["gopas"] = 7] = "gopas";
        Domains[Domains["site"] = 99] = "site";
    })(LMComLib.Domains || (LMComLib.Domains = {}));
    var Domains = LMComLib.Domains;
    (function (errorId) {
        errorId[errorId["no"] = 0] = "no";
        errorId[errorId["missingLicence"] = 1] = "missingLicence";
        errorId[errorId["licRead"] = 2] = "licRead";
        errorId[errorId["licFormat"] = 3] = "licFormat";
        errorId[errorId["wrongDemoModules"] = 4] = "wrongDemoModules";
        errorId[errorId["wrongHost"] = 5] = "wrongHost";
        errorId[errorId["wrongSpace"] = 6] = "wrongSpace";
        errorId[errorId["noMoodle"] = 7] = "noMoodle";
        errorId[errorId["expiredAll"] = 8] = "expiredAll";
        errorId[errorId["expiredServices"] = 9] = "expiredServices";
        errorId[errorId["notLogged"] = 10] = "notLogged";
        errorId[errorId["notLoggedTrial"] = 11] = "notLoggedTrial";
    })(LMComLib.errorId || (LMComLib.errorId = {}));
    var errorId = LMComLib.errorId;
    (function (Langs) {
        Langs[Langs["no"] = 0] = "no";
        Langs[Langs["lang"] = 1] = "lang";
        Langs[Langs["cs_cz"] = 2] = "cs_cz";
        Langs[Langs["en_gb"] = 3] = "en_gb";
        Langs[Langs["de_de"] = 4] = "de_de";
        Langs[Langs["sk_sk"] = 5] = "sk_sk";
        Langs[Langs["fr_fr"] = 6] = "fr_fr";
        Langs[Langs["it_it"] = 7] = "it_it";
        Langs[Langs["sp_sp"] = 8] = "sp_sp";
        Langs[Langs["ru_ru"] = 9] = "ru_ru";
        Langs[Langs["vi_vn"] = 10] = "vi_vn";
        Langs[Langs["es_es"] = 11] = "es_es";
        Langs[Langs["fi_fi"] = 12] = "fi_fi";
        Langs[Langs["sv_se"] = 13] = "sv_se";
        Langs[Langs["da_dk"] = 14] = "da_dk";
        Langs[Langs["nb_no"] = 15] = "nb_no";
        Langs[Langs["af_za"] = 16] = "af_za";
        Langs[Langs["sq_al"] = 17] = "sq_al";
        Langs[Langs["ar_sa"] = 18] = "ar_sa";
        Langs[Langs["hy_am"] = 19] = "hy_am";
        Langs[Langs["as_in"] = 20] = "as_in";
        Langs[Langs["az_latn_az"] = 21] = "az_latn_az";
        Langs[Langs["eu_es"] = 22] = "eu_es";
        Langs[Langs["bn_in"] = 23] = "bn_in";
        Langs[Langs["be_by"] = 24] = "be_by";
        Langs[Langs["pt_br"] = 25] = "pt_br";
        Langs[Langs["br_fr"] = 26] = "br_fr";
        Langs[Langs["bg_bg"] = 27] = "bg_bg";
        Langs[Langs["fr_ca"] = 28] = "fr_ca";
        Langs[Langs["zh_hk"] = 29] = "zh_hk";
        Langs[Langs["ca_es"] = 30] = "ca_es";
        Langs[Langs["co_fr"] = 31] = "co_fr";
        Langs[Langs["hr_hr"] = 32] = "hr_hr";
        Langs[Langs["nl_nl"] = 34] = "nl_nl";
        Langs[Langs["en_us"] = 35] = "en_us";
        Langs[Langs["et_ee"] = 36] = "et_ee";
        Langs[Langs["gl_es"] = 37] = "gl_es";
        Langs[Langs["ka_ge"] = 38] = "ka_ge";
        Langs[Langs["el_gr"] = 39] = "el_gr";
        Langs[Langs["gu_in"] = 40] = "gu_in";
        Langs[Langs["ha_latn_ng"] = 41] = "ha_latn_ng";
        Langs[Langs["he_il"] = 42] = "he_il";
        Langs[Langs["hi_in"] = 43] = "hi_in";
        Langs[Langs["hu_hu"] = 44] = "hu_hu";
        Langs[Langs["zh_cn"] = 45] = "zh_cn";
        Langs[Langs["is_is"] = 46] = "is_is";
        Langs[Langs["ig_ng"] = 47] = "ig_ng";
        Langs[Langs["id_id"] = 48] = "id_id";
        Langs[Langs["ga_ie"] = 49] = "ga_ie";
        Langs[Langs["ja_jp"] = 50] = "ja_jp";
        Langs[Langs["kn_in"] = 51] = "kn_in";
        Langs[Langs["km_kh"] = 52] = "km_kh";
        Langs[Langs["ky_kg"] = 53] = "ky_kg";
        Langs[Langs["ko_kr"] = 54] = "ko_kr";
        Langs[Langs["lo_la"] = 55] = "lo_la";
        Langs[Langs["es_mx"] = 56] = "es_mx";
        Langs[Langs["lv_lv"] = 57] = "lv_lv";
        Langs[Langs["lt_lt"] = 58] = "lt_lt";
        Langs[Langs["mk_mk"] = 59] = "mk_mk";
        Langs[Langs["ms_my"] = 60] = "ms_my";
        Langs[Langs["ml_in"] = 61] = "ml_in";
        Langs[Langs["mt_mt"] = 62] = "mt_mt";
        Langs[Langs["mi_nz"] = 63] = "mi_nz";
        Langs[Langs["mr_in"] = 64] = "mr_in";
        Langs[Langs["mn_mn"] = 65] = "mn_mn";
        Langs[Langs["ne_np"] = 66] = "ne_np";
        Langs[Langs["oc_fr"] = 67] = "oc_fr";
        Langs[Langs["ps_af"] = 68] = "ps_af";
        Langs[Langs["fa_ir"] = 69] = "fa_ir";
        Langs[Langs["pl_pl"] = 70] = "pl_pl";
        Langs[Langs["pt_pt"] = 71] = "pt_pt";
        Langs[Langs["pa_in"] = 72] = "pa_in";
        Langs[Langs["quz_pe"] = 73] = "quz_pe";
        Langs[Langs["ro_ro"] = 74] = "ro_ro";
        Langs[Langs["sr_latn_cs"] = 75] = "sr_latn_cs";
        Langs[Langs["nso_za"] = 76] = "nso_za";
        Langs[Langs["si_lk"] = 77] = "si_lk";
        Langs[Langs["sl_si"] = 78] = "sl_si";
        Langs[Langs["sw_ke"] = 79] = "sw_ke";
        Langs[Langs["ta_in"] = 80] = "ta_in";
        Langs[Langs["te_in"] = 81] = "te_in";
        Langs[Langs["th_th"] = 82] = "th_th";
        Langs[Langs["bo_cn"] = 83] = "bo_cn";
        Langs[Langs["tn_za"] = 84] = "tn_za";
        Langs[Langs["tr_tr"] = 85] = "tr_tr";
        Langs[Langs["uk_ua"] = 86] = "uk_ua";
        Langs[Langs["ur_pk"] = 87] = "ur_pk";
        Langs[Langs["uz_latn_uz"] = 88] = "uz_latn_uz";
        Langs[Langs["cy_gb"] = 89] = "cy_gb";
        Langs[Langs["xh_za"] = 90] = "xh_za";
        Langs[Langs["yo_ng"] = 91] = "yo_ng";
        Langs[Langs["zu_za"] = 92] = "zu_za";
        Langs[Langs["bs"] = 93] = "bs";
        Langs[Langs["en_nz"] = 94] = "en_nz";
        Langs[Langs["ku_arab"] = 95] = "ku_arab";
        Langs[Langs["LMPage_GetLang"] = 999] = "LMPage_GetLang";
    })(LMComLib.Langs || (LMComLib.Langs = {}));
    var Langs = LMComLib.Langs;
    (function (LMSSize) {
        LMSSize[LMSSize["no"] = 0] = "no";
        LMSSize[LMSSize["self"] = 1] = "self";
        LMSSize[LMSSize["blend"] = 2] = "blend";
    })(LMComLib.LMSSize || (LMComLib.LMSSize = {}));
    var LMSSize = LMComLib.LMSSize;
    (function (LMSType) {
        LMSType[LMSType["no"] = 0] = "no";
        LMSType[LMSType["NewEE"] = 1] = "NewEE";
        LMSType[LMSType["EE"] = 2] = "EE";
        LMSType[LMSType["LMCom"] = 3] = "LMCom";
        LMSType[LMSType["Moodle"] = 4] = "Moodle";
        LMSType[LMSType["SlNewEE"] = 5] = "SlNewEE";
    })(LMComLib.LMSType || (LMComLib.LMSType = {}));
    var LMSType = LMComLib.LMSType;
    (function (Targets) {
        Targets[Targets["web"] = 0] = "web";
        Targets[Targets["download"] = 1] = "download";
        Targets[Targets["scorm"] = 2] = "scorm";
        Targets[Targets["phoneGap"] = 3] = "phoneGap";
        Targets[Targets["author"] = 4] = "author";
        Targets[Targets["no"] = 127] = "no";
    })(LMComLib.Targets || (LMComLib.Targets = {}));
    var Targets = LMComLib.Targets;
    (function (OtherType) {
        OtherType[OtherType["no"] = 0] = "no";
        OtherType[OtherType["Seznam"] = 1] = "Seznam";
        OtherType[OtherType["Facebook"] = 2] = "Facebook";
        OtherType[OtherType["Google"] = 3] = "Google";
        OtherType[OtherType["Moodle"] = 4] = "Moodle";
        OtherType[OtherType["Yahoo"] = 5] = "Yahoo";
        OtherType[OtherType["MyOpenId"] = 6] = "MyOpenId";
        OtherType[OtherType["eTestMeId"] = 7] = "eTestMeId";
        OtherType[OtherType["Microsoft"] = 8] = "Microsoft";
        OtherType[OtherType["LinkedIn"] = 9] = "LinkedIn";
        OtherType[OtherType["LANGMaster"] = 10] = "LANGMaster";
        OtherType[OtherType["LANGMasterNoEMail"] = 11] = "LANGMasterNoEMail";
        OtherType[OtherType["scorm"] = 12] = "scorm";
    })(LMComLib.OtherType || (LMComLib.OtherType = {}));
    var OtherType = LMComLib.OtherType;
    (function (SubDomains) {
        SubDomains[SubDomains["no"] = 0] = "no";
        SubDomains[SubDomains["com"] = 1] = "com";
        SubDomains[SubDomains["com_pl"] = 2] = "com_pl";
        SubDomains[SubDomains["com_cz"] = 3] = "com_cz";
        SubDomains[SubDomains["com_RuMarket"] = 4] = "com_RuMarket";
        SubDomains[SubDomains["com_lt"] = 5] = "com_lt";
        SubDomains[SubDomains["com_sk"] = 6] = "com_sk";
        SubDomains[SubDomains["com_vi"] = 7] = "com_vi";
        SubDomains[SubDomains["com_tr"] = 8] = "com_tr";
        SubDomains[SubDomains["com_LondonBusinessEnglish"] = 9] = "com_LondonBusinessEnglish";
        SubDomains[SubDomains["com_Test"] = 10] = "com_Test";
        SubDomains[SubDomains["com_bg"] = 11] = "com_bg";
        SubDomains[SubDomains["com_bs"] = 12] = "com_bs";
        SubDomains[SubDomains["com_FakeFirst"] = 199] = "com_FakeFirst";
        SubDomains[SubDomains["com_Commest"] = 200] = "com_Commest";
        SubDomains[SubDomains["com_LanguageTraining"] = 201] = "com_LanguageTraining";
        SubDomains[SubDomains["com_CactusLanguageTraining"] = 202] = "com_CactusLanguageTraining";
        SubDomains[SubDomains["com_Spevacek"] = 203] = "com_Spevacek";
        SubDomains[SubDomains["com_EducationFirst"] = 204] = "com_EducationFirst";
        SubDomains[SubDomains["com_GlobalLT"] = 205] = "com_GlobalLT";
        SubDomains[SubDomains["com_MHCBusinessLanguageTraining"] = 206] = "com_MHCBusinessLanguageTraining";
        SubDomains[SubDomains["com_Linguarama"] = 207] = "com_Linguarama";
        SubDomains[SubDomains["com_LanguageDirect"] = 208] = "com_LanguageDirect";
        SubDomains[SubDomains["com_Eurospeak"] = 209] = "com_Eurospeak";
        SubDomains[SubDomains["com_Lingua"] = 210] = "com_Lingua";
        SubDomains[SubDomains["com_LanguageTrainers"] = 211] = "com_LanguageTrainers";
        SubDomains[SubDomains["com_InternationalHouseBarcelona"] = 212] = "com_InternationalHouseBarcelona";
        SubDomains[SubDomains["com_Netlanguages"] = 213] = "com_Netlanguages";
        SubDomains[SubDomains["com_InternationalHouseLondon"] = 214] = "com_InternationalHouseLondon";
        SubDomains[SubDomains["com_InlinguaMuenchen"] = 215] = "com_InlinguaMuenchen";
        SubDomains[SubDomains["com_NovyiDisk"] = 216] = "com_NovyiDisk";
        SubDomains[SubDomains["com_Lingea"] = 217] = "com_Lingea";
        SubDomains[SubDomains["com_Skrivanek"] = 218] = "com_Skrivanek";
        SubDomains[SubDomains["com_NacionalinisSvietimoCentras"] = 219] = "com_NacionalinisSvietimoCentras";
        SubDomains[SubDomains["com_UnitedTeachers"] = 220] = "com_UnitedTeachers";
        SubDomains[SubDomains["com_SageAcademyOnline"] = 221] = "com_SageAcademyOnline";
        SubDomains[SubDomains["com_InternationalLanguageSchool"] = 222] = "com_InternationalLanguageSchool";
        SubDomains[SubDomains["com_AvanquestGermany"] = 223] = "com_AvanquestGermany";
        SubDomains[SubDomains["com_EuroTalk"] = 224] = "com_EuroTalk";
        SubDomains[SubDomains["com_Agemsoft"] = 225] = "com_Agemsoft";
        SubDomains[SubDomains["com_Grafia"] = 226] = "com_Grafia";
        SubDomains[SubDomains["com_Pragoeduca"] = 227] = "com_Pragoeduca";
        SubDomains[SubDomains["com_AvanquestFrance"] = 228] = "com_AvanquestFrance";
        SubDomains[SubDomains["com_AvanquestUK"] = 229] = "com_AvanquestUK";
        SubDomains[SubDomains["com_Inlingua"] = 230] = "com_Inlingua";
        SubDomains[SubDomains["com_Oxygen"] = 231] = "com_Oxygen";
        SubDomains[SubDomains["com_Tutor"] = 232] = "com_Tutor";
        SubDomains[SubDomains["com_Megalanguage"] = 233] = "com_Megalanguage";
        SubDomains[SubDomains["com_Anchortrain"] = 234] = "com_Anchortrain";
        SubDomains[SubDomains["com_MCLanguages"] = 235] = "com_MCLanguages";
        SubDomains[SubDomains["com_BKCInternationalHouse"] = 236] = "com_BKCInternationalHouse";
        SubDomains[SubDomains["com_GlobusInt"] = 237] = "com_GlobusInt";
        SubDomains[SubDomains["com_SpeakUP"] = 238] = "com_SpeakUP";
        SubDomains[SubDomains["com_Adrian"] = 239] = "com_Adrian";
        SubDomains[SubDomains["com_SpeakPlus"] = 240] = "com_SpeakPlus";
        SubDomains[SubDomains["com_MasterKlass"] = 241] = "com_MasterKlass";
        SubDomains[SubDomains["com_PrimeSchool"] = 242] = "com_PrimeSchool";
        SubDomains[SubDomains["com_LinguaConsult"] = 243] = "com_LinguaConsult";
        SubDomains[SubDomains["com_AccentCenter"] = 244] = "com_AccentCenter";
        SubDomains[SubDomains["com_CDCInterTraining"] = 245] = "com_CDCInterTraining";
        SubDomains[SubDomains["com_GeneralLinguistic"] = 246] = "com_GeneralLinguistic";
        SubDomains[SubDomains["com_CREF"] = 247] = "com_CREF";
        SubDomains[SubDomains["com_Alibra"] = 248] = "com_Alibra";
        SubDomains[SubDomains["com_SpeakUPRu"] = 249] = "com_SpeakUPRu";
        SubDomains[SubDomains["com_MichaHesseFremdsprachenunterricht"] = 250] = "com_MichaHesseFremdsprachenunterricht";
        SubDomains[SubDomains["com_BoaLingua"] = 251] = "com_BoaLingua";
        SubDomains[SubDomains["com_Sprachschule4U"] = 252] = "com_Sprachschule4U";
        SubDomains[SubDomains["com_GLSSprachenzentrum"] = 253] = "com_GLSSprachenzentrum";
        SubDomains[SubDomains["com_LINGUAFRANCASprachschule"] = 254] = "com_LINGUAFRANCASprachschule";
        SubDomains[SubDomains["com_Dialogica"] = 255] = "com_Dialogica";
        SubDomains[SubDomains["com_WallStreetInstitute"] = 256] = "com_WallStreetInstitute";
        SubDomains[SubDomains["com_CarlDuisberg"] = 257] = "com_CarlDuisberg";
        SubDomains[SubDomains["com_idiom"] = 258] = "com_idiom";
        SubDomains[SubDomains["com_Sprachcoach"] = 259] = "com_Sprachcoach";
        SubDomains[SubDomains["com_AcademiaLuzern"] = 260] = "com_AcademiaLuzern";
        SubDomains[SubDomains["com_HBSSprachschule"] = 261] = "com_HBSSprachschule";
        SubDomains[SubDomains["com_SprachschuleSchneider"] = 262] = "com_SprachschuleSchneider";
        SubDomains[SubDomains["com_Biku"] = 263] = "com_Biku";
        SubDomains[SubDomains["com_NewEnglishTeaching"] = 264] = "com_NewEnglishTeaching";
        SubDomains[SubDomains["com_LinguaramaIt"] = 265] = "com_LinguaramaIt";
        SubDomains[SubDomains["com_AccademicaBritannica"] = 266] = "com_AccademicaBritannica";
        SubDomains[SubDomains["com_EuropeanSchool"] = 267] = "com_EuropeanSchool";
        SubDomains[SubDomains["com_LondonLanguageServices"] = 268] = "com_LondonLanguageServices";
        SubDomains[SubDomains["com_Enforex"] = 269] = "com_Enforex";
        SubDomains[SubDomains["com_BCNLanguages"] = 270] = "com_BCNLanguages";
        SubDomains[SubDomains["com_FyneFormacion"] = 271] = "com_FyneFormacion";
        SubDomains[SubDomains["com_TheBritishHouse"] = 272] = "com_TheBritishHouse";
        SubDomains[SubDomains["com_LinguaramaSP"] = 273] = "com_LinguaramaSP";
        SubDomains[SubDomains["com_HeadwayLanguageServices"] = 274] = "com_HeadwayLanguageServices";
        SubDomains[SubDomains["com_Altissia"] = 275] = "com_Altissia";
        SubDomains[SubDomains["com_ABCHumboldt"] = 276] = "com_ABCHumboldt";
        SubDomains[SubDomains["com_EscuelaParla"] = 277] = "com_EscuelaParla";
        SubDomains[SubDomains["com_ICLIdiomas"] = 278] = "com_ICLIdiomas";
        SubDomains[SubDomains["com_CambioIdiomas"] = 279] = "com_CambioIdiomas";
        SubDomains[SubDomains["com_Moose"] = 280] = "com_Moose";
        SubDomains[SubDomains["com_ProfiLingua"] = 281] = "com_ProfiLingua";
        SubDomains[SubDomains["com_BusinessRepublic"] = 282] = "com_BusinessRepublic";
        SubDomains[SubDomains["com_TFLS"] = 283] = "com_TFLS";
        SubDomains[SubDomains["com_IHWorld"] = 284] = "com_IHWorld";
        SubDomains[SubDomains["com_KlubschuleMigros"] = 285] = "com_KlubschuleMigros";
        SubDomains[SubDomains["com_CLLLanguageCentres"] = 286] = "com_CLLLanguageCentres";
        SubDomains[SubDomains["com_F9Languages"] = 287] = "com_F9Languages";
        SubDomains[SubDomains["com_VerbaScripta"] = 288] = "com_VerbaScripta";
        SubDomains[SubDomains["com_OneTwoSpeak"] = 289] = "com_OneTwoSpeak";
        SubDomains[SubDomains["com_LanguageConnexion"] = 290] = "com_LanguageConnexion";
        SubDomains[SubDomains["com_Amideast"] = 291] = "com_Amideast";
        SubDomains[SubDomains["com_ActivLangues"] = 292] = "com_ActivLangues";
        SubDomains[SubDomains["com_CapitoleFormation"] = 293] = "com_CapitoleFormation";
        SubDomains[SubDomains["com_ADomlingua"] = 294] = "com_ADomlingua";
        SubDomains[SubDomains["com_PartnerLanguageSchool"] = 295] = "com_PartnerLanguageSchool";
        SubDomains[SubDomains["com_PartnerLanguageSchoolDE"] = 296] = "com_PartnerLanguageSchoolDE";
        SubDomains[SubDomains["com_PartnerLanguageSchoolSP"] = 297] = "com_PartnerLanguageSchoolSP";
        SubDomains[SubDomains["com_PartnerLanguageSchoolIT"] = 298] = "com_PartnerLanguageSchoolIT";
        SubDomains[SubDomains["com_PartnerLanguageSchoolFR"] = 299] = "com_PartnerLanguageSchoolFR";
        SubDomains[SubDomains["com_PartnerLanguageSchoolRU"] = 300] = "com_PartnerLanguageSchoolRU";
        SubDomains[SubDomains["com_InlinguaFrance"] = 301] = "com_InlinguaFrance";
        SubDomains[SubDomains["com_InlinguaItaly"] = 302] = "com_InlinguaItaly";
        SubDomains[SubDomains["com_InlinguaSpain"] = 303] = "com_InlinguaSpain";
        SubDomains[SubDomains["com_InlinguaGermany"] = 304] = "com_InlinguaGermany";
        SubDomains[SubDomains["com_SPEEXX"] = 305] = "com_SPEEXX";
        SubDomains[SubDomains["com_AnglictinaNepravidelnaSlovesa"] = 306] = "com_AnglictinaNepravidelnaSlovesa";
        SubDomains[SubDomains["com_EVC"] = 307] = "com_EVC";
        SubDomains[SubDomains["com_OnlineJazyky"] = 308] = "com_OnlineJazyky";
        SubDomains[SubDomains["com_InternationalHouseSpain"] = 309] = "com_InternationalHouseSpain";
        SubDomains[SubDomains["com_InternationalHouseGermany"] = 310] = "com_InternationalHouseGermany";
        SubDomains[SubDomains["com_InternationalHouseItaly"] = 311] = "com_InternationalHouseItaly";
        SubDomains[SubDomains["com_InternationalHouseRussia"] = 312] = "com_InternationalHouseRussia";
        SubDomains[SubDomains["com_InternationalHouseEngland"] = 313] = "com_InternationalHouseEngland";
        SubDomains[SubDomains["com_Digiakademie"] = 314] = "com_Digiakademie";
        SubDomains[SubDomains["com_PRE"] = 315] = "com_PRE";
        SubDomains[SubDomains["com_OxfordSchool"] = 316] = "com_OxfordSchool";
        SubDomains[SubDomains["com_JJN"] = 317] = "com_JJN";
        SubDomains[SubDomains["com_Oversea"] = 318] = "com_Oversea";
        SubDomains[SubDomains["com_UPAEP"] = 319] = "com_UPAEP";
        SubDomains[SubDomains["com_Letsolutions"] = 320] = "com_Letsolutions";
        SubDomains[SubDomains["com_Presto"] = 321] = "com_Presto";
        SubDomains[SubDomains["com_Kontis"] = 322] = "com_Kontis";
        SubDomains[SubDomains["com_vnu"] = 323] = "com_vnu";
        SubDomains[SubDomains["com_vnuhcm"] = 324] = "com_vnuhcm";
        SubDomains[SubDomains["com_hueuni"] = 325] = "com_hueuni";
        SubDomains[SubDomains["com_tnu"] = 326] = "com_tnu";
        SubDomains[SubDomains["com_ud"] = 327] = "com_ud";
        SubDomains[SubDomains["com_ctu"] = 328] = "com_ctu";
        SubDomains[SubDomains["com_vinhuni"] = 329] = "com_vinhuni";
        SubDomains[SubDomains["com_taynguyenuni"] = 330] = "com_taynguyenuni";
        SubDomains[SubDomains["com_qnu"] = 331] = "com_qnu";
        SubDomains[SubDomains["com_hut"] = 332] = "com_hut";
        SubDomains[SubDomains["com_dhcd"] = 333] = "com_dhcd";
        SubDomains[SubDomains["com_haui"] = 334] = "com_haui";
        SubDomains[SubDomains["com_cntp"] = 335] = "com_cntp";
        SubDomains[SubDomains["com_hup"] = 336] = "com_hup";
        SubDomains[SubDomains["com_pvu"] = 337] = "com_pvu";
        SubDomains[SubDomains["com_epu"] = 338] = "com_epu";
        SubDomains[SubDomains["com_dthu"] = 339] = "com_dthu";
        SubDomains[SubDomains["com_hanu"] = 340] = "com_hanu";
        SubDomains[SubDomains["com_vimaru"] = 341] = "com_vimaru";
        SubDomains[SubDomains["com_hau"] = 342] = "com_hau";
        SubDomains[SubDomains["com_hcmuarc"] = 343] = "com_hcmuarc";
        SubDomains[SubDomains["com_neu"] = 344] = "com_neu";
        SubDomains[SubDomains["com_ueh"] = 345] = "com_ueh";
        SubDomains[SubDomains["com_uct"] = 346] = "com_uct";
        SubDomains[SubDomains["com_hcmutrans"] = 347] = "com_hcmutrans";
        SubDomains[SubDomains["com_ulsa"] = 348] = "com_ulsa";
        SubDomains[SubDomains["com_hlu"] = 349] = "com_hlu";
        SubDomains[SubDomains["com_hcmulaw"] = 350] = "com_hcmulaw";
        SubDomains[SubDomains["com_vfu"] = 351] = "com_vfu";
        SubDomains[SubDomains["com_humg"] = 352] = "com_humg";
        SubDomains[SubDomains["com_buh"] = 353] = "com_buh";
        SubDomains[SubDomains["com_ftu"] = 354] = "com_ftu";
        SubDomains[SubDomains["com_ntu"] = 355] = "com_ntu";
        SubDomains[SubDomains["com_hcmuaf"] = 356] = "com_hcmuaf";
        SubDomains[SubDomains["com_hua"] = 357] = "com_hua";
        SubDomains[SubDomains["com_hnue"] = 358] = "com_hnue";
        SubDomains[SubDomains["com_hpu2"] = 359] = "com_hpu2";
        SubDomains[SubDomains["com_utehy"] = 360] = "com_utehy";
        SubDomains[SubDomains["com_hcmute"] = 361] = "com_hcmute";
        SubDomains[SubDomains["com_nute"] = 362] = "com_nute";
        SubDomains[SubDomains["com_spktvinh"] = 363] = "com_spktvinh";
        SubDomains[SubDomains["com_hcmup"] = 364] = "com_hcmup";
        SubDomains[SubDomains["com_vcu"] = 365] = "com_vcu";
        SubDomains[SubDomains["com_huc"] = 366] = "com_huc";
        SubDomains[SubDomains["com_hcmuc"] = 367] = "com_hcmuc";
        SubDomains[SubDomains["com_nuce"] = 368] = "com_nuce";
        SubDomains[SubDomains["com_yds"] = 369] = "com_yds";
        SubDomains[SubDomains["com_hmu"] = 370] = "com_hmu";
        SubDomains[SubDomains["com_hpmu"] = 371] = "com_hpmu";
        SubDomains[SubDomains["com_dhhp"] = 372] = "com_dhhp";
        SubDomains[SubDomains["com_dlu"] = 373] = "com_dlu";
        SubDomains[SubDomains["com_hou"] = 374] = "com_hou";
        SubDomains[SubDomains["com_hvtc"] = 375] = "com_hvtc";
        SubDomains[SubDomains["com_hvnh"] = 376] = "com_hvnh";
        SubDomains[SubDomains["com_Simpleway"] = 377] = "com_Simpleway";
        SubDomains[SubDomains["com_Spolchemie"] = 378] = "com_Spolchemie";
        SubDomains[SubDomains["com_OlivegroveGroup"] = 379] = "com_OlivegroveGroup";
        SubDomains[SubDomains["com_Vox"] = 380] = "com_Vox";
        SubDomains[SubDomains["com_Chip"] = 381] = "com_Chip";
        SubDomains[SubDomains["com_iDnes"] = 382] = "com_iDnes";
        SubDomains[SubDomains["com_iHned"] = 383] = "com_iHned";
        SubDomains[SubDomains["com_JobsCZ"] = 384] = "com_JobsCZ";
        SubDomains[SubDomains["com_Lidovky"] = 385] = "com_Lidovky";
        SubDomains[SubDomains["com_SkodaAuto"] = 386] = "com_SkodaAuto";
        SubDomains[SubDomains["com_SPrace"] = 387] = "com_SPrace";
        SubDomains[SubDomains["com_UceniOnline"] = 388] = "com_UceniOnline";
        SubDomains[SubDomains["com_VSEM"] = 389] = "com_VSEM";
        SubDomains[SubDomains["com_PCHelp"] = 390] = "com_PCHelp";
        SubDomains[SubDomains["com_Manpower"] = 391] = "com_Manpower";
        SubDomains[SubDomains["com_HofmannPersonal"] = 392] = "com_HofmannPersonal";
        SubDomains[SubDomains["com_CeskyTrhPrace"] = 393] = "com_CeskyTrhPrace";
        SubDomains[SubDomains["com_PracaSMESK"] = 394] = "com_PracaSMESK";
        SubDomains[SubDomains["com_StartPeople"] = 395] = "com_StartPeople";
        SubDomains[SubDomains["com_ProfesiaSK"] = 396] = "com_ProfesiaSK";
        SubDomains[SubDomains["com_KarieraSK"] = 397] = "com_KarieraSK";
        SubDomains[SubDomains["com_PracaKarieraSK"] = 398] = "com_PracaKarieraSK";
        SubDomains[SubDomains["com_GraftonSK"] = 399] = "com_GraftonSK";
        SubDomains[SubDomains["com_TopjobsSK"] = 400] = "com_TopjobsSK";
        SubDomains[SubDomains["com_MonsterSK"] = 401] = "com_MonsterSK";
        SubDomains[SubDomains["com_ProstaffSK"] = 402] = "com_ProstaffSK";
        SubDomains[SubDomains["com_MojaPracaSK"] = 403] = "com_MojaPracaSK";
        SubDomains[SubDomains["com_GraftonCZ"] = 404] = "com_GraftonCZ";
        SubDomains[SubDomains["com_MonsterCZ"] = 405] = "com_MonsterCZ";
        SubDomains[SubDomains["com_ProfesiaCZ"] = 406] = "com_ProfesiaCZ";
        SubDomains[SubDomains["com_Profeskontakt"] = 407] = "com_Profeskontakt";
        SubDomains[SubDomains["com_Anex"] = 408] = "com_Anex";
        SubDomains[SubDomains["com_RobertHalf"] = 409] = "com_RobertHalf";
        SubDomains[SubDomains["com_HorizonsLanguageJobs"] = 410] = "com_HorizonsLanguageJobs";
        SubDomains[SubDomains["com_Pragma"] = 411] = "com_Pragma";
        SubDomains[SubDomains["com_SudentAgency"] = 412] = "com_SudentAgency";
        SubDomains[SubDomains["com_AktualneCZ"] = 413] = "com_AktualneCZ";
        SubDomains[SubDomains["com_LMC"] = 414] = "com_LMC";
        SubDomains[SubDomains["com_CNPIEC"] = 415] = "com_CNPIEC";
        SubDomains[SubDomains["com_EduCloud"] = 416] = "com_EduCloud";
        SubDomains[SubDomains["com_Demo1"] = 417] = "com_Demo1";
        SubDomains[SubDomains["com_Demo2"] = 418] = "com_Demo2";
        SubDomains[SubDomains["com_Demo3"] = 419] = "com_Demo3";
        SubDomains[SubDomains["com_Demo4"] = 420] = "com_Demo4";
        SubDomains[SubDomains["com_Demo5"] = 421] = "com_Demo5";
        SubDomains[SubDomains["com_Demo6"] = 422] = "com_Demo6";
        SubDomains[SubDomains["com_Demo7"] = 423] = "com_Demo7";
        SubDomains[SubDomains["com_Demo8"] = 424] = "com_Demo8";
        SubDomains[SubDomains["com_Demo9"] = 425] = "com_Demo9";
        SubDomains[SubDomains["com_Demo10"] = 426] = "com_Demo10";
        SubDomains[SubDomains["com_Demo11"] = 427] = "com_Demo11";
        SubDomains[SubDomains["com_Demo12"] = 428] = "com_Demo12";
        SubDomains[SubDomains["com_Demo13"] = 429] = "com_Demo13";
        SubDomains[SubDomains["com_Demo14"] = 430] = "com_Demo14";
        SubDomains[SubDomains["com_Demo15"] = 431] = "com_Demo15";
        SubDomains[SubDomains["com_Demo16"] = 432] = "com_Demo16";
        SubDomains[SubDomains["com_Demo17"] = 433] = "com_Demo17";
        SubDomains[SubDomains["com_Demo18"] = 434] = "com_Demo18";
        SubDomains[SubDomains["com_Demo19"] = 435] = "com_Demo19";
        SubDomains[SubDomains["com_Demo20"] = 436] = "com_Demo20";
        SubDomains[SubDomains["com_Demo21"] = 437] = "com_Demo21";
        SubDomains[SubDomains["com_Demo22"] = 438] = "com_Demo22";
        SubDomains[SubDomains["com_Demo23"] = 439] = "com_Demo23";
        SubDomains[SubDomains["com_Demo24"] = 440] = "com_Demo24";
        SubDomains[SubDomains["com_Demo25"] = 441] = "com_Demo25";
        SubDomains[SubDomains["com_Demo26"] = 442] = "com_Demo26";
        SubDomains[SubDomains["com_Demo27"] = 443] = "com_Demo27";
        SubDomains[SubDomains["com_Demo28"] = 444] = "com_Demo28";
        SubDomains[SubDomains["com_Demo29"] = 445] = "com_Demo29";
        SubDomains[SubDomains["com_Demo30"] = 446] = "com_Demo30";
        SubDomains[SubDomains["com_Demo31"] = 447] = "com_Demo31";
        SubDomains[SubDomains["com_Demo32"] = 448] = "com_Demo32";
        SubDomains[SubDomains["com_Demo33"] = 449] = "com_Demo33";
        SubDomains[SubDomains["com_Demo34"] = 450] = "com_Demo34";
        SubDomains[SubDomains["com_Demo35"] = 451] = "com_Demo35";
        SubDomains[SubDomains["com_Demo36"] = 452] = "com_Demo36";
        SubDomains[SubDomains["com_Demo37"] = 453] = "com_Demo37";
        SubDomains[SubDomains["com_Demo38"] = 454] = "com_Demo38";
        SubDomains[SubDomains["com_Demo39"] = 455] = "com_Demo39";
        SubDomains[SubDomains["com_Demo40"] = 456] = "com_Demo40";
        SubDomains[SubDomains["com_Demo41"] = 457] = "com_Demo41";
        SubDomains[SubDomains["com_Demo42"] = 458] = "com_Demo42";
        SubDomains[SubDomains["com_Demo43"] = 459] = "com_Demo43";
        SubDomains[SubDomains["com_Demo44"] = 460] = "com_Demo44";
        SubDomains[SubDomains["com_Demo45"] = 461] = "com_Demo45";
        SubDomains[SubDomains["com_Demo46"] = 462] = "com_Demo46";
        SubDomains[SubDomains["com_Demo47"] = 463] = "com_Demo47";
        SubDomains[SubDomains["com_Demo48"] = 464] = "com_Demo48";
        SubDomains[SubDomains["com_Demo49"] = 465] = "com_Demo49";
        SubDomains[SubDomains["com_Demo50"] = 466] = "com_Demo50";
    })(LMComLib.SubDomains || (LMComLib.SubDomains = {}));
    var SubDomains = LMComLib.SubDomains;
    (function (LineIds) {
        LineIds[LineIds["no"] = 0] = "no";
        LineIds[LineIds["English"] = 1] = "English";
        LineIds[LineIds["German"] = 2] = "German";
        LineIds[LineIds["Spanish"] = 3] = "Spanish";
        LineIds[LineIds["Italian"] = 4] = "Italian";
        LineIds[LineIds["French"] = 5] = "French";
        LineIds[LineIds["Chinese"] = 6] = "Chinese";
        LineIds[LineIds["Russian"] = 7] = "Russian";
        LineIds[LineIds["Other"] = 8] = "Other";
        LineIds[LineIds["MSWord"] = 9] = "MSWord";
        LineIds[LineIds["MSExcel"] = 10] = "MSExcel";
        LineIds[LineIds["MSOutlook"] = 11] = "MSOutlook";
        LineIds[LineIds["MSAccess"] = 12] = "MSAccess";
        LineIds[LineIds["MSPowerPoint"] = 13] = "MSPowerPoint";
        LineIds[LineIds["MSVista"] = 14] = "MSVista";
        LineIds[LineIds["MSOffice"] = 15] = "MSOffice";
        LineIds[LineIds["MSEcdl"] = 16] = "MSEcdl";
        LineIds[LineIds["Ucto"] = 17] = "Ucto";
        LineIds[LineIds["Fotografie"] = 18] = "Fotografie";
        LineIds[LineIds["BranaVedeni"] = 19] = "BranaVedeni";
        LineIds[LineIds["Afrikaans"] = 20] = "Afrikaans";
        LineIds[LineIds["Albanian"] = 21] = "Albanian";
        LineIds[LineIds["Arabic"] = 22] = "Arabic";
        LineIds[LineIds["Armenian"] = 23] = "Armenian";
        LineIds[LineIds["Assamese"] = 24] = "Assamese";
        LineIds[LineIds["Azerbaijani"] = 25] = "Azerbaijani";
        LineIds[LineIds["Basque"] = 26] = "Basque";
        LineIds[LineIds["Bengali"] = 27] = "Bengali";
        LineIds[LineIds["Breton"] = 28] = "Breton";
        LineIds[LineIds["Bulgarian"] = 29] = "Bulgarian";
        LineIds[LineIds["Cantonese"] = 30] = "Cantonese";
        LineIds[LineIds["Catalan"] = 31] = "Catalan";
        LineIds[LineIds["Corsican"] = 32] = "Corsican";
        LineIds[LineIds["Croatian"] = 33] = "Croatian";
        LineIds[LineIds["Czech"] = 34] = "Czech";
        LineIds[LineIds["Danish"] = 35] = "Danish";
        LineIds[LineIds["Dutch"] = 36] = "Dutch";
        LineIds[LineIds["Estonian"] = 37] = "Estonian";
        LineIds[LineIds["Finnish"] = 38] = "Finnish";
        LineIds[LineIds["Galician"] = 39] = "Galician";
        LineIds[LineIds["Georgian"] = 40] = "Georgian";
        LineIds[LineIds["Greek"] = 41] = "Greek";
        LineIds[LineIds["Hausa"] = 42] = "Hausa";
        LineIds[LineIds["Hebrew"] = 43] = "Hebrew";
        LineIds[LineIds["Hungarian"] = 44] = "Hungarian";
        LineIds[LineIds["Chinese_Mandarin"] = 45] = "Chinese_Mandarin";
        LineIds[LineIds["Icelandic"] = 46] = "Icelandic";
        LineIds[LineIds["Igbo"] = 47] = "Igbo";
        LineIds[LineIds["Indonesian"] = 48] = "Indonesian";
        LineIds[LineIds["Irish"] = 49] = "Irish";
        LineIds[LineIds["Japanese"] = 50] = "Japanese";
        LineIds[LineIds["Khmer"] = 51] = "Khmer";
        LineIds[LineIds["Kirghiz"] = 52] = "Kirghiz";
        LineIds[LineIds["Korean"] = 53] = "Korean";
        LineIds[LineIds["Latvian"] = 54] = "Latvian";
        LineIds[LineIds["Lithuanian"] = 55] = "Lithuanian";
        LineIds[LineIds["Macedonian"] = 56] = "Macedonian";
        LineIds[LineIds["Malay"] = 57] = "Malay";
        LineIds[LineIds["Malayalam"] = 58] = "Malayalam";
        LineIds[LineIds["Maltese"] = 59] = "Maltese";
        LineIds[LineIds["Maori"] = 60] = "Maori";
        LineIds[LineIds["Mongolian"] = 61] = "Mongolian";
        LineIds[LineIds["Norwegian"] = 62] = "Norwegian";
        LineIds[LineIds["Occitan"] = 63] = "Occitan";
        LineIds[LineIds["Pashto"] = 64] = "Pashto";
        LineIds[LineIds["Persian"] = 65] = "Persian";
        LineIds[LineIds["Polish"] = 66] = "Polish";
        LineIds[LineIds["Portuguese"] = 67] = "Portuguese";
        LineIds[LineIds["Portuguese_Brazilian"] = 68] = "Portuguese_Brazilian";
        LineIds[LineIds["Quechua"] = 69] = "Quechua";
        LineIds[LineIds["Romanian"] = 70] = "Romanian";
        LineIds[LineIds["Serbian"] = 71] = "Serbian";
        LineIds[LineIds["Sesotho"] = 72] = "Sesotho";
        LineIds[LineIds["Slovak"] = 73] = "Slovak";
        LineIds[LineIds["Slovenian"] = 74] = "Slovenian";
        LineIds[LineIds["Swahili"] = 75] = "Swahili";
        LineIds[LineIds["Swedish"] = 76] = "Swedish";
        LineIds[LineIds["Thai"] = 77] = "Thai";
        LineIds[LineIds["Tibetan"] = 78] = "Tibetan";
        LineIds[LineIds["Tswana"] = 79] = "Tswana";
        LineIds[LineIds["Turkish"] = 80] = "Turkish";
        LineIds[LineIds["Ukrainian"] = 81] = "Ukrainian";
        LineIds[LineIds["Urdu"] = 82] = "Urdu";
        LineIds[LineIds["Uzbek"] = 83] = "Uzbek";
        LineIds[LineIds["Vietnamese"] = 84] = "Vietnamese";
        LineIds[LineIds["Xhosa"] = 85] = "Xhosa";
        LineIds[LineIds["Yoruba"] = 86] = "Yoruba";
        LineIds[LineIds["Zulu"] = 87] = "Zulu";
        LineIds[LineIds["Bossna"] = 88] = "Bossna";
        LineIds[LineIds["Belarusian"] = 89] = "Belarusian";
        LineIds[LineIds["Gujarati"] = 90] = "Gujarati";
        LineIds[LineIds["Hindi"] = 91] = "Hindi";
        LineIds[LineIds["Kannada"] = 92] = "Kannada";
        LineIds[LineIds["Tamil"] = 93] = "Tamil";
        LineIds[LineIds["Telugu"] = 94] = "Telugu";
        LineIds[LineIds["Welsh"] = 95] = "Welsh";
        LineIds[LineIds["Farsi"] = 96] = "Farsi";
    })(LMComLib.LineIds || (LMComLib.LineIds = {}));
    var LineIds = LMComLib.LineIds;
    (function (SoundSrcId) {
        SoundSrcId[SoundSrcId["LM"] = 0] = "LM";
        SoundSrcId[SoundSrcId["Lingea"] = 1] = "Lingea";
        SoundSrcId[SoundSrcId["HowJSay"] = 2] = "HowJSay";
        SoundSrcId[SoundSrcId["EuroTalk_Male"] = 3] = "EuroTalk_Male";
        SoundSrcId[SoundSrcId["EuroTalk_Female"] = 4] = "EuroTalk_Female";
        SoundSrcId[SoundSrcId["unknown"] = 2147483646] = "unknown";
        SoundSrcId[SoundSrcId["no"] = 2147483647] = "no";
    })(LMComLib.SoundSrcId || (LMComLib.SoundSrcId = {}));
    var SoundSrcId = LMComLib.SoundSrcId;
    (function (ExerciseStatus) {
        ExerciseStatus[ExerciseStatus["Unknown"] = 0] = "Unknown";
        ExerciseStatus[ExerciseStatus["Normal"] = 1] = "Normal";
        ExerciseStatus[ExerciseStatus["Preview"] = 2] = "Preview";
        ExerciseStatus[ExerciseStatus["Evaluated"] = 3] = "Evaluated";
        ExerciseStatus[ExerciseStatus["notAttempted"] = 4] = "notAttempted";
        ExerciseStatus[ExerciseStatus["removed"] = 5] = "removed";
        ExerciseStatus[ExerciseStatus["PreviewLector"] = 6] = "PreviewLector";
    })(LMComLib.ExerciseStatus || (LMComLib.ExerciseStatus = {}));
    var ExerciseStatus = LMComLib.ExerciseStatus;
    (function (SoundPlayerType) {
        SoundPlayerType[SoundPlayerType["no"] = 0] = "no";
        SoundPlayerType[SoundPlayerType["SL"] = 1] = "SL";
        SoundPlayerType[SoundPlayerType["HTML5"] = 2] = "HTML5";
        SoundPlayerType[SoundPlayerType["Flash"] = 3] = "Flash";
        SoundPlayerType[SoundPlayerType["SlNewEE"] = 4] = "SlNewEE";
        SoundPlayerType[SoundPlayerType["Silverlight"] = 5] = "Silverlight";
    })(LMComLib.SoundPlayerType || (LMComLib.SoundPlayerType = {}));
    var SoundPlayerType = LMComLib.SoundPlayerType;
    (function (BooleanEx) {
        BooleanEx[BooleanEx["Unknown"] = 0] = "Unknown";
        BooleanEx[BooleanEx["True"] = 1] = "True";
        BooleanEx[BooleanEx["False"] = 2] = "False";
    })(LMComLib.BooleanEx || (LMComLib.BooleanEx = {}));
    var BooleanEx = LMComLib.BooleanEx;
    (function (VerifyStates) {
        VerifyStates[VerifyStates["ok"] = 0] = "ok";
        VerifyStates[VerifyStates["waiting"] = 1] = "waiting";
        VerifyStates[VerifyStates["prepared"] = 2] = "prepared";
    })(LMComLib.VerifyStates || (LMComLib.VerifyStates = {}));
    var VerifyStates = LMComLib.VerifyStates;
    LMComLib.CmdEMail_Type = 'LMComLib.CmdEMail';
    function CmdEMail_Create(From, To, Cc, Subject, Html, isForgotPassword, isAtt, attFile, attContent, attContentType, emailId) {
        return { From: From, To: To, Cc: Cc, Subject: Subject, Html: Html, isForgotPassword: isForgotPassword, isAtt: isAtt, attFile: attFile, attContent: attContent, attContentType: attContentType, emailId: emailId };
    }
    LMComLib.CmdEMail_Create = CmdEMail_Create;
    LMComLib.LMCookieJS_Type = 'LMComLib.LMCookieJS';
    function LMCookieJS_Create(id, created, EMail, Login, LoginEMail, Type, TypeId, FirstName, LastName, OtherData, Roles, VerifyStatus, Company) {
        return { id: id, created: created, EMail: EMail, Login: Login, LoginEMail: LoginEMail, Type: Type, TypeId: TypeId, FirstName: FirstName, LastName: LastName, OtherData: OtherData, Roles: Roles, VerifyStatus: VerifyStatus, Company: Company };
    }
    LMComLib.LMCookieJS_Create = LMCookieJS_Create;
    LMComLib.LangToLine = [0, 0, 34, 1, 2, 73, 5, 4, 3, 7, 84, 3, 38, 76, 35, 62, 20, 21, 22, 23, 24, 25, 26, 27, 89, 68, 28, 29, 0, 30, 31, 32, 33, 0, 36, 0, 37, 39, 40, 41, 90, 42, 43, 91, 44, 45, 46, 47, 48, 49, 50, 92, 51, 52, 53, 0, 0, 54, 55, 56, 57, 58, 59, 60, 0, 61, 0, 63, 64, 96, 66, 67, 0, 69, 70, 71, 72, 0, 74, 75, 93, 94, 77, 78, 79, 80, 81, 82, 83, 95, 85, 86, 87, 88];
    LMComLib.LineToLang = [0, 3, 4, 8, 7, 6, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 29, 30, 31, 32, 2, 14, 34, 36, 12, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 65, 15, 67, 68, 69, 70, 71, 25, 73, 74, 75, 76, 5, 78, 79, 13, 82, 83, 84, 85, 86, 87, 88, 10, 90, 91, 92, 93, 0, 0, 43, 0, 0, 0, 0, 69];
    LMComLib.bigLocalizations = [3, 4, 8, 2, 5, 9, 6, 7, 70, 10, 85, 58, 45, 27, 93, 18];
    LMComLib.LangToEADir = { '2': 'comcz', '3': 'comen', '4': 'comde', '5': 'comsk', '6': 'comfr', '7': 'comit', '8': 'comes', '9': 'comru', '10': 'comvi', '11': 'comes', '27': 'combg', '29': 'comth', '45': 'comcn', '54': 'comko', '58': 'comlt', '70': 'compl', '82': 'comhk', '85': 'comtr', '93': 'combs' };
})(LMComLib || (LMComLib = {}));
var EA;
(function (EA) {
    //export function DataPath(): string {
    //  debugger;
    //  return cfg.EADataPath;
    //}
    function startAjax() {
        Sys.Application.dispose();
        Sys.Application.beginCreateComponents();
    }
    EA.startAjax = startAjax;
    function endAjax(completed) {
        setTimeout(function () {
            Sys.Application.endCreateComponents();
            Sys.Application._doInitialize();
            //finishImgSrc();
            if (completed)
                completed();
        }, 1);
    }
    EA.endAjax = endAjax;
    var oldToNewScoreProvider = (function () {
        function oldToNewScoreProvider(old) {
            this.old = old;
        }
        oldToNewScoreProvider.prototype.provideData = function (exData) {
            this.old.provideData(exData);
        };
        oldToNewScoreProvider.prototype.acceptData = function (done, exData) {
            this.old.acceptData(done ? LMComLib.ExerciseStatus.Evaluated : LMComLib.ExerciseStatus.Normal, exData);
        };
        oldToNewScoreProvider.prototype.resetData = function (exData) {
            //var pg: CourseModel.PageUser = <any>{ Results: exData };
            this.old.resetData(exData);
        };
        oldToNewScoreProvider.prototype.getScore = function () {
            var nums = this.old.get_score();
            return nums == null || nums.length != 2 ? null : { s: nums[0], ms: nums[1], flag: 0 };
            //var nums = this.old.get_score(); return nums == null || nums.length != 2 ? null : { s: nums[0] == nums[1] ? 1 : 0, ms: 1, flag: 0 };
        };
        return oldToNewScoreProvider;
    })();
    EA.oldToNewScoreProvider = oldToNewScoreProvider;
})(EA || (EA = {}));
//var xapPath = 'eaimgmp3/'; //cesta k XAP a SWF souborum, relativne k schools adresari.
//var xapPath = ''; //cesta k XAP a SWF souborum, relativne k schools adresari.
//var actLms = 3; //LMSType.LMCom
//function DictConnector_listenTalk(url, word) {
//  return serviceRoot(actLms.toString(), true) + '/site/' + Trados.actLangCode + '/ListeningAndPronunc.aspx#/AppPronunc/FactSoundView.xaml?IsFactOnly=true&FactUrl=' + encodeURIComponent(url) + '&FactTitle=' + encodeURIComponent(word);
//};
//function DictConnector_listenTalkSentence(pars) {
//  return serviceRoot(actLms.toString(), true) + '/site/' + Trados.actLangCode + '/ListeningAndPronunc.aspx#/AppPronunc/FactSoundView.xaml?IsFactOnly=true&FactUrl=' + encodeURIComponent(listenTalkBase(actLms.toString()) + '/' + pars.url) + '&sentBeg=' + pars.beg + '&sentEnd=' + pars.end + '&FactTitle=' + encodeURIComponent(pars.title);
//};
/// <reference path="../jslib/js/GenLMComLib.ts" />
var Login;
(function (Login) {
    (function (CmdLmLoginError) {
        CmdLmLoginError[CmdLmLoginError["no"] = 0] = "no";
        CmdLmLoginError[CmdLmLoginError["userExist"] = 1] = "userExist";
        CmdLmLoginError[CmdLmLoginError["cannotFindUser"] = 2] = "cannotFindUser";
        CmdLmLoginError[CmdLmLoginError["passwordNotExists"] = 3] = "passwordNotExists";
    })(Login.CmdLmLoginError || (Login.CmdLmLoginError = {}));
    var CmdLmLoginError = Login.CmdLmLoginError;
    (function (Role) {
        Role[Role["Admin"] = 1] = "Admin";
        Role[Role["Comps"] = 2] = "Comps";
        Role[Role["All"] = 255] = "All";
    })(Login.Role || (Login.Role = {}));
    var Role = Login.Role;
    (function (EnterLicenceResult) {
        EnterLicenceResult[EnterLicenceResult["ok"] = 0] = "ok";
        EnterLicenceResult[EnterLicenceResult["added"] = 1] = "added";
        EnterLicenceResult[EnterLicenceResult["used"] = 2] = "used";
        EnterLicenceResult[EnterLicenceResult["wrongId"] = 3] = "wrongId";
        EnterLicenceResult[EnterLicenceResult["wrongCounter"] = 4] = "wrongCounter";
    })(Login.EnterLicenceResult || (Login.EnterLicenceResult = {}));
    var EnterLicenceResult = Login.EnterLicenceResult;
    (function (CmdReportType) {
        CmdReportType[CmdReportType["evaluators"] = 0] = "evaluators";
        CmdReportType[CmdReportType["test"] = 1] = "test";
    })(Login.CmdReportType || (Login.CmdReportType = {}));
    var CmdReportType = Login.CmdReportType;
    Login.CmdAdjustUser_Type = 'Login.CmdAdjustUser';
    function CmdAdjustUser_Create(provider, providerId, email, firstName, lastName) {
        return { provider: provider, providerId: providerId, email: email, firstName: firstName, lastName: lastName };
    }
    Login.CmdAdjustUser_Create = CmdAdjustUser_Create;
    Login.CmdAdjustScormUser_Type = 'Login.CmdAdjustScormUser';
    function CmdAdjustScormUser_Create(companyHost, login, firstName, lastName, isNotAttempted, productId) {
        return { companyHost: companyHost, login: login, firstName: firstName, lastName: lastName, isNotAttempted: isNotAttempted, productId: productId };
    }
    Login.CmdAdjustScormUser_Create = CmdAdjustScormUser_Create;
    Login.CmdConfirmRegistration_Type = 'Login.CmdConfirmRegistration';
    function CmdConfirmRegistration_Create(lmcomId, sessionId) {
        return { lmcomId: lmcomId, sessionId: sessionId };
    }
    Login.CmdConfirmRegistration_Create = CmdConfirmRegistration_Create;
    Login.CmdChangePassword_Type = 'Login.CmdChangePassword';
    function CmdChangePassword_Create(oldPassword, newPassword, lmcomId, sessionId) {
        return { oldPassword: oldPassword, newPassword: newPassword, lmcomId: lmcomId, sessionId: sessionId };
    }
    Login.CmdChangePassword_Create = CmdChangePassword_Create;
    Login.CmdLmLogin_Type = 'Login.CmdLmLogin';
    function CmdLmLogin_Create(login, email, password, otherData, ticket) {
        return { login: login, email: email, password: password, otherData: otherData, ticket: ticket };
    }
    Login.CmdLmLogin_Create = CmdLmLogin_Create;
    Login.CmdMyInit_Type = 'Login.CmdMyInit';
    function CmdMyInit_Create(lmcomId, sessionId) {
        return { lmcomId: lmcomId, sessionId: sessionId };
    }
    Login.CmdMyInit_Create = CmdMyInit_Create;
    Login.CmdSaveDepartment_Type = 'Login.CmdSaveDepartment';
    function CmdSaveDepartment_Create(userId, companyId, departmentId) {
        return { userId: userId, companyId: companyId, departmentId: departmentId };
    }
    Login.CmdSaveDepartment_Create = CmdSaveDepartment_Create;
    Login.CmdProfile_Type = 'Login.CmdProfile';
    function CmdProfile_Create(Cookie, lmcomId, sessionId) {
        return { Cookie: Cookie, lmcomId: lmcomId, sessionId: sessionId };
    }
    Login.CmdProfile_Create = CmdProfile_Create;
    Login.CmdRegister_Type = 'Login.CmdRegister';
    function CmdRegister_Create(password, subSite, Cookie, lmcomId, sessionId) {
        return { password: password, subSite: subSite, Cookie: Cookie, lmcomId: lmcomId, sessionId: sessionId };
    }
    Login.CmdRegister_Create = CmdRegister_Create;
    Login.CmdEnterLicKey_Type = 'Login.CmdEnterLicKey';
    function CmdEnterLicKey_Create(CompLicId, Counter, lmcomId, sessionId) {
        return { CompLicId: CompLicId, Counter: Counter, lmcomId: lmcomId, sessionId: sessionId };
    }
    Login.CmdEnterLicKey_Create = CmdEnterLicKey_Create;
    Login.CmdHumanEvalManagerLangs_Type = 'Login.CmdHumanEvalManagerLangs';
    function CmdHumanEvalManagerLangs_Create(lmcomId, companyId) {
        return { lmcomId: lmcomId, companyId: companyId };
    }
    Login.CmdHumanEvalManagerLangs_Create = CmdHumanEvalManagerLangs_Create;
    Login.CmdHumanEvalManagerEvsGet_Type = 'Login.CmdHumanEvalManagerEvsGet';
    function CmdHumanEvalManagerEvsGet_Create(lmcomId, companyId) {
        return { lmcomId: lmcomId, companyId: companyId };
    }
    Login.CmdHumanEvalManagerEvsGet_Create = CmdHumanEvalManagerEvsGet_Create;
    Login.CmdHumanEvalManagerEvsSave_Type = 'Login.CmdHumanEvalManagerEvsSave';
    function CmdHumanEvalManagerEvsSave_Create(companyUserId, companyId, email, evalInfos) {
        return { companyUserId: companyUserId, companyId: companyId, email: email, evalInfos: evalInfos };
    }
    Login.CmdHumanEvalManagerEvsSave_Create = CmdHumanEvalManagerEvsSave_Create;
    Login.CmdHumanEvalManagerGet_Type = 'Login.CmdHumanEvalManagerGet';
    function CmdHumanEvalManagerGet_Create(lmcomId, courseLang, companyId) {
        return { lmcomId: lmcomId, courseLang: courseLang, companyId: companyId };
    }
    Login.CmdHumanEvalManagerGet_Create = CmdHumanEvalManagerGet_Create;
    Login.CmdHumanEvalManagerSet_Type = 'Login.CmdHumanEvalManagerSet';
    function CmdHumanEvalManagerSet_Create(evaluators) {
        return { evaluators: evaluators };
    }
    Login.CmdHumanEvalManagerSet_Create = CmdHumanEvalManagerSet_Create;
    Login.CmdHumanEvalGet_Type = 'Login.CmdHumanEvalGet';
    function CmdHumanEvalGet_Create(lmcomId, companyId) {
        return { lmcomId: lmcomId, companyId: companyId };
    }
    Login.CmdHumanEvalGet_Create = CmdHumanEvalGet_Create;
    Login.CmdHumanEvalTest_Type = 'Login.CmdHumanEvalTest';
    function CmdHumanEvalTest_Create(companyUserId, courseUserId) {
        return { companyUserId: companyUserId, courseUserId: courseUserId };
    }
    Login.CmdHumanEvalTest_Create = CmdHumanEvalTest_Create;
    Login.CmdReport_Type = 'Login.CmdReport';
    function CmdReport_Create(self, companyId, type) {
        return { self: self, companyId: companyId, type: type };
    }
    Login.CmdReport_Create = CmdReport_Create;
    Login.CmdPaymentReport_Type = 'Login.CmdPaymentReport';
    function CmdPaymentReport_Create(cfg, self, companyId, type) {
        return { cfg: cfg, self: self, companyId: companyId, type: type };
    }
    Login.CmdPaymentReport_Create = CmdPaymentReport_Create;
})(Login || (Login = {}));
/// <reference path="../login/GenLogin.ts" />
var Admin;
(function (Admin) {
    (function (DictEntryCmdType) {
        DictEntryCmdType[DictEntryCmdType["loadDict"] = 0] = "loadDict";
        DictEntryCmdType[DictEntryCmdType["saveEntry"] = 1] = "saveEntry";
        DictEntryCmdType[DictEntryCmdType["statistics"] = 2] = "statistics";
    })(Admin.DictEntryCmdType || (Admin.DictEntryCmdType = {}));
    var DictEntryCmdType = Admin.DictEntryCmdType;
    (function (CmdXrefDataOpers) {
        CmdXrefDataOpers[CmdXrefDataOpers["nodeTypes"] = 0] = "nodeTypes";
        CmdXrefDataOpers[CmdXrefDataOpers["typeProps"] = 1] = "typeProps";
        CmdXrefDataOpers[CmdXrefDataOpers["typePropValues"] = 2] = "typePropValues";
        CmdXrefDataOpers[CmdXrefDataOpers["typeLinks"] = 3] = "typeLinks";
        CmdXrefDataOpers[CmdXrefDataOpers["typePropLinks"] = 4] = "typePropLinks";
        CmdXrefDataOpers[CmdXrefDataOpers["typePropValueLinks"] = 5] = "typePropValueLinks";
        CmdXrefDataOpers[CmdXrefDataOpers["nodeProps"] = 6] = "nodeProps";
        CmdXrefDataOpers[CmdXrefDataOpers["propValues"] = 7] = "propValues";
        CmdXrefDataOpers[CmdXrefDataOpers["propLinks"] = 8] = "propLinks";
        CmdXrefDataOpers[CmdXrefDataOpers["propValueLinks"] = 9] = "propValueLinks";
        CmdXrefDataOpers[CmdXrefDataOpers["refreshXref"] = 10] = "refreshXref";
        CmdXrefDataOpers[CmdXrefDataOpers["checkAll"] = 11] = "checkAll";
    })(Admin.CmdXrefDataOpers || (Admin.CmdXrefDataOpers = {}));
    var CmdXrefDataOpers = Admin.CmdXrefDataOpers;
    Admin.CmdAlocKeys_Type = 'Admin.CmdAlocKeys';
    function CmdAlocKeys_Create(LicenceId, Num) {
        return { LicenceId: LicenceId, Num: Num };
    }
    Admin.CmdAlocKeys_Create = CmdAlocKeys_Create;
    Admin.CmdGetProducts_Type = 'Admin.CmdGetProducts';
    function CmdGetProducts_Create(CompanyId, incUsedKeys) {
        return { CompanyId: CompanyId, incUsedKeys: incUsedKeys };
    }
    Admin.CmdGetProducts_Create = CmdGetProducts_Create;
    Admin.CmdGetDepartment_Type = 'Admin.CmdGetDepartment';
    function CmdGetDepartment_Create(CompanyId) {
        return { CompanyId: CompanyId };
    }
    Admin.CmdGetDepartment_Create = CmdGetDepartment_Create;
    Admin.CmdSetDepartment_Type = 'Admin.CmdSetDepartment';
    function CmdSetDepartment_Create(CompanyId, Departments, IntervalsConfig) {
        return { CompanyId: CompanyId, Departments: Departments, IntervalsConfig: IntervalsConfig };
    }
    Admin.CmdSetDepartment_Create = CmdSetDepartment_Create;
    Admin.CmdGetUsers_Type = 'Admin.CmdGetUsers';
    function CmdGetUsers_Create(IncUsers, IncComps, CompIds) {
        return { IncUsers: IncUsers, IncComps: IncComps, CompIds: CompIds };
    }
    Admin.CmdGetUsers_Create = CmdGetUsers_Create;
    Admin.CmdGetUsersResult_Type = 'Admin.CmdGetUsersResult';
    function CmdGetUsersResult_Create(Users, Comps, CompUsers) {
        return { Users: Users, Comps: Comps, CompUsers: CompUsers };
    }
    Admin.CmdGetUsersResult_Create = CmdGetUsersResult_Create;
    Admin.CmdSetProducts_Type = 'Admin.CmdSetProducts';
    function CmdSetProducts_Create(CompanyId, Products) {
        return { CompanyId: CompanyId, Products: Products };
    }
    Admin.CmdSetProducts_Create = CmdSetProducts_Create;
    Admin.CmdSetUsers_Type = 'Admin.CmdSetUsers';
    function CmdSetUsers_Create(Users, OldComps, Comps, CompUsers) {
        return { Users: Users, OldComps: OldComps, Comps: Comps, CompUsers: CompUsers };
    }
    Admin.CmdSetUsers_Create = CmdSetUsers_Create;
    Admin.CmdDsgnReadFile_Type = 'Admin.CmdDsgnReadFile';
    function CmdDsgnReadFile_Create(FileName) {
        return { FileName: FileName };
    }
    Admin.CmdDsgnReadFile_Create = CmdDsgnReadFile_Create;
    Admin.CmdDsgnReadFiles_Type = 'Admin.CmdDsgnReadFiles';
    function CmdDsgnReadFiles_Create(FileNames) {
        return { FileNames: FileNames };
    }
    Admin.CmdDsgnReadFiles_Create = CmdDsgnReadFiles_Create;
    Admin.CmdDsgnWriteDictWords_Type = 'Admin.CmdDsgnWriteDictWords';
    function CmdDsgnWriteDictWords_Create(FileName, Data) {
        return { FileName: FileName, Data: Data };
    }
    Admin.CmdDsgnWriteDictWords_Create = CmdDsgnWriteDictWords_Create;
    Admin.CmdGetPublProjects_Type = 'Admin.CmdGetPublProjects';
    function CmdGetPublProjects_Create(PublisherId) {
        return { PublisherId: PublisherId };
    }
    Admin.CmdGetPublProjects_Create = CmdGetPublProjects_Create;
    Admin.CmdCreatePublProject_Type = 'Admin.CmdCreatePublProject';
    function CmdCreatePublProject_Create(Line, PublisherId, ProjectId, User, Password, Title, TestItems) {
        return { Line: Line, PublisherId: PublisherId, ProjectId: ProjectId, User: User, Password: Password, Title: Title, TestItems: TestItems };
    }
    Admin.CmdCreatePublProject_Create = CmdCreatePublProject_Create;
    Admin.CmdPublChangePassword_Type = 'Admin.CmdPublChangePassword';
    function CmdPublChangePassword_Create(PublisherId, ProjectId, User, Title, Password) {
        return { PublisherId: PublisherId, ProjectId: ProjectId, User: User, Title: Title, Password: Password };
    }
    Admin.CmdPublChangePassword_Create = CmdPublChangePassword_Create;
    Admin.CmdPublBuild_Type = 'Admin.CmdPublBuild';
    function CmdPublBuild_Create(PublisherId, ProjectId) {
        return { PublisherId: PublisherId, ProjectId: ProjectId };
    }
    Admin.CmdPublBuild_Create = CmdPublBuild_Create;
    Admin.DictEntryCmd_Type = 'Admin.DictEntryCmd';
    function DictEntryCmd_Create(type, crsLang, natLang, entryId, soundMaster, html, okCrs, okCrsMaybe, todoCount, allCount) {
        return { type: type, crsLang: crsLang, natLang: natLang, entryId: entryId, soundMaster: soundMaster, html: html, okCrs: okCrs, okCrsMaybe: okCrsMaybe, todoCount: todoCount, allCount: allCount };
    }
    Admin.DictEntryCmd_Create = DictEntryCmd_Create;
    Admin.CmdXrefData_Type = 'Admin.CmdXrefData';
    function CmdXrefData_Create(oper, type, prop, value, nodeId, maxLinks, urlContext) {
        return { oper: oper, type: type, prop: prop, value: value, nodeId: nodeId, maxLinks: maxLinks, urlContext: urlContext };
    }
    Admin.CmdXrefData_Create = CmdXrefData_Create;
})(Admin || (Admin = {}));
$.whenall = function (arr) { return $.when.apply($, arr); };
$.views.settings({ onError: function () { debugger; }, _dbgMode: false });
//$.whenAll = firstParam => {
//  var //args = arguments,
//    sliceDeferred = [].slice,
//    i = 0,
//    length = args.length,
//    count = length,
//    rejected,
//    deferred = length <= 1 && firstParam && jQuery.isFunction(firstParam.promise)
//    ? firstParam
//    : jQuery.Deferred();
//  function resolveFunc(i, reject) {
//    return function (value) {
//      rejected = true;
//      args[i] = arguments.length > 1 ? sliceDeferred.call(arguments, 0) : value;
//      if (!(--count)) {
//        // Strange bug in FF4:
//        // Values changed onto the arguments object sometimes end up as undefined values
//        // outside the $.when method. Cloning the object into a fresh array solves the issue
//        var fn = rejected ? deferred.rejectWith : deferred.resolveWith;
//        fn.call(deferred, deferred, sliceDeferred.call(args, 0));
//      }
//    };
//  }
//  if (length > 1) {
//    for (; i < length; i++) {
//      if (args[i] && jQuery.isFunction(args[i].promise)) {
//        args[i].promise().then(resolveFunc(i, false), resolveFunc(i, true));
//      } else {
//        --count;
//      }
//    }
//    if (!count) {
//      deferred.resolveWith(deferred, args);
//    }
//  } else if (deferred !== firstParam) {
//    deferred.resolveWith(deferred, length ? [firstParam] : []);
//  }
//  return deferred.promise();
//};
var colors;
(function (colors) {
    colors.Default = "default";
    colors.Disabled = "disabled";
    colors.Primary = "primary";
    colors.Success = "success";
    colors.Info = "info";
    colors.Warning = "warning";
    colors.Danger = "danger";
})(colors || (colors = {}));
var Cook;
(function (Cook) {
    var allSubDomains = ['www'];
    //var c_Lang = "lang"; //cookie ve formatu en-gb
    //var c_Logout = "logout"; //cookie pro logout
    //var c_LMTicket = "LMTicket";
    //export enum Ids {
    //  lang,
    //  //logout, 
    //  LMTicket,
    //  schools_info, //pro schools aplikaci, objekt s napr return url
    //  lms_licence, //pro 
    //  //includeData
    //}
    function read(id, def) {
        if (def === void 0) { def = ""; }
        return gCookie.getCookie(LowUtils.EnumToString(LMComLib.CookieIds, id), def);
    }
    Cook.read = read;
    function write(id, value, persist) {
        if (persist === void 0) { persist = false; }
        var name = LowUtils.EnumToString(LMComLib.CookieIds, id);
        //_.each(allSubDomains, s => gCookie.setCookie(name, '', -1, undefined, s + '.' + LowUtils.cookieDomain()));
        gCookie.setCookie(name, value, persist ? 100000000 : undefined, "/", LowUtils.cookieDomain());
    }
    Cook.write = write;
    function remove(id) {
        gCookie.remove(LowUtils.EnumToString(LMComLib.CookieIds, id), "/", LowUtils.cookieDomain());
    }
    Cook.remove = remove;
})(Cook || (Cook = {}));
var LMStatus;
(function (LMStatus) {
    LMStatus.sessionId = new Date().getTime();
    function createCmd(finish) {
        var res = { lmcomId: LMStatus.Cookie ? LMStatus.Cookie.id : 0, sessionId: LMStatus.sessionId };
        finish(res);
        return res;
    }
    LMStatus.createCmd = createCmd;
    function ToString(ck) {
        return Utils.encrypt(ck);
    }
    LMStatus.ToString = ToString;
    function FromString(s) {
        return Utils.decrypt(s);
    }
    function getCookie() {
        if (!isLogged()) {
            try {
                var cookStr = Cook.read(LMComLib.CookieIds.LMJSTicket);
                if (cookStr != "") {
                    LMStatus.Cookie = FromString(cookStr);
                    if (LMStatus.Cookie.id <= 0)
                        LMStatus.Cookie = null;
                }
            }
            catch (msg) {
                return null;
            }
        }
        return LMStatus.Cookie;
    }
    LMStatus.getCookie = getCookie;
    function setCookie(cook, persistent) {
        if (persistent === void 0) { persistent = false; }
        if (cook == null)
            Cook.remove(LMComLib.CookieIds.LMJSTicket);
        else
            Cook.write(LMComLib.CookieIds.LMJSTicket, ToString(cook), persistent);
        //Cookie = cook;
    }
    LMStatus.setCookie = setCookie;
    function logged(cook, persistent) {
        if (persistent === void 0) { persistent = false; }
        setCookie(cook, persistent);
        adjustLoggin(LMStatus.gotoReturnUrl);
    }
    LMStatus.logged = logged;
    function loginUrl() {
        return "http://" + location.host + "/lmcom/Services/LMLive/LMLive.aspx?returnurl=" + encodeURIComponent(location.href);
    }
    LMStatus.loginUrl = loginUrl;
    function setReturnUrlAndGoto(newHash) {
        if (newHash === void 0) { newHash = null; }
        setReturnUrl();
        if (newHash == null)
            return;
        Pager.navigateToHash(newHash);
        //if (newHash.charAt(0) != "#") newHash = "#" + newHash;
        //location.hash = newHash;
    }
    LMStatus.setReturnUrlAndGoto = setReturnUrlAndGoto;
    function setReturnUrl(newHash) {
        if (newHash === void 0) { newHash = null; }
        Cook.write(LMComLib.CookieIds.returnUrl, newHash ? newHash : location.hash);
    }
    LMStatus.setReturnUrl = setReturnUrl;
    function clearReturnUrl() {
        Cook.remove(LMComLib.CookieIds.returnUrl);
    }
    LMStatus.clearReturnUrl = clearReturnUrl;
    function isReturnUrl() {
        return !_.isEmpty(getReturnUrl());
    }
    LMStatus.isReturnUrl = isReturnUrl;
    function getReturnUrl() {
        var url = Cook.read(LMComLib.CookieIds.returnUrl);
        if (_.isEmpty(url) || url == '#')
            return null;
        if (url.charAt(0) == "#")
            url = url.substr(1);
        return oldPrefix + url;
    }
    LMStatus.getReturnUrl = getReturnUrl;
    function gotoReturnUrl() {
        var url = getReturnUrl();
        if (_.isEmpty(url))
            Pager.gotoHomeUrl();
        else
            Pager.navigateToHash(url);
    }
    LMStatus.gotoReturnUrl = gotoReturnUrl;
    LMStatus.Cookie = null;
    function scormUserId() {
        return LMStatus.Cookie.TypeId ? LMStatus.Cookie.TypeId : LMStatus.Cookie.id.toString();
    }
    LMStatus.scormUserId = scormUserId;
    function isLogged() { return !_.isEmpty(LMStatus.Cookie) && LMStatus.Cookie.id && LMStatus.Cookie.id > 0; }
    LMStatus.isLogged = isLogged;
    function loggedBodyClass() {
        var logged = isLogged();
        if (!logged) {
            $('body').removeClass("logged");
            setCookie(null);
        }
        else {
            $('body').addClass("logged");
        }
    }
    LMStatus.loggedBodyClass = loggedBodyClass;
    //zajisteni zalogovani
    function adjustLoggin(completed) {
        var cookEmpty = !isLogged(); //Cookie == null;
        if (cookEmpty) {
            var ticket = LowUtils.getQueryParams('ticket');
            var a1y = LowUtils.getQueryParams('a1y');
            if (!_.isEmpty(ticket)) {
                Login.login(true, null, null, null, ticket, function (cookie) {
                    setCookie(cookie);
                    window.location.href = window.location.href.replace('ticket=' + ticket, '');
                }, function (errId, errMsg) { debugger; throw 'Utils.adjustCookie: PZ Log Error'; });
                return;
            }
            else if (a1y) {
                var em, psw;
                switch (a1y) {
                    case 'b2c':
                        em = "pzika@langmaster.cz";
                        psw = "p";
                        break; //sance se nasilne nalogovat jako PZ
                    case 'ws7':
                        em = "zzikova@langmaster.cz";
                        psw = "zz";
                        break; //zz
                    case '73q':
                        em = "rjeliga@langmaster.cz";
                        psw = "rj";
                        break; //rj
                    case 'pw6':
                        em = "pjanecek@langmaster.cz";
                        psw = "pj";
                        break; //pj
                    case 'g3n':
                        em = "zikovakaca@seznam.cz";
                        psw = "kz";
                        break; //kz
                    case 'ws7':
                        em = "zzikova@langmaster.cz";
                        psw = "zz";
                        break; //zz
                    default: return;
                }
                Login.login(true, em, null, psw, null, function (cookie) {
                    setCookie(cookie);
                    window.location.href = window.location.href.replace(/a1y=\w{3}/, '');
                }, function (errId, errMsg) { debugger; throw 'Utils.adjustCookie: PZ Log Error'; });
                return;
            }
        }
        getCookie();
        loggedBodyClass();
        if (cookEmpty)
            LMStatus.onLogged(completed);
        else
            completed();
    }
    LMStatus.adjustLoggin = adjustLoggin;
    LMStatus.onLogged = null;
    if ($.views)
        $.views.helpers({
            Cookie: getCookie,
            userName: friendlyName,
            isLMComCookie: isLMComCookie,
            fncExists: function (name) { return ($.views.helpers)[name]; },
            'debugger': function (data) { debugger; },
            icon_chevron_right: function () { return Trados.isRtl ? 'fa-chevron-left' : 'fa-chevron-right'; },
        });
    function LogoutLow() {
        //binec, setCookie nastavi pouze browser cookie a ponecha LMStatus.Cookie
        LMStatus.setCookie(null);
        LMStatus.Cookie = null;
        Pager.gotoHomeUrl();
    }
    LMStatus.LogoutLow = LogoutLow;
    function Logout(obj, ev) {
        if (!isLogged())
            return;
        try {
            if (!isLMComCookie()) {
                var a = ev.currentTarget;
                if (a.tagName.toLowerCase() != CourseModel.ta)
                    return false; //throw "OAuth.logoutEx";
                a.href = OAuth.logoutUrl(LMStatus.Cookie.Type);
                return true;
            }
            else {
                return false;
            }
        }
        finally {
            LogoutLow();
        }
    }
    LMStatus.Logout = Logout;
    function friendlyName() {
        if (!isLogged())
            return "";
        return LMStatus.Cookie.Type == LMComLib.OtherType.LANGMasterNoEMail ? LMStatus.Cookie.Login : LMStatus.Cookie.EMail;
    }
    LMStatus.friendlyName = friendlyName;
    function isLMComCookie() {
        return !LMStatus.Cookie.Type || LMStatus.Cookie.Type == 0 || LMStatus.Cookie.Type == LMComLib.OtherType.LANGMasterNoEMail || LMStatus.Cookie.Type == LMComLib.OtherType.LANGMaster;
    }
    LMStatus.isLMComCookie = isLMComCookie;
})(LMStatus || (LMStatus = {}));
var JsRenderHelpers;
(function (JsRenderHelpers) {
    if ($.views)
        $.views.helpers({
            nextToLast: function () {
                return this.index === this.parent.data.length - 2;
            },
            notLast: function () {
                return this.index !== this.parent.data.length - 1;
            },
            tuppleRightEnd: function () {
                return this.index === this.parent.data.length - 1 || this.index % 2 === 1;
            },
            tuppleDelimiter: function () {
                return this.index % 2 === 1 && this.index !== this.parent.data.length - 1;
            },
            tuppleLeft: function () {
                return this.index % 2 === 0;
            },
            tuppleRight: function () {
                return this.index % 2 === 1;
            },
            boolConverter: function (par, trueVal, falseVal) {
                if (typeof par == "function")
                    par = par();
                return Utils.Empty(par) ? (falseVal ? falseVal : '') : (trueVal ? trueVal : '');
            },
            numConverter: function (par) {
                var pars = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    pars[_i - 1] = arguments[_i];
                }
                if (typeof par == "function")
                    par = par();
                var idx = Utils.Empty(par) ? 0 : par;
                if (idx >= pars.length)
                    throw "numConverter";
                return pars[idx];
            }
        });
})(JsRenderHelpers || (JsRenderHelpers = {}));
var CSLocalize = null;
var Trados;
(function (Trados) {
    //***************** Lokalizace SW
    var rxLocComment = new RegExp("\\(\\*.*?\\*\\)", "g");
    Trados.actLang = 0;
    Trados.actLangStr = "en_gb";
    Trados.actLangCode = "en-gb"; //napr. sp-sp
    Trados.actLangNetCode = "en-gb"; //napr. es-es
    Trados.isRtl = false;
    var rtlLangs = [LMComLib.Langs.ar_sa];
    //export function isRtl():boolean { return _.any(rtlLangs, l => l == actLang);}
    //export function initLang(lng: LMComLib.Langs): void {
    //  forceLang = lng == LMComLib.Langs.no ? null : LowUtils.EnumToString(LMComLib.Langs, lng).replace("_", "-");
    //}
    //var forceLang: string;
    var alertCalled = false;
    function Localize(id, def) {
        if (typeof tradosData == "undefined") {
            if (!alertCalled) {
                debugger;
                alert("Trados.Localize: missing tradosData");
            }
            alertCalled = true;
            return locNormalize(def);
        }
        if (id == null)
            return locNormalize(def);
        var res = tradosData[id];
        if (typeof (res) == 'undefined' || res == "###TRANS TODO###")
            return locNormalize(def);
        return res;
    }
    ;
    function locNormalize(s) { return s.replace(rxLocComment, ''); }
    Trados.locNormalize = locNormalize;
    if ($.views)
        $.views.helpers({
            CSLocalize: function (s, d) {
                try {
                    return CSLocalize(s, d);
                }
                catch (exp) {
                    throw exp;
                }
            },
            isRtl: function () { return Trados.isRtl; },
            cookie: function (name) { return gCookie.getCookie(name); },
        });
    CSLocalize = Localize;
    //Jsou dva pripady: 
    // - jazyk je definovan tim, ze je primo v HTML strance spravny.JS soubor.
    // - nebo je jazyk definovan externe a spravny .JS soubor se naladuje dynamicky
    function adjustLoc(completed) {
        /************ zjisteni jazyka *****************/
        var loadScript;
        var lng; //var fromCookie = "";
        if (typeof tradosData != "undefined") {
            lng = tradosData["forceLang"]; //jazyk je urcen timto .JS souborem
            Logger.trace("Trados.adjustLoc", "JS included, lng=" + lng);
            loadScript = false;
        }
        else {
            Logger.trace("Trados.adjustLoc", "JS not included");
            lng = null; //forceLang;
            loadScript = true;
        }
        if (_.isEmpty(lng)) {
            var hash = LowUtils.parseQuery(location.hash);
            if (hash != null && hash["lang"]) {
                lng = hash["lang"];
                location.hash = "";
            }
        }
        if (_.isEmpty(lng)) {
            var search = LowUtils.parseQuery(location.search);
            if (search != null && search["lang"]) {
                lng = search["lang"];
            }
        }
        //Jazyk z cookie:
        //if (loadScript && Utils.Empty(lng)) fromCookie = lng = Cook.read(LMComLib.CookieIds.lang);
        if (_.isEmpty(lng))
            lng = lng = Cook.read(LMComLib.CookieIds.lang);
        //jazyk neznamy => default
        if (_.isEmpty(lng) || lng == "no")
            lng = "en-gb"; //jazyk neznamy => default
        lng = lng.replace('es-es', 'sp-sp');
        Logger.trace("Trados.adjustLoc", "lng=" + lng);
        /************ pouziti zjisteneho jazyka *****************/
        //save to cookie:
        lng = lng.toLowerCase(); //fromCookie = fromCookie.toLowerCase();
        //if (loadScript && fromCookie != lng) Cook.write(LMComLib.CookieIds.lang, lng);
        //if (fromCookie != lng)
        Cook.write(LMComLib.CookieIds.lang, lng);
        //use lang
        var newLng = LowUtils.EnumParse(LMComLib.Langs, lng.replace('-', '_'));
        var isOK = Trados.actLang == newLng;
        Trados.actLang = newLng;
        var doCompleted = function () {
            Trados.actLangStr = LowUtils.EnumToString(LMComLib.Langs, Trados.actLang);
            Trados.actLangCode = Trados.actLangStr.replace("_", "-");
            Trados.actLangNetCode = Trados.actLangCode.replace('sp-sp', 'es-es');
            _.each(Globalize.cultures, function (c) { Globalize.cultures[c.name.toLowerCase()] = c; }); //culture lowercase
            Globalize.culture(Trados.actLangNetCode);
            Trados.isRtl = _.indexOf(rtlLangs, Trados.actLang) >= 0;
            completed();
        };
        if (isOK || Trados.actLang == LMComLib.Langs.en_gb) {
            tradosData = {};
            doCompleted();
            return;
        } //anglictina se neladuje
        if (!loadScript) {
            doCompleted();
            return;
        } //scorm nebo local: jiz naladovano
        /************ naladovani .JS souboru *****************/
        var spHack = lng == "sp-sp" ? "es-es" : lng;
        $.when(//ladovani
        $.ajax({
            cache: true,
            dataType: "script",
            url: Pager.path(Pager.pathType.relPath, Utils.string_format("jslib/scripts/cultures/globalize.culture.{0}.js", [spHack]))
        }), $.ajax({
            cache: true,
            dataType: "script",
            url: Pager.path(Pager.pathType.relPath, Utils.string_format("schools/loc/tradosData.{0}.js", [spHack]))
        })).done(function () { return doCompleted(); })
            .fail(function () {
            doCompleted(); /*noop, pouzije se difotni lokalizace, tj anglictina */
        });
    }
    Trados.adjustLoc = adjustLoc;
    //***************** Lokalizace dat
    //lokalizace JSON objektu
    function localizeObject(s, locPar, isRJson) {
        if (isRJson === void 0) { isRJson = false; }
        s = localizeJSON(s, locPar);
        var res = JSON.parse(s);
        return isRJson ? RJSON.unpack(res) : res; //ev. RJSON
    }
    Trados.localizeObject = localizeObject;
    //export function xlocalizeObjectEx(s: string, locPar: (s: string) => string): any { 
    //  s = replEx(s, v => "Trados.loc(" + v + ")");
    //  loc = locPar;
    //  locReplace = repl;
    //  var toEval = "(Trados.locRes = " + s + ");";
    //  eval(toEval);
    //  return locRes;
    //}
    //pomocne udaje
    //var locTable: string[];
    //var locReplace: (s: string) => string;
    //export var locRes;
    //export var loc : (s: string) => string; //hodnota property JSON objetku je dosazena pomoci Trados.loc funkce
    //low level nahrada {{}} zavorek pro umisteni do html
    function localize(data, loc) {
        //if (!loc) return data;
        var isJson = data.charAt(0) == "{";
        return data.replace(locEx, function (match) {
            var gm = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                gm[_i - 1] = arguments[_i];
            }
            var group_match = gm[0];
            var data = loc ? loc[group_match] : null;
            if (data && (isJson || group_match == 'Ahtmltitle')) {
                data = JSON.stringify(data);
                data = data.substr(1, data.length - 2);
            }
            return data ? data.toString() : "*** " + group_match + " ***";
        });
    }
    Trados.localize = localize;
    var locEx = /{{(.*?)}}/g;
    //low level nahrada {{}} zavorek pro umisteni do JSON stringu
    function localizeJSON(data, loc) {
        if (!loc)
            return data;
        return data.replace(locEx, function (match) {
            var gm = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                gm[_i - 1] = arguments[_i];
            }
            var group_match = gm[0];
            var data = JSON.stringify(loc[group_match]);
            if (data)
                data = data.substr(1, data.length - 2);
            return data ? data.toString() : "*** " + group_match + " ***";
        });
    }
    Trados.localizeJSON = localizeJSON;
})(Trados || (Trados = {}));
if (typeof ko != 'undefined') {
    ko.bindingHandlers["width"] = {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            valueAccessor($(element).width());
        },
        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            $(element).width(ko.utils.unwrapObservable(valueAccessor()));
        }
    };
    ko.bindingHandlers["height"] = {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            valueAccessor($(element).height());
        },
        update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            $(element).height(ko.utils.unwrapObservable(valueAccessor()));
        }
    };
}
ko.bindingHandlers['test'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var nm = ko.unwrap(valueAccessor());
        _.each($(element).parents().toArray(), function (el) {
            var n = el.getAttribute("data-bind");
            if (n) {
                var t = testRegEx.exec(n);
                if (t)
                    nm = t[1] + '.' + nm;
            }
        });
        element.setAttribute('name', nm);
    }
};
var testRegEx = /.*test:'(.*?)'/g;
/// <reference path="../jsd/jquery.d.ts" />
/// <reference path="../jsd/knockout.d.ts" />
/// <reference path="../jsd/jsrender.d.ts" />
/// <reference path="../jsd/underscore.d.ts" /> 
/// <reference path="../js/Utils.ts" />
var validate;
(function (validate_1) {
    (function (types) {
        types[types["empty"] = 0] = "empty";
        types[types["required"] = 1] = "required";
        types[types["email"] = 2] = "email";
        types[types["minlength"] = 3] = "minlength";
        types[types["rangelength"] = 4] = "rangelength";
        types[types["range"] = 5] = "range";
        types[types["rangeMin"] = 6] = "rangeMin";
        types[types["rangeMax"] = 7] = "rangeMax";
        types[types["depended"] = 8] = "depended";
        types[types["regEx"] = 9] = "regEx";
    })(validate_1.types || (validate_1.types = {}));
    var types = validate_1.types;
    var c_email = function () { return CSLocalize('27747c60f8a24429855917008c65521f', 'E-mail'); };
    var c_password = function () { return CSLocalize('74a95445936f44558cd585dd8b3d7b29', 'Password'); };
    var c_confirmPsw = function () { return CSLocalize('16636e21101c4ebf8a1bae8f358da7b5', 'Confirm password'); };
    function email(prop, required) {
        prop.required = required;
        return validate.inputModel("email", c_email(), prop, validate.types.email);
    }
    validate_1.email = email;
    function regex(prop, mask, name, title) {
        prop.mask = mask;
        return validate.inputModel(name, title, prop, validate.types.regEx);
    }
    validate_1.regex = regex;
    function minLen(prop, minLen, name, title) {
        prop.min = minLen;
        return validate.inputModel(name, title, prop, validate.types.minlength);
    }
    validate_1.minLen = minLen;
    function password(prop, minLen, name, title) {
        if (name === void 0) { name = "password"; }
        if (title === void 0) { title = null; }
        if (title == null)
            title = c_password();
        prop.min = minLen;
        return validate.inputModel(name, title, prop, validate.types.minlength, validate.controlType.password);
    }
    validate_1.password = password;
    function confirmPsw(prop, on) {
        prop.on = on;
        return validate.inputModel("confirmPsw", c_confirmPsw(), prop, validate.types.depended, validate.controlType.password);
    }
    validate_1.confirmPsw = confirmPsw;
    function Null() {
        return validate.inputModel(null, null, null, null, null);
    }
    validate_1.Null = Null;
    function empty(prop, name, title) {
        return validate.inputModel(name, title, prop, validate.types.empty);
    }
    validate_1.empty = empty;
    (ko.extenders).lm = function (target, par) {
        if (target.type == types.empty) {
            target.validate = function () { };
            return target;
        }
        target.hasError = ko.observable();
        target.message = ko.observable();
        target.hasfocus = ko.observable();
        target.validOk = function () {
            if (!target.ok)
                return;
            focusStatus = 2; //force zobraz chybu
            validate();
            if (target.hasError())
                return;
            focusStatus = 0; //validace OK, uschovej chyby
            target.ok();
        };
        var msg = null;
        function validInt(value) {
            if (value == null || value.length <= 0)
                return NaN;
            if (!/^\d+$/.test(value))
                return NaN;
            return parseInt(value);
        }
        function validate(fake, force) {
            if (fake === void 0) { fake = null; }
            if (force === void 0) { force = false; }
            var value = $.trim(target());
            switch (target.type) {
                case types.regEx:
                    var valid = target.mask.test(value);
                    msg = valid ? null : target.errorMessage || validate_1.messages.required();
                    break;
                case types.email:
                    var empty = value.length == 0;
                    var valid = !(target.required && empty);
                    msg = valid ? null : validate_1.messages.required();
                    if (valid && !empty) {
                        valid = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(value);
                        msg = valid ? null : target.errorMessage || validate_1.messages.email();
                    }
                    break;
                case types.required:
                    var valid = value.length > 0;
                    msg = valid ? null : target.errorMessage || validate_1.messages.required();
                    break;
                case types.minlength:
                    var len = value.length;
                    var valid = len >= target.min;
                    msg = valid ? null : Utils.string_format(target.errorMessage || validate_1.messages.minlength(), [target.min]);
                    break;
                case types.rangelength:
                    var len = value.length;
                    var valid = len >= target.min && len <= target.max;
                    msg = valid ? null : Utils.string_format(target.errorMessage || validate_1.messages.rangelength(), [target.min, target.max]);
                    break;
                case types.range:
                    var val = validInt(value);
                    var valid = !isNaN(val) && val >= target.min && val <= target.max;
                    msg = valid ? null : Utils.string_format(target.errorMessage || validate_1.messages.range(), [target.min, target.max]);
                    break;
                case types.rangeMin:
                    var val = validInt(value);
                    var valid = !isNaN(val) && val >= target.min;
                    msg = valid ? null : Utils.string_format(target.errorMessage || validate_1.messages.min(), [target.min]);
                    break;
                case types.rangeMax:
                    var val = validInt(value);
                    var valid = !isNaN(val) && val <= target.max;
                    msg = valid ? null : Utils.string_format(target.errorMessage || validate_1.messages.max(), [target.max]);
                    break;
                case types.depended:
                    var valid = ($.trim(target.on()) == value) && (value.length > 0);
                    msg = valid ? null : target.errorMessage || validate_1.messages.equalTo();
                    break;
                default:
                    throw "notImplemented";
            }
            if (valid && target.customValidation) {
                msg = target.customValidation(value);
                valid = msg == null;
            }
            target.hasError(!valid);
            if (force || focusStatus == 2)
                target.message(msg);
        }
        validate();
        target.subscribe(validate);
        if (target.type == types.depended)
            target.on.subscribe(validate);
        var focusStatus = 0;
        target.hasfocus.subscribe(function (val) {
            if (val && focusStatus == 0)
                focusStatus = 1;
            else if (!val && focusStatus == 1)
                focusStatus = 2;
            if (focusStatus == 2)
                target.message(msg);
        });
        target.validate = function () { return validate(null, true); };
        target.resetFocusStatus = function () { return focusStatus = 0; };
        target.get = function () {
            var value = $.trim(target());
            switch (target.type) {
                case types.email:
                    return value.toLowerCase();
                case types.range:
                case types.rangeMin:
                case types.rangeMax:
                    return validInt(value);
                default:
                    return value;
            }
        };
        target.set = function (val) {
            target(val.toString());
        };
        return target;
    };
    ////JsRender vlastnosti
    //export interface InputBtnModel extends InputModel {
    //}
    function isValid(models) {
        return isPropsValid(_.map(models, function (m) { return m.prop; }));
        //var res = true;
        //_.each(models, (inp: validate.InputModel) => {
        //  if (!inp.prop) return;
        //  inp.prop.validate();
        //  res = res && (!inp.prop.hasError || !inp.prop.hasError());
        //});
        //return res;
    }
    validate_1.isValid = isValid;
    function isPropsValid(props) {
        var res = true;
        _.each(props, function (prop) {
            prop.validate();
            res = res && (!prop.hasError || !prop.hasError());
        });
        //form OK: reset focusStatus
        if (res)
            _.each(props, function (prop) {
                if (prop.resetFocusStatus)
                    prop.resetFocusStatus();
            });
        return res;
    }
    validate_1.isPropsValid = isPropsValid;
    (function (controlType) {
        controlType[controlType["text"] = 0] = "text";
        controlType[controlType["password"] = 1] = "password";
    })(validate_1.controlType || (validate_1.controlType = {}));
    var controlType = validate_1.controlType;
    function create(type, finish) {
        if (finish === void 0) { finish = null; }
        var res = ko.observable();
        res.type = type;
        if (finish)
            finish(res);
        res.extend({ lm: null });
        return res;
    }
    validate_1.create = create;
    function inputModel(name, title, prop, valType, type) {
        if (type === void 0) { type = controlType.text; }
        var res = { name: name, title: title, prop: prop, textType: null, btnTitle: null };
        if (prop == null)
            return res;
        switch (type) {
            case controlType.text:
                res.textType = "text";
                break;
            case controlType.password:
                res.textType = "password";
                break;
        }
        prop.type = valType;
        prop.extend({ lm: { x: true } });
        return res;
    }
    validate_1.inputModel = inputModel;
    //export function inputBtnModel(name: string, title: string, btnTitle: string, prop: ValidObservable, valType: types, type: controlType = controlType.text): InputBtnModel {
    //  var res = <InputBtnModel> inputModel(name, title, prop, valType, type);
    //  res.btnTitle = btnTitle;
    //  return res;
    //}
    ko.bindingHandlers['visibility'] = {
        'update': function (element, valueAccessor) {
            var value = ko.utils.unwrapObservable(valueAccessor());
            var isCurrentlyVisible = element.style.visibility != "hidden";
            if (value && !isCurrentlyVisible)
                element.style.visibility = "";
            else if (!value && isCurrentlyVisible)
                element.style.visibility = "hidden";
        }
    };
    //nefunguje v MSIE 7
    //ko.bindingHandlers['placeholder'] = {
    //  'update': function (element: HTMLElement, valueAccessor) {
    //    var value = ko.utils.unwrapObservable(valueAccessor());
    //    $(element).attr("placeholder", value);
    //  }
    //};
    validate_1.messages = {
        required: function () { return CSLocalize('8dd00c8210854c5eb8fb7bc017cfa21e', 'This field is required.'); },
        email: function () { return CSLocalize('c913db0985a940c09d95ebfa7459a4be', 'Please enter a valid email address.'); },
        equalTo: function () { return CSLocalize('9a47c9f99dce4e43859d7029e9ae6955', 'Please enter the same value again.'); },
        remote: function () { return "Please fix this field."; },
        url: function () { return "Please enter a valid URL."; },
        date: function () { return "Please enter a valid date."; },
        dateISO: function () { return "Please enter a valid date (ISO)."; },
        number: function () { return "Please enter a valid number."; },
        digits: function () { return "Please enter only digits."; },
        creditcard: function () { return "Please enter a valid credit card number."; },
        maxlength: function () { return "Please enter no more than {0} characters."; },
        minlength: function () { return CSLocalize('106ee5f0757b4829af9c71cc2c557093', 'Please enter at least 3 characters.'); },
        rangelength: function () { return CSLocalize('915e1b2dbd2d44df89cdf4e9bbdee3df', 'Please enter a value between {0} and {1} characters long.'); },
        range: function () { return "Please enter a value between {0} and {1}."; },
        max: function () { return "Please enter a value less than or equal to {0}."; },
        min: function () { return CSLocalize('f03951d4577b484ca04b639ad6d96514', 'Please enter a value greater than or equal to {0}.'); }
    };
})(validate || (validate = {}));
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Login;
(function (Login) {
    function getHash(type) {
        return oldPrefix + [Login.appId, type].join(hashDelim);
    }
    Login.getHash = getHash;
    //pro Admin.html
    function isSystemAdmin() { return ((Login.myData.Roles & Login.Role.Admin) != 0) || ((Login.myData.Roles & Login.Role.Comps) != 0); }
    Login.isSystemAdmin = isSystemAdmin; //PZ
    function isRoleComps() { return (Login.myData.Roles & Login.Role.Comps) != 0; }
    Login.isRoleComps = isRoleComps; //ZZ, RJ, PJ, ktere PZ urci 
    function companyExists() { return _.any(Login.myData.Companies, function (c) { return (c.RoleEx.Role == LMComLib.CompRole.Admin) || ((c.RoleEx.Role & ~LMComLib.CompRole.Admin) != 0) || (c.Courses != null && c.Courses.length > 0); }); }
    Login.companyExists = companyExists;
    //export function isCompAdmin() { return _.any(myData.Companies, (c: Login.MyCompany) => (c.Roles & ~Login.CompRole.Admin) != 0); } //Chinh povoli nejakou company roli (products nebo key)
    //export function isCompStudent() { return _.any(myData.Companies, (c: Login.MyCompany) => (c.Courses != null && c.Courses.length > 0)); } //existuje nejaky prirazeny kurz
    LMStatus.onLogged = function (completed) {
        if (!LMStatus.isLogged()) {
            completed();
            return;
        }
        if (Pager.afterLoginInit)
            Pager.afterLoginInit(function () { return adjustMyData(false, completed); });
        else
            adjustMyData(false, completed);
    };
    function adjustMyData(force, completed) {
        if (!force && Login.myData != null && Login.myData.UserId == LMStatus.Cookie.id) {
            completed();
            return;
        }
        //info o firmach, produktech a rolich
        Pager.ajaxGet(Pager.pathType.restServices, Login.CmdMyInit_Type, LMStatus.createCmd(function (r) { return r.lmcomId = LMStatus.Cookie.id; }), 
        //Login.CmdMyInit_Create(LMStatus.Cookie.id),
        function (res) {
            Login.myData = res;
            if (CourseMeta.allProductList)
                finishMyData(); //pri spusteni se nejdrive nacitaji Mydata a pak teprve produkty. Proto se finishMyData vola i v adjustAllProductList 
            completed();
        });
    }
    Login.adjustMyData = adjustMyData;
    //export function createArchive(companyId: number, productId: string, completed: (archiveId:number) => void) {
    //  //info o firmach, produktech a rolich
    //  Pager.ajaxGet(
    //    Pager.pathType.restServices,
    //    scorm.Cmd_createArchive_Type,
    //    scorm.Cmd_createArchive_Create(LMStatus.Cookie.id, companyId, productId, null),
    //    (res: number) => completed(res));
    //}
    function finishMyData() {
        //myData vznikaji v CSharp v NewData.My.Init. Kurzy jsou v myData.Companies.Courses. comp.companyProducts comp.companyProducts jsou LM Author produkty
        if (!Login.myData || Login.myData.finished)
            return;
        Login.myData.finished = true;
        var res = Login.myData;
        //pridej produkty, vytvorene (vlastnene) by company
        _.each(Login.myData.Companies, function (comp) {
            if (comp.PublisherOwnerUserId != 0) {
                if (comp.PublisherOwnerUserId != Login.myData.UserId)
                    return;
                comp.RoleEx.Role = LMComLib.CompRole.Keys | LMComLib.CompRole.Products | LMComLib.CompRole.Publisher;
            }
            else {
                if ((comp.RoleEx.Role && LMComLib.CompRole.Publisher) == 0)
                    return;
            }
            _.each(comp.companyProducts, function (p) { return comp.Courses.push({
                Expired: -1,
                Archives: null,
                isAuthoredCourse: true,
                LicCount: 1,
                ProductId: p.url,
                LicenceKeys: null,
            }); });
        });
        //agreguj archivy testu a dosad isTest
        _.each(res.Companies, function (myComp) {
            var courses = [];
            //jedna grupa - vsechny zaznamy o jednom produktu (eTestMe archiv) a to budto isAuthoredCourse nebo ne
            var prodGroups = _.groupBy(myComp.Courses, function (myCrs) { return (myCrs.isAuthoredCourse ? '+' : '-') + '|' + myCrs.ProductId.split('|')[0]; });
            for (var prodcode in prodGroups) {
                var prodGroup = prodGroups[prodcode];
                var prodId = prodcode.split('|')[1];
                var isAuthoredCourse = prodcode.charAt(0) == '+';
                var isTest = CourseMeta.lib.isTest(CourseMeta.lib.findProduct(prodId));
                var crs;
                if (!isTest) {
                    if (prodGroup.length > 1) {
                        debugger; /*kdyz se published test pouzije a publisher nasledne stejnout URL pouzije pro kurz => chyba. throw 'Text expected';*/
                    }
                    crs = prodGroup[0];
                    crs.isAuthoredCourse = isAuthoredCourse;
                }
                else {
                    var crs = {
                        Expired: 0,
                        ProductId: prodId,
                        Archives: [],
                        LicCount: 0,
                        isAuthoredCourse: isAuthoredCourse,
                        LicenceKeys: null,
                    };
                    _.each(prodGroup, function (it) {
                        var parts = it.ProductId.split('|'); //productId je url|archiveId
                        switch (parts.length) {
                            case 1:
                                crs.LicCount = it.LicCount;
                                break; //rozpracovany test (neni archiv)
                            case 2:
                                crs.Archives.push(parseInt(parts[1]));
                                break; //archiv
                            default: {
                                debugger;
                                throw 'error';
                            }
                        }
                    });
                }
                courses.push(crs);
            }
            myComp.Courses = courses;
        });
    }
    Login.finishMyData = finishMyData;
    Login.c_firstName = function () { return CSLocalize('620972c027ab41a28bcb0306b233b0ce', 'First Name'); };
    Login.c_lastName = function () { return CSLocalize('03500780ce2c476a9719c9e8e3202465', 'Last Name'); };
    Login.c_oldPassword = function () { return CSLocalize('275229db239c41f0a7d3038e0072323f', 'Old password'); };
    Login.c_newPassword = function () { return CSLocalize('e0bc9a352e364c40b87d261f44697515', 'New password'); };
    //export class Url extends Pager.Url {
    //  constructor(type: string) { super(appId, type); }
    //  //static fromString(hash: string): Pager.Url {
    //  //  return _.isEmpty(hash) ? initUrl() : new Url(hash);
    //  //}
    //  toString(): string { return appId + "@" + (this.locator == pageLogin ? "" : this.locator); }
    //}
    function Dump() {
        var res = {};
        res.login = function () {
            //window.location.href = LMStatus.newLoginUrl(false);
        };
        res.login_https = function () {
            //window.location.href = LMStatus.newLoginUrl(true);
        };
        //res.logout = LMStatus.logout;
        var cook = LMStatus.getCookie();
        var logged = cook != null && cook.id > 0;
        res.isLogin = !logged;
        if (!logged) {
            res.Error = "Not logged";
            return res;
        }
        res.Id = "<b>Id:</b> " + cook.id;
        res.EMail = "<b>EMail:</b> " + cook.EMail;
        res.Type = "<b>Type:</b> " + LowUtils.EnumToString(LMComLib.OtherType, cook.Type);
        res.TypeId = "<b>TypeId:</b> " + cook.TypeId;
        res.FirstName = "<b>FirstName:</b> " + cook.FirstName;
        res.LastName = "<b>LastName:</b> " + cook.LastName;
        return res;
    }
    Login.Dump = Dump;
    function InitModel(_cfg, completed) {
        Login.cfg = _cfg;
        completed();
    }
    Login.InitModel = InitModel;
    Login.pageLogin = "loginModel".toLowerCase();
    Login.pageLmLogin = "lmLoginModel".toLowerCase();
    Login.pageLmLoginNoEMail = "lmLoginNoEMailModel".toLowerCase();
    Login.pageRegister = "registerModel".toLowerCase();
    Login.pageRegisterNoEMail = "registerNoEMailModel".toLowerCase();
    Login.pageChangePassword = "changePasswordModel".toLowerCase();
    Login.pageForgotPassword = "forgotPasswordModel".toLowerCase();
    Login.pageProfile = "profileModel".toLowerCase();
    Login.pageConfirmRegistration = "ConfirmRegistrationModel".toLowerCase();
    //export interface IPageDict { type: string; create: (type: string) => loginMode; }
    //};
    var loginMode = (function (_super) {
        __extends(loginMode, _super);
        function loginMode(type) {
            _super.call(this, Login.appId, type, null);
            this.error = ko.observable(null);
            this.success = ko.observable(null);
            //this.url = new Url(type.toLowerCase());
            this.errorText = ko.computed(function () {
                var err = this.error();
                if (!err || err == "")
                    return null;
                return "<b>Error:</b> " + err;
            }, this);
        }
        loginMode.prototype.update = function (completed) {
            completed();
        };
        loginMode.prototype.ok = function () {
            if (!validate.isValid(this.viewModel))
                return;
            this.doOK();
        };
        loginMode.prototype.doOK = function () { };
        return loginMode;
    })(Pager.Page);
    Login.loginMode = loginMode;
    function loginUrl() { return getHash(Login.pageLogin); }
    Login.loginUrl = loginUrl;
    if ($.views)
        $.views.helpers({
            loginUrl: function (par) { return "#" + getHash(_.isEmpty(par) ? Login.pageLogin : par); },
        });
    function newProfileUrl() {
        LMStatus.setReturnUrlAndGoto(getHash(Login.pageProfile));
    }
    Login.newProfileUrl = newProfileUrl;
    //export var pageDict: { [type: string]: (urlParts: string[], completed: (pg: Pager.Page) => void) => void } = {};
    //pageDict[pageLogin] = (urlParts, completed) => completed(new LoginModel(pageLogin));
    //pageDict[pageLmLogin] = (urlParts, completed) => completed(new LMLoginModel(pageLmLogin, true));
    //pageDict[pageLmLoginNoEMail] = (urlParts, completed) => completed(new LMLoginModel(pageLmLoginNoEMail, false));
    //pageDict[pageRegister] = (urlParts, completed) => completed(new RegisterModel(pageRegister, true));
    //pageDict[pageRegisterNoEMail] = (urlParts, completed) => completed(new RegisterModel(pageRegisterNoEMail, false));
    //pageDict[pageConfirmRegistration] = (urlParts, completed) => completed(new ConfirmRegistrationModel(pageConfirmRegistration));
    //pageDict[pageChangePassword] = (urlParts, completed) => completed(new ChangePassworModel(pageChangePassword));
    //pageDict[pageForgotPassword] = (urlParts, completed) => completed(new ForgotPasswordModel(pageForgotPassword));
    //pageDict[pageProfile] = (urlParts, completed) => completed(new ProfileModel(pageProfile));
    //Registrace lokatoru
    //for (var p in pageDict)
    //  Pager.registerAppLocator(appId, p, pageDict[p]);
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, Login.pageLogin, Login.appId, Login.pageLogin, 0, function (urlParts) { return new Login.LoginModel(Login.pageLogin); }, false); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, Login.pageLmLogin, Login.appId, Login.pageLmLogin, 0, function (urlParts) { return new Login.LMLoginModel(Login.pageLmLogin, true); }, false); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, Login.pageLmLoginNoEMail, Login.appId, Login.pageLmLoginNoEMail, 0, function (urlParts) { return new Login.LMLoginModel(Login.pageLmLoginNoEMail, false); }, false); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, Login.pageRegister, Login.appId, Login.pageRegister, 0, function (urlParts) { return new Login.RegisterModel(Login.pageRegister, true); }, false); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, Login.pageRegisterNoEMail, Login.appId, Login.pageRegisterNoEMail, 0, function (urlParts) { return new Login.RegisterModel(Login.pageRegisterNoEMail, false); }, false); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, Login.pageConfirmRegistration, Login.appId, Login.pageConfirmRegistration, 0, function (urlParts) { return new Login.ConfirmRegistrationModel(Login.pageConfirmRegistration); }, false); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, Login.pageChangePassword, Login.appId, Login.pageChangePassword, 0, function (urlParts) { return new Login.ChangePassworModel(Login.pageChangePassword); }, false); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, Login.pageForgotPassword, Login.appId, Login.pageForgotPassword, 0, function (urlParts) { return new Login.ForgotPasswordModel(Login.pageForgotPassword); }, false); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, Login.pageProfile, Login.appId, Login.pageProfile, 0, function (urlParts) { return new Login.ProfileModel(Login.pageProfile); }, false); });
})(Login || (Login = {}));
var Base32;
(function (Base32) {
    //https://github.com/agnoster/base32-js
    // This would be the place to edit if you want a different
    // Base32 implementation
    var alphabet = '0123456789abcdefghjkmnpqrtuvwxyz';
    var alias = { o: 0, i: 1, l: 1, s: 5 };
    /**
     * Build a lookup table and memoize it
     *
     * Return an object that maps a character to its
     * byte value.
     */
    var lookup = function () {
        var table = {};
        // Invert 'alphabet'
        for (var i = 0; i < alphabet.length; i++) {
            table[alphabet[i]] = i;
        }
        // Splice in 'alias'
        for (var key in alias) {
            if (!alias.hasOwnProperty(key))
                continue;
            table[key] = table['' + alias[key]];
        }
        lookup = function () { return table; };
        return table;
    };
    /**
     * A streaming encoder
     *
     *     var encoder = new base32.Encoder()
     *     var output1 = encoder.update(input1)
     *     var output2 = encoder.update(input2)
     *     var lastoutput = encode.update(lastinput, true)
     */
    function Encoder() {
        var skip = 0; // how many bits we will skip from the first byte
        var bits = 0; // 5 high bits, carry from one byte to the next
        this.output = '';
        // Read one byte of input
        // Should not really be used except by "update"
        this.readByte = function (bt) {
            // coerce the byte to an int
            //if (typeof byte == 'string') byte = byte.charCodeAt(0)
            if (skip < 0) {
                bits |= (bt >> (-skip));
            }
            else {
                bits = (bt << skip) & 248;
            }
            if (skip > 3) {
                // not enough data to produce a character, get us another one
                skip -= 8;
                return 1;
            }
            if (skip < 4) {
                // produce a character
                this.output += alphabet[bits >> 3];
                skip += 5;
            }
            return 0;
        };
        // Flush any remaining bits left in the stream
        this.finish = function (check) {
            var output = this.output + (skip < 0 ? alphabet[bits >> 3] : '') + (check ? '$' : '');
            this.output = '';
            return output;
        };
    }
    Base32.Encoder = Encoder;
    /**
     * Process additional input
     *
     * input: string of bytes to convert
     * flush: boolean, should we flush any trailing bits left
     *        in the stream
     * returns: a string of characters representing 'input' in base32
     */
    Encoder.prototype.update = function (input, flush) {
        for (var i = 0; i < input.length;) {
            i += this.readByte(input[i]);
        }
        // consume all output
        var output = this.output;
        this.output = '';
        if (flush) {
            output += this.finish();
        }
        return output;
    };
    // Functions analogously to Encoder
    function Decoder() {
        var skip = 0; // how many bits we have from the previous character
        var bt = 0; // current byte we're producing
        this.output = [];
        // Consume a character from the stream, store
        // the output in this.output. As before, better
        // to use update().
        this.readChar = function (chr) {
            //if (typeof char != 'string') {
            //if (typeof char == 'number') {
            //char = String.fromCharCode(char)
            //}
            //}
            chr = chr.toLowerCase();
            var val = lookup()[chr];
            if (typeof val == 'undefined') {
                // character does not exist in our lookup table
                //return // skip silently. An alternative would be:
                throw Error('Could not find character "' + chr + '" in lookup table.');
            }
            val <<= 3; // move to the high bits
            bt |= val >>> skip;
            skip += 5;
            if (skip >= 8) {
                // we have enough to preduce output
                this.output.push(bt);
                skip -= 8;
                if (skip > 0)
                    bt = (val << (5 - skip)) & 255;
                else
                    bt = 0;
            }
        };
        this.finish = function (check) {
            if (skip < 0)
                this.output.push(alphabet[bt >> 3]);
            //var output = this.output;
            //this.output = [];
            //return output;
        };
    }
    Base32.Decoder = Decoder;
    Decoder.prototype.update = function (input, flush) {
        for (var i = 0; i < input.length; i++) {
            this.readChar(input[i]);
        }
        this.finish();
        var output = this.output;
        this.output = [];
        return output;
    };
    /** Convenience functions
     *
     * These are the ones to use if you just have a string and
     * want to convert it without dealing with streams and whatnot.
     */
    // String of data goes in, Base32-encoded string comes out.
    function encode(input) {
        var encoder = new Encoder();
        var output = encoder.update(input, true);
        return output;
    }
    Base32.encode = encode;
    // Base32-encoded string goes in, decoded data comes out.
    function decode(input) {
        var decoder = new Decoder();
        var output = decoder.update(input, true);
        return output;
    }
    Base32.decode = decode;
})(Base32 || (Base32 = {}));
/// <reference path="../jsd/jquery.d.ts" />
/// <reference path="../jsd/knockout.d.ts" />
/// <reference path="../jsd/jsrender.d.ts" />
/// <reference path="../jsd/underscore.d.ts" /> 
/// <reference path="../js/Utils.ts" />
/// <reference path="../js/Base32.ts" />
var keys;
(function (keys) {
    function toString(key) {
        var b1 = Utils.longToByteArray(key.licId);
        var b2 = Utils.longToByteArray(key.counter);
        var b3 = [b2[0], b2[1], b2[2], b1[0], b1[1]];
        b3 = LowUtils.encrypt(b3);
        return Base32.encode(b3).toUpperCase();
    }
    keys.toString = toString;
    function fromString(str) {
        //if (str.indexOf('|') > 0) {
        //  var parts = str.split('|');
        //  return { licId: parseInt(parts[0]), counter: parseInt(parts[1]) };
        //}
        var b3 = Base32.decode(str);
        b3 = LowUtils.decrypt(b3);
        var b2 = [b3[0], b3[1], b3[2], 0, 0, 0, 0, 0];
        var b1 = [b3[3], b3[4], 0, 0, 0, 0, 0, 0];
        return { licId: Utils.byteArrayToLong(b1), counter: Utils.byteArrayToLong(b2) };
    }
    keys.fromString = fromString;
})(keys || (keys = {}));
//module prods {
//export var Items: schools.root[] = null; //info o vsech dostupnych produktech
//export var Crs2RwMap: Rew.Crs2RwMapItem[] = null; //prirazeni rewise lekci k lekcim kurzu, Crs2RwMap[<lesson jsonId>] = Rew.Crs2RwMapItem
//export var all: CourseMeta.data[] = null; //info o vsech dostupnych produktech
//export function init(completed: () => void): void {
//  CourseMeta.lib.adjustAllProductList(completed);
//  //return;
//  //var pth = Pager.filePath(Pager.pathType.sitemapRoot, null).url;
//  //var pthCrs2Rew = Pager.filePath(Pager.pathType.course2rewiseMap, null, Trados.actLangCode).urlLoc;
//  //schools.readAppData(pth, res => {
//  //  var obj = JSON.parse(res); Items = RJSON.unpack(obj);
//  //  completed();
//  //  /*if (cfg.target != LMComLib.Targets.web) { completed(); return; }
//  //  schools.readAppData(pthCrs2Rew, resCrs2Rew => {
//  //    obj = JSON.parse(resCrs2Rew); Crs2RwMap = RJSON.unpack(obj);
//  //    completed();
//  //  });*/
//  //});
//}
//export function get(productId: string): schools.root {
//  return _.find(Items, prod => prod.url == productId);
//}
//export function findProduct(productId: string): CourseMeta.data {
//  return _.find(CourseMeta.allProductList, prod => prod.url == productId);
//}
//export function rewLessonId(jsonId: string): number {
//  if (!Crs2RwMap) return 0;
//  var map: Rew.Crs2RwMapItem = Crs2RwMap[jsonId];
//  return map ? map.rwId : 0;
//}
////k lekci zadanou jsonId vrati staticka data rewise lekce
//export function getRewLesson(jsonId: string, completed: (l: Rew.LessonDataSrc) => void ): void {
//  if (!Crs2RwMap) { completed(null); return; }
//  var crs2Rew: Rew.Crs2RwMapItem = Crs2RwMap[jsonId];
//  if (!crs2Rew) { completed(null); return; }
//  var lng = crs2Rew.locRatioPromile > 100 ? Trados.actLangCode : "no";
//  var pth = Pager.filePath(Pager.pathType.rewiseLesson, crs2Rew.rwId.toString(), lng).urlLoc;
//  schools.readAppData(pth, rewLessStr => {
//    var obj = JSON.parse(rewLessStr); var res: Rew.LessonDataSrc = RJSON.unpack(obj);
//    completed(res);
//  });
//}
//export function lineTxt(productId: string): string {
//  return LowUtils.EnumToString(LMComLib.LineIds, CourseMeta.lib.findProduct(productId).line);
//}
//export function read(productId: string, completed: (crsTree: schools.root) => void) {
//  schools.readAppDataAndLoc(
//    //Pager.filePath(Pager.pathType.sitemaps, get(productId).fileName, Trados.actLangCode),
//    Pager.filePath(Pager.pathType.sitemaps, productId, Trados.actLangCode),
//    (d, l) => completed(Trados.localizeObject(d, JSON.parse(l), true)));
//}
//export function read2(productId: string, completed: (prod: CourseMeta.product) => void) {
//  CourseMeta.lib.adjustProduct(productId, () => completed(CourseMeta.actProduct));
//}
//export function readDict(completed: (dicts: LMComLib.Dict[]) => void ) {
//  var pth = Pager.filePath(Pager.pathType.dictInfo, null).url;
//  schools.readAppData(pth, res => {
//    var obj = JSON.parse(res);
//    completed(RJSON.unpack(obj));
//  });
//}
//$.views.helpers({
//  productLineTxt: CourseMeta.lib.productLineTxt,
//  productLineTxtLower: (productId) => CourseMeta.lib.productLineTxt(productId).toLowerCase(),
//});
//}
var schoolAdmin;
(function (schoolAdmin) {
    var Products = (function (_super) {
        __extends(Products, _super);
        function Products(urlParts) {
            var _this = this;
            _super.call(this, schoolAdmin.productsTypeName, urlParts);
            this.selectMode = ko.observable(0); //0..unknown, 1..test, 2..kurz
            var self = this;
            this.product = validate.create(validate.types.required);
            this.product.subscribe(function (pr) {
                if (!pr) {
                    self.selectMode(0);
                    return;
                }
                self.selectMode(CourseMeta.lib.isTest(CourseMeta.lib.findProduct(pr)) ? 1 : 2);
            });
            this.days = daysProp(this.product, this);
            this.days(0);
            this.add = function () {
                if (!validate.isPropsValid([_this.product, _this.days]))
                    return;
                var prodId = _this.product.get();
                var days = CourseMeta.lib.isTest(CourseMeta.lib.findProduct(prodId)) ? 0 : _this.days();
                var nu = new Product({ Id: 0, LastCounter: 0, Days: days, ProductId: prodId, Deleted: false, UsedKeys: 0 }, _this);
                _this.products.push(nu);
                _this.product(undefined);
                _this.days(0);
                _this.refreshHtml();
            };
            this.del = function (act) { if (act.data.Id == 0) {
                self.products = _.without(self.products, act);
                _this.refreshHtml();
            }
            else
                act.Deleted(true); };
            this.undel = function (act) { act.Deleted(false); };
        }
        Products.prototype.refreshHtml = function () {
            Pager.renderTemplateEx('schoolProductsProductPlace', 'schoolProductsProduct', this);
        };
        // UPDATE
        Products.prototype.update = function (completed) {
            var _this = this;
            Pager.ajaxPost(Pager.pathType.restServices, Admin.CmdGetProducts_Type, Admin.CmdGetProducts_Create(this.CompanyId, false), function (res) {
                var admProds = [];
                _.each(res, function (pr) {
                    if (CourseMeta.lib.findProduct(pr.ProductId) != null)
                        admProds.push(new Product(pr, _this));
                });
                _this.products = admProds;
                setTimeout(function () { return _this.refreshHtml(); }, 1);
                //this.products(_.map(res, (act: Admin.Product) => new Product(act, this)));
                completed();
            });
        };
        Products.prototype.ok = function () {
            var prods = _.map(this.products, function (p) { return p.data; });
            Pager.ajaxPost(Pager.pathType.restServices, Admin.CmdSetProducts_Type, Admin.CmdSetProducts_Create(this.CompanyId, prods), function () { return LMStatus.gotoReturnUrl(); });
        };
        Products.prototype.cancel = function () { LMStatus.gotoReturnUrl(); };
        //allProducts() { return prods.Items; }
        Products.prototype.allProducts = function () {
            var _this = this;
            var comp = _.find(Login.myData.Companies, function (c) { return c.Id == _this.CompanyId; });
            var res = comp.companyProducts && comp.companyProducts.length > 0 ? comp.companyProducts.slice() : [];
            if (comp.PublisherOwnerUserId == 0)
                res.pushArray(CourseMeta.allProductList);
            return res;
        };
        return Products;
    })(schoolAdmin.CompModel);
    schoolAdmin.Products = Products;
    var Product = (function () {
        function Product(data, owner) {
            this.data = data;
            this.owner = owner;
            this.Deleted = ko.observable(false);
            this.Deleted.subscribe(function (val) { return data.Deleted = val; });
            var prod = CourseMeta.lib.findProduct(data.ProductId);
            //this.product = validate.create(validate.types.required); this.product(data.ProductId);
            this.days = CourseMeta.lib.keyTitle(prod, data.Days);
            this.title = prod.title;
            this.lineTxt = CourseMeta.lib.productLineTxt(data.ProductId).toLowerCase();
            //this.EditVisible(!CourseMeta.isType(CourseMeta.lib.findProduct(data.ProductId), CourseMeta.runtimeType.test));
        }
        return Product;
    })();
    schoolAdmin.Product = Product;
    function daysProp(product, owner) {
        return validate.create(validate.types.rangeMin, function (prop) {
            prop.min = 0;
            prop.customValidation = function (days) { return validateProduct(product, days, owner.products); };
        });
    }
    function validateProduct(product, days, allProds) {
        var prod = CourseMeta.lib.findProduct(product());
        var d = parseInt(days);
        var isTest = CourseMeta.lib.isTest(prod);
        if (!isTest && d < 1)
            return validate.messages.required();
        var error = _.any(allProds, function (p) { return p.data.ProductId == prod.url && (isTest || p.data.Days == d); }) ? CSLocalize('8139bf0c5fed4b92ba7ce97a50034aa6', 'The same product with the same license validity already exists!') : null;
        product.message(error ? error : '');
        return error ? ' ' : null;
    }
    //Pager.registerAppLocator(appId, productsTypeName,(urlParts, completed) => completed(new Products(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.productsTypeName, schoolAdmin.appId, schoolAdmin.productsTypeName, 1, function (urlParts) { return new Products(urlParts); }); });
})(schoolAdmin || (schoolAdmin = {}));
/// <reference path="../JsLib/jsd/jquery.d.ts" />
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/jsd/underscore.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/GenLMComLib.ts" />
/// <reference path="../JsLib/ea/EAExtension.ts" />
/// <reference path="GenAdmin.ts" />
/// <reference path="../JsLib/js/Validate.ts" />
/// <reference path="../login/GenLogin.ts" />
/// <reference path="../login/Model.ts" />
/// <reference path="admin.ts" />
var schoolAdmin;
(function (schoolAdmin) {
    var CompAdmins = (function (_super) {
        __extends(CompAdmins, _super);
        function CompAdmins(urlParts) {
            _super.call(this, schoolAdmin.compAdminsTypeName, urlParts);
        }
        // UPDATE
        CompAdmins.prototype.update = function (completed) {
            var _this = this;
            Pager.ajaxPost(Pager.pathType.restServices, Admin.CmdGetUsers_Type, Admin.CmdGetUsers_Create(false, false, [this.CompanyId]), function (res) {
                _this.comp_Admin = _.map(_.pairs(_.groupBy(res.CompUsers, "CompanyId")), function (nv) { return new CompanyAdmins(_this, nv[0], nv[1]); });
                setTimeout(function () { return _this.refreshHtml(); }, 1);
                completed();
            });
        };
        // OK x CANCEL
        CompAdmins.prototype.ok = function () {
            Pager.ajaxPost(Pager.pathType.restServices, Admin.CmdSetUsers_Type, Admin.CmdSetUsers_Create(null, null, null, _.map(_.flatten(_.map(this.comp_Admin, function (it) { return it.Items; }), true), function (it) { return it.data; })), function () { return Login.adjustMyData(true, function () { return LMStatus.gotoReturnUrl(); }); });
        };
        CompAdmins.prototype.cancel = function () { LMStatus.gotoReturnUrl(); };
        CompAdmins.prototype.refreshHtml = function () {
            Pager.renderTemplateEx('schoolCompAdminsItemsPlace', 'schoolCompAdminsItems', this);
        };
        return CompAdmins;
    })(schoolAdmin.CompModel);
    schoolAdmin.CompAdmins = CompAdmins;
    // COMP ADMIN
    var CompanyAdmins = (function () {
        function CompanyAdmins(owner, Id, items) {
            var _this = this;
            this.owner = owner;
            this.Id = Id;
            var self = this;
            //this.Title = _.find(Login.myData.Companies, (comp: Login.MyCompany) => comp.Id == Id).Title;
            this.Items = _.map(items, function (it) { return new CompanyAdminItem(it); });
            //this.compAdmin_del = (act: CompanyAdminItem) => { if (act.data.UserId == 0) self.Items.remove(act); else act.Deleted(!act.Deleted()); }
            this.compAdmin_del = function (act) { if (act.data.UserId == 0) {
                self.Items = _.without(self.Items, act);
                self.owner.refreshHtml();
            }
            else
                act.Deleted(!act.Deleted()); };
            this.newEMail = validate.create(validate.types.email, function (prop) {
                prop.required = true;
                prop.customValidation = function (email) { return _.any(_this.Items, function (it) { return it.data.EMail == email; }) ? CSLocalize('bd38a1ebc3f041779ffd7a5bcf34dfe8', 'User with this email already added') : null; };
            });
            this.newEMail_Add = function () {
                if (!validate.isPropsValid([_this.newEMail]))
                    return;
                var nu = new CompanyAdminItem({
                    UserId: 0,
                    Deleted: false,
                    EMail: self.newEMail(),
                    CompanyId: Id,
                    Role: { Role: 0, HumanEvalatorInfos: null }
                });
                _this.Items.push(nu);
                self.owner.refreshHtml();
                _this.newEMail(null);
            };
        }
        return CompanyAdmins;
    })();
    var CompanyAdminItem = (function () {
        function CompanyAdminItem(data) {
            this.data = data;
            this.Deleted = ko.observable(false);
            this.Deleted.subscribe(function (val) { return data.Deleted = val; });
            this.options = [
                new CompanyAdminOption(this.data, LMComLib.CompRole.Keys),
                new CompanyAdminOption(this.data, LMComLib.CompRole.Products),
                new CompanyAdminOption(this.data, LMComLib.CompRole.Department),
                new CompanyAdminOption(this.data, LMComLib.CompRole.Results),
                new CompanyAdminOption(this.data, LMComLib.CompRole.Publisher),
                new CompanyAdminOption(this.data, LMComLib.CompRole.HumanEvalManager),
            ];
        }
        return CompanyAdminItem;
    })();
    var CompanyAdminOption = (function () {
        function CompanyAdminOption(data, role) {
            this.data = data;
            this.checked = ko.observable(false);
            this.checked((data.Role.Role & role) != 0);
            this.checked.subscribe(function (r) { return data.Role.Role = r ? data.Role.Role | role : data.Role.Role & ~role; });
            this.title = schoolAdmin.roleTranslation[role]();
        }
        return CompanyAdminOption;
    })();
    //Pager.registerAppLocator(appId, compAdminsTypeName, (urlParts, completed) => completed(new CompAdmins(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.compAdminsTypeName, schoolAdmin.appId, schoolAdmin.compAdminsTypeName, 1, function (urlParts) { return new CompAdmins(urlParts); }); });
})(schoolAdmin || (schoolAdmin = {}));
/// <reference path="../JsLib/jsd/jquery.d.ts" />
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/jsd/underscore.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/GenLMComLib.ts" />
/// <reference path="../JsLib/ea/EAExtension.ts" />
/// <reference path="GenAdmin.ts" />
/// <reference path="../JsLib/js/Validate.ts" />
/// <reference path="../login/GenLogin.ts" />
/// <reference path="../login/Model.ts" />
/// <reference path="KeyGen.ts" />
/// <reference path="Products.ts" />
/// <reference path="CompAdmins.ts" />
var schoolAdmin;
(function (schoolAdmin) {
    schoolAdmin.roleTranslation = [];
    schoolAdmin.roleTranslation[LMComLib.CompRole.Department] = function () { return CSLocalize('a815ebcae6bb419db07ce3c645be19fd', 'Departments'); };
    schoolAdmin.roleTranslation[LMComLib.CompRole.Keys] = function () { return CSLocalize('4b5fde74d58f4e018ddc17ea7355b5a5', 'Keys'); };
    schoolAdmin.roleTranslation[LMComLib.CompRole.Products] = function () { return CSLocalize('ec533f48bf76461c9c517852cb53f41a', 'Products'); };
    schoolAdmin.roleTranslation[LMComLib.CompRole.Results] = function () { return CSLocalize('be895a5caef442c189deb82bf0497e8f', 'Results'); };
    schoolAdmin.roleTranslation[LMComLib.CompRole.Publisher] = function () { return CSLocalize('5302653a14e441b994c1044ad2e10b1d', 'Publisher'); };
    schoolAdmin.roleTranslation[LMComLib.CompRole.HumanEvalManager] = function () { return CSLocalize('f97ac29fced34a8d81c3760b1e7a9a4f', 'Evaluation Manager'); };
    var TopBarModel = (function () {
        function TopBarModel(model) {
            this.model = model;
            this.logoBig = returnTrue;
            this.isTitle = returnFalse;
            this.logoSmall = returnFalse;
            this.greenArrow = returnFalse;
            this.hasSupl = returnFalse;
            this.backToCourse = returnFalse;
            this.needsLogin = returnFalse;
            this.phoneMore = returnFalse;
            this.logoutAndProfile = returnFalse;
        }
        return TopBarModel;
    })();
    schoolAdmin.TopBarModel = TopBarModel;
    function returnFalse() { return false; }
    schoolAdmin.returnFalse = returnFalse;
    function returnTrue() { return true; }
    schoolAdmin.returnTrue = returnTrue;
    function getHash(type, companyId) { return oldPrefix + [schoolAdmin.appId, type, companyId.toString()].join(hashDelim); }
    schoolAdmin.getHash = getHash;
    schoolAdmin.adminTypeName = "schoolAdminModel".toLowerCase(); //System administrator, dovoluje pridat dalsi system administrators a dalsi firmy
    schoolAdmin.keyGenTypeName = "schoolKeyGenModel".toLowerCase();
    schoolAdmin.productsTypeName = "schoolProductsModel".toLowerCase();
    schoolAdmin.humanEvalTypeName = "schoolHumanEvalModel".toLowerCase();
    schoolAdmin.humanEvalExTypeName = "schoolHumanEvalExModel".toLowerCase();
    schoolAdmin.humanEvalManagerLangsTypeName = "schoolHumanEvalManagerLangsModel".toLowerCase();
    schoolAdmin.humanEvalManagerTypeName = "schoolHumanEvalManagerModel".toLowerCase();
    schoolAdmin.humanEvalManagerExTypeName = "schoolHumanEvalManagerExModel".toLowerCase();
    schoolAdmin.humanEvalManagerEvsTypeName = "schoolHumanEvalManagerEvsModel".toLowerCase();
    schoolAdmin.humanEvalManagerTypeName = "schoolHumanEvalManagerModel".toLowerCase();
    schoolAdmin.compAdminsTypeName = "schoolCompAdminsModel".toLowerCase();
    schoolAdmin.editDepartmentTypeName = "schoolDepartmentModel".toLowerCase();
    schoolAdmin.schoolUserResultsTypeName = "schoolUserResultsModel".toLowerCase();
    var CompModel = (function (_super) {
        __extends(CompModel, _super);
        function CompModel(type, urlParts) {
            var _this = this;
            _super.call(this, schools.appId, type, urlParts);
            this.CompanyId = CourseMeta.actCompanyId = parseInt(urlParts[0]);
            this.tb = new TopBarModel(this);
            if (!LMStatus.getCookie())
                return;
            var c = _.find(Login.myData.Companies, function (c) { return c.Id == _this.CompanyId; });
            LMStatus.Cookie.Company = c ? { Courses: c.Courses, DepSelected: c.DepSelected, Id: c.Id, RoleEx: c.RoleEx, Title: c.Title } : null;
            LMStatus.setCookie(LMStatus.Cookie);
            //this.url = new CompIdUrl(type, CompanyId);
        }
        CompModel.prototype.title = function () {
            var _this = this;
            return _.find(Login.myData.Companies, function (comp) { return comp.Id == _this.CompanyId; }).Title;
        };
        return CompModel;
    })(Pager.Page);
    schoolAdmin.CompModel = CompModel;
    var AdminModel = (function (_super) {
        __extends(AdminModel, _super);
        function AdminModel() {
            var _this = this;
            _super.call(this, schoolAdmin.appId, schoolAdmin.adminTypeName, null);
            // COMP ADMIN
            this.comp_Admin = ko.observableArray(); //of CompanyAdmins
            var self = this;
            //this.url = new Url(adminTypeName);
            this.tb = new TopBarModel(this);
            // ROLE ADMIN
            this.admin_EMail = validate.create(validate.types.email, function (prop) {
                prop.required = true;
                prop.customValidation = function (email) { return _.any(_this.role_Admin, function (it) { return it.data.EMail == email; }) ? CSLocalize('bb4c401401ad413fbbf55c4906fb87ed', 'User with this email already added') : null; };
            });
            this.admin_add = function () {
                if (!validate.isPropsValid([_this.admin_EMail]))
                    return;
                var nu = new UserItem(_this, { EMail: _this.admin_EMail.get(), LMComId: 0, Deleted: false });
                _this.role_Admin.push(nu);
                _this.admin_EMail(null);
                _this.refreshRoleAdminHtml();
            };
            this.admin_del = function (act) {
                if (act.data.LMComId == 0) {
                    self.role_Admin = _.without(self.role_Admin, act);
                    _this.refreshRoleAdminHtml();
                }
                else
                    act.Deleted(!act.Deleted());
            };
            // ROLE COMPS
            this.comps_Name = validate.create(validate.types.minlength, function (prop) {
                prop.min = 3;
                prop.customValidation = function (name) { return _.any(_this.role_Comps, function (it) { return it.data.Title.toLowerCase() == name.toLowerCase(); }) ? CSLocalize('98b0616339a54314a3b865f7d76b99d8', 'Company with this title already added') : null; };
            });
            this.comps_EMail = validate.create(validate.types.email, function (prop) { prop.required = true; });
            this.company_add = function () {
                if (!validate.isPropsValid([_this.comps_EMail, _this.comps_Name]))
                    return;
                var nu = new CompanyItem({
                    EMail: _this.comps_EMail.get(), Title: _this.comps_Name.get(), UserId: 0, Id: 0, Deleted: false,
                }, _this);
                _this.role_Comps.push(nu);
                _this.comps_EMail(null);
                _this.comps_Name(null);
                _this.refreshCompHtml();
            };
            this.company_del = function (act) {
                if (act.data.Id == 0) {
                    self.role_Comps = _.without(self.role_Comps, act);
                    _this.refreshCompHtml();
                }
                else
                    act.Deleted(true);
            };
            this.company_undel = function (act) { act.edited(false); act.Deleted(false); };
            this.company_edit = function (act) { act.email(act.data.EMail); act.name(act.data.Title); /*act.publisherId(act.data.PublisherId);*/ act.edited(true); };
            this.company_editCancel = function (act) { act.edited(false); };
            this.company_editOk = function (act) { if (!validate.isPropsValid([act.email, act.name /*, act.publisherId*/]))
                return; act.data.EMail = act.email(); act.data.Title = act.name(); /*act.data.PublisherId = act.publisherId();*/ act.edited(false); };
        }
        AdminModel.prototype.title = function () { return CSLocalize('b2b7224389dd4118816f50890aececa4', 'Administrator Console'); };
        AdminModel.prototype.refreshRoleAdminHtml = function () {
            Pager.renderTemplateEx('schoolAdminRolePlace', 'schoolAdminRole', this);
        };
        AdminModel.prototype.refreshCompHtml = function () {
            Pager.renderTemplateEx('schoolAdminCompPlace', 'schoolAdminCompPlace', this);
        };
        // UPDATE
        AdminModel.prototype.update = function (completed) {
            var _this = this;
            Pager.ajaxPost(Pager.pathType.restServices, Admin.CmdGetUsers_Type, AdminDataCmd_from_MyData(Login.myData), function (res) {
                _this.role_Admin = _.map(res.Users, function (act) { return new UserItem(_this, act); });
                _this.oldComps = JSON.parse(JSON.stringify(res.Comps)); //kopie
                _this.role_Comps = _.map(res.Comps, function (act) { return new CompanyItem(act, _this); });
                _this.comp_Admin(_.map(_.pairs(_.groupBy(res.CompUsers, "CompanyId")), function (nv) { return new CompanyAdmins(nv[0], nv[1]); }));
                setTimeout(function () {
                    _this.refreshRoleAdminHtml();
                    _this.refreshCompHtml();
                }, 1);
                completed();
            });
        };
        // OK x CANCEL
        AdminModel.prototype.ok = function () {
            Pager.ajaxPost(Pager.pathType.restServices, Admin.CmdSetUsers_Type, Admin.CmdSetUsers_Create(_.map(this.role_Admin, function (it) { return it.data; }), this.oldComps, _.map(this.role_Comps, function (it) { return it.data; }), _.map(_.flatten(_.map(this.comp_Admin(), function (it) { return it.Items(); }), true), function (it) { return it.data; })), function () {
                Login.adjustMyData(true, function () { return LMStatus.gotoReturnUrl(); });
            });
        };
        AdminModel.prototype.cancel = function () { LMStatus.gotoReturnUrl(); };
        return AdminModel;
    })(Pager.Page);
    schoolAdmin.AdminModel = AdminModel;
    // ROLE ADMIN
    var UserItem = (function () {
        function UserItem(owner, data) {
            this.owner = owner;
            this.data = data;
            this.Deleted = ko.observable(false);
            this.Deleted.subscribe(function (val) { return data.Deleted = val; });
        }
        return UserItem;
    })();
    // ROLE COMPS
    var CompanyItem = (function () {
        function CompanyItem(data, owner) {
            this.data = data;
            this.owner = owner;
            this.Deleted = ko.observable(false);
            this.edited = ko.observable(false);
            this.Deleted.subscribe(function (val) { return data.Deleted = val; });
            this.email = validate.create(validate.types.email, function (prop) { prop.required = true; prop(data.EMail); });
            this.name = validate.create(validate.types.minlength, function (prop) { prop.min = 3; prop(data.Title); });
        }
        return CompanyItem;
    })();
    // COMP ADMIN
    var CompanyAdmins = (function () {
        function CompanyAdmins(Id, items) {
            var _this = this;
            this.Id = Id;
            this.Items = ko.observableArray(); //of CompanyAdminItem
            var self = this;
            this.Title = _.find(Login.myData.Companies, function (comp) { return comp.Id == Id; }).Title;
            this.Items(_.map(items, function (it) { return new CompanyAdminItem(it); }));
            this.compAdmin_del = function (act) { if (act.data.UserId == 0)
                self.Items.remove(act);
            else
                act.Deleted(!act.Deleted()); };
            this.newEMail = validate.create(validate.types.email, function (prop) {
                prop.required = true;
                prop.customValidation = function (email) { return _.any(_this.Items(), function (it) { return it.data.EMail == email; }) ? CSLocalize('af6fb39c97c042fb8d06e0ca1645846d', 'User with this email already added') : null; };
            });
            this.newEMail_Add = function () {
                if (!validate.isPropsValid([_this.newEMail]))
                    return;
                var nu = new CompanyAdminItem({
                    UserId: 0,
                    Deleted: false,
                    EMail: self.newEMail(),
                    CompanyId: Id,
                    Role: { Role: 0, HumanEvalatorInfos: null }
                });
                _this.Items.push(nu);
                _this.newEMail(null);
            };
        }
        return CompanyAdmins;
    })();
    var CompanyAdminItem = (function () {
        function CompanyAdminItem(data) {
            this.data = data;
            this.Deleted = ko.observable(false);
            this.Deleted.subscribe(function (val) { return data.Deleted = val; });
            this.options = [new CompanyAdminOption(this.data, LMComLib.CompRole.Keys), new CompanyAdminOption(this.data, LMComLib.CompRole.Products)];
        }
        return CompanyAdminItem;
    })();
    var CompanyAdminOption = (function () {
        function CompanyAdminOption(data, role) {
            this.data = data;
            this.checked = ko.observable(false);
            this.checked((data.Role.Role & role) != 0);
            this.checked.subscribe(function (r) { return data.Role.Role = r ? data.Role.Role | role : data.Role.Role & ~role; });
            this.title = LowUtils.EnumToString(LMComLib.CompRole, role);
        }
        return CompanyAdminOption;
    })();
    //export class Url extends Pager.Url {
    //  constructor(type: string) { super(appId, type); }
    //  finish() { }
    //  static fromString(hash: string): Pager.Url {
    //    var parts = hash.split("@");
    //    return parts.length == 1 ? new Url(hash) : new CompIdUrl(parts[0], parseInt(parts[1]));
    //  }
    //  //toString(): string { return super.toString(appId, [this.locator == adminTypeName ? "" : this.locator]); }
    //}
    //export class CompIdUrl extends Pager.Url {
    //  constructor(type: string, public CompanyId: number) { super(appId, type, CompanyId.toString()); }
    //  finish() { this.CompanyId = parseInt(this.url); }
    //}
    //Login.MyData jsou dalsi data o uzivateli mimo Cookie. Nacitaji se v LMStatus.adjustCookie => Login.Model. Obsahuji globalni a firemni Role uzivatele. 
    function AdminDataCmd_from_MyData(myData) {
        return Admin.CmdGetUsers_Create((myData.Roles & Login.Role.Admin) != 0, (myData.Roles & Login.Role.Comps) != 0, _.map(_.filter(myData.Companies, function (c) { return (c.RoleEx.Role & LMComLib.CompRole.Admin) != 0; }), function (c) { return c.Id; }));
    }
    schoolAdmin.AdminDataCmd_from_MyData = AdminDataCmd_from_MyData;
    //Pager.registerAppLocator(adminTypeName, (url: Url, completed: (pg: Pager.Page) => void) => completed(new AdminModel()));
    //Pager.registerAppLocator(appId, adminTypeName, (urlParts, completed) => completed(new AdminModel()));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.adminTypeName, schoolAdmin.appId, schoolAdmin.adminTypeName, 0, function (urlParts) { return new AdminModel(); }); });
})(schoolAdmin || (schoolAdmin = {}));
/// <reference path="../JsLib/jsd/jquery.d.ts" />
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/jsd/underscore.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/GenLMComLib.ts" />
/// <reference path="../JsLib/ea/EAExtension.ts" />
/// <reference path="GenAdmin.ts" />
/// <reference path="../JsLib/js/Validate.ts" />
/// <reference path="../JsLib/js/Keys.ts" />
/// <reference path="../login/GenLogin.ts" />
/// <reference path="../login/Model.ts" />
/// <reference path="../schools/products.ts" /> 
/// <reference path="admin.ts" />
var schoolAdmin;
(function (schoolAdmin) {
    var KeyGenModel = (function (_super) {
        __extends(KeyGenModel, _super);
        function KeyGenModel(urlParts) {
            var _this = this;
            _super.call(this, schoolAdmin.keyGenTypeName, urlParts);
            this.products = [];
            this.selProd = ko.observable();
            this.button = Pager.ButtonType.cancel;
            this.genOK = ko.observable(false);
            this.num = validate.create(validate.types.rangeMin, function (prop) { prop.min = 1; });
            this.selProd.subscribe(function () { _this.num(""); _this.genOK(false); });
            this.num.subscribe(function () { _this.genOK(false); });
        }
        // UPDATE
        KeyGenModel.prototype.update = function (completed) {
            var _this = this;
            Pager.ajaxGet(Pager.pathType.restServices, Admin.CmdGetProducts_Type, Admin.CmdGetProducts_Create(this.CompanyId, true), function (allRes) {
                var res = [];
                _.each(allRes, function (pr) {
                    var prod = CourseMeta.lib.findProduct(pr.ProductId);
                    if (!prod)
                        return;
                    res.push(pr);
                    pr['title'] = CourseMeta.lib.keyTitle(prod, pr.Days);
                });
                for (var i = 0; i < res.length; i += 2) {
                    var l = res[i], r = res[i + 1];
                    _this.products.push([
                        Utils.createLayoutCell(6, "TProdCard", l),
                        Utils.createLayoutCell(6, "TProdCard", r ? r : null)
                    ]);
                }
                completed();
            });
        };
        KeyGenModel.prototype.generate = function () {
            var _this = this;
            if (!validate.isPropsValid([this.num]))
                return;
            var num = this.num.get();
            var licId = parseInt(this.selProd()); //Admin.Product.Id
            //zjisti product title
            var prod = null;
            _.find(this.products, function (row) { return _.find(row, function (cell) {
                prod = (cell.data);
                if (prod.Id == licId)
                    return true;
            }) != null; });
            var title = prod['title']; //(<any>prod).my.title + " / days: " + prod.Days.toString();
            Pager.ajaxGet(Pager.pathType.restServices, Admin.CmdAlocKeys_Type, Admin.CmdAlocKeys_Create(licId, num), function (first) {
                var keyList = [];
                for (var i = 0; i < num; i++) {
                    var k = { licId: licId, counter: first + i };
                    keyList.push(keys.toString(k));
                }
                var email = {
                    To: LMStatus.Cookie.EMail,
                    Cc: null,
                    Subject: CSLocalize('c270a7643d5b4fba8569342961ee108c', 'License keys'),
                    emailId: "TAdminEmailKeys",
                    productName: title,
                    isForgotPassword: false,
                    From: null,
                    Html: null,
                    isAtt: true,
                    attFile: "keys.txt",
                    attContent: keyList.join("\r\n"),
                    attContentType: "text/plain",
                };
                EMailer.sendEMail(email, function () { return _this.genOK(true); }, function (errId, errMsg) { return alert(errMsg); });
            });
        };
        KeyGenModel.prototype.cancel = function () { LMStatus.gotoReturnUrl(); };
        KeyGenModel.prototype.ok = function () { LMStatus.gotoReturnUrl(); };
        KeyGenModel.prototype.lineTxt = function (prod) {
            return CourseMeta.lib.productLineTxt(prod.ProductId).toLowerCase(); //??? bylo prod.Id ???
        };
        return KeyGenModel;
    })(schoolAdmin.CompModel);
    schoolAdmin.KeyGenModel = KeyGenModel;
    //Pager.registerAppLocator(appId, keyGenTypeName, (urlParts, completed) => completed(new KeyGenModel(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.keyGenTypeName, schoolAdmin.appId, schoolAdmin.keyGenTypeName, 1, function (urlParts) { return new KeyGenModel(urlParts); }); });
})(schoolAdmin || (schoolAdmin = {}));
var schoolAdmin;
(function (schoolAdmin) {
    var Departments = (function (_super) {
        __extends(Departments, _super);
        function Departments(urlParts) {
            _super.call(this, schoolAdmin.editDepartmentTypeName, urlParts);
            this.th = ko.observable('Dummy');
            this.listModels = [
                { model: null, template: ko.observable('Dummy'), id: 'study_periods', title: CSLocalize('5c160f5326584d0e9edcf9e293e76f32', 'Study Periods') },
                { model: null, template: ko.observable('Dummy'), id: 'time intervals', title: CSLocalize('84566284da7f4cdab2d27e86bc5e58a8', 'Time Intervals') },
                { model: null, template: ko.observable('Dummy'), id: 'score_ntervals', title: CSLocalize('4166679903f548f88f67ef4f7fa4eb0c', 'Score Intervals') }
            ];
            var self = this;
        }
        Departments.prototype.update = function (completed) {
            var _this = this;
            Pager.ajaxGet(Pager.pathType.restServices, Admin.CmdGetDepartment_Type, Admin.CmdGetDepartment_Create(this.CompanyId), function (res) {
                var isNew = res.Departments == null;
                _this.treeModel = new TreeView.Model(isNew ? { Id: 0, Title: _this.title(), Items: null, isNew: true } : res.Departments, isNew, function (nd) { return _.any(res.UsedIds, function (id) { return id == nd.Id; }); }, { withCheckbox: false, editable: true, onLinkClick: null });
                if (res.IntervalsConfig == null)
                    res.IntervalsConfig = { Periods: { Items: null }, Secs: { Items: null }, Scores: { Items: null } };
                _this.th('depTreeTemplate');
                new listModel(res.IntervalsConfig.Periods.Items, _this.listModels[0], new periodDr());
                new listModel(res.IntervalsConfig.Secs.Items, _this.listModels[1], new secDr());
                new listModel(res.IntervalsConfig.Scores.Items, _this.listModels[2], new scoreDr());
                _.each(_this.listModels, function (m) { return m.template('depListTemplate'); });
                completed();
            });
        };
        Departments.prototype.ok = function () {
            var tree = this.treeModel.getResult();
            var intervals = { Periods: this.listModels[0].model.dataFromModel(), Secs: this.listModels[1].model.dataFromModel(), Scores: this.listModels[2].model.dataFromModel() };
            Pager.ajaxPost(Pager.pathType.restServices, Admin.CmdSetDepartment_Type, Admin.CmdSetDepartment_Create(this.CompanyId, tree, intervals));
            LMStatus.gotoReturnUrl();
        };
        Departments.prototype.cancel = function () { LMStatus.gotoReturnUrl(); };
        return Departments;
    })(schoolAdmin.CompModel);
    schoolAdmin.Departments = Departments;
    var listModel = (function () {
        function listModel(data, meta, driver) {
            var _this = this;
            this.meta = meta;
            this.driver = driver;
            this.newItem = ko.observable();
            var cnt = 0;
            this.items = ko.observableArray(_.map(data, function (d) { return new listItem(_this, d, _this, cnt++); }));
            meta.model = this;
        }
        listModel.prototype.dataFromModel = function () { var cnt = 0; return { Items: _.map(this.items(), function (li) { return { IntervalId: cnt++, From: li.value.valueNum(), Title: li.title.title() }; }) }; };
        listModel.prototype.valueIsOK = function (s, actItem) {
            var res = { isOK: false, val: this.driver.toNumber(s) };
            res.isOK = res.val != cError;
            if (!res.isOK)
                return res;
            res.isOK = !_.find(this.items(), function (it) { return it != actItem && (it.value).valueNum() == res.val; });
            return res;
        };
        listModel.prototype.sort = function () {
            if (this.driver.isDesc())
                this.items.sort(function (a, b) { return b.value.valueNum() - a.value.valueNum(); });
            else
                this.items.sort(function (a, b) { return a.value.valueNum() - b.value.valueNum(); }); //reorder
        };
        listModel.prototype.onEnterEscClick = function (data, par) {
            var self = data.model;
            try {
                if (par.keyCode !== 27) {
                    var res = self.valueIsOK(self.newItem(), null);
                    if (!res.isOK)
                        return;
                    self.items.push(new listItem(self, { From: res.val, Title: null }, self, self.items.length));
                    self.sort();
                }
            }
            finally {
                self.newItem('');
                self.newItem.valueHasMutated();
            }
        };
        return listModel;
    })();
    schoolAdmin.listModel = listModel;
    var listItem = (function () {
        function listItem(owner, data, listModel, id) {
            this.owner = owner;
            this.data = data;
            this.listModel = listModel;
            this.id = id;
            var self = this;
            this.value = new listCellValue(this, true, this.data.From);
            this.title = new listCellTitle(this, false, this.data.Title);
            this.descr = ko.computed({
                read: function () {
                    var items = self.owner.items();
                    var idx = items.indexOf(self);
                    return self.owner.driver.customDescr(items, idx);
                },
                deferEvaluation: true,
            });
        }
        listItem.prototype.doDelete = function () {
            if (this.owner.items().length <= 1)
                return;
            this.descr.dispose();
            this.owner.items.remove(this);
        };
        return listItem;
    })();
    schoolAdmin.listItem = listItem;
    var listCell = (function () {
        function listCell(listItem, isValue) {
            this.listItem = listItem;
            this.isValue = isValue;
            this.editing = ko.observable(false);
            this.id = listItem.listModel.meta.id + '_' + (isValue ? 'val' : 'title') + '_' + listItem.id;
        }
        listCell.prototype.doEdit = function () { this.editing(true); };
        listCell.prototype.onEnterEscape = function (data, ev) {
            if (ev.keyCode === 27)
                $(ev.target).val(data.title()); /*undo*/
            data.editing(false);
        };
        return listCell;
    })();
    schoolAdmin.listCell = listCell;
    //http://www.jefclaes.be/2013/05/validating-composite-models-with.html 
    //https://github.com/Knockout-Contrib/Knockout-Validation/wiki
    var listCellValue = (function (_super) {
        __extends(listCellValue, _super);
        function listCellValue(list, isLeft, valueNum) {
            _super.call(this, list, isLeft);
            this.valueNum = ko.observable();
            var self = this;
            self.valueNum(valueNum);
            var model = self.listItem.owner;
            this.title = ko.computed({
                read: function () { return model.driver.toString(self.valueNum()); },
                write: function (s) {
                    var res = model.valueIsOK(s, self.listItem);
                    if (!res.isOK)
                        self.title.notifySubscribers(model.driver.toString(self.valueNum())); //error => undo
                    else {
                        self.valueNum(res.val);
                        model.sort();
                    }
                },
            });
        }
        return listCellValue;
    })(listCell);
    schoolAdmin.listCellValue = listCellValue;
    var listCellTitle = (function (_super) {
        __extends(listCellTitle, _super);
        function listCellTitle(list, isLeft, value) {
            _super.call(this, list, isLeft);
            this.title = ko.observable('');
            this.title(value ? value : '');
        }
        return listCellTitle;
    })(listCell);
    schoolAdmin.listCellTitle = listCellTitle;
    var cError = -1000;
    var periodDr = (function () {
        function periodDr() {
        }
        periodDr.prototype.toNumber = function (s) {
            try {
                var ny = s.split('-');
                if (ny.length != 2)
                    throw 'e';
                return checkInterval(ny[0], 1, 12) + (checkInterval(ny[1], 2013, 2050) - 2000) * 100;
            }
            catch (e) {
                return cError;
            }
        };
        periodDr.prototype.toString = function (s) {
            var m = Utils.modulo(s, 100);
            return m.z.toString() + '-' + (m.m + 2000).toString();
        };
        periodDr.prototype.isDesc = function () { return false; };
        periodDr.prototype.customDescr = function (items, idx) {
            var dr = this;
            var act = Utils.modulo(items[idx].value.valueNum(), 100);
            var actStr = Globalize.format(new Date(act.m + 2000, act.z - 1, 1), 'Y', Trados.actLangNetCode);
            if (idx == items.length - 1)
                return actStr + ' -';
            var next = Utils.modulo(items[idx + 1].value.valueNum(), 100);
            next.z -= 1;
            if (next.z == 0) {
                next.m -= 1;
                next.z = 12;
            }
            if (act.z == next.z && act.m == next.m)
                return actStr;
            var nextStr = Globalize.format(new Date(next.m + 2000, next.z - 1, 1), 'Y', Trados.actLangNetCode);
            if (next.m == act.m && next.z == 12 && act.z == 1)
                return (next.m + 2000).toString();
            if (next.m == act.m)
                return Globalize.culture(Trados.actLangNetCode).calendars.standard.months.names[act.z - 1] + ' - ' + nextStr;
            return actStr + ' - ' + nextStr;
        };
        return periodDr;
    })();
    schoolAdmin.periodDr = periodDr;
    function checkInterval(val, min, max) {
        var v = parseInt(val.trim());
        if (isNaN(v) || v > max || v < min)
            throw 'err';
        return v;
    }
    var secDr = (function () {
        function secDr() {
        }
        secDr.prototype.toNumber = function (s) {
            try {
                var parts = s.split(/[\.\:]/);
                var res = 0;
                var len = parts.length;
                if (len > 4 || len < 3)
                    throw 'e';
                if (len == 4)
                    res += checkInterval(parts[len - 4], 0, 100) * 86400;
                res += checkInterval(parts[len - 3], 0, 23) * 3600;
                res += checkInterval(parts[len - 2], 0, 59) * 60;
                res += checkInterval(parts[len - 1], 0, 59);
                return res;
            }
            catch (e) {
                return cError;
            }
        };
        secDr.prototype.toString = function (s) {
            var res = "";
            var m = Utils.modulo(s, 86400);
            s = m.z;
            if (m.m > 0)
                res += m.m.toString() + ".";
            m = Utils.modulo(s, 3600);
            s = m.z;
            res += (m.m > 9 ? m.m.toString() : '0' + m.m.toString()) + ':';
            m = Utils.modulo(s, 60);
            s = m.z;
            res += (m.m > 9 ? m.m.toString() : '0' + m.m.toString()) + ':';
            res += s > 9 ? s.toString() : '0' + s.toString();
            return res;
        };
        secDr.prototype.isDesc = function () { return true; };
        secDr.prototype.customDescr = function (items, idx) {
            var dr = this;
            if (idx == 0)
                return dr.toString(items[idx].value.valueNum()) + ' -';
            return dr.toString(items[idx].value.valueNum()) + ' - ' + dr.toString(items[idx - 1].value.valueNum());
        };
        return secDr;
    })();
    schoolAdmin.secDr = secDr;
    var scoreDr = (function () {
        function scoreDr() {
        }
        scoreDr.prototype.toNumber = function (s) {
            try {
                return checkInterval(s, 0, 100) - 1;
            }
            catch (e) {
                return cError;
            }
        };
        scoreDr.prototype.toString = function (s) { return (s + 1).toString(); };
        scoreDr.prototype.isDesc = function () { return true; };
        scoreDr.prototype.customDescr = function (items, idx) {
            var dr = this;
            var max = idx == 0 ? 100 : items[idx - 1].value.valueNum();
            var min = items[idx].value.valueNum() + 1;
            if (max == min)
                return min.toString() + '%';
            return min.toString() + ' - ' + max.toString() + '%';
        };
        return scoreDr;
    })();
    schoolAdmin.scoreDr = scoreDr;
    //Pager.registerAppLocator(appId, editDepartmentTypeName, (urlParts, completed) => completed(new Departments(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.editDepartmentTypeName, schoolAdmin.appId, schoolAdmin.editDepartmentTypeName, 1, function (urlParts) { return new Departments(urlParts); }); });
})(schoolAdmin || (schoolAdmin = {}));
var schoolAdmin;
(function (schoolAdmin) {
    //*************************************************************
    //  home stranka hodnotitele - vyber testu k evaluaci
    //*************************************************************
    var HumanEval = (function (_super) {
        __extends(HumanEval, _super);
        function HumanEval(urlParts) {
            _super.call(this, schoolAdmin.humanEvalTypeName, urlParts);
        }
        // UPDATE
        HumanEval.prototype.update = function (completed) {
            var _this = this;
            Pager.ajaxGet(Pager.pathType.restServices, Login.CmdHumanEvalGet_Type, Login.CmdHumanEvalGet_Create(LMStatus.Cookie.id, this.CompanyId), function (res) {
                _this.data = res;
                _this.items = _.sortBy(_.map(res.todo, function (td) { return new HumanEvalCrs(td, _this); }), function (it) { return it.assigned; });
                completed();
            });
        };
        HumanEval.prototype.close = function () {
            location.hash = schools.createHomeUrlStd();
        };
        return HumanEval;
    })(schoolAdmin.CompModel);
    schoolAdmin.HumanEval = HumanEval;
    var HumanEvalCrs = (function () {
        function HumanEvalCrs(data, owner) {
            this.data = data;
            this.owner = owner;
            this.title = CourseMeta.lib.findProduct(data.productId.split('|')[0]).title;
            this.assigned = Globalize.format(Utils.numToDate(data.assigned), 'd');
        }
        HumanEvalCrs.prototype.click = function () {
            location.hash = schoolAdmin.getHash(schoolAdmin.humanEvalExTypeName, this.owner.CompanyId) + hashDelim +
                this.owner.data.companyUserId.toString() + hashDelim +
                this.data.courseUserId.toString() + hashDelim +
                encodeUrlHash(this.data.productId);
        };
        return HumanEvalCrs;
    })();
    schoolAdmin.HumanEvalCrs = HumanEvalCrs;
    //*************************************************************
    //  cviceni jednoho testu k evaluaci
    //*************************************************************
    var HumanEvalEx = (function (_super) {
        __extends(HumanEvalEx, _super);
        function HumanEvalEx(urlParts) {
            _super.call(this, schoolAdmin.humanEvalExTypeName, urlParts);
            this.greenTitle = ko.observable(CSLocalize('be62382f71e84e96a1837a8a5c565f66', 'Next'));
            this.companyUserId = parseInt(urlParts[1]);
            this.courseUserId = parseInt(urlParts[2]);
            this.productId = decodeUrlHash(urlParts[3]);
            this.productTitle = CourseMeta.lib.findProduct(this.productId.split('|')[0]).title;
        }
        HumanEvalEx.prototype.update = function (completed) {
            var _this = this;
            if (this.items)
                this.initEx(completed);
            else
                this.init(function () { return _this.initEx(completed); });
        };
        // UPDATE
        HumanEvalEx.prototype.init = function (completed) {
            var _this = this;
            Pager.ajaxGet(Pager.pathType.restServices, Login.CmdHumanEvalTest_Type, Login.CmdHumanEvalTest_Create(this.companyUserId, this.courseUserId), function (res) {
                _this.testUser_lmcomId = res.testUser_lmcomId;
                CourseMeta.lib.adjustProduct(_this.productId, null, function (justLoaded) {
                    _this.items = [];
                    _.each(res.urls, function (r) {
                        var ex = (CourseMeta.actProduct.getNode(r)); //if (ex.s == 0 || (ex.flag & CourseModel.CourseDataFlag.needsEval) == 0) return;
                        _this.items.push(new humanEx(ex));
                    });
                    _this.actIdx = 0;
                    completed();
                }, _this.testUser_lmcomId);
            });
        };
        HumanEvalEx.prototype.initEx = function (completed) {
            if (this.items.length == 0) {
                this.greenTitle(CSLocalize('8817520256884045b0e94bcb005f02d0', 'Finish'));
                completed();
                return;
            }
            this.greenTitle(this.isFinished() ? CSLocalize('9c834aec8bd94de284855521356f2fbd', 'Finish') : CSLocalize('232eaf4801724f4e9dc69ce12091c26d', 'Next'));
            var actEx = this.items[this.actIdx].ex;
            CourseMeta.lib.adjustEx(actEx, function () {
                actEx.page.humanEvalMode = true;
                CourseMeta.lib.displayEx(actEx, null, null);
            }, this.testUser_lmcomId);
        };
        HumanEvalEx.prototype.finishEx = function (completed) {
            var _this = this;
            if (this.items.length == 0) {
                completed(false);
                return;
            }
            var actEx = this.items[this.actIdx];
            if (Course.humanEvalControlImpl.useEvalForms(actEx.ex) != true) {
                completed(false);
                return;
            } //validator error => exit
            Pager.blockGui(true);
            actEx.done(true);
            //donut save Skills, Testu a Test.result
            var skill = actEx.ex.parent;
            skill.userPending = true;
            var test = skill.parent;
            test.userPending = true;
            //procedura pro modifikaci test.result (zmeni flag a skore jak skills tak testu)
            var processTestResult = function () {
                test.adjustResult();
                CourseMeta.lib.saveProduct(function () { completed(true); Pager.blockGui(false); }, _this.testUser_lmcomId);
            };
            //volej processTestResult (ev. nejdrive nacti test.result z DB)
            if (!test.result)
                CourseMeta.lib.actPersistence().loadUserData(this.testUser_lmcomId, CourseMeta.actCompanyId, CourseMeta.actProduct.url, testMe.testImpl.resultKey, function (data) { test.result = data; processTestResult(); });
            else
                processTestResult();
        };
        HumanEvalEx.prototype.doExClick = function (idx) {
            var _this = this;
            if (this.items.length == 0)
                return;
            this.finishEx(function (ok) { if (!ok)
                return; _this.actIdx = idx; Pager.reloadPage(); });
        };
        HumanEvalEx.prototype.nextClick = function () {
            var _this = this;
            if (this.isFinished()) {
                location.hash = schoolAdmin.getHash(schoolAdmin.humanEvalTypeName, this.CompanyId);
                return;
            }
            this.finishEx(function (ok) { if (!ok)
                return; _this.actIdx++; if (_this.actIdx >= _this.items.length)
                _this.actIdx = 0; Pager.reloadPage(); });
        };
        //close() {
        //  this.finishEx(() => location.hash = schoolAdmin.getHash(schoolAdmin.humanEvalTypeName, this.CompanyId));
        //}
        HumanEvalEx.prototype.isFinished = function () {
            return this.items.length == 0 || _.all(this.items, function (it) { return !Course.needsHumanEval(it.ex.flag); });
        };
        return HumanEvalEx;
    })(schoolAdmin.CompModel);
    schoolAdmin.HumanEvalEx = HumanEvalEx;
    var humanEx = (function () {
        function humanEx(ex) {
            this.ex = ex;
            this.done = ko.observable(false);
        } //this.needsEval((ex.flag & CourseModel.CourseDataFlag.needsEval) != 0); }
        return humanEx;
    })();
    schoolAdmin.humanEx = humanEx;
    //Pager.registerAppLocator(appId, humanEvalTypeName,(urlParts, completed) => completed(new HumanEval(urlParts)));
    //Pager.registerAppLocator(appId, humanEvalExTypeName,(urlParts, completed) => completed(new HumanEvalEx(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.humanEvalTypeName, schoolAdmin.appId, schoolAdmin.humanEvalTypeName, 1, function (urlParts) { return new HumanEval(urlParts); }); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.humanEvalExTypeName, schoolAdmin.appId, schoolAdmin.humanEvalExTypeName, 4, function (urlParts) { return new HumanEvalEx(urlParts); }); });
})(schoolAdmin || (schoolAdmin = {}));
var schoolAdmin;
(function (schoolAdmin) {
    //prechudce seznamu s Line
    var evaluatorLangLow = (function () {
        function evaluatorLangLow(lang) {
            this.lang = lang;
            this.title = locLangs[lang]();
            this.langTitle = LMComLib.LineIds[lang].toLowerCase();
        }
        return evaluatorLangLow;
    })();
    schoolAdmin.evaluatorLangLow = evaluatorLangLow;
    //*************************************************************
    //  home stranka Assign testu hodnotitelum
    //  obsahuje zeznam jazyku testu
    //*************************************************************
    var HumanEvalManagerLangs = (function (_super) {
        __extends(HumanEvalManagerLangs, _super);
        function HumanEvalManagerLangs(urlParts) {
            _super.call(this, schoolAdmin.humanEvalManagerLangsTypeName, urlParts);
        }
        // UPDATE
        HumanEvalManagerLangs.prototype.update = function (completed) {
            var _this = this;
            Pager.ajaxGet(Pager.pathType.restServices, Login.CmdHumanEvalManagerLangs_Type, Login.CmdHumanEvalManagerLangs_Create(LMStatus.Cookie.id, this.CompanyId), function (res) {
                _this.langs = _.map(res.lines, function (l) { return new evaluatorLangCount(l.line, l.count); });
                completed();
            });
        };
        HumanEvalManagerLangs.prototype.click = function (idx) {
            location.hash = schoolAdmin.getHash(schoolAdmin.humanEvalManagerTypeName, this.CompanyId) + hashDelim + this.langs[idx].lang.toString();
        };
        HumanEvalManagerLangs.prototype.close = function () {
            location.hash = schools.createHomeUrlStd();
        };
        return HumanEvalManagerLangs;
    })(schoolAdmin.CompModel);
    schoolAdmin.HumanEvalManagerLangs = HumanEvalManagerLangs;
    var evaluatorLangCount = (function (_super) {
        __extends(evaluatorLangCount, _super);
        function evaluatorLangCount(lang, count) {
            _super.call(this, lang);
            this.lang = lang;
            this.count = count;
        }
        return evaluatorLangCount;
    })(evaluatorLangLow);
    schoolAdmin.evaluatorLangCount = evaluatorLangCount;
    //*************************************************************
    //  Assign testu (vybraneho jazyka) hodnotitelum
    //*************************************************************
    var HumanEvalManager = (function (_super) {
        __extends(HumanEvalManager, _super);
        function HumanEvalManager(urlParts) {
            _super.call(this, schoolAdmin.humanEvalManagerTypeName, urlParts);
            this.oldRemoved = ko.observable(0);
            this.news = ko.observable(0);
            this.actLine = parseInt(urlParts[1]);
        }
        // UPDATE
        HumanEvalManager.prototype.update = function (completed) {
            var _this = this;
            Pager.ajaxGet(Pager.pathType.restServices, Login.CmdHumanEvalManagerGet_Type, Login.CmdHumanEvalManagerGet_Create(LMStatus.Cookie.id, this.actLine, this.CompanyId), function (allRes) {
                _this.data = allRes;
                //DEBUG
                //allRes.evaluators[0].toDo.pushArray([{ assigned: 1, courseUserId: 31, productId: '' }, { assigned: 1, courseUserId: 32, productId: '' }]);
                //allRes.evaluators.push({ email: 'xxx', name: '', companyUserId: 0, toDo: [] });
                //allRes.toEvaluate.pushArray([{ assigned: 1, courseUserId: 33, productId: '' }, { assigned: 1, courseUserId: 34, productId: '' }]);
                var idx = 0;
                _this.olds = 0;
                _this.all = 0;
                _this.evaluators = _.map(allRes.evaluators, function (ev) { _this.olds += ev.toDo.length; return new evaluatorImpl(_this, idx++, ev); });
                _this.all = _this.olds + allRes.toEvaluate.length;
                completed();
            });
        };
        HumanEvalManager.prototype.loaded = function () {
            this.form = $('#human-form');
            this.form.validate();
            _.each(this.evaluators, function (e) { return e.loaded(); });
            this.refreshNumbers();
        };
        HumanEvalManager.prototype.validate = function (act, val) {
            if (val.trim() == '')
                return null;
            var numVal = parseInt(val);
            //vsechny allForce (mimo act) jsou neprazdne => min = max = all
            if (_.all(this.evaluators, function (e) { return e == act || !_.isEmpty(e.allForce()); })) {
                return numVal == act.all() ? null : { min: act.all(), max: act.all() };
            }
            //spocti max. povolenou hodnotu
            var usedNews = 0; //pouzite not assigned (news)
            _.each(this.evaluators, function (e) {
                if (e == act || _.isEmpty(e.allForce()))
                    return;
                usedNews += parseInt(e.allForce()) - e.olds;
            });
            var res = { min: 0, max: this.data.toEvaluate.length - usedNews + act.toDo.length };
            return numVal >= res.min && numVal <= res.max ? null : res;
        };
        HumanEvalManager.prototype.refreshNumbers = function () {
            //allChange: hodnota news (kladny) nebo oldRemoved (zaporny)
            var allChange = 0;
            var autoAssign = [];
            _.each(this.evaluators, function (e) {
                if (_.isEmpty(e.allForce())) {
                    autoAssign.push(e);
                    return;
                }
                var allForce = parseInt(e.allForce());
                e.all(allForce);
                var change = allForce - e.olds;
                allChange += change;
                if (change > 0) {
                    e.news(change);
                    e.oldRemoved(0);
                }
                else {
                    e.news(0);
                    e.oldRemoved(-change);
                }
            });
            var toDo = this.all - this.olds - allChange;
            if (autoAssign.length != 0) {
                //rozdel zbyle studenty
                var delta = Math.round(toDo / autoAssign.length);
                _.each(autoAssign, function (e) {
                    var act = delta < toDo ? delta : toDo;
                    e.news(act);
                    e.oldRemoved(0);
                    toDo -= act;
                    e.all(act + e.olds);
                });
                if (toDo > 0) {
                    var rest = autoAssign[autoAssign.length - 1];
                    rest.news(rest.news() + toDo);
                }
            }
            //soucty
            var oldRemovedSum = 0, newsSum = 0;
            _.each(this.evaluators, function (e) { oldRemovedSum += e.oldRemoved(); newsSum += e.news(); });
            this.oldRemoved(oldRemovedSum);
            this.news(newsSum);
        };
        HumanEvalManager.prototype.ok = function () {
            var _this = this;
            //priprav si vysledek
            var res = _.map(this.evaluators, function (e) { var r = { companyUserId: e.data.companyUserId, courseUserIds: [], dsgn_impl: e, dsgn_done: false }; return r; });
            var toAsign = _.map(this.data.toEvaluate, function (e) { return e.courseUserId; });
            //1. pruchod: obohat toAsign o odstranene studenty (oldRemoved>0)
            _.each(res, function (r) {
                var remNum = r.dsgn_impl.oldRemoved();
                if (remNum <= 0)
                    return;
                var data = r.dsgn_impl.data; //old asigned
                toAsign.pushArray(_.map(data.toDo.slice(data.toDo.length - remNum), function (v) { return v.courseUserId; })); //remove end of old asigned
                r.courseUserIds = _.map(data.toDo.slice(0, data.toDo.length - remNum), function (v) { return v.courseUserId; }); //use start of old asigned
                if (r.dsgn_impl.news() > 0) {
                    debugger;
                    throw 'r.dsgn_impl.news() > 0';
                }
                r.dsgn_done = true;
            });
            //2. pruchod: rozdel nove a odstranene studenty, odstran dsgn props
            var firstIdx = 0;
            _.each(res, function (r) {
                var toAdd = r.dsgn_impl.news();
                if (!r.dsgn_done) {
                    r.courseUserIds.pushArray(_.map(r.dsgn_impl.data.toDo, function (a) { return a.courseUserId; })); //old
                    r.courseUserIds.pushArray(toAsign.slice(firstIdx, firstIdx + toAdd)); //new
                    firstIdx += toAdd;
                }
                delete r.dsgn_done;
                delete r.dsgn_impl;
            });
            Pager.ajaxGet(Pager.pathType.restServices, Login.CmdHumanEvalManagerSet_Type, Login.CmdHumanEvalManagerSet_Create(res), function () { return _this.cancel(); });
        };
        HumanEvalManager.prototype.cancel = function () { location.hash = schoolAdmin.getHash(schoolAdmin.humanEvalManagerLangsTypeName, this.CompanyId); };
        return HumanEvalManager;
    })(schoolAdmin.CompModel);
    schoolAdmin.HumanEvalManager = HumanEvalManager;
    //model pro jednoho evaluatora
    var evaluatorImpl = (function () {
        function evaluatorImpl(owner, index, data) {
            var _this = this;
            this.owner = owner;
            this.index = index;
            this.data = data;
            this.valid = true;
            this.oldRemoved = ko.observable(0); //removed stare (...removed)
            this.news = ko.observable(0); //nove (...new assigned)
            //INPUT v ...all
            this.allForce = ko.observable(null); //validovana hodnota, nastavena managerem
            this.all = ko.observable(0); //label v ...all. Pro neprazdny allForce se rovna allForce
            jQuery.extend(this, data);
            this.olds = data.toDo.length;
            this.allForce.subscribe(function (val) { return _this.owner.refreshNumbers(); });
            this.attemptAllForce = ko.computed({
                read: this.allForce,
                write: function (val) {
                    var validRes = _this.owner.validate(_this, val);
                    var vtor = _this.owner.form.validate();
                    _this.valid = validRes == null;
                    if (_this.valid) {
                        _this.allForce(val);
                        vtor.removeError(_this.input[0]);
                    }
                    else
                        vtor.addError({ element: _this.input[0], message: $.validator.messages.range(validRes.min.toString(), validRes.max.toString()) + ' ' + CSLocalize('495ccadce4d34bdc920bd1898aa0fed7', 'or let the field empty.') });
                },
                owner: this
            });
        }
        evaluatorImpl.prototype.loaded = function () {
            var _this = this;
            this.input = $('#new-input-' + this.index.toString());
            this.input.blur(function (ev) { if (!_this.valid)
                _this.input.focus(); });
        };
        return evaluatorImpl;
    })();
    schoolAdmin.evaluatorImpl = evaluatorImpl;
    //*************************************************************
    //  sprava evaluatoru - pridani, nastaveni lines, mazani
    //*************************************************************
    var HumanEvalManagerEvs = (function (_super) {
        __extends(HumanEvalManagerEvs, _super);
        function HumanEvalManagerEvs(urlParts) {
            _super.call(this, schoolAdmin.humanEvalManagerEvsTypeName, urlParts);
        }
        // UPDATE
        HumanEvalManagerEvs.prototype.update = function (completed) {
            var _this = this;
            Pager.ajaxGet(Pager.pathType.restServices, Login.CmdHumanEvalManagerEvsGet_Type, Login.CmdHumanEvalManagerEvsGet_Create(LMStatus.Cookie.id, this.CompanyId), function (res) {
                _this.evaluators = _.sortBy(_.map(res, function (it) { return new evaluator(it); }), function (e) { return e.data.email; });
                _this.modalDlg = new evaluatorModalDlg(_this);
                completed();
            });
        };
        HumanEvalManagerEvs.prototype.loaded = function () {
            this.modalDlg.loaded();
        };
        HumanEvalManagerEvs.prototype.edit = function (id) {
            this.modalDlg.show(id);
        };
        HumanEvalManagerEvs.prototype.del = function (id) {
            var _this = this;
            anim.alert().show(CSLocalize('4724072775e1467eb90aaaa4cd7a5068', 'Do you really want to remove this Evaluator from the system?'), function (ok) {
                if (!ok)
                    return;
                Pager.ajaxGet(Pager.pathType.restServices, Login.CmdHumanEvalManagerEvsSave_Type, Login.CmdHumanEvalManagerEvsSave_Create(-id, _this.CompanyId, null, null), function (res) { return Pager.reloadPage(); });
            });
        };
        HumanEvalManagerEvs.prototype.add = function () {
            this.modalDlg.show(0);
        };
        HumanEvalManagerEvs.prototype.close = function () {
            location.hash = schools.createHomeUrlStd();
        };
        HumanEvalManagerEvs.prototype.refresh = function (completed) {
        };
        HumanEvalManagerEvs.prototype.downloadReport = function () {
            Pager.ajax_download(Pager.path(Pager.pathType.restServices), Login.CmdReport_Create(schools.LMComUserId(), CourseMeta.actCompanyId, Login.CmdReportType.evaluators), Login.CmdReport_Type);
        };
        return HumanEvalManagerEvs;
    })(schoolAdmin.CompModel);
    schoolAdmin.HumanEvalManagerEvs = HumanEvalManagerEvs;
    //model pro jednoho evaluator
    var evaluator = (function () {
        function evaluator(data) {
            this.data = data;
            this.langs = _.map(data.evalInfos, function (l) { return new evaluatorLangLow(l.lang); });
        }
        return evaluator;
    })();
    schoolAdmin.evaluator = evaluator;
    jQuery.validator.addMethod("humanUnique", function (val, element, params) {
        var model = params.model;
        val = val.trim().toLowerCase();
        return _.all(model.owner.evaluators, function (e) { return e.data.email != val; });
    }, function (params, element) {
        return CSLocalize('44461a0351fc4224845dd09794b580f0', 'email address already exists');
    });
    var evaluatorModalDlg = (function () {
        function evaluatorModalDlg(owner) {
            this.owner = owner;
            this.email = ko.observable('');
            this.isEdit = ko.observable(false);
            this.langs = _.map(avalLangs, function (l) { return new evaluatorLang(l); });
        }
        evaluatorModalDlg.prototype.loaded = function () {
            this.myCtrl = $('#evaluator-modal-dlg');
            this.form = this.myCtrl.find('form');
            this.validator = this.form.validate({
                onsubmit: false,
                rules: {
                    'human-email-input': {
                        required: true,
                        email: true,
                        humanUnique: {
                            model: this
                        }
                    }
                }
            });
            this.emailCtrl = this.form.find('#human-email-input');
            this.langsCtrl = this.form.find('#human-langs');
            this.langsCtrl[0]['type'] = '';
        };
        evaluatorModalDlg.prototype.show = function (id, completed) {
            this.isEdit(id > 0);
            this.actEvaluator = id == 0 ? null : _.find(this.owner.evaluators, function (ev) { return ev.data.companyUserId == id; });
            this.email(this.actEvaluator ? this.actEvaluator.data.email : '');
            var actLangs = this.actEvaluator ? _.map(this.actEvaluator.langs, function (l) { return l.lang; }) : [];
            _.each(this.langs, function (l) { return l.checked(_.contains(actLangs, l.lang)); });
            this.validator.removeError(this.langsCtrl[0]);
            this.validator.removeError(this.emailCtrl[0]);
            this.myCtrl.modal('show');
        };
        evaluatorModalDlg.prototype.ok = function () {
            var _this = this;
            if (!this.actEvaluator && !this.form.valid())
                return;
            var par = Login.CmdHumanEvalManagerEvsSave_Create(0, this.owner.CompanyId, null, null);
            if (this.actEvaluator)
                par.companyUserId = this.actEvaluator.data.companyUserId;
            else
                par.email = this.email();
            if (!this.langsValid()) {
                this.validator.addError({ element: this.langsCtrl[0], message: CSLocalize('dea496b88f524c4ab10895368de79d0f', 'At least one language must be selected') });
                return;
            }
            this.validator.removeError(this.langsCtrl[0]);
            par.evalInfos = _.map(_.filter(this.langs, function (l) { return l.checked(); }), function (l) { return { lang: l.lang }; });
            Pager.ajaxGet(Pager.pathType.restServices, Login.CmdHumanEvalManagerEvsSave_Type, par, function (res) {
                if (!res) {
                    _this.validator.addError({ element: _this.emailCtrl[0], message: CSLocalize('be46325868c844ca8c6f1d433437ffd3', 'Person with this email address is not registered in the system') });
                    return;
                }
                _this.myCtrl.modal('hide');
                Pager.reloadPage();
            });
        };
        evaluatorModalDlg.prototype.langsValid = function () { return _.any(this.langs, function (l) { return l.checked(); }); };
        return evaluatorModalDlg;
    })();
    schoolAdmin.evaluatorModalDlg = evaluatorModalDlg;
    //jedna line jednoho evaluatora
    var evaluatorLang = (function (_super) {
        __extends(evaluatorLang, _super);
        function evaluatorLang() {
            _super.apply(this, arguments);
            this.checked = ko.observable(false);
        }
        return evaluatorLang;
    })(evaluatorLangLow);
    schoolAdmin.evaluatorLang = evaluatorLang;
    var avalLangs = [LMComLib.LineIds.English, LMComLib.LineIds.German, LMComLib.LineIds.Spanish, LMComLib.LineIds.French, LMComLib.LineIds.Italian, LMComLib.LineIds.Russian];
    var locLangs = {};
    locLangs[LMComLib.LineIds.English] = function () { return CSLocalize('469d05c7cef5487fb29048505902a1a8', 'English'); };
    locLangs[LMComLib.LineIds.German] = function () { return CSLocalize('94606ae1ef72415f848daeb779f0f259', 'German'); };
    locLangs[LMComLib.LineIds.Italian] = function () { return CSLocalize('66ea06373abb486dbb0dd8598b895dc6', 'Italian'); };
    locLangs[LMComLib.LineIds.Spanish] = function () { return CSLocalize('a82c4ec950354576ab605a5191ce8988', 'Spanish'); };
    locLangs[LMComLib.LineIds.French] = function () { return CSLocalize('d694058048d242459d329a9b19a15f66', 'French'); };
    locLangs[LMComLib.LineIds.Russian] = function () { return CSLocalize('ad2f4d121a3d4518a035ea7949473dc4', 'Russian'); };
    //*************************************************************
    //  TODO: rozsirena varianta assign formulare: vstupni data jsou v excelu, do formulare se provadi PASTE identifikaci testu
    //*************************************************************
    var HumanEvalManagerEx = (function (_super) {
        __extends(HumanEvalManagerEx, _super);
        function HumanEvalManagerEx(urlParts) {
            _super.call(this, schoolAdmin.humanEvalManagerExTypeName, urlParts);
        }
        // UPDATE
        HumanEvalManagerEx.prototype.update = function (completed) {
            completed();
        };
        return HumanEvalManagerEx;
    })(schoolAdmin.CompModel);
    schoolAdmin.HumanEvalManagerEx = HumanEvalManagerEx;
    //Pager.registerAppLocator(appId, humanEvalManagerLangsTypeName,(urlParts, completed) => completed(new HumanEvalManagerLangs(urlParts)));
    //Pager.registerAppLocator(appId, humanEvalManagerTypeName,(urlParts, completed) => completed(new HumanEvalManager(urlParts)));
    //Pager.registerAppLocator(appId, humanEvalManagerEvsTypeName,(urlParts, completed) => completed(new HumanEvalManagerEvs(urlParts)));
    //Pager.registerAppLocator(appId, humanEvalManagerExTypeName,(urlParts, completed) => completed(new HumanEvalManagerEx(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.humanEvalManagerLangsTypeName, schoolAdmin.appId, schoolAdmin.humanEvalManagerLangsTypeName, 1, function (urlParts) { return new HumanEvalManagerLangs(urlParts); }); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.humanEvalManagerTypeName, schoolAdmin.appId, schoolAdmin.humanEvalManagerTypeName, 2, function (urlParts) { return new HumanEvalManager(urlParts); }); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.humanEvalManagerEvsTypeName, schoolAdmin.appId, schoolAdmin.humanEvalManagerEvsTypeName, 1, function (urlParts) { return new HumanEvalManagerEvs(urlParts); }); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.humanEvalManagerExTypeName, schoolAdmin.appId, schoolAdmin.humanEvalManagerExTypeName, 1, function (urlParts) { return new HumanEvalManagerEx(urlParts); }); });
})(schoolAdmin || (schoolAdmin = {}));
var schoolAdmin;
(function (schoolAdmin) {
    var UserResults = (function (_super) {
        __extends(UserResults, _super);
        function UserResults(urlParts) {
            _super.call(this, schoolAdmin.schoolUserResultsTypeName, urlParts);
        }
        UserResults.prototype.update = function (completed) {
            completed();
        };
        UserResults.prototype.downloadTestReport = function () {
            Pager.ajax_download(Pager.path(Pager.pathType.restServices), Login.CmdReport_Create(schools.LMComUserId(), CourseMeta.actCompanyId, Login.CmdReportType.test), Login.CmdReport_Type);
        };
        return UserResults;
    })(schoolAdmin.CompModel);
    schoolAdmin.UserResults = UserResults;
    //Pager.registerAppLocator(appId, schoolUserResultsTypeName,(urlParts, completed) => completed(new UserResults(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolAdmin.schoolUserResultsTypeName, schoolAdmin.appId, schoolAdmin.schoolUserResultsTypeName, 1, function (urlParts) { return new UserResults(urlParts); }); });
})(schoolAdmin || (schoolAdmin = {}));
var doc;
(function (doc) {
    //var actMetaUrl: string;
    function init(completed) {
        if (doc.actMeta)
            completed();
        else
            CourseMeta.load('/author/doc', function (jml) {
                doc.actMeta = CourseMeta.jsonML_to_Tag(jml, CourseModel.meta);
                doc.actMeta.typeDir = {};
                _.each(doc.actMeta.types, function (t) { return doc.actMeta.typeDir[t.name.toLowerCase()] = t; });
                doc.actMeta.propDir = {};
                _.each(doc.actMeta.props, function (p) { return doc.actMeta.propDir[(p.ownerType + '.' + p.name).toLowerCase()] = p; });
                _.each(doc.actMeta.props, function (p) { Utils.extendObject(p, [docNamedImpl, propImpl]); p.types = []; }); //init props
                _.each(doc.actMeta.types, function (t) { Utils.extendObject(t, [docNamedImpl, typeImpl]); t.props = _.sortBy(_.map(t.myProps, function (p) { var prop = doc.actMeta.propDir[p.toLowerCase()]; prop.types.push(t); return prop; }), 'name'); });
                _.each(doc.actMeta.props, function (p) { return p.types = _.sortBy(p.types, 'name'); });
                completed();
            });
    }
    doc.init = init;
    //export function finishHtmlDOM() { if (needPrettyPrint) prettyPrint(); } var needPrettyPrint = false;
    var model = (function (_super) {
        __extends(model, _super);
        function model(isHtml, type, urlParts) {
            _super.call(this, doc.appId, type, urlParts);
            this.isHtml = isHtml;
            //this.metaUrl = '/author/doc'; //urlParts ? urlParts[0] : null;
            //if (_.isEmpty(this.metaUrl)) this.metaUrl = '/lm/examples/xref';
        }
        model.prototype.update = function (completed) {
            var _this = this;
            init(function () {
                _this.meta = doc.actMeta;
                _this.createModel(completed);
            });
            //if (actMetaUrl == this.metaUrl) { this.meta = actMeta; this.createModel(completed); setTimeout(() => prettyPrint(), 1); return; }
            //CourseMeta.load(this.metaUrl, (jml: Array<any>) => {
            //  if (_.isEmpty(jml)) { debugger; throw 'missing xref jml on ' + this.metaUrl; }
            //  this.meta = actMeta = CourseMeta.jsonML_to_Tag(jml, CourseModel.meta); actMetaUrl = this.metaUrl;
            //  //finish actMeta
            //  actMeta.typeDir = {}; _.each(actMeta.type_s, t => actMeta.typeDir[t.name.toLowerCase()] = <typeImpl>t);
            //  actMeta.propDir = <any>{}; _.each(actMeta.prop_s, p => actMeta.propDir[(p.ownerType + '.' + p.name).toLowerCase()] = <propImpl>p);
            //  _.each(actMeta.prop_s, p => { Utils.extendObject(p, [docNamedImpl, propImpl]); p.types = []; }); //init props
            //  _.each(actMeta.type_s, t => { Utils.extendObject(t, [docNamedImpl, typeImpl]); t.props = _.sortBy(_.map(t.myProps, p => { var prop = actMeta.propDir[p.toLowerCase()]; prop.types.push(t); return prop; }), 'name'); });
            //  _.each(actMeta.prop_s, p => p.types = _.sortBy(p.types, 'name'));
            //  //examples impl
            //  //_.each([actMeta.prop_s, actMeta.type_s, actMeta.enum_s], arr => _.each(arr, (impl: docNamedImpl) => {
            //  //  if (impl.example_s) _.each(impl.example_s, ex => Utils.extendObject(ex, [docNamedImpl, exampleImpl]));
            //  //}));
            //  //setTimeout(() => prettyPrint(), 1);
            //  this.createModel(completed);
            //});
        };
        model.prototype.createModel = function (completed) { completed(); };
        model.prototype.tags = function () {
            var _this = this;
            return _.filter(this.meta.types, function (t) { return (_this.isHtml ? t.isHtml : !t.isHtml) && !t.isIgn; });
        };
        model.prototype.props = function () {
            return _.sortBy(_.uniq(_.flatten(_.map(this.tags(), function (t) { return t.props; }), true)), 'name');
        };
        model.prototype.isPropsPage = function () { return this.type == propsType; };
        model.prototype.isTypesPage = function () { return this.type == typesType; };
        model.prototype.ishPropsPage = function () { return this.type == hpropsType; };
        model.prototype.ishTypesPage = function () { return this.type == htypesType; };
        model.prototype.isPropPage = function () { return this.type == propType; };
        model.prototype.isTypePage = function () { return this.type == typeType; };
        model.prototype.typesLink = function () { return getHash(typesType); };
        model.prototype.propsLink = function () { return getHash(propsType); };
        model.prototype.htypesLink = function () { return getHash(htypesType); };
        model.prototype.hpropsLink = function () { return getHash(hpropsType); };
        return model;
    })(Pager.Page);
    doc.model = model;
    //********** rejstriky
    var propsModel = (function (_super) {
        __extends(propsModel, _super);
        function propsModel(urlParts) {
            _super.call(this, false, propsType, urlParts);
        }
        propsModel.prototype.childs = function () { return this.props(); };
        return propsModel;
    })(model);
    doc.propsModel = propsModel;
    var typesModel = (function (_super) {
        __extends(typesModel, _super);
        function typesModel(urlParts) {
            _super.call(this, false, typesType, urlParts);
        }
        typesModel.prototype.childs = function () { return this.tags(); };
        return typesModel;
    })(model);
    doc.typesModel = typesModel;
    var hpropsModel = (function (_super) {
        __extends(hpropsModel, _super);
        function hpropsModel(urlParts) {
            _super.call(this, true, hpropsType, urlParts);
        }
        hpropsModel.prototype.childs = function () { return this.props(); };
        return hpropsModel;
    })(model);
    doc.hpropsModel = hpropsModel;
    var htypesModel = (function (_super) {
        __extends(htypesModel, _super);
        function htypesModel(urlParts) {
            _super.call(this, true, htypesType, urlParts);
        }
        htypesModel.prototype.childs = function () { return this.tags(); };
        return htypesModel;
    })(model);
    doc.htypesModel = htypesModel;
    //********** detaily
    var memberModel = (function (_super) {
        __extends(memberModel, _super);
        function memberModel(isProp, type, urlParts) {
            _super.call(this, undefined, type, urlParts);
            this.isProp = isProp;
            this.memberId = urlParts[0].toLowerCase();
            this.unCammelMemberId = Utils.fromCammelCase(urlParts[0]);
        }
        memberModel.prototype.createModel = function (completed) {
            var _this = this;
            if (this.actDocNamedImpl.xref) {
                completed();
                return;
            } //xref
            //doc
            CourseMeta.gui.init();
            var url = ('/lm/docExamples/' + this.unCammelMemberId).toLowerCase();
            CourseMeta.loadResponseScript('author.aspx?mode=compileEx&url=' + url, function (loaded) {
                if (!loaded) {
                    completed();
                    return;
                } //priklad nenalezen
                CourseMeta.load(url, function (pgJsonML) {
                    var pg = CourseMeta.extractEx(pgJsonML);
                    if (!ex) {
                        ex = new CourseMeta.exImpl();
                        ex.type = CourseMeta.runtimeType.ex;
                        ex.url = url;
                        CourseMeta.actNode = ex;
                        if (cfg.forceEval) {
                            ex.designForceEval = true;
                            ex.done = true;
                        }
                    }
                    _this.ex = ex;
                    ex.title = pg.title;
                    ex.url = pg.url;
                    ex.onSetPage(pg, null);
                    CourseMeta.lib.displayEx(ex, null, null);
                });
            });
            completed();
        };
        return memberModel;
    })(model);
    doc.memberModel = memberModel;
    var propModel = (function (_super) {
        __extends(propModel, _super);
        function propModel(urlParts) {
            _super.call(this, true, propType, urlParts);
            this.backUrl = oldPrefix + doc.appId + hashDelim + urlParts[1].replace(/~/g, hashDelim);
        }
        propModel.prototype.createModel = function (completed) {
            this.actDocNamedImpl = this.actImpl = doc.actMeta.propDir[this.memberId];
            _super.prototype.createModel.call(this, completed);
        };
        return propModel;
    })(memberModel);
    doc.propModel = propModel;
    var typeModel = (function (_super) {
        __extends(typeModel, _super);
        function typeModel(urlParts) {
            _super.call(this, false, typeType, urlParts);
        }
        typeModel.prototype.createModel = function (completed) {
            this.actDocNamedImpl = this.actImpl = doc.actMeta.typeDir[this.memberId];
            _super.prototype.createModel.call(this, completed);
        };
        return typeModel;
    })(memberModel);
    doc.typeModel = typeModel;
    //********** rozsireni type a prop interfaces
    //CourseModel.docNamed
    var docNamedImpl = (function (_super) {
        __extends(docNamedImpl, _super);
        function docNamedImpl() {
            _super.apply(this, arguments);
        }
        //styleSheet: string;
        docNamedImpl.prototype.xrefs = function () {
            if (!this._xrefs)
                this._xrefs = this.xref.split('|');
            return this._xrefs;
        };
        //example_s: Array<exampleImpl>;
        //class: string;
        //width: string;
        //style: string;
        docNamedImpl.prototype.actPage = function () { return (Pager.ActPage); };
        docNamedImpl.prototype.title = function () { return Utils.fromCammelCase(this.name); };
        return docNamedImpl;
    })(Course.tagImpl);
    doc.docNamedImpl = docNamedImpl;
    var ex = null;
    var typeImpl = (function (_super) {
        __extends(typeImpl, _super);
        function typeImpl() {
            _super.apply(this, arguments);
        }
        typeImpl.prototype.href = function () { return getHash(typeType, this.name); };
        typeImpl.prototype.codeTitle = function () { return '<' + Utils.fromCammelCase(this.name) + '>'; };
        typeImpl.prototype.childs = function () { return this.props; };
        return typeImpl;
    })(docNamedImpl);
    doc.typeImpl = typeImpl;
    var propImpl = (function (_super) {
        __extends(propImpl, _super);
        function propImpl() {
            _super.apply(this, arguments);
        }
        propImpl.prototype.href = function () { return getHash(propType, this.ownerType + '.' + this.name, this.actPage().type + (this.actPage().urlParts ? '~' + this.actPage().urlParts.join('~') : '')); };
        propImpl.prototype.codeTitle = function () { return Utils.fromCammelCase(this.name) + '=""'; };
        propImpl.prototype.childs = function () {
            var _this = this;
            return _.filter(this.types, function (t) { return (_this.actPage().isHtml ? t.isHtml : !t.isHtml) && !t.isIgn; });
        };
        return propImpl;
    })(docNamedImpl);
    doc.propImpl = propImpl;
    //export class exampleImpl extends docNamedImpl implements CourseModel.docExample {
    //  codeListing: string;
    //  header: CourseModel.tag;
    //  descr: CourseModel.tag;
    //  getCode(): string {
    //    //var c = this.code;
    //    //if (!c || !c.Items || c.Items.length != 1 || !_.isString(c.Items[0])) return '';
    //    //var res: string = <any>(c.Items[0]); res = res.replace(/\n/g, '#@!');
    //    //var div = $("<div>"); div.html(res); res = div.text(); res = res.replace(/#@\!/g, '\r\n');
    //    return this.codeListing;
    //  }
    //}
    var docExample = (function (_super) {
        __extends(docExample, _super);
        function docExample(staticData) {
            _super.call(this, staticData);
        }
        docExample.prototype.initProc = function (phase, getTypeOnly, completed) {
            switch (phase) {
                case Course.initPhase.beforeRender:
                    if (!getTypeOnly) {
                        needPrettyPrint = true;
                    }
                    return Course.initPhaseType.sync;
                case Course.initPhase.afterRender2:
                    if (!getTypeOnly) {
                        if (needPrettyPrint) {
                            //naformatovani XML
                            _.each($('.prettyprint'), function (el) { var $el = $(el); $el.text(beautify($el.text())); });
                            //obarveni XML
                            setTimeout(function () { return prettyPrint(); }, 1);
                        }
                        else
                            needPrettyPrint = false;
                    }
                    return Course.initPhaseType.sync;
            }
            return _super.prototype.initProc.call(this, phase, getTypeOnly, completed);
        };
        docExample.prototype.doCopy = function (self, mode) {
            var dt = (self);
            var xml = mode == 2 ? dt.codePostListing : dt.codeListing;
            var mts = xml.split(extractCode);
            var mt = _.find(mts, function (m) { return m.length > 1 && m.charAt(0) == '&'; });
            xml = $('<div/>').html(mt).text();
            if (mode == 0) {
                var title = dt.header.Items[0].Items[0];
                xml = '<html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.langmaster.com/new/author/coursemodelschema.xsd">\n<head>\n<title>' + title + '\n</title>\n</head>\n<body>' + xml + '</body>\n</html>';
            }
            xml = beautify(xml);
            anim.alert().lmcdocDlgShow(xml);
            //Utils.toClipboard(xml);
        };
        docExample.prototype.copyPage = function (self) { this.doCopy(self, 0); };
        docExample.prototype.copyFragment = function (self) { this.doCopy(self, 1); };
        docExample.prototype.copyExpanded = function (self) { this.doCopy(self, 2); };
        return docExample;
    })(Course.tagImpl);
    doc.docExample = docExample;
    var extractCode = /[<>]/;
    var needPrettyPrint = false;
    function beautify(xml) {
        var reg = /(>)(<)(\/*)/g;
        var wsexp = / *(.*) +\n/g;
        var contexp = /(<.+>)(.+\n)/g;
        xml = xml.replace(reg, '$1\n$2$3').replace(wsexp, '$1\n').replace(contexp, '$1\n$2');
        var formatted = [];
        var lines = xml.split('\n');
        var indent = 0;
        var lastType = 'other';
        // 4 types of tags - single, closing, opening, other (text, doctype, comment) - 4*4 = 16 transitions 
        var transitions = {
            'single->single': 0,
            'single->closing': -1,
            'single->opening': 0,
            'single->other': 0,
            'closing->single': 0,
            'closing->closing': -1,
            'closing->opening': 0,
            'closing->other': 0,
            'opening->single': 1,
            'opening->closing': 0,
            'opening->opening': 1,
            'opening->other': 1,
            'other->single': 0,
            'other->closing': -1,
            'other->opening': 0,
            'other->other': 0
        };
        for (var i = 0; i < lines.length; i++) {
            var ln = lines[i].trim();
            var single = Boolean(ln.match(/<.+\/>/)); // is this line a single tag? ex. <br />
            var closing = Boolean(ln.match(/<\/.+>/)); // is this a closing tag? ex. </a>
            var opening = Boolean(ln.match(/<[^!].*>/)); // is this even a tag (that's not <!something>)
            var type = single ? 'single' : closing ? 'closing' : opening ? 'opening' : 'other';
            var fromTo = lastType + '->' + type;
            lastType = type;
            indent += transitions[fromTo];
            for (var j = 0; j < indent; j++)
                formatted.push('  ');
            formatted.push(ln);
            formatted.push('\r\n');
        }
        return formatted.join('').trim();
    }
    ;
    //**************
    function getHash(type, url1, url2) {
        if (url1 === void 0) { url1 = null; }
        if (url2 === void 0) { url2 = null; }
        return oldPrefix + [doc.appId, type, url1, url2].join(hashDelim);
    }
    function Start() {
        CourseMeta.persist = persistMemory.persistCourse;
        Pager.initHash = function () { return cfg.hash ? cfg.hash : getHash(typesType); };
        boot.minInit();
        ViewBase.init();
        $('#splash').hide();
    }
    doc.Start = Start;
    var typesType = "doctypesModel".toLowerCase();
    var propsType = "docpropsModel".toLowerCase();
    var typeType = "doctypeModel".toLowerCase();
    var propType = "docpropModel".toLowerCase();
    var htypesType = "dochtypesModel".toLowerCase();
    var hpropsType = "dochpropsModel".toLowerCase();
    Pager.registerAppLocator(doc.appId, propsType, function (urlParts, completed) { return completed(new propsModel(urlParts)); });
    Pager.registerAppLocator(doc.appId, typesType, function (urlParts, completed) { return completed(new typesModel(urlParts)); });
    Pager.registerAppLocator(doc.appId, propType, function (urlParts, completed) { return completed(new propModel(urlParts)); });
    Pager.registerAppLocator(doc.appId, typeType, function (urlParts, completed) { return completed(new typeModel(urlParts)); });
    Pager.registerAppLocator(doc.appId, hpropsType, function (urlParts, completed) { return completed(new hpropsModel(urlParts)); });
    Pager.registerAppLocator(doc.appId, htypesType, function (urlParts, completed) { return completed(new htypesModel(urlParts)); });
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tdocExample, docExample);
})(doc || (doc = {}));
//prettyPrint()
var author;
(function (author) {
    function reflectionFromCode(tsCode) {
        var tree = TypeScript.Parser.parse('dummy.ts', TypeScript.SimpleText.fromString(tsCode), false /* is .d.ts? */, new TypeScript.ParseOptions(TypeScript.LanguageVersion.EcmaScript5, true /* allow ASI? */));
        return tree.sourceUnit().childAt(0);
    }
    author.reflectionFromCode = reflectionFromCode;
    function reflectionFromUrlToClipboard(relUrl) {
        $.ajax(relUrl /*napr. '../Courses/GenCourseModel.ts'*/, {
            type: 'GET',
            dataType: 'text',
            contentType: "text/plain; charset=UTF-8"
        }).done(function (programText) { return clipboardData.setData("Text", parseReflection(programText)); }).fail(function () { return; });
    }
    author.reflectionFromUrlToClipboard = reflectionFromUrlToClipboard;
    function parseReflection(tsCode, isDebug) {
        if (isDebug === void 0) { isDebug = true; }
        var res = { enums: [], types: [] };
        var typescriptParsed = JSON.parse(JSON.stringify(reflectionFromCode(tsCode)));
        _.each(typescriptParsed[0].moduleElements, function (el) {
            var obj;
            switch (el.kind) {
                case 'EnumDeclaration':
                    var name = el.identifier.value;
                    var comm = extractComment(el);
                    var enums = _.map(_.filter(el.enumElements, function (p) { return p.kind == 'EnumElement'; }), function (p) { return enumElement(p); });
                    res.enums.push(obj = { nm: name, enums: enums });
                    if (comm)
                        obj.comment = comm;
                    break;
                case 'InterfaceDeclaration':
                    var name = el.identifier.value;
                    var comm = extractComment(el);
                    var ancestor = el.heritageClauses.length == 1 && el.heritageClauses[0].extendsOrImplementsKeyword.value == 'extends' ? el.heritageClauses[0].typeNames[0].value : null;
                    var props = _.map(_.filter(el.body.typeMembers, function (p) { return p.kind == 'PropertySignature'; }), function (p) { return prop(p); });
                    res.types.push(obj = { nm: name });
                    if (comm)
                        obj.comment = comm;
                    if (ancestor)
                        obj.ancestor = ancestor;
                    if (props.length > 0)
                        obj.props = props;
                    break;
            }
        });
        return isDebug ? JSON.stringify(res, null, 2) : JSON.stringify(res);
    }
    author.parseReflection = parseReflection;
    function extractComment(el) {
        var modifier = _.find(el.modifiers, function (m) { return m.hasLeadingComment; });
        if (!modifier)
            return null;
        return extractCommentLow(modifier.leadingTrivia);
    }
    function extractCommentLow(leadingTrivia) {
        var leading = _.find(leadingTrivia, function (m) { return m.kind == 'MultiLineCommentTrivia'; });
        if (!leading)
            return null;
        return leading.text;
    }
    function extractAncestor(el) {
        return el.heritageClauses.length == 1 && el.heritageClauses[0].extendsOrImplementsKeyword.value == 'extends' ? el.heritageClauses[0].typeNames[0].value : null;
    }
    function prop(el) {
        var isArray = el.typeAnnotation.type.kind == 'GenericType';
        var comm = el.propertyName.hasLeadingComment ? extractCommentLow(el.propertyName.leadingTrivia) : null;
        var obj = isArray
            ? { nm: el.propertyName.value, isArray: true, tp: el.typeAnnotation.type.typeArgumentList.typeArguments[0].value }
            : { nm: el.propertyName.value, tp: el.typeAnnotation.type.value };
        if (comm)
            obj.comment = comm;
        return obj;
    }
    function enumElement(el) {
        var comm = el.propertyName.hasLeadingComment ? extractCommentLow(el.propertyName.leadingTrivia) : null;
        var obj = { nm: el.propertyName.value };
        if (comm)
            obj.comment = comm;
        return obj;
    }
})(author || (author = {}));
var vsNet;
(function (vsNet) {
    var exModelTypeName = "vsNetExModel".toLowerCase();
    var modModelTypeName = "vsNetModModel".toLowerCase();
    var ModModel = (function (_super) {
        __extends(ModModel, _super);
        function ModModel(urlParts) {
            _super.call(this, vsNet.appId, exModelTypeName, urlParts);
            this.url = urlParts[0];
        }
        return ModModel;
    })(Pager.Page);
    vsNet.ModModel = ModModel;
    var ExModel = (function (_super) {
        __extends(ExModel, _super);
        function ExModel(urlParts) {
            _super.call(this, vsNet.appId, exModelTypeName, urlParts);
            this.seeAlsoTemplateSmall = ko.observable("Dummy");
            this.seeAlsoTemplate = ko.observable("Dummy");
            this.exerciseEvaluated = ko.observable(false); //cviceni je vyhodnocenu
            this.score = ko.observable(null);
            this.instrBody = ko.observable(null);
            this.url = urlParts[0];
            ex = null;
            persistMemory.reset();
        }
        ExModel.prototype.update = function (completed) {
            var _this = this;
            var th = this;
            //CourseMeta.lib.adjustInstr(() => { //nacteni a lokalizace Schools\EAData\instructions.json
            CourseMeta.load(th.url, function (pgJsonML) {
                var pg = CourseMeta.extractEx(pgJsonML);
                Course.localize(pg, function (s) { return CourseMeta.localizeString('', s, null); });
                //pg.instrTitle = CourseMeta.localizeString('', pg.instrTitle,null);
                if (!ex) {
                    ex = new CourseMeta.exImpl();
                    ex.type = CourseMeta.runtimeType.ex;
                    ex.url = th.url;
                    CourseMeta.actNode = ex;
                    if (cfg.forceEval) {
                        ex.designForceEval = true;
                        ex.done = true;
                    }
                }
                _this.ex = ex;
                ex.title = pg.title;
                ex.url = pg.url;
                ex.onSetPage(pg, null);
                CourseMeta.lib.displayEx(ex, function (loadedEx) {
                    _this.cpv = new schoolCpv.model(schools.tExCpv, null);
                }, function (loadedEx) {
                    boot.minInit();
                    //napln instrukce
                    CourseMeta.instructions = {};
                    CourseMeta.loadFiles(_.map(th.ex.page.instrs, function (s) { return '..' + s + '.js'; }), function (instrs) {
                        for (var i = 0; i < instrs.length; i++)
                            CourseMeta.finishInstr(th.ex.page.instrs[i], JSON.parse(instrs[i]), {});
                    });
                    //pouzij instrukce
                    th.instrBody(_.map(th.ex.page.instrs, function (s) { var res = CourseMeta.instructions[s.toLowerCase()]; return res ? res : (_.isEmpty(s) ? "" : "Missing [" + s + "] instruction"); }).join());
                    th.refreshExerciseBar();
                });
                //completed();
            });
            //});
        };
        ExModel.prototype.htmlClearing = function () {
            if (CourseMeta.actExPageControl && CourseMeta.actExPageControl.sndPage)
                CourseMeta.actExPageControl.sndPage.htmlClearing();
        };
        ExModel.prototype.title = function () { return this.ex.title; };
        ExModel.prototype.iconId = function () { return 'edit'; };
        ExModel.prototype.resetClick = function () { this.ex.reset(); this.refreshExerciseBar(); };
        ExModel.prototype.evaluateClick = function () { this.ex.evaluate(); this.refreshExerciseBar(); };
        ExModel.prototype.refreshExerciseBar = function () {
            var th = this;
            if (th.ex.done) {
                th.exerciseEvaluated(true);
                th.score(th.ex.page.isPassivePage() /*|| !th.ex.ms*/ ? null : (th.ex.s ? th.ex.s.toString() : '0') + '/' + th.ex.ms.toString());
            }
            else {
                th.exerciseEvaluated(false);
            }
        };
        return ExModel;
    })(Pager.Page);
    vsNet.ExModel = ExModel;
    var ex = null;
    //Pager.registerAppLocator(appId, exModelTypeName, (urlParts, completed) => completed(new ExModel(urlParts)));
    //Pager.registerAppLocator(appId, modModelTypeName, (urlParts, completed) => completed(new ModModel(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, exModelTypeName, vsNet.appId, exModelTypeName, 1, function (urlParts) { return new ExModel(urlParts); }); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, modModelTypeName, vsNet.appId, modModelTypeName, 1, function (urlParts) { return new ModModel(urlParts); }); });
})(vsNet || (vsNet = {}));
var xref;
(function (xref) {
    function pathToClip(url) { Utils.toClipboard((cfg.basicPath == 'q:\\rew\\alpha\\' ? 'p:\\' : cfg.basicPath) + 'rew\\web4' + url.replace(/\//g, '\\') + '.xml'); return false; }
    xref.pathToClip = pathToClip;
    var sitemap;
    var sitemapDir = {};
    function init(completed) {
        if (sitemap)
            completed();
        else
            CourseMeta.load('/author/xrefSitemap', function (jml) {
                var finishSitemap = function (nd) { sitemapDir[nd.uniqId] = nd; _.each(nd.Items, function (n) { n.parent = nd; finishSitemap(n); }); };
                sitemap = CourseMeta.jsonML_to_Tag(jml, CourseMeta.meta);
                finishSitemap(sitemap);
                completed();
            });
    }
    (function (mainTabItem) {
        mainTabItem[mainTabItem["info"] = 0] = "info";
        mainTabItem[mainTabItem["types"] = 1] = "types";
        mainTabItem[mainTabItem["props"] = 2] = "props";
    })(xref.mainTabItem || (xref.mainTabItem = {}));
    var mainTabItem = xref.mainTabItem;
    var model = (function (_super) {
        __extends(model, _super);
        function model(modelType, urlParts) {
            _super.call(this, xref.appId, modelType, urlParts);
            this.refreshError = ko.observable();
            this.refreshText = ko.observable('Refresh');
            xref.root = this;
            if (!urlParts)
                urlParts = [];
            this.nodeId = urlParts[0] ? parseInt(urlParts[0]) : -1;
            this.mainTab = urlParts[1] ? parseInt(urlParts[1]) : mainTabItem.info;
            this.actType = urlParts[2];
            this.actProp = urlParts[3];
            this.propValueIdx = parseInt(urlParts[4]);
        }
        model.prototype.urlContext = function () { return LowUtils.getQueryParams('url'); };
        model.prototype.update = function (completed) {
            var _this = this;
            doc.init(function () { return init(function () {
                _this.sitemap = new sitemapModel(_this); //existuje vzdy
                switch (_this.mainTab) {
                    case mainTabItem.info:
                        completed();
                        return;
                    case mainTabItem.types:
                        _this.typeMap = new typeMapModel(_this); //dostupne types a (je-li zadan typ) jeho dostupne properties
                        _this.typeMap.update(function () {
                            if (_this.type == links) {
                                _this.links = new linksModel(_this); //show links pro typ, prop, propValue
                                _this.links.update(completed);
                            }
                            else if (_this.type == browsePropValues) {
                                _this.propValues = new propValuesModel(_this);
                                _this.propValues.update(completed);
                            }
                            else
                                completed();
                        });
                        return;
                    case mainTabItem.props:
                        _this.propMap = new propMapModel(_this);
                        _this.propMap.update(function () {
                            if (_this.type == links) {
                                _this.links = new linksModel(_this); //show links pro typ, prop, propValue
                                _this.links.update(completed);
                            }
                            else if (_this.type == browsePropValues) {
                                _this.propValues = new propValuesModel(_this);
                                _this.propValues.update(completed);
                            }
                            else
                                completed();
                        });
                        return;
                }
            }); });
        };
        model.prototype.nodeHash = function (nodeId) { return getHash(browse, nodeId, mainTabItem.info); };
        model.prototype.typeHash = function (type) { return getHash(links, this.nodeId, this.mainTab, type); };
        model.prototype.typePropHash = function (prop) { return getHash(links, this.nodeId, this.mainTab, this.actType, prop); };
        model.prototype.typePropValuesHash = function () { return getHash(browsePropValues, this.nodeId, this.mainTab, this.actType, this.actProp); };
        model.prototype.typePropValueHash = function (value) { return getHash(links, this.nodeId, this.mainTab, this.actType, this.actProp, parseInt(value)); };
        model.prototype.propHash = function (prop) { return getHash(links, this.nodeId, this.mainTab, null, prop); };
        model.prototype.propValuesHash = function () { return getHash(browsePropValues, this.nodeId, this.mainTab, null, this.actProp); };
        model.prototype.propValueHash = function (value) { return getHash(links, this.nodeId, this.mainTab, null, this.actProp, parseInt(value)); };
        model.prototype.mainTabHash = function (tab) { return getHash(browse, this.nodeId, tab); };
        //typeLinkHash(): string { return getHash(links, this.nodeId, this.showTypes, this.actType); }
        //propLinkHash(): string { return getHash(links, this.nodeId, this.showTypes, this.actType, this.actProp); }
        //propValueHash(): string { return getHash(browsePropValues, this.nodeId, this.showTypes, this.actType, this.actProp); }
        model.prototype.db_SitemapTabActive = function (tab) { return tab == this.mainTab ? "active" : ""; };
        model.prototype.db_PropTabActive = function (idx) {
            switch (idx) {
                case 0: return this.type == links ? 'active' : '';
                case 1: return (this.type == browse ? 'active' : '') + ' ' + (!_.isEmpty(this.actProp) && (!this.propValueIdx || this.propValueIdx == 0) ? 'show' : 'hide');
            }
        };
        model.prototype.refresh = function () {
            var _this = this;
            this.refreshText('Refreshing...');
            getData(Admin.CmdXrefData_Create(Admin.CmdXrefDataOpers.refreshXref, null, null, null, 0, 0, LowUtils.getQueryParams('url')), function (res) {
                _this.refreshText('Refresh');
                _this.refreshError(res.error);
            });
        };
        return model;
    })(Pager.Page);
    xref.model = model;
    var sitemapModel = (function () {
        function sitemapModel(owner) {
            this.owner = owner;
            this.actNd = !owner.nodeId || owner.nodeId < 0 ? sitemap : sitemapDir[owner.nodeId];
            if (this.actNd == sitemap)
                this.parents = null;
            else {
                var n = this.actNd.parent;
                this.parents = [];
                while (n) {
                    this.parents.push(n);
                    n = n.parent;
                }
                this.parents = this.parents.reverse();
            }
        }
        sitemapModel.prototype.nodeXrefUrl = function () {
            return 'author.aspx?mode=xref&url=' + this.actNd.url;
        };
        sitemapModel.prototype.isProject = function () { return (this.actNd.type & CourseMeta.runtimeType.project) != 0 || _.any(this.parents, function (p) { return (p.type & CourseMeta.runtimeType.project) != 0; }); };
        return sitemapModel;
    })();
    xref.sitemapModel = sitemapModel;
    var typeMapModel = (function () {
        function typeMapModel(owner) {
            this.owner = owner;
        }
        typeMapModel.prototype.update = function (completed) {
            var _this = this;
            nodeTypes(this.owner.nodeId, function (types) {
                _this.types = _.map(_.sortBy(types), function (t) { var meta = CourseModel.meta.types[Utils.fromCammelCase(t)]; return { tag: t, lmtag: !meta || meta.anc != "tag-html" }; });
                if (_this.owner.actType) {
                    typeProps(_this.owner.actType, _this.owner.nodeId, function (props) {
                        _this.props = _.sortBy(props);
                        completed();
                    });
                }
                else
                    completed();
            });
            //completed();
        };
        return typeMapModel;
    })();
    xref.typeMapModel = typeMapModel;
    var propMapModel = (function () {
        function propMapModel(owner) {
            this.owner = owner;
        }
        propMapModel.prototype.update = function (completed) {
            var _this = this;
            nodeProps(this.owner.nodeId, function (props) {
                _this.props = _.sortBy(props);
                completed();
            });
        };
        return propMapModel;
    })();
    xref.propMapModel = propMapModel;
    var linksModel = (function () {
        function linksModel(owner) {
            this.owner = owner;
        }
        linksModel.prototype.update = function (completed) {
            var _this = this;
            if (this.owner.actType) {
                if (this.owner.propValueIdx) {
                    typePropValueLinks(this.owner.actType, this.owner.actProp, this.owner.propValueIdx, this.owner.nodeId, function (links) { _this.links = _.sortBy(links, 'url'); completed(); });
                }
                else if (this.owner.actProp) {
                    typePropLinks(this.owner.actType, this.owner.actProp, this.owner.nodeId, function (links) { _this.links = _.sortBy(links, 'url'); completed(); });
                }
                else {
                    typeLinks(this.owner.actType, this.owner.nodeId, function (links) { _this.links = _.sortBy(links, 'url'); completed(); });
                }
            }
            else {
                if (this.owner.propValueIdx) {
                    propValueLinks(this.owner.actProp, this.owner.propValueIdx, this.owner.nodeId, function (links) { _this.links = _.sortBy(links, 'url'); completed(); });
                }
                else {
                    propLinks(this.owner.actProp, this.owner.nodeId, function (links) { _this.links = _.sortBy(links, 'url'); completed(); });
                }
            }
        };
        return linksModel;
    })();
    xref.linksModel = linksModel;
    var propValuesModel = (function () {
        function propValuesModel(owner) {
            this.owner = owner;
        }
        propValuesModel.prototype.update = function (completed) {
            var _this = this;
            if (this.owner.actType) {
                typePropValues(this.owner.actType, this.owner.actProp, this.owner.nodeId, function (values) {
                    var vals = _.sortBy(values);
                    xref.valToIdx = { dummyValue: 0 };
                    xref.idxToVal = [dummyValue];
                    _this.values = [];
                    _.each(vals, function (v) { xref.valToIdx[v] = xref.idxToVal.length; _this.values.push(xref.idxToVal.length); xref.idxToVal.push(v); });
                    completed();
                });
            }
            else {
                propValues(this.owner.actProp, this.owner.nodeId, function (values) {
                    var vals = _.sortBy(values);
                    xref.valToIdx = { dummyValue: 0 };
                    xref.idxToVal = [dummyValue];
                    _this.values = [];
                    _.each(vals, function (v) { xref.valToIdx[v] = xref.idxToVal.length; _this.values.push(xref.idxToVal.length); xref.idxToVal.push(v); });
                    completed();
                });
            }
        };
        return propValuesModel;
    })();
    xref.propValuesModel = propValuesModel;
    //***** server services
    function nodeTypes(nodeId, completed) {
        getData(Admin.CmdXrefData_Create(Admin.CmdXrefDataOpers.nodeTypes, null, null, null, nodeId, maxLinks, LowUtils.getQueryParams('url')), function (res) { return completed(res.names); });
    }
    function nodeProps(nodeId, completed) {
        getData(Admin.CmdXrefData_Create(Admin.CmdXrefDataOpers.nodeProps, null, null, null, nodeId, maxLinks, LowUtils.getQueryParams('url')), function (res) { return completed(res.names); });
    }
    function typeProps(type, nodeId, completed) {
        getData(Admin.CmdXrefData_Create(Admin.CmdXrefDataOpers.typeProps, type, null, null, nodeId, maxLinks, LowUtils.getQueryParams('url')), function (res) { return completed(res.names); });
    }
    function typePropValues(type, prop, nodeId, completed) {
        getData(Admin.CmdXrefData_Create(Admin.CmdXrefDataOpers.typePropValues, type, prop, null, nodeId, maxLinks, LowUtils.getQueryParams('url')), function (res) { return completed(res.names); });
    }
    function typeLinks(type, nodeId, completed) {
        getData(Admin.CmdXrefData_Create(Admin.CmdXrefDataOpers.typeLinks, type, null, null, nodeId, maxLinks, LowUtils.getQueryParams('url')), function (res) { return completed(res.links); });
    }
    function typePropLinks(type, prop, nodeId, completed) {
        getData(Admin.CmdXrefData_Create(Admin.CmdXrefDataOpers.typePropLinks, type, prop, null, nodeId, maxLinks, LowUtils.getQueryParams('url')), function (res) { return completed(res.links); });
    }
    function typePropValueLinks(type, prop, valIdx, nodeId, completed) {
        getData(Admin.CmdXrefData_Create(Admin.CmdXrefDataOpers.typePropValueLinks, type, prop, xref.idxToVal[valIdx], nodeId, maxLinks, LowUtils.getQueryParams('url')), function (res) { return completed(res.links); });
    }
    function propValues(prop, nodeId, completed) {
        getData(Admin.CmdXrefData_Create(Admin.CmdXrefDataOpers.propValues, null, prop, null, nodeId, maxLinks, LowUtils.getQueryParams('url')), function (res) { return completed(res.names); });
    }
    function propLinks(prop, nodeId, completed) {
        getData(Admin.CmdXrefData_Create(Admin.CmdXrefDataOpers.propLinks, null, prop, null, nodeId, maxLinks, LowUtils.getQueryParams('url')), function (res) { return completed(res.links); });
    }
    function propValueLinks(prop, valIdx, nodeId, completed) {
        getData(Admin.CmdXrefData_Create(Admin.CmdXrefDataOpers.propValueLinks, null, prop, xref.idxToVal[valIdx], nodeId, maxLinks, LowUtils.getQueryParams('url')), function (res) { return completed(res.links); });
    }
    var maxLinks = 500;
    var dummyValue = '&&[[]]';
    function getData(par, completed) {
        Pager.ajaxGet(Pager.pathType.restServices, Admin.CmdXrefData_Type, par, completed);
    }
    //***** navigace
    function getHash(modelType, nodeId, mainTab, type, prop, valueIdx) {
        if (nodeId === void 0) { nodeId = -1; }
        if (mainTab === void 0) { mainTab = 0; }
        if (type === void 0) { type = null; }
        if (prop === void 0) { prop = null; }
        if (valueIdx === void 0) { valueIdx = 0; }
        return oldPrefix + [xref.appId, modelType, nodeId.toString(), mainTab.toString(), type, prop, valueIdx ? valueIdx.toString() : '0', LowUtils.getQueryParams('url')].join(hashDelim);
    }
    function Start() {
        CourseMeta.persist = persistMemory.persistCourse;
        Pager.initHash = function () { return cfg.hash ? cfg.hash : getHash(browse); };
        boot.minInit();
        ViewBase.init();
        $('#splash').hide();
    }
    xref.Start = Start;
    var browse = "xrefbrowseModel".toLowerCase();
    var browsePropValues = "xrefbrowsePropValuesModel".toLowerCase();
    var links = "xreflinksModel".toLowerCase();
    Pager.registerAppLocator(xref.appId, browse, function (urlParts, completed) { return completed(new model(browse, urlParts)); });
    Pager.registerAppLocator(xref.appId, links, function (urlParts, completed) { return completed(new model(links, urlParts)); });
    Pager.registerAppLocator(xref.appId, browsePropValues, function (urlParts, completed) { return completed(new model(browsePropValues, urlParts)); });
    $.views.helpers({ xref: xref });
})(xref || (xref = {}));
var waObjs;
(function (waObjs) {
    var DlgModelLow = (function () {
        function DlgModelLow(modalId, place, completed) {
            this.modalId = modalId;
            this.place = place;
            this.completed = completed;
            this.btnGrid = []; //button grid pro ovladani by arrow keys
        }
        DlgModelLow.prototype.show = function () {
            this.$mod = render(this.modalId, this);
            this.$mod.modal();
            DlgModelLow.init(this);
            this.$mod.modal('show');
            if (this.btnGrid.length > 0)
                this.btnGrid[0][0].focus();
        };
        DlgModelLow.prototype.btnGridOK = function (btn) { }; //zvoleno grid tlacitko
        DlgModelLow.prototype.hide = function () { this.$mod.modal('hide'); };
        DlgModelLow.prototype.onHide = function () { };
        DlgModelLow.prototype.onInit = function () { };
        DlgModelLow.prototype.onGetResult = function () { };
        DlgModelLow.init = function (dlg) {
            //*** init focus grid
            _.each(dlg.$mod.find('[data-focus-grid]'), function (el) {
                var $el = $(el);
                var $d = $el.data('focusGrid');
                var d = $el.data('focusGrid').split(':');
                var row = parseInt(d[0]);
                var cell = parseInt(d[1]);
                if (!dlg.btnGrid[row])
                    dlg.btnGrid[row] = [];
                dlg.btnGrid[row][cell] = $el;
            });
            if (dlg.btnGrid.length > 0)
                dlg.btnGridEvents();
            dlg.onInit();
            var self = dlg;
            dlg.$mod.on('show.bs.modal', function () {
                if (!self.place)
                    return;
                self.$mod.css({ 'top': 'auto', 'left': 'auto' }); //inicializace position. Musi byt, jinak se nasledujici position pocita z jiz zmenenych properties
                self.$mod.position({ my: "center top+20", at: 'horizontal ', of: self.place[0], collision: 'flipfit' });
            });
            dlg.$mod.on('shown.bs.modal', function () {
                var bd = $('.modal-backdrop.in');
                bd.on('click', function () { return self.$mod.modal('hide'); });
                if (self.caller) {
                    bd.css({ 'z-index': '1051' });
                    self.$mod.css({ 'z-index': '1061' });
                }
            });
            dlg.$mod.on('hidden.bs.modal', function () {
                self.onHide();
                self.caller = null;
            });
        };
        DlgModelLow.prototype.btnGridEvents = function () {
            var _this = this;
            this.$mod.on('keydown', '[data-focus-grid]', function (ev) {
                var $btn = $((ev.target));
                var d = $btn.data('focusGrid').split(':');
                var row = parseInt(d[0]);
                var cell = parseInt(d[1]);
                //enter
                if (ev.keyCode == waObjs.key.enter) {
                    if ($btn.data('dlgRes')) {
                        _this.btnGridOK($btn);
                        return false;
                    }
                    else
                        return true;
                }
                if (!$btn.data('arrowIgnore')) {
                    switch (ev.keyCode) {
                        case waObjs.key.tab:
                        case waObjs.key.rightArrow:
                            _this.btnGrid[row][cell == _this.btnGrid[row].length - 1 ? 0 : cell + 1].focus();
                            break;
                        case waObjs.key.leftArrow:
                            _this.btnGrid[row][cell == 0 ? _this.btnGrid[row].length - 1 : cell - 1].focus();
                            break;
                        case waObjs.key.downArrow:
                            _this.btnGrid[row == _this.btnGrid.length - 1 ? 0 : row + 1][0].focus();
                            break;
                        case waObjs.key.upArrow:
                            _this.btnGrid[row == 0 ? _this.btnGrid.length - 1 : row - 1][0].focus();
                            break;
                        //case key.enter: if ($btn.data('dlgRes')) this.btnGridOK($btn); break;
                        default: return true;
                    }
                    return false;
                }
            });
            this.$mod.on('click', '[data-dlg-res]', function (ev) {
                var $btn = $((ev.target));
                _this.btnGridOK($btn);
            });
        };
        return DlgModelLow;
    })();
    waObjs.DlgModelLow = DlgModelLow;
    //************* DlgTextModel *****************
    var DlgTextModel = (function (_super) {
        __extends(DlgTextModel, _super);
        function DlgTextModel(modalId, edit, rng, place, completed) {
            _super.call(this, modalId, place, completed);
            this.edit = edit;
            this.rng = rng;
            this.rng = rng;
        }
        DlgTextModel.prototype.btnGridOK = function (btn) {
            var rng = this.callCompleted(btn);
            if (rng)
                this.rng = rng;
            var edit = this.edit;
            this.edit = null;
            var completedNotCalled = this.rng.start < 0; //
            if (!completedNotCalled)
                this.recoverRange(edit);
            this.hide();
            if (completedNotCalled)
                this.edit = edit;
        };
        DlgTextModel.prototype.callCompleted = function (btn) {
            return this.completed(btn);
        };
        DlgTextModel.prototype.recoverRange = function (edit) {
            var _this = this;
            if (!edit)
                return;
            setTimeout(function () {
                edit.focus();
                textRange.setRange(edit, _this.rng.start, _this.rng.end - _this.rng.start);
            }, 1);
        };
        DlgTextModel.prototype.onHide = function () {
            this.recoverRange(this.edit);
        };
        return DlgTextModel;
    })(DlgModelLow);
    waObjs.DlgTextModel = DlgTextModel;
    //************* DlgOpenBracket *****************
    var DlgOpenBracket = (function (_super) {
        __extends(DlgOpenBracket, _super);
        function DlgOpenBracket(edit, rng, place, completed) {
            _super.call(this, 'dlg-open-bracket', edit, rng, place, completed);
            this.show();
        }
        return DlgOpenBracket;
    })(DlgTextModel);
    waObjs.DlgOpenBracket = DlgOpenBracket;
    //************* DlgEditBlock *****************
    var DlgEditBlock = (function (_super) {
        __extends(DlgEditBlock, _super);
        function DlgEditBlock(place, completed) {
            _super.call(this, 'dlg-edit-block', place, completed);
            this.show();
        }
        DlgEditBlock.prototype.btnGridOK = function (btn) {
            this.completed(btn.data('dlgRes'));
            this.hide();
        };
        return DlgEditBlock;
    })(DlgModelLow);
    waObjs.DlgEditBlock = DlgEditBlock;
    //************* DlgPropName *****************
    var DlgPropName = (function (_super) {
        __extends(DlgPropName, _super);
        function DlgPropName(edit, rng, place, mark, completed) {
            _super.call(this, 'dlg-prop-name', edit, rng, place, completed);
            this.list = ko.observable();
            this.list(new propName(mark));
            this.show();
        }
        DlgPropName.prototype.callCompleted = function (btn) {
            var prop = (this.list().value().dato);
            if (prop.type == metaJS.xsdPropType.Enum) {
                var self = this;
                setTimeout(function () { return new DlgEnumValue(self.edit, self.rng, self.place, self.list().mark, prop, function (enumItem) { return self.completed(prop.name + '=' + enumItem.name + '|'); }); }, 1);
                return { start: -1, end: -1 };
            }
            else {
                var boolVal = prop.type == metaJS.xsdPropType.Bool ? 'true' : '';
                var snipset = prop.name + '=' + boolVal + '|';
                return this.completed(snipset);
            }
        };
        return DlgPropName;
    })(DlgTextModel);
    waObjs.DlgPropName = DlgPropName;
    //************* DlgEnumValue *****************
    var DlgEnumValue = (function (_super) {
        __extends(DlgEnumValue, _super);
        function DlgEnumValue(edit, rng, place, mark, prop, completed) {
            _super.call(this, 'dlg-enum-value', edit, rng, place, completed);
            this.list = ko.observable();
            this.list(new enumValue(mark, prop));
            this.show();
        }
        DlgEnumValue.prototype.callCompleted = function (btn) {
            return this.completed(this.list().value().dato);
        };
        return DlgEnumValue;
    })(DlgTextModel);
    waObjs.DlgEnumValue = DlgEnumValue;
    //************* DlgEditInline *****************
    var DlgEditInline = (function (_super) {
        __extends(DlgEditInline, _super);
        function DlgEditInline(edit, rng, place, mark, completed) {
            var _this = this;
            _super.call(this, 'dlg-edit-inline', edit, rng, place, completed);
            this.propEditor = ko.observable();
            this.valueEditor = ko.observable();
            var p = new propName(mark, false);
            p.value(null);
            p.selected = function (sel) {
                if (!sel) {
                    _this.valueEditor(null);
                    return;
                }
                _this.valueEditor(new enumValue(p.mark, metaJS.metaObj.types['offering'].propDir['drop-down-mode']));
            };
            this.propEditor(p);
            this.show();
        }
        return DlgEditInline;
    })(DlgTextModel);
    waObjs.DlgEditInline = DlgEditInline;
    //**************** EDITORS MODELS ********************
    var edModel = (function () {
        function edModel(scriptId) {
            this.scriptId = scriptId;
        }
        return edModel;
    })();
    waObjs.edModel = edModel;
    var listModel = (function (_super) {
        __extends(listModel, _super);
        function listModel(scriptId, list) {
            _super.call(this, scriptId);
            this.list = list;
            this.value = ko.observable();
            this.descr = ko.observable();
            this.value(this.list[0]);
        }
        listModel.prototype.changed = function () {
            var sel = this.value();
            if (this.selected)
                this.selected(sel);
            if (!sel)
                return '';
            this.descr((sel.summary ? '<b>' + sel.summary + '</b><br/>' : '') + (sel.descr || ''));
        };
        return listModel;
    })(edModel);
    waObjs.listModel = listModel;
    var propName = (function (_super) {
        __extends(propName, _super);
        function propName(mark, removeUsed) {
            if (removeUsed === void 0) { removeUsed = true; }
            _super.call(this, 'ed-prop-name', propName.getList(mark, removeUsed));
            this.mark = mark;
        }
        propName.getList = function (mark, removeUsed) {
            var usedProps = !removeUsed ? [] : _.map(_.filter(mark.marks.marks, function (m) { return m.type == waObjs.markType.propName; }), function (m) { return m.prop; });
            var okProps = _.filter(metaJS.metaObj.types[mark.tag].props, function (p) { return (p.flag & CourseModel.tgSt.metaJS_browse) != 0 && !_.contains(usedProps, p); });
            return _.map(okProps, function (p) { return { name: p.name, value: p.name, dato: p, summary: p.summary, descr: p.descr }; });
        };
        return propName;
    })(listModel);
    waObjs.propName = propName;
    var enumValue = (function (_super) {
        __extends(enumValue, _super);
        function enumValue(mark, prop) {
            _super.call(this, 'ed-enum', enumValue.getList(prop));
            this.mark = mark;
            this.prop = prop;
        }
        enumValue.getList = function (prop) {
            return _.map(prop.myEnum().enumData, function (en) { return { name: en.name, value: en.name, summary: en.summary, descr: en.descr, dato: en }; });
        };
        return enumValue;
    })(listModel);
    waObjs.enumValue = enumValue;
    //**************** JSRender LIB ********************
    //var templCache: JsTemplate[] = [];
    //export function tmpl(id: string): any {
    //  id = id.toLowerCase();
    //  var tmpl = templCache[id];
    //  if (tmpl == null) {
    //    var t = $('#' + id);
    //    var txt = t.html();
    //    if (!txt) { debugger; throw 'cannot read template ' + id; }
    //    t.remove();
    //    try {
    //      tmpl = $.templates(txt);
    //    } catch (msg) {
    //      alert("cannot compile template " + id);
    //      throw msg;
    //    }
    //    templCache[id] = tmpl;
    //  }
    //  return tmpl;
    //}
    function render(templateId, data) {
        var str = JsRenderTemplateEngine.tmpl(templateId).render(data);
        $('#' + templateId).remove();
        $('body').append($(str));
        var res = $('#' + templateId);
        ko.applyBindings(data, res[0]);
        return res;
    }
    waObjs.render = render;
    ko.nativeTemplateEngine.instance['renderTemplateSource'] = function (template, bindingContext, options) {
        if (_.isEmpty(template))
            return [];
        var data = bindingContext.$data;
        var str = JsRenderTemplateEngine.tmpl(template).render(data);
        return $.parseHTML(str, null, true);
    };
    ko.nativeTemplateEngine.instance['makeTemplateSource'] = function (template, templateDocument) { return _.isString(template) ? template : null; };
})(waObjs || (waObjs = {}));
var waCompile;
(function (waCompile) {
    //rekurzivne:
    //- zakoduje {} zavorky (do pointeru do context.marks)
    //- provede markdown predkompilaci
    //- provede JSON tag rendering (z predkompilace). V nem pri rendering stringu rozleze string a expanduje pointery zpet na JSON tag (context.decodeMarksToTag, pouzita v compRenderTag.ts)
    //- pro kazdy block vse ulozi do block.compileResult
    function compile(block, ctx) {
        if (ctx === void 0) { ctx = null; }
        if (!ctx)
            ctx = new context();
        var sb = [];
        _.each(block.childs, function (ch) {
            if (ch.type != waObjs.itemType.text) {
                compile(ch, ctx); //rekurzivni priprava podrizenych bloku
                ctx.encodeMarkForCompile(new waObjs.blockPtrMark(null, block), sb); //pointer na block
            }
            else {
                ctx.encodeTextBlockForCompile(ch, sb);
            }
        });
        var str = sb.join('');
        //common mark kompilace
        var reader = new commonmark.Parser();
        var parsed = reader.parse(str);
        //common mark render
        block.compileResult = waCompile.compileRenderTag(parsed, ctx);
    }
    waCompile.compile = compile;
    //helper class pro common mark preprocess
    var context = (function () {
        function context() {
            this.marks = [];
        }
        //decode markdown-predkompilovaneho textu
        context.prototype.decodeMarksToTag = function (expandedStr, addCtx) {
            if (_.isEmpty(expandedStr)) {
                addCtx.addToItems(expandedStr);
                return;
            }
            var i = 0;
            var textBuf = [];
            while (i < expandedStr.length) {
                var act = expandedStr.charCodeAt(i);
                var next = i == expandedStr.length - 1 ? 0 : expandedStr.charCodeAt(i + 1);
                if (act >= waEncode.s1 && act <= waEncode.s1Max && next >= waEncode.s2 && next <= waEncode.s2Max) {
                    if (textBuf.length > 0) {
                        addCtx.addToItems((textBuf.join('')));
                        textBuf = [];
                    }
                    var code = this.marks[waEncode.decode(act, next)];
                    i += code.end - code.start + 1;
                    code.markToTag(addCtx);
                }
                else {
                    textBuf.push(expandedStr.charAt(i));
                    i++;
                }
            }
            if (textBuf.length > 0) {
                addCtx.addToItems((textBuf.join('')));
                textBuf = [];
            }
        };
        //encode jedne mark
        context.prototype.encodeMarkForCompile = function (mark, sb) {
            var idx = this.marks.length;
            this.marks.push(mark);
            waEncode.encode(sb, idx, (mark.end - mark.start + 1) - 2);
        };
        //encode text-bloku
        context.prototype.encodeTextBlockForCompile = function (textBlock, sb) {
            var _this = this;
            var marks = textBlock.marks.marks;
            var text = textBlock.text;
            if (marks == null) {
                if (!_.isEmpty(text))
                    sb.push(text);
                return;
            }
            var lastPos = 0;
            _.each(marks, function (m) {
                if (m.start < lastPos)
                    throw 'm.start < lastPos';
                if (m.start > lastPos)
                    sb.push(text.substring(lastPos, m.start));
                //m.encodeMarksForCompile(ctx, sb);
                _this.encodeMarkForCompile(m, sb);
                lastPos = m.end;
            });
            if (lastPos < text.length)
                sb.push(text.substr(lastPos));
        };
        return context;
    })();
    waCompile.context = context;
})(waCompile || (waCompile = {}));
var waCompile;
(function (waCompile) {
    function compileRenderTag(parsedBlocks, ctx) {
        var stack = [];
        var addToItems = function (it) { if (!it)
            return; var tg = stack[stack.length - 1]; if (!tg.Items)
            tg.Items = []; tg.Items.push(it); };
        var addTag = function (name, attrs, selfclosing) {
            var tg = { _tg: name };
            if (attrs && attrs.length > 0) {
                var i = 0;
                var attrib;
                while ((attrib = attrs[i]) !== undefined) {
                    tg[attrib[0]] = attrib[1];
                    i++;
                }
            }
            addToItems(tg);
            if (!selfclosing)
                stack.push(tg);
        };
        var addContext = { addToItems: addToItems, addTag: function (tg) { addToItems(tg); stack.push(tg); }, stack: stack };
        stack.push({ _tg: 'root' });
        var attrs;
        var info_words;
        var tagname;
        var walker = parsedBlocks.walker();
        var event, node;
        var entering;
        //var buffer = "";
        var lastOut = "\n";
        //var disableTags = 0;
        var grandparent;
        //var out = function (s) {
        //  if (disableTags > 0) {
        //    buffer += s.replace(reHtmlTag, '');
        //  } else {
        //    buffer += s;
        //  }
        //  lastOut = s;
        //};
        var options = { sourcepos: true };
        //if (options.time) { console.time("rendering"); }
        //var newOpeningTag: CourseModel.tag;
        while ((event = walker.next())) {
            entering = event.entering;
            node = event.node;
            attrs = [];
            if (options.sourcepos) {
                var pos = node.sourcepos;
                if (pos) {
                    attrs.push(['srcpos', String(pos[0][0]) + ':' +
                            String(pos[0][1]) + '-' + String(pos[1][0]) + ':' +
                            String(pos[1][1])]);
                }
            }
            switch (node.type) {
                case 'Text':
                    ctx.decodeMarksToTag(node.literal, addContext);
                    //addToItems(node.literal);
                    break;
                case 'Softbreak':
                    addToItems('\n');
                    break;
                case 'Hardbreak':
                    addTag('br', null, true);
                    break;
                case 'Emph':
                    if (entering)
                        addTag('em');
                    else
                        stack.pop();
                    break;
                case 'Strong':
                    if (entering)
                        addTag('strong');
                    else
                        stack.pop();
                    break;
                case 'Html':
                    addTag(node.literal.substring(1, node.literal.length - 2), null, true);
                    break;
                case 'Link':
                    if (entering) {
                        attrs.push(['href', node.destination]);
                        if (node.title) {
                            attrs.push(['title', node.title]);
                        }
                        addTag('a', attrs);
                    }
                    else {
                        stack.pop();
                    }
                    break;
                case 'Image':
                    throw 'Html';
                    break;
                case 'Code':
                    addTag('code');
                    addToItems(node.literal);
                    stack.pop();
                    break;
                case 'Document':
                    break;
                case 'Paragraph':
                    grandparent = node.parent.parent;
                    if (grandparent !== null &&
                        grandparent.type === 'List') {
                        if (grandparent.listTight) {
                            break;
                        }
                    }
                    if (entering)
                        addTag('p', attrs);
                    else
                        stack.pop();
                    break;
                case 'BlockQuote':
                    if (entering)
                        addTag('blockquote', attrs);
                    else
                        stack.pop();
                    break;
                case 'Item':
                    if (entering)
                        addTag('li', attrs);
                    else
                        stack.pop();
                    break;
                case 'List':
                    tagname = node.listType === 'Bullet' ? 'ul' : 'ol';
                    if (entering) {
                        var start = node.listStart;
                        if (start !== null && start !== 1) {
                            attrs.push(['start', start.toString()]);
                        }
                        addTag(tagname, attrs);
                    }
                    else {
                        stack.pop();
                    }
                    break;
                case 'Header':
                    tagname = 'h' + node.level;
                    if (entering)
                        addTag(tagname, attrs);
                    else
                        stack.pop();
                    break;
                case 'CodeBlock':
                    info_words = node.info ? node.info.split(/ +/) : [];
                    if (info_words.length > 0 && info_words[0].length > 0) {
                        attrs.push(['class', 'language-' + info_words[0]]);
                    }
                    addTag('pre');
                    addTag('code', attrs);
                    addToItems(node.literal);
                    stack.pop();
                    stack.pop();
                    break;
                case 'HtmlBlock':
                    throw 'HtmlBlock';
                    break;
                case 'HorizontalRule':
                    addTag('hr', null, true);
                    break;
                default:
                    throw "Unknown node type " + node.type;
            }
        }
        return stack[0].Items;
    }
    waCompile.compileRenderTag = compileRenderTag;
})(waCompile || (waCompile = {}));
var waObjs;
(function (waObjs) {
    //************* BLOCK *****************
    var block = (function (_super) {
        __extends(block, _super);
        function block(json, $parent, parent) {
            _super.call(this, json, $parent, parent);
            this.selfProps = waObjs.IBlockProps; //pro JSON serializaci
            if (!json)
                return;
            this.appendChilds(this.myChildPlaceHolder());
        }
        block.prototype.appendChilds = function (placeHolder) {
            var chs = this.childs;
            if (!chs)
                return;
            for (var i = 0; i < chs.length; i++)
                chs[i] = block.itemFromJSON((chs[i]), placeHolder, this);
        };
        block.itemFromJSON = function (json, $parent, parent) {
            switch (json.type) {
                case waObjs.itemType.text:
                    return new waObjs.text(json, $parent, parent);
                    break;
                case waObjs.itemType.block:
                    return new block(json, $parent, parent);
                    break;
                case waObjs.itemType.rootBlock:
                    return new rootBlock(json, $parent, parent);
                    break;
                default: throw "";
            }
        };
        block.prototype.toHTMLString = function () {
            return '<div class="sm-block"><div class="sm-block-header">' +
                '<span class="sm-block-name sm-edit-block-lnk">{#' + this.name.toUpperCase() + (this.pars ? '</span><span class="sm-block-par"> ' + this.pars + '</span>' : '') +
                '</div><div class="sm-block-body"></div><div class="sm-block-footer">' +
                '<span class="sm-block-name">#}</span>' +
                '</div></div>';
        };
        block.prototype.myChildPlaceHolder = function () { return this.$self.find('> .sm-block-body'); };
        block.prototype.refreshPropsFromHtml = function () { _.each(this.childs, function (ch) { return ch.refreshPropsFromHtml(); }); };
        block.prototype.buildEditContent = function (modifyProc) {
            this.root.refreshPropsFromHtml(); //prevezmi data z HTML dom
            var newRoot = this.root.getJSONObject(modifyProc);
            this.root.$content.html('');
            block.itemFromJSON(newRoot, this.root.$content, null);
        };
        /************ EDIT BLOCK TREE *************/
        block.prototype.insert = function (self, rng, edVal, blockName) {
            var _this = this;
            if (self.marks.findMark(rng.start).idx != self.marks.findMark(rng.end).idx)
                rng.start = rng.end;
            //data pro nove bloky
            var blText = new waObjs.text();
            blText.type = waObjs.itemType.text;
            blText.text = edVal.substring(rng.start, rng.end);
            var bl = new block();
            bl.name = blockName;
            bl.type = waObjs.itemType.block;
            bl.childs = [blText];
            var txt = new waObjs.text();
            txt.type = waObjs.itemType.text;
            txt.text = edVal.substr(rng.end);
            //strip puvodni blok
            self.setText(edVal.substr(0, rng.start));
            //uprav nahrad self 
            this.buildEditContent(function () {
                var selfIdx = _this.childs.indexOf(self);
                _this.childs.splice(selfIdx + 1, 0, bl, txt);
            });
        };
        block.prototype.delContent = function () {
            var _this = this;
            this.buildEditContent(function () { return _this.childs = []; });
        };
        block.prototype.delBracket = function () {
            var _this = this;
            this.buildEditContent(function () {
                var parChilds = _this.parent.childs;
                var childs = _this.childs;
                var selfIdx = parChilds.indexOf(_this);
                if (selfIdx == 0 || selfIdx == parChilds.length - 1 || parChilds[selfIdx - 1].type != waObjs.itemType.text || parChilds[selfIdx + 1].type != waObjs.itemType.text)
                    throw 'block not between two texts';
                if (childs.length > 0 && (childs[0].type != waObjs.itemType.text || childs[childs.length - 1].type != waObjs.itemType.text))
                    throw 'block not starts and ends with text';
                var parRes = [];
                for (var i = 0; i < selfIdx; i++)
                    parRes.push(parChilds[i]);
                for (var i = 0; i < childs.length; i++) {
                    if (i == 0) {
                        var it = (childs[i]);
                        var last = (parRes[parRes.length - 1]);
                        last.text += it.text;
                    }
                    else
                        parRes.push(childs[i]);
                }
                for (var i = selfIdx + 1; i < parChilds.length; i++) {
                    if (i == selfIdx + 1) {
                        var it = (parChilds[i]);
                        var last = (parRes[parRes.length - 1]);
                        last.text += it.text;
                    }
                    else
                        parRes.push(childs[i]);
                }
                _this.parent.childs = parRes;
            });
        };
        block.prototype.delAll = function () {
            var _this = this;
            this.buildEditContent(function () {
                var parChilds = _this.parent.childs;
                var selfIdx = parChilds.indexOf(_this);
                if (selfIdx == 0 || selfIdx == parChilds.length - 1 || parChilds[selfIdx - 1].type != waObjs.itemType.text || parChilds[selfIdx + 1].type != waObjs.itemType.text)
                    throw 'block not between two texts';
                var before = (parChilds[selfIdx - 1]);
                var after = (parChilds[selfIdx + 1]);
                before.text += after.text;
                parChilds.splice(selfIdx, 2);
            });
        };
        return block;
    })(waObjs.item);
    waObjs.block = block;
    //************* ROOT BLOCK *****************
    var rootBlock = (function (_super) {
        __extends(rootBlock, _super);
        function rootBlock(json, $parent, parent) {
            _super.call(this, json, $parent, parent);
            this.parent = parent;
            if (!json)
                return;
            this.$content = $parent;
            this.$content.on('click', '.sm-edit-block-lnk', function (ev) {
                var target = (ev.target);
                var $block = $(target.parentElement.parentElement);
                var bl = ($block.data('wa'));
                new waObjs.DlgEditBlock($(target), function (res) {
                    switch (res) {
                        case 'content':
                            bl.delContent();
                            break;
                        case 'bracket':
                            bl.delBracket();
                            break;
                        case 'both':
                            bl.delAll();
                            break;
                        default: throw 'not implemented';
                    }
                    return null;
                });
            });
        }
        rootBlock.prototype.toHTMLString = function () {
            return '<div class="sm-block-body"></div>';
        };
        rootBlock.prototype.myChildPlaceHolder = function () { return this.$self; };
        rootBlock.prototype.notifyDataChanged = function () {
            var _this = this;
            var self = this;
            if (self.refreshTimer)
                return;
            self.refreshTimer = setTimeout(function () {
                clearTimeout(self.refreshTimer);
                self.refreshTimer = 0;
                waCompile.compile(_this);
                var res = JSON.stringify(_this.compileResult, null, 2);
                $('#preview-content').text(res);
            }, 1);
        };
        return rootBlock;
    })(block);
    waObjs.rootBlock = rootBlock;
})(waObjs || (waObjs = {}));
var waObjs;
(function (waObjs) {
    //************* interfaces *****************
    (function (itemType) {
        itemType[itemType["text"] = 0] = "text";
        itemType[itemType["block"] = 1] = "block";
        itemType[itemType["rootBlock"] = 2] = "rootBlock";
    })(waObjs.itemType || (waObjs.itemType = {}));
    var itemType = waObjs.itemType;
    var IItemProps = ['type'];
    waObjs.ITextProps = ['text'].pushArray(IItemProps);
    waObjs.IBlockProps = ['name', 'pars'].pushArray(IItemProps);
    //************* ITEM *****************
    var item = (function () {
        function item(json, $parent, parent) {
            this.parent = parent;
            this.selfProps = IItemProps; //property names pro JSON serializaci. Serializuji se pouze tyto props, ostatni se ignoruji. Virtualni dato, pouzito v getJSONObject();
            if (!json)
                return;
            this.root = parent ? parent.root : this;
            if (json)
                for (var p in json)
                    this[p] = json[p];
            this.$self = $(this.toHTMLString());
            this.$self.data('wa', this);
            $parent.append(this.$self);
        }
        item.prototype.toHTMLString = function () { return ''; }; //vrati HTML fragment pro $self
        item.prototype.refreshPropsFromHtml = function () { }; //z HTML prevezme data pro JSON serializaci
        item.prototype.getJSONObject = function (modify) {
            var _this = this;
            if (modify === void 0) { modify = null; }
            if (modify)
                modify();
            var res = {};
            _.each(this.selfProps, function (p) { return res[p] = _this[p]; });
            var chs = this['childs'];
            if (chs)
                res['childs'] = _.map(chs, function (ch) { return ch.getJSONObject(); });
            return res;
        };
        return item;
    })();
    waObjs.item = item;
    //************* test *****************
    function test() {
        $(function () {
            var item = waObjs.block.itemFromJSON(testJson, $('#edit-content'), null);
            //new metaJS.propEditor($('#prop-editor > .sm-text'), 'gap-fill', 'id=gp1; smart-width=sw1');
            //testJson = item.getJSONObject();
            //Utils.longLog(JSON.stringify(testJson, null, 2));
            //$('#edit-content').html('');
            //block.itemFromJSON(testJson, $('#edit-content'), null);
        });
    }
    waObjs.test = test;
    var testJson = {
        type: itemType.rootBlock, name: '', pars: '',
        childs: [
            //{ type: itemType.text, text: '{+gap-fill(id=gp; smart-width=sw1;)}' },
            { type: itemType.text, text: '{+offering(drop-down-mode=discard)}' },
        ]
    };
})(waObjs || (waObjs = {}));
var waObjs;
(function (waObjs) {
    (function (keyDownResult) {
        keyDownResult[keyDownResult["no"] = 0] = "no";
        keyDownResult[keyDownResult["true"] = 1] = "true";
        keyDownResult[keyDownResult["false"] = 2] = "false";
    })(waObjs.keyDownResult || (waObjs.keyDownResult = {}));
    var keyDownResult = waObjs.keyDownResult;
    //export interface editorLow {
    //  $self: JQuery;
    //  edit: JQuery;
    //  view: JQuery;
    //  text: string;
    //}
    //export function editorConstructor(self: editorLow) {
    //  self.edit = self.$self.find('> textarea');
    //  var pre = self.$self.find('> pre');
    //  self.view = pre.find('> span');
    //}
    //************* TEXT *****************
    var text = (function (_super) {
        __extends(text, _super);
        //escaped: string;
        function text(data, $parent, parent) {
            _super.call(this, data, $parent, parent);
            this.selfProps = waObjs.ITextProps;
            this.lastRefresh = 0;
            if (!data)
                return;
            var self = this;
            self.edit = self.$self.find('> textarea');
            var pre = self.$self.find('> pre');
            self.view = pre.find('> span');
            if (bowser.agent.msie) {
                self.edit.css('whiteSpace', 'pre');
                self.view.css('whiteSpace', 'pre');
                pre.css('whiteSpace', 'pre');
            }
            //http://stackoverflow.com/questions/2823733/textarea-onchange-detection
            self.edit.on('input onpropertychange', function () {
                self.text = self.edit.val();
                //self.setText();
                self.notifyTextChanged(true);
            });
            self.edit.on("keydown", function (ev) {
                //IE hack: DEL a BACKSPACE se nevola v on('input onpropertychange')
                if (bowser.agent.msie && (ev.keyCode == key.k_delete || ev.keyCode == key.backspace)) {
                    setTimeout(function () { return self.notifyTextChanged(true); }, 1);
                    return;
                }
                var rng = textRange.getRange(self.edit); //text a range
                if (rng.start > 0 && self.text[rng.start - 1] == '\\')
                    return true; // '\<any>' => continue
                var mark = self.marks.findMark(rng.start).mark; //mark ve ktere je caret
                if (mark != null && mark.type == waObjs.markType.inline && rng.start == rng.end) {
                    var res = mark.keyDown(self, rng, ev); //inline pars editor
                    switch (res) {
                        case keyDownResult.true: return true;
                        case keyDownResult.false: return false;
                        default: break; //continue procesing
                    }
                }
                if (ev.keyCode != key.openBracket)
                    return true;
                //edit or insert?
                if (mark == null)
                    mark = self.marks.insertCaretMark(rng.start); //neni => vloz a vrat specialni caret mark
                if (mark.type != waObjs.markType.caret) {
                    alert('Edit todo');
                }
                else {
                    new waObjs.DlgOpenBracket(self.edit, rng, mark.$self, function ($btn) {
                        //dlgOpenBracket.showForText(self.edit, rng, mark.$self,($btn: JQuery) => {
                        var dlgRes = ($btn.data('dlgRes'));
                        var parts = dlgRes.split(':');
                        var grp = parts[0];
                        var grpItem = parts[1];
                        if (grp == 'inline' || grp == 'style' || (grp == 'span' && rng.start == rng.end)) {
                            return self.insertSnipset($btn.data('sm-gen'), rng);
                        }
                        else if (grp == 'span') {
                            return self.surroundSpan(rng);
                        }
                        else if (grp == 'block') {
                            self.parent.insert(self, rng, self.text, grpItem); //vloz block
                        }
                        else
                            throw 'not implemented';
                        return null;
                    });
                }
                return false;
            });
            self.notifyTextChanged(false);
        }
        text.prototype.setText = function (text) {
            if (text === void 0) { text = null; }
            if (text != null)
                this.edit.val(text);
            else
                text = this.edit.val();
            this.text = text;
            this.marks = new waObjs.viewmarks(text, this.view);
        };
        text.prototype.toHTMLString = function () {
            return '<div class="sm-text"><textarea>' + this.text + '</textarea><pre class="sm-view"><span></span><br /></pre></div>';
        };
        text.prototype.notifyTextChanged = function (inUserAction) {
            var self = this;
            if (self.refreshTimer) {
                clearTimeout(self.refreshTimer);
                self.refreshTimer = 0;
            }
            if (!inUserAction || self.text.length < 400) {
                self.setText();
                self.lastRefresh = new Date().getTime();
                self.root.notifyDataChanged();
                return;
            }
            var now = new Date().getTime();
            if (self.lastRefresh == 0 || now - self.lastRefresh < text.updateSpeed) {
                self.setText();
                self.lastRefresh = now;
                self.root.notifyDataChanged();
                return;
            }
            self.refreshTimer = setTimeout(function () {
                clearTimeout(self.refreshTimer);
                self.refreshTimer = 0;
                self.lastRefresh = new Date().getTime();
                self.setText();
                self.root.notifyDataChanged();
            }, text.updateSpeed);
        };
        //vlozeni mask na pozici caret
        text.prototype.insertSnipset = function (mask, rng) {
            var self = this;
            var caretIdx = mask.indexOf('|');
            self.setText(self.text.substr(0, rng.start) + mask.replace('|', '') + self.text.substr(rng.start));
            self.notifyTextChanged(false);
            return { start: rng.start + caretIdx, end: rng.start + caretIdx };
        };
        //obaleni selekce {**} zavorkou
        text.prototype.surroundSpan = function (rng) {
            var self = this;
            if (self.marks.findMark(rng.start).idx != self.marks.findMark(rng.end).idx) {
                return self.insertSnipset('{*| *}', rng);
            }
            self.setText(self.text.substr(0, rng.start) + '{* ' + self.text.substring(rng.start, rng.end) + '*}' + self.text.substr(rng.end));
            self.notifyTextChanged(false);
            return { start: rng.start + 2, end: rng.start + 2 };
        };
        text.updateSpeed = 500;
        return text;
    })(waObjs.item);
    waObjs.text = text;
    //http://www.javascripter.net/faq/keycodes.htm
    (function (key) {
        key[key["backspace"] = 8] = "backspace";
        key[key["tab"] = 9] = "tab";
        key[key["enter"] = 13] = "enter";
        key[key["shift"] = 16] = "shift";
        key[key["ctrl"] = 17] = "ctrl";
        key[key["alt"] = 18] = "alt";
        key[key["pause"] = 19] = "pause";
        key[key["capsLock"] = 20] = "capsLock";
        key[key["escape"] = 27] = "escape";
        key[key["pageUp"] = 33] = "pageUp";
        key[key["pageDown"] = 34] = "pageDown";
        key[key["end"] = 35] = "end";
        key[key["home"] = 36] = "home";
        key[key["leftArrow"] = 37] = "leftArrow";
        key[key["upArrow"] = 38] = "upArrow";
        key[key["rightArrow"] = 39] = "rightArrow";
        key[key["downArrow"] = 40] = "downArrow";
        key[key["insert"] = 45] = "insert";
        key[key["k_delete"] = 46] = "k_delete";
        key[key["k_0"] = 48] = "k_0";
        key[key["k_1"] = 49] = "k_1";
        key[key["k_2"] = 50] = "k_2";
        key[key["k_3"] = 51] = "k_3";
        key[key["k_4"] = 52] = "k_4";
        key[key["k_5"] = 53] = "k_5";
        key[key["k_6"] = 54] = "k_6";
        key[key["k_7"] = 55] = "k_7";
        key[key["k_8"] = 56] = "k_8";
        key[key["k_9"] = 57] = "k_9";
        key[key["a"] = 65] = "a";
        key[key["b"] = 66] = "b";
        key[key["c"] = 67] = "c";
        key[key["d"] = 68] = "d";
        key[key["e"] = 69] = "e";
        key[key["f"] = 70] = "f";
        key[key["g"] = 71] = "g";
        key[key["h"] = 72] = "h";
        key[key["i"] = 73] = "i";
        key[key["j"] = 74] = "j";
        key[key["k"] = 75] = "k";
        key[key["l"] = 76] = "l";
        key[key["m"] = 77] = "m";
        key[key["n"] = 78] = "n";
        key[key["o"] = 79] = "o";
        key[key["p"] = 80] = "p";
        key[key["q"] = 81] = "q";
        key[key["r"] = 82] = "r";
        key[key["s"] = 83] = "s";
        key[key["t"] = 84] = "t";
        key[key["u"] = 85] = "u";
        key[key["v"] = 86] = "v";
        key[key["w"] = 87] = "w";
        key[key["x"] = 88] = "x";
        key[key["y"] = 89] = "y";
        key[key["z"] = 90] = "z";
        key[key["leftWindow"] = 91] = "leftWindow";
        key[key["rightWindowKey"] = 92] = "rightWindowKey";
        key[key["select"] = 93] = "select";
        key[key["numpad0"] = 96] = "numpad0";
        key[key["numpad1"] = 97] = "numpad1";
        key[key["numpad2"] = 98] = "numpad2";
        key[key["numpad3"] = 99] = "numpad3";
        key[key["numpad4"] = 100] = "numpad4";
        key[key["numpad5"] = 101] = "numpad5";
        key[key["numpad6"] = 102] = "numpad6";
        key[key["numpad7"] = 103] = "numpad7";
        key[key["numpad8"] = 104] = "numpad8";
        key[key["numpad9"] = 105] = "numpad9";
        key[key["multiply"] = 106] = "multiply";
        key[key["add"] = 107] = "add";
        key[key["subtract"] = 109] = "subtract";
        key[key["decimalPoint"] = 110] = "decimalPoint";
        key[key["divide"] = 111] = "divide";
        key[key["f1"] = 112] = "f1";
        key[key["f2"] = 113] = "f2";
        key[key["f3"] = 114] = "f3";
        key[key["f4"] = 115] = "f4";
        key[key["f5"] = 116] = "f5";
        key[key["f6"] = 117] = "f6";
        key[key["f7"] = 118] = "f7";
        key[key["f8"] = 119] = "f8";
        key[key["f9"] = 120] = "f9";
        key[key["f10"] = 121] = "f10";
        key[key["f11"] = 122] = "f11";
        key[key["f12"] = 123] = "f12";
        key[key["numLock"] = 144] = "numLock";
        key[key["scrollLock"] = 145] = "scrollLock";
        key[key["semiColon"] = 186] = "semiColon";
        key[key["equalSign"] = 187] = "equalSign";
        key[key["comma"] = 188] = "comma";
        key[key["dash"] = 189] = "dash";
        key[key["period"] = 190] = "period";
        key[key["forwardSlash"] = 191] = "forwardSlash";
        key[key["graveAccent"] = 192] = "graveAccent";
        key[key["openBracket"] = 219] = "openBracket";
        key[key["backSlash"] = 220] = "backSlash";
        key[key["closeBracket"] = 221] = "closeBracket";
        key[key["singleQuote"] = 222] = "singleQuote";
    })(waObjs.key || (waObjs.key = {}));
    var key = waObjs.key;
    ;
    function isEq(code) { return bowser.agent.firefox ? code == 61 : code == 187; }
    waObjs.isEq = isEq;
    function isSemicolon(code) { return bowser.agent.firefox ? code == 59 : code == 186; }
    waObjs.isSemicolon = isSemicolon;
})(waObjs || (waObjs = {}));
//if (ch == '{') { //automaticke doplneni } po zapsani {
//  var rng = textRange.getRange(self.edit);
//  if (rng.start > 0 && self.edit.val()[rng.start - 1] == '\\') return true; //\{
//  textRange.replace(self.edit, '{}');
//  textRange.setcursor(self.edit, rng.start + 1);
//  self.notifyTextChanged();
//  return false;
//} else if (ch == '*' || ch == 'x#') { //automaticke doplneni * nebo # po zapsani {* nebo {#
//  var edVal: string = self.edit.val(); var edEscaped = waCompiler.escape(edVal);
//  var rng = textRange.getRange(self.edit);
//  if (rng.start > 0 && edEscaped.substr(rng.start - 1, 2) != '{}') return true; //not {}
//  var newEd = edVal.substr(0, rng.start - 1) + '{' + ch + /*' ' +*/ ch + '}' + edVal.substr(rng.start + 1);
//  self.edit.val(newEd);
//  textRange.setcursor(self.edit, rng.start + 1);
//  self.notifyTextChanged();
//  return false;
//} else if (ch == '#') {
//  var edVal: string = self.edit.val(); var rng = textRange.getRange(self.edit);
//  edVal = edVal.substr(0, rng.start) + setRangeSpan(rng.start, rng.end, '') + edVal.substr(rng.start);
//  self.view.html(edVal);
//  modalOpenBracketInst.show(self, rng, () => {
//    return true;
//  });
//  return false;
//DEL v IE 
//if (bowser.agent.msie)
//  self.edit.on('keypress', ev => {
//    if (ev.keyCode == key.k_delete) self.notifyTextChanged();
//  });
//self.edit.on("focus blur keydown keyup paste click mousedown", ev => {
//self.edit.on('contextmenu', ev => {
//self.edit.trigger('click');
//var span = _.find(this.marks.marks, m => {
//  var off = m.$self.offset(); var w = m.$self.width(); var h = m.$self.height();
//  var res = ev.pageX >= off.left && ev.pageX <= off.left + w && ev.pageY >= off.top && ev.pageY <= off.top + h;
//  return res;
//});
//return false;
//});
/*
//var cloneCSSProperties = [
//  'lineHeight', 'textDecoration', 'letterSpacing',
//  'fontSize', 'fontFamily', 'fontStyle', 'fontVariant',
//  'fontWeight', 'textTransform', 'textAlign',
//  'direction', 'fontSizeAdjust',
//  'wordSpacing', 'wordWrap', 'wordBreak',
//  'whiteSpace',
//];
*/
var waEncode;
(function (waEncode) {
    //**************** Escape, bracket content encoding, ...
    function escape(s) {
        if (_.isEmpty(s))
            return s;
        var res = [];
        var encodeNext = false;
        for (var i = 0; i < s.length; i++) {
            var ch = s.charAt(i);
            if (encodeNext) {
                encodeNext = false;
                if (ch == '\n') {
                    res.push(escapeChar + ch);
                    continue;
                }
                res.push(escapeFlag);
                var idx = ch.charCodeAt(0);
                if (idx > waEncode.s2Max - waEncode.s2)
                    throw 'idx > s2Max - s2';
                res.push(String.fromCharCode(waEncode.s2 + idx));
                continue;
            }
            if (ch != escapeChar) {
                res.push(ch);
                continue;
            }
            encodeNext = true;
        }
        return res.join('');
    }
    waEncode.escape = escape;
    function unEscape(s) {
        if (_.isEmpty(s))
            return s;
        var res = [];
        var encodeNext = false;
        for (var i = 0; i < s.length; i++) {
            var ch = s.charAt(i);
            if (encodeNext) {
                encodeNext = false;
                var idx = ch.charCodeAt(0);
                res.push(String.fromCharCode(idx - waEncode.s2));
                continue;
            }
            if (ch != escapeFlag) {
                res.push(ch);
                continue;
            }
            encodeNext = true;
        }
        return res.join('');
    }
    waEncode.unEscape = unEscape;
    var escapeFlag = '\u167F';
    var escapeChar = '\\';
    waEncode.s1 = 0x1400;
    waEncode.s1Max = 0x15FF;
    var s1First = '\u1400';
    var s1Last = '\u15FF';
    waEncode.s2 = 0x4E00;
    waEncode.s2Max = 0x9FCC;
    var s2First = '\u4E00';
    var s2Last = '\u9FCC';
    var lowerMask = 0x000001ff;
    var fill = '≡';
    function firstCode(sb, idx) { sb.push(String.fromCharCode(waEncode.s1 + (idx & lowerMask))); }
    function secondCode(sb, idx) { sb.push(String.fromCharCode(waEncode.s2 + (idx >> 9))); }
    function encode(sb, idx, length) {
        firstCode(sb, idx);
        secondCode(sb, idx);
        for (var i = 0; i < length; i++)
            sb.push(fill);
    }
    waEncode.encode = encode;
    function decode(ch1, ch2) {
        return ch1 - waEncode.s1 + ((ch2 - waEncode.s2) << 9);
    }
    waEncode.decode = decode;
    //*********** styleParams
    var styleParams = (function () {
        function styleParams() {
            this.attrs = {};
            this.values = [];
        }
        styleParams.prototype.id = function () { return !this.ids || this.ids.length == 0 ? null : this.ids[0]; };
        styleParams.prototype.fillParValue = function (parVal, trim) {
            if (trim === void 0) { trim = true; }
            var match = waEncode.inlineParsMask.exec(parVal);
            if (!match)
                return;
            var par = match[1];
            this.valStr = match[2];
            this.fillPar(par);
            this.values = !this.valStr ? [] : _.map(this.valStr.split('|'), function (v) { return unEscape(trim ? v.trim() : v); });
            return this;
        };
        styleParams.prototype.fillPar = function (par, trim) {
            var _this = this;
            if (trim === void 0) { trim = true; }
            if (_.isEmpty(par))
                return this;
            var kvs = _.map(par.replace(/[\n\s;]+$/, "").split(';'), function (p) {
                var idx = p.indexOf('=');
                return idx < 0 ? [p] : [p.substring(0, idx), p.substr(idx + 1)];
            });
            var ids = kvs[0][0].trim().split(/\s+/);
            if (kvs.length > 1 || kvs[0].length > 1) {
                kvs[0][0] = ids[ids.length - 1];
                this.ids = ids.slice(0, ids.length - 1);
                _.each(kvs, function (kv) { return _this.attrs[kv[0].trim()] = unEscape(trim && kv[1] ? kv[1].trim() : kv[1]); });
            }
            else
                this.ids = ids;
            return this;
        };
        return styleParams;
    })();
    waEncode.styleParams = styleParams;
    waEncode.inlineParsMask = /^(?:\((.*?)\))?(?:\s(.*))?$/;
    var inlineParams = (function () {
        function inlineParams(parVal) {
            this.values = [];
            var match = waEncode.inlineParsMask.exec(parVal);
            if (!match)
                return;
            this.pars = match[1];
            var valStr = this.vals = match[2];
            this.values = !valStr ? [] : _.map(valStr.split('|'), function (v) { return unEscape(v); });
        }
        return inlineParams;
    })();
    waEncode.inlineParams = inlineParams;
})(waEncode || (waEncode = {}));
var textRange;
(function (textRange) {
    function getRange(self) {
        var jq;
        return _textrange[browserType(self)].get(self);
    }
    textRange.getRange = getRange;
    /**
     * $().textrange('set')
     *
     * Sets the selected text of an object by specifying the start and length of the selection.
     *
     * The start and length parameters are identical to PHP's substr() function with the following changes:
     *  - excluding start will select all the text in the field.
     *  - passing 0 for length will set the cursor at start. See $().textrange('setcursor')
     *
     * @param (optional) start
     * @param (optional) length
     *
     * @see http://php.net/manual/en/function.substr.php
     */
    function setRange(self, s, l) {
        var e;
        if (typeof s === 'undefined') {
            s = 0;
        }
        else if (s < 0) {
            s = self.val().length + s;
        }
        if (typeof l === 'undefined') {
            e = self.val().length;
        }
        else if (length >= 0) {
            e = s + l;
        }
        else {
            e = self.val().length + l;
        }
        _textrange[browserType(self)].set(self, s, e);
        return self;
    }
    textRange.setRange = setRange;
    /*
     * $().textrange('setcursor')
    *
     * Sets the cursor at a position of the text field.
     *
     * @param position
    */
    function setcursor(self, position) {
        return setRange(self, position, 0);
    }
    textRange.setcursor = setcursor;
    /*
     * $().textrange('replace')
    * Replaces the selected text in the input field or textarea with text.
     *
     * @param text The text to replace the selection with.
     */
    function replace(self, text) {
        _textrange[browserType(self)].replace(self, text);
        return self;
    }
    textRange.replace = replace;
    /*
     * Alias for $().textrange('replace')
      */
    function insert(self, text) {
        return replace(self, text);
    }
    textRange.insert = insert;
    function browserType(self) {
        return 'selectionStart' in self[0] ? 'xul' : document.selection ? 'msie' : 'unknown';
    }
    var _textrange = {
        xul: {
            get: function (self, property) {
                var ta = (self[0]);
                var props = {
                    position: ta.selectionStart,
                    start: ta.selectionStart,
                    end: ta.selectionEnd,
                    length: ta.selectionEnd - ta.selectionStart,
                    text: self.val().substring(ta.selectionStart, ta.selectionEnd)
                };
                return typeof property === 'undefined' ? props : props[property];
            },
            set: function (self, start, end) {
                var ta = (self[0]);
                ta.selectionStart = start;
                ta.selectionEnd = end;
            },
            replace: function (self, text) {
                var ta = (self[0]);
                var val = self.val();
                var start = ta.selectionStart;
                self.val(val.substring(0, ta.selectionStart) + text + val.substring(ta.selectionEnd, val.length));
                ta.selectionStart = start;
                ta.selectionEnd = start + text.length;
            }
        },
        msie: {
            get: function (self, property) {
                var range = document.selection.createRange();
                if (typeof range === 'undefined') {
                    return {
                        position: 0,
                        start: 0,
                        end: self.val().length,
                        length: self.val().length,
                        text: self.val()
                    };
                }
                var rangetext = self[0].createTextRange();
                var rangetextcopy = rangetext.duplicate();
                rangetext.moveToBookmark(range.getBookmark());
                rangetextcopy.setEndPoint('EndToStart', rangetext);
                var props = {
                    position: rangetextcopy.text.length,
                    start: rangetextcopy.text.length,
                    end: rangetextcopy.text.length + range.text.length,
                    length: range.text.length,
                    text: range.text
                };
                return typeof property === 'undefined' ? props : props[property];
            },
            set: function (self, start, end) {
                var range = self[0].createTextRange();
                if (typeof range === 'undefined') {
                    return self;
                }
                if (typeof start !== 'undefined') {
                    range.moveStart('character', start);
                    range.collapse();
                }
                if (typeof end !== 'undefined') {
                    range.moveEnd('character', end - start);
                }
                range.select();
            },
            replace: function (self, text) {
                document.selection.createRange().text = text;
            }
        }
    };
})(textRange || (textRange = {}));
var waObjs;
(function (waObjs) {
    var viewmark = (function (_super) {
        __extends(viewmark, _super);
        function viewmark() {
            _super.apply(this, arguments);
        }
        //vlozeni mask na pozici caret
        //static insertSnipset(mask: string, rng: textRange.IRange, self: text): textRange.IRange {
        //  var caretIdx = mask.indexOf('|');
        //  self.setText(self.text.substr(0, rng.start) + mask.replace('|', '') + self.text.substr(rng.start));
        //  self.notifyTextChanged(false);
        //  return <any>{ start: rng.start + caretIdx, end: rng.start + caretIdx };
        //}
        //obaleni selekce {**} zavorkou
        //static surroundSpan(rng: textRange.IRange, self: text): textRange.IRange {
        //  if (self.marks.findMark(rng.start).idx != self.marks.findMark(rng.end).idx) {
        //    return viewmark.insertSnipset('{*| *}', rng, self);
        //  }
        //  self.setText(self.text.substr(0, rng.start) + '{* ' + self.text.substring(rng.start, rng.end) + '*}' + self.text.substr(rng.end));
        //  self.notifyTextChanged(false);
        //  return <any>{ start: rng.start + 2, end: rng.start + 2 };
        //}
        //******* COMPILE ******
        viewmark.prototype.markToTag = function (addCtx) {
            if (this.errorMsg)
                addCtx.addToItems(('*** ERROR: ' + this.errorMsg));
            else
                throw 'not implimented';
        };
        return viewmark;
    })(waObjs.viewmarkLow);
    waObjs.viewmark = viewmark;
    var errorMark = (function (_super) {
        __extends(errorMark, _super);
        function errorMark(owner, start, end) {
            _super.call(this, owner, waObjs.markType.no, start, end);
        }
        return errorMark;
    })(viewmark);
    waObjs.errorMark = errorMark;
    var caretMark = (function (_super) {
        __extends(caretMark, _super);
        function caretMark(owner, start) {
            _super.call(this, owner, waObjs.markType.caret, start, start);
        }
        return caretMark;
    })(viewmark);
    waObjs.caretMark = caretMark;
    var styleMark = (function (_super) {
        __extends(styleMark, _super);
        function styleMark(owner, start, end, text) {
            _super.call(this, owner, waObjs.markType.style, start, end);
            this.data = text.substring(start + 2, end - 1);
        }
        //******* COMPILE ******
        styleMark.prototype.markToTag = function (addCtx) {
        };
        return styleMark;
    })(viewmark);
    waObjs.styleMark = styleMark;
    var spanMark = (function (_super) {
        __extends(spanMark, _super);
        function spanMark(owner, isOpen, start, end, text) {
            _super.call(this, owner, isOpen ? waObjs.markType.spanOpen : waObjs.markType.spanClose, start, end);
            if (isOpen)
                this.data = text.substring(start + 2, end);
        }
        //******* COMPILE ******
        spanMark.prototype.markToTag = function (addCtx) {
            switch (this.type) {
                case waObjs.markType.spanOpen:
                    addCtx.addTag({ _tg: 'span' });
                    break;
                case waObjs.markType.spanClose:
                    addCtx.stack.pop();
                    break;
            }
        };
        return spanMark;
    })(viewmark);
    waObjs.spanMark = spanMark;
    var blockPtrMark = (function (_super) {
        __extends(blockPtrMark, _super);
        function blockPtrMark(owner, myBlock) {
            _super.call(this, owner, waObjs.markType.blockPtr, 0, 1);
            this.myBlock = myBlock;
        }
        //******* COMPILE ******
        blockPtrMark.prototype.markToTag = function (addCtx) {
            _.each(this.myBlock.compileResult, function (t) { return addCtx.addToItems(t); });
        };
        return blockPtrMark;
    })(viewmark);
    waObjs.blockPtrMark = blockPtrMark;
    var viewmarks = (function (_super) {
        __extends(viewmarks, _super);
        function viewmarks(text, view) {
            _super.call(this, text, view);
            this.finishConstructor();
            if (this.view)
                this.renderHTML();
        }
        viewmarks.prototype.html = function () {
            var text = this.text;
            if (this.marks == null)
                return text;
            var sb = [];
            var lastPos = 0;
            _.each(this.marks, function (m) {
                if (m.start < lastPos)
                    throw 'm.start < lastPos';
                if (m.start > lastPos)
                    sb.push(text.substring(lastPos, m.start));
                sb.push('<span class="');
                sb.push(m.classes());
                sb.push('">');
                if (m.type == waObjs.markType.inline)
                    sb.push(m.html);
                else
                    sb.push(text.substring(m.start, m.end));
                sb.push('</span>');
                lastPos = m.end;
            });
            if (lastPos < text.length)
                sb.push(text.substr(lastPos));
            return sb.join('');
        };
        viewmarks.prototype.parseBrackets = function () {
            var _this = this;
            var escaped = this.escaped;
            if (_.isEmpty(escaped))
                return null;
            var match;
            var stack = [];
            var res = [];
            var st = null; //non stack brackets - {!, {+
            var addError = function (start, length, msg) {
                var vm = new errorMark(_this, start, start + length);
                vm.errorMsg = msg;
                res.push(vm);
            };
            while (match = bracketMask.exec(escaped)) {
                var m = match[0];
                if (st && m != '}') {
                    addError(st.start, st.length, 'Bracket not closed');
                    st = null;
                }
                switch (m.substr(0, 2)) {
                    case '{*':
                        var spanBr = new spanMark(this, true, match.index, match.index + m.length, escaped);
                        stack.push(spanBr);
                        res.push(spanBr);
                        break;
                    case '*}':
                        if (stack.length == 0) {
                            addError(match.index, m.length, '* bracket not opened');
                            continue;
                        }
                        var spanBr = stack.pop();
                        var endBr = new spanMark(this, false, match.index, match.index + m.length, null);
                        spanBr.closeBr = endBr;
                        res.push(endBr);
                        break;
                    case '{+':
                    case '{!':
                        st = { type: m[1] == '+' ? waObjs.markType.inline : waObjs.markType.style, start: match.index, length: m.length };
                        break;
                    case '}':
                        if (!st) {
                            addError(match.index, m.length, 'Bracket not opened');
                            continue;
                        }
                        var vm = st.type == waObjs.markType.inline ? new waObjs.inlineMark(this, st.start, st.length, match.index + m.length, escaped) : new styleMark(this, st.start, match.index + m.length, escaped);
                        res.push(vm);
                        st = null;
                        break;
                    case '{':
                        addError(match.index, m.length, 'Wrong open bracket');
                        break;
                }
            }
            _.each(stack, function (bl) { return bl.errorMsg = 'Bracket not closed'; });
            return res;
        };
        return viewmarks;
    })(waObjs.viewmarksLow);
    waObjs.viewmarks = viewmarks;
    var bracketMask = /{\+gap-fill|{\+drop-down|{\+offering|{\+word-selection|{\+\s|{!|{\*[^\s\}]*|\*}|{|}/g;
})(waObjs || (waObjs = {}));
var waObjs;
(function (waObjs) {
    var inlineMark = (function (_super) {
        __extends(inlineMark, _super);
        function inlineMark(owner, start, startLen, end, encoded) {
            _super.call(this, owner, waObjs.markType.inline, start, end);
            this.encoded = encoded;
            this.tag = encoded.substr(start + 2, startLen - 2);
            this.marks = new metaJS.viewmarks(this.tag, null); //pro jistotu
            var body = encoded.substring(start + startLen, end - 1);
            var match = inlineParsMask.exec(body);
            if (!match) {
                this.html = encoded;
                if (!_.isEmpty(body.trim()))
                    this.errorMsg = 'Wrong format';
                return;
            }
            var m1 = match[1];
            var m2 = match[2];
            var m3 = match[3];
            var m4 = match[4];
            var m5 = match[5];
            this.html = '{+' + this.tag;
            if (m1) {
                this.html += m1;
                this.parsRng = { start: start + startLen + m1.length, end: start + startLen + m1.length + m2.length };
                if (encoded.substring(this.parsRng.start, this.parsRng.end) != m2)
                    throw 'encoded.substring(this.parsRng.start, this.parsRng.end';
            }
            if (m2) {
                this.marks = new metaJS.viewmarks(this.tag, m2);
                this.html += this.marks.html();
            }
            if (m3)
                this.html += m3;
            if (m4)
                this.html += m4;
            if (m5)
                this.html += m5;
            this.html += '}';
        }
        inlineMark.prototype.markToTag = function (addCtx) {
            if (this.errorMsg)
                return;
            if (this.marks.json)
                addCtx.addToItems(this.marks.json);
        };
        inlineMark.prototype.editAttributeName = function (text, rng, insertSemicolon, name) {
            new waObjs.DlgPropName(text.edit, rng, this.$self, this, function (snipset) { return text.insertSnipset((insertSemicolon ? '; ' : '') + snipset, rng); });
        };
        inlineMark.prototype.keyDown = function (text, rng, ev) {
            var parsRng = this.parsRng;
            if (!parsRng || rng.start < parsRng.start || rng.end > parsRng.end)
                return waObjs.keyDownResult.no;
            //typ klavesy
            var isEq = waObjs.isEq(ev.keyCode);
            var isSemicolon = waObjs.isSemicolon(ev.keyCode);
            var isBracket = ev.keyCode == waObjs.key.openBracket;
            if (!isEq && !isSemicolon && !isBracket)
                return waObjs.keyDownResult.no;
            //isBracket a prazdna zavorka
            if (isBracket && (!this.marks.marks || this.marks.marks.length == 0)) {
                this.editAttributeName(text, rng, false, null);
                return waObjs.keyDownResult.false;
            }
            var pos = rng.start - this.parsRng.start;
            //*********************** '=;'
            if (isEq || isSemicolon) {
                //spocitej marks jako po dokonceni stisku klavesy
                var futured = this.encoded.substring(parsRng.start, rng.start) + (isEq ? '=' : ';') + this.encoded.substring(rng.start, parsRng.end);
                var act = new metaJS.viewmarks(this.tag, futured);
                if (act.hasSeriousError())
                    return waObjs.keyDownResult.no;
                if (isEq) {
                    //najdi posledni mark pred aktulni EQ mark
                    var nameMark = null;
                    _.find(act.marks, function (m) { if (m.type == waObjs.markType.propName)
                        nameMark = m; return m.type == waObjs.markType.propEq && m.start >= pos; });
                    if (!nameMark)
                        throw 'Something wrong: !mark';
                    alert('select value');
                }
                else {
                    this.editAttributeName(text, rng, true, null);
                }
                return waObjs.keyDownResult.false;
            }
            //*********************** '{'
            var act = this.marks;
            if (act.hasSeriousError())
                return waObjs.keyDownResult.no;
            //find act mark
            var nameMark = null;
            var valueMark = null;
            _.find(act.marks, function (m) {
                if (m.type == waObjs.markType.propName) {
                    nameMark = m;
                    valueMark = null;
                }
                else if (m.type == waObjs.markType.propValue) {
                    nameMark = null;
                    if (m.start <= pos && m.end >= pos) {
                        valueMark = m;
                        return true;
                    }
                }
                return m.end > pos;
            });
            if (nameMark != null)
                new waObjs.DlgEditInline(text.edit, rng, this.$self, this, function () { return null; });
            else if (valueMark != null)
                alert('edit value');
            else
                this.editAttributeName(text, rng, false, nameMark);
            return waObjs.keyDownResult.false;
        };
        return inlineMark;
    })(waObjs.viewmark);
    waObjs.inlineMark = inlineMark;
    var inlineParsMask = /^(?:(\()([^\)]*)(\)))?(?:(\s)(.*))?$/;
})(waObjs || (waObjs = {}));
var waObjs;
(function (waObjs) {
    (function (markType) {
        markType[markType["no"] = 0] = "no";
        markType[markType["spanOpen"] = 1] = "spanOpen";
        markType[markType["spanClose"] = 2] = "spanClose";
        markType[markType["inline"] = 3] = "inline";
        markType[markType["style"] = 4] = "style";
        markType[markType["blockPtr"] = 5] = "blockPtr";
        markType[markType["caret"] = 6] = "caret";
        //pro property editor
        markType[markType["propName"] = 7] = "propName";
        markType[markType["propEq"] = 8] = "propEq";
        markType[markType["propValue"] = 9] = "propValue";
    })(waObjs.markType || (waObjs.markType = {}));
    var markType = waObjs.markType;
    var viewmarkLow = (function () {
        function viewmarkLow(owner, type, start, end) {
            this.owner = owner;
            this.type = type;
            this.start = start;
            this.end = end;
        }
        viewmarkLow.prototype.classes = function () {
            if (this.errorMsg)
                return 'error';
            switch (this.type) {
                case markType.spanOpen:
                case markType.spanClose: return 'span';
                case markType.inline: return 'inline';
                case markType.style: return 'style';
                case markType.caret: return '';
                case markType.propValue: return 'prop-value';
                case markType.propName: return 'prop-name';
                default: throw 'not implemented';
            }
        };
        return viewmarkLow;
    })();
    waObjs.viewmarkLow = viewmarkLow;
    var viewmarksLow = (function () {
        function viewmarksLow(text, view) {
            this.text = text;
            this.view = view;
            this.escaped = waEncode.escape(text);
        }
        viewmarksLow.prototype.finishConstructor = function () {
            this.marks = this.parseBrackets();
            if (this.marks)
                this.marks = _.sortBy(this.marks, function (m) { return m.end > m.start ? m.start * 2 : m.start * 2 - 0.5; });
        };
        viewmarksLow.prototype.hasError = function () { return _.any(this.marks, function (m) { return !!m.errorMsg; }); };
        //najde mark a jeji index, obsahujici caret. includeStart: do mark se pocita i kurzor pred pocatkem
        viewmarksLow.prototype.findMark = function (pos) {
            if (!this.marks)
                return { mark: null, idx: -1 };
            for (var i = 0; i < this.marks.length; i++) {
                var m = this.marks[i];
                if (m.type == markType.caret || m.errorMsg)
                    continue;
                if (m.start < pos && m.end > pos)
                    return { idx: i, mark: this.marks[i] };
            }
            return { mark: null, idx: -1 };
        };
        viewmarksLow.prototype.renderHTML = function () {
            var html = this.html();
            //console.log(html);
            this.view.html(html);
            if (this.marks)
                _.each(_.zip(this.marks, this.view.find('> span')), function (arr) {
                    arr[0].$self = $(arr[1]);
                    //zip inner spans
                    var inline = (arr[0]);
                    if (inline.type != markType.inline)
                        return;
                    if (inline.marks.marks)
                        _.each(_.zip(inline.marks.marks, inline.$self.find('> span')), function (arr) { return arr[0].$self = $(arr[1]); });
                });
        };
        viewmarksLow.prototype.insertCaretMark = function (pos) {
            var m = new waObjs.caretMark(this, pos);
            if (!this.marks)
                this.marks = [];
            else
                this.marks = _.filter(this.marks, function (m) { return m.type != markType.caret; });
            this.marks.push(m);
            this.renderHTML();
            return m;
        };
        viewmarksLow.prototype.html = function () { throw 'not implemented'; };
        viewmarksLow.prototype.parseBrackets = function () { throw 'not implemented'; };
        return viewmarksLow;
    })();
    waObjs.viewmarksLow = viewmarksLow;
})(waObjs || (waObjs = {}));
var metaJS;
(function (metaJS) {
    var implLow = (function () {
        function implLow(json) {
            if (json)
                for (var p in json)
                    this[p] = json[p];
        }
        implLow.prototype.hasFlag = function (fl) {
            var val = _.isString(fl) ? CourseModel.tgSt[fl] : fl;
            return (this.flag & val) != 0;
        };
        implLow.prototype.rnName = function () {
            if (_.isEmpty(this._newName))
                return this.name;
            return this.name + ' => <span class="label label-default">' + this._newName + '</span>';
        };
        implLow.prototype.rnNameNew = function () { return this._newName || this.name; };
        return implLow;
    })();
    metaJS.implLow = implLow;
    var enumImpl = (function (_super) {
        __extends(enumImpl, _super);
        function enumImpl(json) {
            _super.call(this, json);
            for (var i = 0; i < this.enumData.length; i++)
                this.enumData[i] = new enumItemImpl(this.enumData[i]);
        }
        return enumImpl;
    })(implLow);
    metaJS.enumImpl = enumImpl;
    var enumItemImpl = (function (_super) {
        __extends(enumItemImpl, _super);
        function enumItemImpl() {
            _super.apply(this, arguments);
        }
        return enumItemImpl;
    })(implLow);
    metaJS.enumItemImpl = enumItemImpl;
    var typeImpl = (function (_super) {
        __extends(typeImpl, _super);
        function typeImpl() {
            _super.apply(this, arguments);
        }
        typeImpl.prototype.rnDescendants = function () {
            var _this = this;
            if (this.name == 'macro')
                return null;
            var cond = function (d) { d.isTrashMode = _this.isTrashMode; var ok = !!d.rnDescendants() || !d.hasFlag(CourseModel.tgSt.docIgnore); return _this.isTrashMode ? !ok || !!d.rnProps() : ok; };
            var res = _.filter(this.descendants, function (d) { return cond(d); });
            return res.length == 0 ? null : res;
        };
        typeImpl.prototype.rnProps = function () {
            var _this = this;
            var cond = function (p) { var ok = !p.hasFlag(CourseModel.tgSt.docIgnore); return _this.isTrashMode ? !ok : ok; };
            var res = _.filter(this.ownProps, function (p) { return cond(p); });
            return res.length == 0 ? null : res;
        };
        typeImpl.prototype.rnPropsNew = function () {
            var res = _.filter(this.props, function (p) { return !p.hasFlag(CourseModel.tgSt.docIgnore); });
            return _.sortBy(res, function (p) { return p.name; }); //p._newName || p.name);
        };
        return typeImpl;
    })(implLow);
    metaJS.typeImpl = typeImpl;
    //**************** objekt pro data, exportovana z CSharp
    var xsdObj = (function () {
        function xsdObj(json) {
            var _this = this;
            this.props = []; //prop impl
            this.allEnums = [];
            this.allTypes = [];
            //properties from JSON
            if (json)
                for (var p in json)
                    this[p] = json[p];
            //interface => impl
            for (var p in this.types)
                this.allTypes.push(this.types[p] = new typeImpl(this.types[p]));
            for (var p in this.enums)
                this.allEnums.push(this.enums[p] = new enumImpl(this.enums[p]));
            //spocti typeProps
            var ownPropDirs = {};
            _.map(this.properties, function (p) {
                var props = ownPropDirs[p.propOf];
                if (!props)
                    ownPropDirs[p.propOf] = props = [];
                props.push(p);
            });
            _.each(this.types, function (tp) {
                tp.propDir = {};
                tp.props = [];
                tp.ownProps = [];
                var t = tp;
                do {
                    _.each(ownPropDirs[t.name], function (p) {
                        var impl = new propImpl(p);
                        tp.propDir[p.name] = impl;
                        tp.props.push(impl);
                        if (t == tp) {
                            tp.ownProps.push(impl);
                            _this.props.push(impl);
                        }
                    });
                    t = t.ancestor ? _this.types[t.ancestor] : null;
                } while (t);
                tp.props = _.sortBy(tp.props, function (p) { return p.name; });
                tp.ownProps = _.sortBy(tp.ownProps, function (p) { return p.name; });
                //descendants
                if (tp.ancestor) {
                    var anc = _this.types[tp.ancestor];
                    if (!anc.descendants)
                        anc.descendants = [];
                    anc.descendants.push(tp);
                }
            });
            this.props = _.sortBy(this.props, function (p) { return p.name; });
            //sorting descendants
            for (var p in this.types) {
                var t = this.types[p];
                if (t.descendants)
                    t.descendants = _.sortBy(t.descendants, function (t) { return t.name; });
            }
        }
        xsdObj.prototype.rnRoot = function (isTrash) {
            var res = this.types['tag'];
            res.isTrashMode = isTrash;
            return res;
        };
        xsdObj.prototype.rnElements = function () {
            var _this = this;
            return _.sortBy(this.allTypes.filter(function (t) { return t.descendants == null && !t.hasFlag(CourseModel.tgSt.docIgnore) && !_this.inheritsFrom(t.name, 'macro'); }), function (t) { return t.name; }); //t => t._newName || t.name);
        };
        xsdObj.prototype.rnEnums = function () {
            return _.filter(this.allEnums, function (e) { return !e.hasFlag(CourseModel.tgSt.docIgnore); });
        };
        xsdObj.prototype.rnRenameJson = function () {
            var res = _.map(this.rnElements(), function (e) {
                return {
                    old: e.name,
                    'new': e._newName || undefined,
                    props: _.map(e.rnPropsNew(), function (p) { return { old: p.name, 'new': p._newName || undefined }; })
                };
            });
            return JSON.stringify(res).replace(/"/g, '\\"');
        };
        xsdObj.prototype.dcElements = function (isCut) {
            return _.filter(this.rnElements(), function (el) { return isCut == !!xsdObj.cutEls[el.name]; });
        };
        xsdObj.prototype.inheritsFrom = function (self, ancestor) { while (self) {
            if (self == ancestor)
                return true;
            var self = this.types[self].ancestor;
        } return false; };
        xsdObj.prototype.tooglePanel = function (model, ev) {
            var $a = $(ev.currentTarget);
            var $body = $a.parents('.panel').find('.panel-body');
            $body.toggle();
            var isVisible = $body.is(":visible");
            $a.toggleClass('fa-minus', isVisible);
            $a.toggleClass('fa-plus', !isVisible);
        };
        xsdObj.prototype.showProp = function (ev, propOf, prop) {
            alert(propOf + '.' + prop);
        };
        xsdObj.cutEls = { 'cut-dialog': true, 'cut-text': true, 'include-dialog': true, 'include-text': true, 'phrase': true, 'phrase-replace': true, 'replica': true };
        return xsdObj;
    })();
    metaJS.xsdObj = xsdObj;
    var propImpl = (function (_super) {
        __extends(propImpl, _super);
        function propImpl(json) {
            _super.call(this, json);
            this.camelName = Utils.toCammelCase(this.name);
        }
        propImpl.prototype.validateAndAssign = function (value, tag) {
            var trimVal = value.trim();
            delete tag[this.camelName];
            switch (this.type) {
                case metaJS.xsdPropType.Enum:
                    if (this.modifier != metaJS.xsdPropModifier.no)
                        throw 'System error: boolean and modifier';
                    trimVal = trimVal.toLowerCase();
                    var en = this.myEnum();
                    var it = _.find(en.enumData, function (v) { return v.name == trimVal; });
                    if (it) {
                        tag[this.camelName] = it.value;
                        return null;
                    }
                    return 'One from enum value expected';
                case metaJS.xsdPropType.Bool:
                    if (this.modifier != metaJS.xsdPropModifier.no)
                        throw 'System error: boolean and modifier';
                    var isOK = boolVal.test(trimVal = trimVal.toLowerCase());
                    if (isOK) {
                        tag[this.camelName] = trimVal == 'true';
                        return null;
                    }
                    return '[true] or [false] expected';
                case metaJS.xsdPropType.Number:
                    if (this.modifier != metaJS.xsdPropModifier.no)
                        throw 'System error: number and modifier';
                    var isOK = numVal.test(trimVal);
                    if (isOK) {
                        tag[this.camelName] = parseInt(trimVal);
                        return null;
                    }
                    return 'Number expected';
                case metaJS.xsdPropType.String:
                    if (this.modifier == metaJS.xsdPropModifier.no) {
                        switch (this.constrains) {
                            case metaJS.xsdPropConstrains.no:
                                tag[this.camelName] = waEncode.unEscape(value);
                                return null;
                            case metaJS.xsdPropConstrains.idref:
                            case metaJS.xsdPropConstrains.ncname:
                            case metaJS.xsdPropConstrains.id:
                                var isOK = idVal.test(trimVal);
                                if (isOK) {
                                    tag[this.camelName] = trimVal;
                                    return null;
                                }
                                return 'Identifier expected';
                            default: throw 'System error: xsdPropType.String with unknown constrains';
                        }
                    }
            }
            return null;
        };
        propImpl.prototype.myEnum = function () {
            if (this.type != metaJS.xsdPropType.Enum)
                throw 'metaJS.propImpl.Enum: this.type != xsdPropType.Enum';
            return metaJS.metaObj.enums[this.clsEnumName];
        };
        return propImpl;
    })(implLow);
    metaJS.propImpl = propImpl;
    var boolVal = /^(true)|(false)$/i;
    var numVal = /^\d+$/;
    var idVal = /^\s*[a-z][\w-]*\s*$/i;
    metaJS.metaObj = new xsdObj(metaJS.metaData);
})(metaJS || (metaJS = {}));
var metaJS;
(function (metaJS) {
    (function (xsdPropType) {
        xsdPropType[xsdPropType["Number"] = 0] = "Number";
        xsdPropType[xsdPropType["String"] = 1] = "String";
        xsdPropType[xsdPropType["Enum"] = 2] = "Enum";
        xsdPropType[xsdPropType["Bool"] = 3] = "Bool";
        xsdPropType[xsdPropType["Class"] = 4] = "Class";
    })(metaJS.xsdPropType || (metaJS.xsdPropType = {}));
    var xsdPropType = metaJS.xsdPropType;
    (function (xsdPropModifier) {
        xsdPropModifier[xsdPropModifier["no"] = 0] = "no";
        xsdPropModifier[xsdPropModifier["Array"] = 1] = "Array";
        xsdPropModifier[xsdPropModifier["ArrayArray"] = 2] = "ArrayArray";
        xsdPropModifier[xsdPropModifier["Dict"] = 3] = "Dict";
    })(metaJS.xsdPropModifier || (metaJS.xsdPropModifier = {}));
    var xsdPropModifier = metaJS.xsdPropModifier;
    (function (xsdInheritsFrom) {
        xsdInheritsFrom[xsdInheritsFrom["tag"] = 0] = "tag";
        xsdInheritsFrom[xsdInheritsFrom["eval"] = 1] = "eval";
        xsdInheritsFrom[xsdInheritsFrom["media"] = 2] = "media";
    })(metaJS.xsdInheritsFrom || (metaJS.xsdInheritsFrom = {}));
    var xsdInheritsFrom = metaJS.xsdInheritsFrom;
    (function (xsdPropConstrains) {
        xsdPropConstrains[xsdPropConstrains["no"] = 0] = "no";
        xsdPropConstrains[xsdPropConstrains["regex"] = 1] = "regex";
        xsdPropConstrains[xsdPropConstrains["id"] = 2] = "id";
        xsdPropConstrains[xsdPropConstrains["idref"] = 3] = "idref";
        xsdPropConstrains[xsdPropConstrains["intNumber"] = 4] = "intNumber";
        xsdPropConstrains[xsdPropConstrains["ncname"] = 5] = "ncname";
    })(metaJS.xsdPropConstrains || (metaJS.xsdPropConstrains = {}));
    var xsdPropConstrains = metaJS.xsdPropConstrains;
    metaJS.metaData = {
        "types": {
            "tag": {
                "ancestor": null,
                "inheritsFrom": 0,
                "required": false,
                "name": "tag",
                "summary": "tag",
                "descr": "tag descr",
                "flag": 384,
                "_newName": null
            },
            "eval-control": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "eval-control",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "html-tag": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "html-tag",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "script": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "script",
                "summary": null,
                "descr": null,
                "flag": 386,
                "_newName": null
            },
            "img": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "img",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "text": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "text",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "body": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "body",
                "summary": null,
                "descr": null,
                "flag": 131333,
                "_newName": null
            },
            "header-prop": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "header-prop",
                "summary": null,
                "descr": null,
                "flag": 36992,
                "_newName": null
            },
            "macro": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "human-eval": {
                "ancestor": "eval-control",
                "inheritsFrom": 1,
                "required": false,
                "name": "human-eval",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "tts-sound": {
                "ancestor": "media-tag",
                "inheritsFrom": 2,
                "required": false,
                "name": "tts-sound",
                "summary": null,
                "descr": null,
                "flag": 133,
                "_newName": null
            },
            "eval-button": {
                "ancestor": "eval-control",
                "inheritsFrom": 1,
                "required": false,
                "name": "eval-button",
                "summary": null,
                "descr": "@summary tlacitko pro vyhodnoceni jedne skupiny vyhodnotitelnych elementu.\n            @descr ??",
                "flag": 5,
                "_newName": "eval-btn"
            },
            "drop-down": {
                "ancestor": "edit",
                "inheritsFrom": 1,
                "required": false,
                "name": "drop-down",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "edit": {
                "ancestor": "eval-control",
                "inheritsFrom": 1,
                "required": false,
                "name": "edit",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "gap-fill": {
                "ancestor": "edit",
                "inheritsFrom": 1,
                "required": false,
                "name": "gap-fill",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "radio-button": {
                "ancestor": "eval-control",
                "inheritsFrom": 1,
                "required": false,
                "name": "radio-button",
                "summary": null,
                "descr": null,
                "flag": 4101,
                "_newName": null
            },
            "check-low": {
                "ancestor": "eval-control",
                "inheritsFrom": 1,
                "required": false,
                "name": "check-low",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            "check-item": {
                "ancestor": "check-low",
                "inheritsFrom": 1,
                "required": false,
                "name": "check-item",
                "summary": null,
                "descr": null,
                "flag": 4101,
                "_newName": null
            },
            "check-box": {
                "ancestor": "check-low",
                "inheritsFrom": 1,
                "required": false,
                "name": "check-box",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "pairing-item": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "pairing-item",
                "summary": null,
                "descr": null,
                "flag": 4101,
                "_newName": null
            },
            "pairing": {
                "ancestor": "eval-control",
                "inheritsFrom": 1,
                "required": false,
                "name": "pairing",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "single-choice": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "single-choice",
                "summary": null,
                "descr": null,
                "flag": 4,
                "_newName": null
            },
            "word-selection": {
                "ancestor": "eval-control",
                "inheritsFrom": 1,
                "required": false,
                "name": "word-selection",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "word-multi-selection": {
                "ancestor": "eval-control",
                "inheritsFrom": 1,
                "required": false,
                "name": "word-multi-selection",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "word-ordering": {
                "ancestor": "eval-control",
                "inheritsFrom": 1,
                "required": false,
                "name": "word-ordering",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "sentence-ordering": {
                "ancestor": "eval-control",
                "inheritsFrom": 1,
                "required": false,
                "name": "sentence-ordering",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "sentence-ordering-item": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "sentence-ordering-item",
                "summary": null,
                "descr": null,
                "flag": 4101,
                "_newName": "sentence"
            },
            "extension": {
                "ancestor": "eval-control",
                "inheritsFrom": 1,
                "required": false,
                "name": "extension",
                "summary": null,
                "descr": null,
                "flag": 135,
                "_newName": null
            },
            "writing": {
                "ancestor": "human-eval",
                "inheritsFrom": 1,
                "required": false,
                "name": "writing",
                "summary": null,
                "descr": null,
                "flag": 4101,
                "_newName": null
            },
            "recording": {
                "ancestor": "human-eval",
                "inheritsFrom": 1,
                "required": false,
                "name": "recording",
                "summary": null,
                "descr": null,
                "flag": 4101,
                "_newName": null
            },
            "list": {
                "ancestor": "macro",
                "inheritsFrom": 0,
                "required": false,
                "name": "list",
                "summary": null,
                "descr": null,
                "flag": 4,
                "_newName": null
            },
            "list-group": {
                "ancestor": "macro",
                "inheritsFrom": 0,
                "required": false,
                "name": "list-group",
                "summary": null,
                "descr": null,
                "flag": 12293,
                "_newName": null
            },
            "two-column": {
                "ancestor": "macro",
                "inheritsFrom": 0,
                "required": false,
                "name": "two-column",
                "summary": null,
                "descr": null,
                "flag": 4101,
                "_newName": null
            },
            "panel": {
                "ancestor": "macro",
                "inheritsFrom": 0,
                "required": false,
                "name": "panel",
                "summary": null,
                "descr": null,
                "flag": 131077,
                "_newName": null
            },
            "node": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "node",
                "summary": null,
                "descr": null,
                "flag": 4228,
                "_newName": null
            },
            "offering": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "offering",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "url-tag": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "url-tag",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            "media-tag": {
                "ancestor": "url-tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "media-tag",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "media-big-mark": {
                "ancestor": "media-tag",
                "inheritsFrom": 2,
                "required": false,
                "name": "media-big-mark",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "media-player": {
                "ancestor": "media-tag",
                "inheritsFrom": 2,
                "required": false,
                "name": "media-player",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "media-video": {
                "ancestor": "media-tag",
                "inheritsFrom": 2,
                "required": false,
                "name": "media-video",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "media-text": {
                "ancestor": "media-tag",
                "inheritsFrom": 2,
                "required": false,
                "name": "media-text",
                "summary": null,
                "descr": null,
                "flag": 5,
                "_newName": null
            },
            "_media-replica": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "_media-replica",
                "summary": null,
                "descr": null,
                "flag": 389,
                "_newName": null
            },
            "_media-sent": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "_media-sent",
                "summary": null,
                "descr": null,
                "flag": 131461,
                "_newName": null
            },
            "_snd-page": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "_snd-page",
                "summary": null,
                "descr": null,
                "flag": 385,
                "_newName": null
            },
            "_snd-file-group": {
                "ancestor": "url-tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "_snd-file-group",
                "summary": null,
                "descr": null,
                "flag": 385,
                "_newName": null
            },
            "_snd-group": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "_snd-group",
                "summary": null,
                "descr": null,
                "flag": 385,
                "_newName": null
            },
            "_snd-interval": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "_snd-interval",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "_snd-sent": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "_snd-sent",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "_snd-file": {
                "ancestor": "url-tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "_snd-file",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "cut-dialog": {
                "ancestor": "_snd-file",
                "inheritsFrom": 0,
                "required": false,
                "name": "cut-dialog",
                "summary": null,
                "descr": null,
                "flag": 98308,
                "_newName": null
            },
            "cut-text": {
                "ancestor": "_snd-file",
                "inheritsFrom": 0,
                "required": false,
                "name": "cut-text",
                "summary": null,
                "descr": null,
                "flag": 98308,
                "_newName": null
            },
            "phrase": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "phrase",
                "summary": null,
                "descr": null,
                "flag": 102405,
                "_newName": "sent"
            },
            "replica": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "replica",
                "summary": null,
                "descr": null,
                "flag": 98309,
                "_newName": null
            },
            "include": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "include",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "include-text": {
                "ancestor": "include",
                "inheritsFrom": 0,
                "required": false,
                "name": "include-text",
                "summary": null,
                "descr": null,
                "flag": 98304,
                "_newName": null
            },
            "include-dialog": {
                "ancestor": "include",
                "inheritsFrom": 0,
                "required": false,
                "name": "include-dialog",
                "summary": null,
                "descr": null,
                "flag": 98304,
                "_newName": null
            },
            "phrase-replace": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "phrase-replace",
                "summary": null,
                "descr": null,
                "flag": 102400,
                "_newName": "sent-replace"
            },
            "_eval-page": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "_eval-page",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "_eval-btn": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "_eval-btn",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "_eval-group": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "_eval-group",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "macro-template": {
                "ancestor": "macro",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro-template",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "macro-true-false": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro-true-false",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "macro-single-choices": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro-single-choices",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "macro-pairing": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro-pairing",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "macro-table": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro-table",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "macro-list-word-ordering": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro-list-word-ordering",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "macro-list": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro-list",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "macro-icon-list": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro-icon-list",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "macro-article": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro-article",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "macro-vocabulary": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro-vocabulary",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "macro-video": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "macro-video",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "inline-tag": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "inline-tag",
                "summary": null,
                "descr": null,
                "flag": 16388,
                "_newName": null
            },
            "smart-tag": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "smart-tag",
                "summary": null,
                "descr": null,
                "flag": 2180,
                "_newName": null
            },
            "smart-element-low": {
                "ancestor": "macro-template",
                "inheritsFrom": 0,
                "required": false,
                "name": "smart-element-low",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            "smart-element": {
                "ancestor": "smart-element-low",
                "inheritsFrom": 0,
                "required": false,
                "name": "smart-element",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "smart-offering": {
                "ancestor": "smart-element-low",
                "inheritsFrom": 0,
                "required": false,
                "name": "smart-offering",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "smart-pairing": {
                "ancestor": "smart-element-low",
                "inheritsFrom": 0,
                "required": false,
                "name": "smart-pairing",
                "summary": null,
                "descr": null,
                "flag": 6,
                "_newName": null
            },
            "doc-tags-meta": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "doc-tags-meta",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "doc-named": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "doc-named",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            "doc-type": {
                "ancestor": "doc-named",
                "inheritsFrom": 0,
                "required": false,
                "name": "doc-type",
                "summary": null,
                "descr": null,
                "flag": 386,
                "_newName": null
            },
            "doc-enum": {
                "ancestor": "doc-named",
                "inheritsFrom": 0,
                "required": false,
                "name": "doc-enum",
                "summary": null,
                "descr": null,
                "flag": 386,
                "_newName": null
            },
            "doc-enum-item": {
                "ancestor": "doc-named",
                "inheritsFrom": 0,
                "required": false,
                "name": "doc-enum-item",
                "summary": null,
                "descr": null,
                "flag": 386,
                "_newName": null
            },
            "doc-prop": {
                "ancestor": "doc-named",
                "inheritsFrom": 0,
                "required": false,
                "name": "doc-prop",
                "summary": null,
                "descr": null,
                "flag": 386,
                "_newName": null
            },
            "doc-descr": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "doc-descr",
                "summary": null,
                "descr": null,
                "flag": 36992,
                "_newName": null
            },
            "doc-example": {
                "ancestor": "tag",
                "inheritsFrom": 0,
                "required": false,
                "name": "doc-example",
                "summary": null,
                "descr": null,
                "flag": 133,
                "_newName": null
            }
        },
        "properties": [
            {
                "propOf": "tag",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 2,
                "regexConstrains": null,
                "name": "id",
                "summary": null,
                "descr": "@summary jednoznacna identifikace elementu\n            @descr ??",
                "flag": 524288,
                "_newName": null
            },
            {
                "propOf": "tag",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "srcpos",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            {
                "propOf": "tag",
                "type": 4,
                "modifier": 1,
                "clsEnumName": "tag",
                "constrains": 0,
                "regexConstrains": null,
                "name": "items",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            {
                "propOf": "tag",
                "type": 1,
                "modifier": 1,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "class",
                "summary": null,
                "descr": "@summary seznam CSS classes\n            @descr ??",
                "flag": 160,
                "_newName": null
            },
            {
                "propOf": "eval-control",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 1,
                "regexConstrains": "^((and)-\\w+-(exchangeable)|(and)-\\w+|\\w+-(exchangeable))$",
                "name": "eval-group",
                "summary": null,
                "descr": "@summary and-[id] nebo [id]-exchangeable nebo and-[id]-exchangeable.\n            Pro radioButton pouze [id]\n             @descr ??",
                "flag": 524288,
                "_newName": null
            },
            {
                "propOf": "eval-control",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "score-weight",
                "summary": null,
                "descr": null,
                "flag": 524288,
                "_newName": null
            },
            {
                "propOf": "eval-control",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 3,
                "regexConstrains": null,
                "name": "eval-button-id",
                "summary": null,
                "descr": null,
                "flag": 524288,
                "_newName": "eval-btn-id"
            },
            {
                "propOf": "html-tag",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "tag-name",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "html-tag",
                "type": 4,
                "modifier": 1,
                "clsEnumName": "attr",
                "constrains": 0,
                "regexConstrains": null,
                "name": "attrs",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            {
                "propOf": "script",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "cdata",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "img",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "src",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "text",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "title",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "body",
                "type": 4,
                "modifier": 0,
                "clsEnumName": "_snd-page",
                "constrains": 0,
                "regexConstrains": null,
                "name": "snd-page",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            {
                "propOf": "body",
                "type": 4,
                "modifier": 0,
                "clsEnumName": "_eval-page",
                "constrains": 0,
                "regexConstrains": null,
                "name": "eval-page",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            {
                "propOf": "body",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "url",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            {
                "propOf": "body",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "order",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "body",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "instr-title",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "body",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "externals",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            {
                "propOf": "body",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "see-also-links",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "course-see-also-str"
            },
            {
                "propOf": "body",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "old-ea-is-passive",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            {
                "propOf": "body",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "is-old-ea",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            {
                "propOf": "body",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "instr-body",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "instrs-str"
            },
            {
                "propOf": "body",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "see-also-str",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            {
                "propOf": "human-eval",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "is-passive",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "tts-sound",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "text",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "eval-button",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "score-as-ratio",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "ratio-score"
            },
            {
                "propOf": "drop-down",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "gap-fill-like",
                "summary": null,
                "descr": null,
                "flag": 524672,
                "_newName": null
            },
            {
                "propOf": "edit",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "correct-value",
                "summary": "Spravana hodnota vyhodnotitelneho elementu.",
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "edit",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 5,
                "regexConstrains": null,
                "name": "width-group",
                "summary": "vsem elementum se stejnou hodnotou smartWidth se nastavi stejna sirka (rovna maximu z sirky techto elementu)",
                "descr": null,
                "flag": 524288,
                "_newName": "smart-width"
            },
            {
                "propOf": "edit",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "width",
                "summary": null,
                "descr": null,
                "flag": 524288,
                "_newName": null
            },
            {
                "propOf": "edit",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 3,
                "regexConstrains": null,
                "name": "offering-id",
                "summary": "id \"offering\" elementu, do ktereho se pridaji vsechny spravne hodnoty z correctValue.",
                "descr": "Pri nastaveni offeringId se zaroven na stejnou hodnotu nastavi i smartWidth (pokud smartWidth jiz neni nastavena na neco jineho)",
                "flag": 524288,
                "_newName": null
            },
            {
                "propOf": "edit",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "case-sensitive",
                "summary": null,
                "descr": null,
                "flag": 524288,
                "_newName": null
            },
            {
                "propOf": "gap-fill",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "hint",
                "summary": null,
                "descr": null,
                "flag": 524288,
                "_newName": "place-holder"
            },
            {
                "propOf": "gap-fill",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "init-value",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "gap-fill",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "read-only",
                "summary": null,
                "descr": null,
                "flag": 524288,
                "_newName": null
            },
            {
                "propOf": "gap-fill",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "skip-evaluation",
                "summary": null,
                "descr": null,
                "flag": 524288,
                "_newName": null
            },
            {
                "propOf": "radio-button",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "correct-value",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "radio-button",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "init-value",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "radio-button",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "read-only",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "radio-button",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "skip-evaluation",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "check-low",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "correct-value",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "check-low",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "check-item-texts",
                "constrains": 0,
                "regexConstrains": null,
                "name": "text-type",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "text-id"
            },
            {
                "propOf": "check-low",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "three-state-bool",
                "constrains": 0,
                "regexConstrains": null,
                "name": "init-value",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "check-low",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "read-only",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "check-low",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "skip-evaluation",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "pairing-item",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "right",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "pairing",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "left-random",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "random"
            },
            {
                "propOf": "pairing",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "pairing-left-width",
                "constrains": 0,
                "regexConstrains": null,
                "name": "left-width",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "single-choice",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "read-only",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "single-choice",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "skip-evaluation",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "single-choice",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "score-weight",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "single-choice",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 3,
                "regexConstrains": null,
                "name": "eval-button-id",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "eval-btn-id"
            },
            {
                "propOf": "word-selection",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "words",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "word-multi-selection",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "words",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "word-ordering",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "correct-order",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "correct-value"
            },
            {
                "propOf": "extension",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "data",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "extension",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "cdata",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "writing",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "limit-recommend",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "recommend-words-min"
            },
            {
                "propOf": "writing",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "limit-min",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "words-min"
            },
            {
                "propOf": "writing",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "limit-max",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "words-max"
            },
            {
                "propOf": "writing",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "number-of-rows",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "init-rows"
            },
            {
                "propOf": "recording",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "limit-recommend",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "recommend-seconds-from"
            },
            {
                "propOf": "recording",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "limit-min",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "speak-seconds-from"
            },
            {
                "propOf": "recording",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "limit-max",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "speak-seconds-to"
            },
            {
                "propOf": "recording",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "record-in-dialog",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "stop-in-modal-dialog"
            },
            {
                "propOf": "recording",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 3,
                "regexConstrains": null,
                "name": "dialog-header-id",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "modal-dialog-header"
            },
            {
                "propOf": "recording",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "modal-size",
                "constrains": 0,
                "regexConstrains": null,
                "name": "dialog-size",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "modal-dialog-size"
            },
            {
                "propOf": "recording",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "single-attempt",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "disable-re-record"
            },
            {
                "propOf": "list",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "delim",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "list",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "is-striped",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "list",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "list-icon",
                "constrains": 0,
                "regexConstrains": null,
                "name": "icon",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "list",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "colors",
                "constrains": 0,
                "regexConstrains": null,
                "name": "color",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "list-group",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "is-striped",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "panel",
                "type": 4,
                "modifier": 0,
                "clsEnumName": "header-prop",
                "constrains": 0,
                "regexConstrains": null,
                "name": "header",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            {
                "propOf": "offering",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "words",
                "summary": "",
                "descr": "seznam prvku nabidky, oddeleny \"|\"",
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "offering",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "offering-drop-down-mode",
                "constrains": 0,
                "regexConstrains": null,
                "name": "mode",
                "summary": "",
                "descr": "pro \"drop-down\" tagy: drop-down-discard\" => kazdy prvek nabidky muze byt vybrana pouze jednim drop-down elementem.\n            drop-down-mode=\"keep\" => jeden prvek nabidky muze pouzit vice drop-down elementu",
                "flag": 524288,
                "_newName": "drop-down-mode"
            },
            {
                "propOf": "offering",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "hidden",
                "summary": "",
                "descr": "pro offering s drop-down : offering se nezobrazi.",
                "flag": 524288,
                "_newName": "is-hidden"
            },
            {
                "propOf": "url-tag",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 1,
                "regexConstrains": "^.*\\.mp3$|^.*@((std-4|std-2)$|(16by9|4by3):((\\d+|\\*)-((\\w|\\.)*webm|(\\w|\\.)*mp4)+(,(\\w|\\.)*webm|,(\\w|\\.)*mp4)*)+(\\|(\\d+|\\*)-((\\w|\\.)*webm|(\\w|\\.)*mp4)+(,(\\w|\\.)*webm|,(\\w|\\.)*mp4)*)*)$",
                "name": "media-url",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "media-tag",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "cut-url",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "media-tag",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 1,
                "regexConstrains": "^(\\d+|-\\d+|\\d+-\\d+|\\d+-)(,\\d+|,-\\d+|,\\d+-\\d+|,\\d+-)*$",
                "name": "subset",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "media-tag",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 3,
                "regexConstrains": null,
                "name": "share-media-id",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "share-id"
            },
            {
                "propOf": "media-tag",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "_sent-group-id",
                "summary": null,
                "descr": null,
                "flag": 384,
                "_newName": null
            },
            {
                "propOf": "media-text",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 3,
                "regexConstrains": null,
                "name": "continue-media-id",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "continue-id"
            },
            {
                "propOf": "media-text",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "passive",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "is-passive"
            },
            {
                "propOf": "media-text",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "is-old-to-new",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            {
                "propOf": "media-text",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "hidden",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "is-hidden"
            },
            {
                "propOf": "_media-replica",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "icon-ids",
                "constrains": 0,
                "regexConstrains": null,
                "name": "icon-id",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_media-replica",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "dlg-left",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_media-replica",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "actor",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_media-sent",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "idx",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_snd-sent",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "idx",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_snd-sent",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "beg-pos",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_snd-sent",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "end-pos",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_snd-sent",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "text",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_snd-sent",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "actor",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_snd-file",
                "type": 4,
                "modifier": 0,
                "clsEnumName": "include",
                "constrains": 0,
                "regexConstrains": null,
                "name": "file",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            {
                "propOf": "phrase",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "beg-pos",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "phrase",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "end-pos",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "replica",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "icon-ids",
                "constrains": 0,
                "regexConstrains": null,
                "name": "actor-id",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "icon-id"
            },
            {
                "propOf": "replica",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "actor-name",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "actor"
            },
            {
                "propOf": "replica",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "number-of-phrases",
                "summary": "",
                "descr": "uvedena konstrukce slou?? k vytvo?en? dialogu z plain textu. Podporov?n je POUZE souvisl? text (bez p?eskakov?n? zvukov?ch v?t). \n            Tak?e z?pis je ten, ?e pro ka?dou repliku se ur?? PO?ET v?t repliky (ur?ovat za??tek a konec je zbyte?n? slo?it?). \n            Dal?? replika za??n? prvn? v?tou po posledn? v?t? p?edchoz? repliky. \n            jestli preci jenom ale nebude nejlepsi \"take-phrases\" (puvodne \"sent-take\").",
                "flag": 0,
                "_newName": "sent-take"
            },
            {
                "propOf": "include",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "cut-url",
                "summary": null,
                "descr": "@summary pointer na XML file s sndDialog nebo sndText (extenze se ignoruje). \n            @descr",
                "flag": 262144,
                "_newName": null
            },
            {
                "propOf": "phrase-replace",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 4,
                "regexConstrains": null,
                "name": "phrase-idx",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "sent-idx"
            },
            {
                "propOf": "phrase-replace",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 1,
                "regexConstrains": "^\\d+\\.\\d+$",
                "name": "replica-phrase-idx",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": "replica-sent-idx"
            },
            {
                "propOf": "_eval-page",
                "type": 0,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "max-score",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_eval-page",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "radio-groups",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_eval-btn",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "btn-id",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_eval-group",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "is-and",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_eval-group",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "is-exchangeable",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "_eval-group",
                "type": 1,
                "modifier": 1,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "eval-control-ids",
                "summary": null,
                "descr": null,
                "flag": 32,
                "_newName": null
            },
            {
                "propOf": "macro-template",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "name",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "macro-template",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "cdata",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "macro-true-false",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "check-item-texts",
                "constrains": 0,
                "regexConstrains": null,
                "name": "text-id",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "macro-table",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "inline-control-types",
                "constrains": 0,
                "regexConstrains": null,
                "name": "inline-type",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "macro-list",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "inline-control-types",
                "constrains": 0,
                "regexConstrains": null,
                "name": "inline-type",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "macro-icon-list",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "delim",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "macro-icon-list",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "is-striped",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "macro-icon-list",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "list-icon",
                "constrains": 0,
                "regexConstrains": null,
                "name": "icon",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "macro-icon-list",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "colors",
                "constrains": 0,
                "regexConstrains": null,
                "name": "color",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "macro-video",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "cut-url",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "macro-video",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 1,
                "regexConstrains": "^.*\\.mp3$|^.*@((std-4|std-2)$|(16by9|4by3):((\\d+|\\*)-((\\w|\\.)*webm|(\\w|\\.)*mp4)+(,(\\w|\\.)*webm|,(\\w|\\.)*mp4)*)+(\\|(\\d+|\\*)-((\\w|\\.)*webm|(\\w|\\.)*mp4)+(,(\\w|\\.)*webm|,(\\w|\\.)*mp4)*)*)$",
                "name": "media-url",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "macro-video",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "display-style",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "inline-tag",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "inline-element-types",
                "constrains": 0,
                "regexConstrains": null,
                "name": "inline-type",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "smart-tag",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "correct",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "smart-tag",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "inline-control-types",
                "constrains": 0,
                "regexConstrains": null,
                "name": "default-inline-type",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            {
                "propOf": "smart-element",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "smart-element-types",
                "constrains": 0,
                "regexConstrains": null,
                "name": "inline-type",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "smart-offering",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "words",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "smart-offering",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "smart-offering-mode",
                "constrains": 0,
                "regexConstrains": null,
                "name": "mode",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "smart-pairing",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "random",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "smart-pairing",
                "type": 2,
                "modifier": 0,
                "clsEnumName": "pairing-left-width",
                "constrains": 0,
                "regexConstrains": null,
                "name": "left-width",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-tags-meta",
                "type": 4,
                "modifier": 1,
                "clsEnumName": "doc-type",
                "constrains": 0,
                "regexConstrains": null,
                "name": "types",
                "summary": null,
                "descr": null,
                "flag": 32,
                "_newName": null
            },
            {
                "propOf": "doc-tags-meta",
                "type": 4,
                "modifier": 1,
                "clsEnumName": "doc-prop",
                "constrains": 0,
                "regexConstrains": null,
                "name": "props",
                "summary": null,
                "descr": null,
                "flag": 32,
                "_newName": null
            },
            {
                "propOf": "doc-tags-meta",
                "type": 4,
                "modifier": 1,
                "clsEnumName": "doc-enum",
                "constrains": 0,
                "regexConstrains": null,
                "name": "enums",
                "summary": null,
                "descr": null,
                "flag": 32,
                "_newName": null
            },
            {
                "propOf": "doc-named",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "name",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-named",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "summary",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-named",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "cdata",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-type",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "is-html",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-type",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "is-ign",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-type",
                "type": 1,
                "modifier": 1,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "descendants-and-self",
                "summary": null,
                "descr": null,
                "flag": 32,
                "_newName": null
            },
            {
                "propOf": "doc-type",
                "type": 1,
                "modifier": 1,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "my-props",
                "summary": null,
                "descr": null,
                "flag": 32,
                "_newName": null
            },
            {
                "propOf": "doc-type",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "xref",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-enum",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "xref",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-enum",
                "type": 4,
                "modifier": 1,
                "clsEnumName": "doc-enum-item",
                "constrains": 0,
                "regexConstrains": null,
                "name": "enums",
                "summary": null,
                "descr": null,
                "flag": 32,
                "_newName": null
            },
            {
                "propOf": "doc-enum-item",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "xref",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-prop",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "owner-type",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-prop",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "data-type",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-prop",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "xref",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-prop",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "is-html",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-example",
                "type": 3,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "todo",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-example",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "code-listing",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-example",
                "type": 1,
                "modifier": 0,
                "clsEnumName": null,
                "constrains": 0,
                "regexConstrains": null,
                "name": "code-post-listing",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-example",
                "type": 4,
                "modifier": 0,
                "clsEnumName": "header-prop",
                "constrains": 0,
                "regexConstrains": null,
                "name": "header",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-example",
                "type": 4,
                "modifier": 0,
                "clsEnumName": "doc-descr",
                "constrains": 0,
                "regexConstrains": null,
                "name": "descr",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            {
                "propOf": "doc-example",
                "type": 4,
                "modifier": 0,
                "clsEnumName": "eval-button",
                "constrains": 0,
                "regexConstrains": null,
                "name": "eval-btn",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            }
        ],
        "enums": {
            "check-item-texts": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "yes-no",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": "yes-no"
                    },
                    {
                        "value": 1,
                        "name": "true-false",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": "true-false"
                    },
                    {
                        "value": 2,
                        "name": "no",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    }
                ],
                "name": "check-item-texts",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            "three-state-bool": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "no",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 1,
                        "name": "true",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": "true"
                    },
                    {
                        "value": 2,
                        "name": "false",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": "false"
                    }
                ],
                "name": "three-state-bool",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            "pairing-left-width": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "normal",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 1,
                        "name": "small",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 2,
                        "name": "xsmall",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 3,
                        "name": "large",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    }
                ],
                "name": "pairing-left-width",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            "modal-size": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "normal",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 1,
                        "name": "small",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 2,
                        "name": "large",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    }
                ],
                "name": "modal-size",
                "summary": null,
                "descr": null,
                "flag": 0,
                "_newName": null
            },
            "list-icon": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "number",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 1,
                        "name": "letter",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 2,
                        "name": "upper-letter",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 3,
                        "name": "angle-double-right",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 4,
                        "name": "angle-right",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 5,
                        "name": "arrow-circle-o-right",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 6,
                        "name": "arrow-circle-right",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 7,
                        "name": "arrow-right",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 8,
                        "name": "caret-right",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 9,
                        "name": "caret-square-o-right",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 10,
                        "name": "chevron-circle-right",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 11,
                        "name": "chevron-right",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 12,
                        "name": "hand-o-right",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 13,
                        "name": "long-arrow-right",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 14,
                        "name": "play",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 15,
                        "name": "play-circle",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 16,
                        "name": "play-circle-o",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 17,
                        "name": "circle-o-notch",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 18,
                        "name": "cog",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 19,
                        "name": "refresh",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 20,
                        "name": "spinner",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 21,
                        "name": "square-o",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 22,
                        "name": "bullseye",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 23,
                        "name": "asterisk",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 24,
                        "name": "circle",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 25,
                        "name": "circle-o",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 26,
                        "name": "circle-thin",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 27,
                        "name": "dot-circle-o",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    }
                ],
                "name": "list-icon",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            "colors": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "black",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 1,
                        "name": "white",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 2,
                        "name": "primary",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 3,
                        "name": "success",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 4,
                        "name": "info",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 5,
                        "name": "warning",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 6,
                        "name": "danger",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    }
                ],
                "name": "colors",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            "offering-drop-down-mode": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "drop-down-discard",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": "drop-down-discard"
                    },
                    {
                        "value": 1,
                        "name": "drop-down-keep",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": "drop-down-keep"
                    },
                    {
                        "value": 2,
                        "name": "gap-fill-ignore",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": "gap-fill-ignore"
                    }
                ],
                "name": "offering-drop-down-mode",
                "summary": null,
                "descr": null,
                "flag": 524288,
                "_newName": "offering-mode"
            },
            "icon-ids": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "no",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 1,
                        "name": "a",
                        "summary": "Dialog speaker A",
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 2,
                        "name": "b",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 3,
                        "name": "c",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 4,
                        "name": "d",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 5,
                        "name": "e",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 6,
                        "name": "f",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    }
                ],
                "name": "icon-ids",
                "summary": "Dialog speaker identification",
                "descr": "descr",
                "flag": 0,
                "_newName": "replica-actor"
            },
            "inline-control-types": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "no",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 1,
                        "name": "gap-fill",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 2,
                        "name": "gap-fill_-correction",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 3,
                        "name": "word-selection",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 4,
                        "name": "drag-target",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 5,
                        "name": "img",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 6,
                        "name": "tts-sound",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    }
                ],
                "name": "inline-control-types",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            "inline-element-types": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "no",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 1,
                        "name": "gap-fill",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 2,
                        "name": "gap-fill-correction",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 3,
                        "name": "word-selection",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 4,
                        "name": "drop-down",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 5,
                        "name": "img",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 6,
                        "name": "tts-sound",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    }
                ],
                "name": "inline-element-types",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            "smart-element-types": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "no",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 1,
                        "name": "gap-fill",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 2,
                        "name": "drop-down",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 3,
                        "name": "offering",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 4,
                        "name": "img",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 5,
                        "name": "word-selection",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    }
                ],
                "name": "smart-element-types",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            },
            "smart-offering-mode": {
                "enumData": [
                    {
                        "value": 0,
                        "name": "gap-fill",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 1,
                        "name": "drop-down-discard",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 2,
                        "name": "drop-down-keep",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": null
                    },
                    {
                        "value": 3,
                        "name": "gap-fill-passive",
                        "summary": null,
                        "descr": null,
                        "flag": 0,
                        "_newName": "gap-fill-ignore"
                    }
                ],
                "name": "smart-offering-mode",
                "summary": null,
                "descr": null,
                "flag": 128,
                "_newName": null
            }
        }
    };
})(metaJS || (metaJS = {}));
var metaJS;
(function (metaJS) {
    //******************* propEditor marks
    var viewmarks = (function (_super) {
        __extends(viewmarks, _super);
        function viewmarks(tag /*napr. gap-fill*/, text /*napr. id=gp1; smart-width=sm1; */ /*, view: JQuery*/) {
            var _this = this;
            _super.call(this, text, null);
            this.tag = tag;
            this.propDir = metaJS.metaObj.types[this.tag].propDir;
            this.props = metaJS.metaObj.types[this.tag].props;
            this.finishConstructor();
            this.json = { _tg: this.tag };
            if (this.hasError())
                return;
            var props = _.filter(this.marks, function (m) { return m.type == waObjs.markType.propName; });
            var checkUniq = {}; //pro check unique prop names
            _.each(props, function (p) {
                if (checkUniq[p.prop.name]) {
                    p.errorMsg = 'Duplicated attribute name: ' + p.prop.name;
                    return;
                }
                checkUniq[p.prop.name] = p;
                p.value.errorMsg = p.prop.validateAndAssign(p.value.value, _this.json);
                if (p.value.errorMsg)
                    return;
            });
        }
        viewmarks.prototype.html = function () {
            var text = this.text;
            if (this.marks == null)
                return text;
            var sb = [];
            var lastPos = 0;
            _.each(this.marks, function (m) {
                if (m.start < lastPos)
                    throw 'm.start < lastPos';
                if (m.start > lastPos)
                    sb.push(text.substring(lastPos, m.start));
                var isFake = m.type == waObjs.markType.propEq;
                if (!isFake) {
                    sb.push('<span class="');
                    sb.push(m.classes());
                    sb.push('">');
                }
                sb.push(text.substring(m.start, m.end));
                if (!isFake)
                    sb.push('</span>');
                lastPos = m.end;
            });
            if (lastPos < text.length)
                sb.push(text.substr(lastPos));
            return sb.join('');
        };
        viewmarks.prototype.hasSeriousError = function () { return _.any(this.marks, function (m) { return !!m.errorMsg && m.type != waObjs.markType.propName && m.type != waObjs.markType.propValue; }); };
        viewmarks.prototype.parseBrackets = function () {
            var txt = this.text;
            if (_.isEmpty(txt))
                return null;
            var match;
            var lastPos = 0;
            var res = [];
            while (match = nameValueMask.exec(this.escaped)) {
                var m = match.index;
                var m1 = match[1].length;
                var m2 = match[2].length;
                var m3 = match[3].length;
                var m4 = match[4].length;
                var m5 = match[5].length;
                var name = new nameMark(this, m + m1, m + m1 + m2);
                viewmark.createEqMark(res, this, m + m1 + m2 + m3, m + m1 + m2 + m3 + m4);
                var value = new valueMark(this, m + m1 + m2 + m3 + m4, m + m1 + m2 + m3 + m4 + m5);
                name.value = value;
                value.name = name; //name.before = before; name.after = after; 
                res.push(name);
                res.push(value);
                if (lastPos < match.index)
                    viewmark.createErrorMark(res, this, lastPos, match.index, 'Wrong format, [attribute name] expected');
                lastPos = match.index + match[0].length;
            }
            if (lastPos < txt.trim().length)
                viewmark.createErrorMark(res, this, lastPos, txt.length, 'Wrong format, [attribute name]=[value] expected.');
            res = _.sortBy(res, function (m) { return m.start; });
            return res;
        };
        return viewmarks;
    })(waObjs.viewmarksLow);
    metaJS.viewmarks = viewmarks;
    var nameValueMask = /(\s*)([\w-]*)(\s*)(=)([^;]*);?/g;
    var viewmark = (function (_super) {
        __extends(viewmark, _super);
        function viewmark() {
            _super.apply(this, arguments);
        }
        viewmark.createErrorMark = function (res, owner, start, end, errorMsg) {
            var m = new viewmark(owner, waObjs.markType.no, start, end);
            m.errorMsg = errorMsg;
            res.push(m);
        };
        viewmark.createEqMark = function (res, owner, start, end) {
            res.push(new viewmark(owner, waObjs.markType.propEq, start, end));
        };
        return viewmark;
    })(waObjs.viewmarkLow);
    metaJS.viewmark = viewmark;
    var nameMark = (function (_super) {
        __extends(nameMark, _super);
        function nameMark(owner, start, end) {
            _super.call(this, owner, waObjs.markType.propName, start, end);
            var name = owner.text.substring(start, end);
            this.prop = this.owner.propDir[name];
            if (!this.prop)
                this.errorMsg = 'Wrong attribute name: ' + name;
        }
        return nameMark;
    })(viewmark);
    metaJS.nameMark = nameMark;
    var valueMark = (function (_super) {
        __extends(valueMark, _super);
        function valueMark(owner, start, end) {
            _super.call(this, owner, waObjs.markType.propValue, start, end);
            this.value = owner.text.substring(start, end);
        }
        return valueMark;
    })(viewmark);
    metaJS.valueMark = valueMark;
})(metaJS || (metaJS = {}));
//http://alistapart.com/article/expanding-text-areas-made-elegant
//http://jsfiddle.net/QrZHM/1/
//http://jsfiddle.net/bgrins/UA7ty/
//http://bgrins.github.io/ExpandingTextareas/
//interface JQuery {
//  waBlock(init?: waGui.fragment): waGui.fragment;
//}
//$.fn.waBlock = function (init?: waGui.fragment): waGui.fragment {
//  if (init) {
//    return null;
//  } else {
//    return new waGui.fragment();
//  }
//};
var waGui;
(function (waGui) {
    var cloneCSSProperties = [
        'lineHeight', 'textDecoration', 'letterSpacing',
        'fontSize', 'fontFamily', 'fontStyle', 'fontVariant',
        'fontWeight', 'textTransform', 'textAlign',
        'direction', 'wordSpacing', 'fontSizeAdjust',
        'whiteSpace', 'wordWrap', 'wordBreak'
    ];
    function resize(textarea) {
        textarea.parent().find("span").text(textarea.val());
    }
    function init(txt) {
        var textarea = $(txt);
        textarea.wrap("<div class='smartText'></div>");
        textarea.before("<pre class='passive'><span></span><br /></pre>");
        var container = textarea.parent();
        var pre = container.find("pre");
        _.each(cloneCSSProperties, function (p) { return pre.css(p, textarea.css(p)); });
        textarea.on('input onpropertychange', function () {
            resize($(this));
        });
        resize(textarea);
    }
    waGui.init = init;
    $(function () { return _.each($('textarea.smart'), init); });
})(waGui || (waGui = {}));
var blended;
(function (blended) {
    var Module = (function () {
        function Module() {
            var self = this;
            this.app = blended.rootModule;
        }
        Module.prototype.href = function (stateName, params, options) {
            return this.$oldActState.href(stateName, params);
        };
        return Module;
    })();
    blended.Module = Module;
    var OldController = (function () {
        function OldController($scope, $state) {
            blended.root.$oldActState = $state;
            //prevezmi parametry
            var urlParts = [];
            for (var p = 0; p < 6; p++) {
                var parName = 'p' + p.toString();
                var val = $state.params[parName];
                if (val === undefined)
                    break;
                urlParts.push($state.params[parName]);
            }
            //procedura pro vytvoreni stareho modelu
            var createProc = $state.current.data['createModel'];
            //vytvor page model a naladuj stranku
            $scope.$on('$viewContentLoaded', function () {
                Pager.loadPage(createProc(urlParts));
            });
        }
        ;
        OldController.$inject = ['$scope', '$state'];
        return OldController;
    })();
    blended.OldController = OldController;
    blended.prodStates = {};
    blended.root = new Module();
    blended.rootModule
        .directive('lmInclude', function () {
        return {
            restrict: 'A',
            templateUrl: function (ele, attrs) { return attrs.lmInclude; },
        };
    })
        .run(vyzva.initVyzvaApp)
        .run(['$rootScope', '$location', '$templateCache', '$compile', function ($rootScope, $location, $templateCache, $compile) {
            blended.rootScope = $rootScope;
            blended.templateCache = $templateCache;
            blended.compile = $compile;
            $rootScope.$on('$locationChangeStart', function (event, newUrl, oldUrl, newState, oldState) {
                if (Pager.angularJS_OAuthLogin(location.hash, function () { return Pager.gotoHomeUrl(); }))
                    event.preventDefault();
            });
        }]);
    function checkOldApplicationStart() {
        if (checkOldApplicationStarted)
            return;
        checkOldApplicationStarted = true;
        return angular.injector(['ng']).invoke(['$q', function ($q) {
                var deferred = $q.defer();
                boot.bootStart(function () { return deferred.resolve(); });
                return deferred.promise;
            }]);
    }
    blended.checkOldApplicationStart = checkOldApplicationStart;
    var checkOldApplicationStarted = false;
    blended.root.app.config(['$stateProvider', '$urlRouterProvider', '$locationProvider', '$urlMatcherFactoryProvider', function (//'$provide', (
            $stateProvider, $urlRouterProvider, $location, $urlMatcherFactoryProvider, $provide) {
            //routerLogging($provide);
            $urlMatcherFactoryProvider.caseInsensitive(true); //http://stackoverflow.com/questions/25994308/how-to-config-angular-ui-router-to-not-use-strict-url-matching-mode
            //Nefunguje pak browser historie
            //$urlMatcherFactoryProvider.type("urlType", { //http://stackoverflow.com/questions/27849260/angular-ui-sref-encode-parameter
            //  encode: (val: string) => val ? (val[0]=='/' ? val.replace(/\//g, '@') : val) : val,
            //  decode: (val: string) => val ? val.replace(/@/g, '/') : val,
            //  is: item => _.isString(item) && item[0] == '/',
            //  //equal: (v1: string, v2: string) => false,
            //});
            $urlRouterProvider.otherwise('/pg/old/school/schoolmymodel');
            $stateProvider
                .state({
                name: 'pg',
                url: '/pg',
                abstract: true,
                template: "<div data-ui-view></div>",
                resolve: {
                    checkOldApplicationStart: checkOldApplicationStart //ceka se na dokonceni inicalizace nasi technologie
                }
            })
                .state({
                name: 'pg.old',
                url: '/old',
                abstract: true,
                template: "<div data-ui-view></div>",
            });
            //stavy pro starou verzi
            var params = {
                $stateProvider: $stateProvider,
                $urlRouterProvider: $urlRouterProvider,
                $urlMatcherFactoryProvider: $urlMatcherFactoryProvider,
                $location: $location,
                app: blended.root.app
            };
            _.each(blended.oldLocators, function (createLoc) { return createLoc(params); }); //vytvoreni states na zaklade registrovanych page models (pomoci registerOldLocator)
            //stavy pro novou verzi
            vyzva.initVyzvaStates(params);
            //log vsech validnich routes
            //_.each(debugAllRoutes, r => Logger.trace("Pager", 'Define:' + r));
        }]);
    //dokumentace pro dostupne services
    function servicesDocumentation() {
        //https://docs.angularjs.org/api/ng/function/angular.injector
        //http://stackoverflow.com/questions/17497006/use-http-inside-custom-provider-in-app-config-angular-js
        //https://docs.angularjs.org/api/ng/service/$sce
        var initInjector = angular.injector(['ng']);
        var $http = initInjector.get('$http');
        var $q = initInjector.get('$q');
        var srv = initInjector.get('$filter');
        srv = initInjector.get('$timeout');
        srv = initInjector.get('$log');
        srv = initInjector.get('$rootScope');
        //srv = initInjector.get('$location'); nefunguje
        srv = initInjector.get('$parse');
        //srv = initInjector.get('$rootElement'); nefunguje
    }
    blended.servicesDocumentation = servicesDocumentation;
})(blended || (blended = {}));
var blended;
(function (blended) {
    blended.rootModule = angular.module('appRoot', ['ui.router', 'ngAnimate', 'ui.bootstrap', 'ngCookies']);
    function registerOldLocator(params, name, appId, type, numOfPars, createModel, needsLogin) {
        if (needsLogin === void 0) { needsLogin = true; }
        if (_.isNumber(numOfPars))
            numOfPars = [numOfPars]; //numOfPars je budto cislo nebo array cisel. Oznacuje mozne pocty parametru.
        for (var np = 0; np < numOfPars.length; np++) {
            var pars = '';
            for (var i = 0; i < numOfPars; i++)
                pars += '/:p' + i.toString();
            var url = '/' + appId + '/' + type + pars;
            blended.debugAllRoutes.push(url); //evidence vsech validnich state urls
            params.$stateProvider.state({
                name: 'pg.old.' + name,
                url: url,
                template: "<!--old-->",
                controller: blended.OldController,
                data: { createModel: createModel },
                resolve: !needsLogin ? null : {
                    isLoggedIn: ['$state', function ($state) { return checkLoggedIn($state); }] //cancel ladovani state pro stranky, pro ktere je potreba login
                }
            });
        }
    }
    blended.registerOldLocator = registerOldLocator;
    blended.oldLocators = []; //pro ladici ucely, validni URLS
    blended.debugAllRoutes = [];
    function checkLoggedIn($state) {
        return angular.injector(['ng']).invoke(['$q', function ($q) {
                var deferred = $q.defer();
                if (!LMStatus.isLogged()) {
                    deferred.reject();
                    setTimeout(function () { return window.location.hash = Login.loginUrl(); }, 1);
                }
                else {
                    deferred.resolve();
                }
                return deferred.promise;
            }]);
    }
})(blended || (blended = {}));
var blended;
(function (blended) {
    function lineIdToText(id) {
        switch (id) {
            case LMComLib.LineIds.English: return "Angličtina";
            case LMComLib.LineIds.German: return "Němčina";
            case LMComLib.LineIds.French: return "Francouzština";
            default: return "???";
        }
    }
    blended.lineIdToText = lineIdToText;
    ;
    blended.rootModule
        .filter('lineIdsText', function () { return function (id) { return lineIdToText(id); }; })
        .filter('lineIdsFlag', function () {
        return function (id) {
            switch (id) {
                case LMComLib.LineIds.English: return "flag-small-english";
                case LMComLib.LineIds.German: return "flag-small-german";
                case LMComLib.LineIds.French: return "flag-small-french";
                default: return "???";
            }
        };
    })
        .filter('levelText', function () { return function (id) { return ['A1', 'A2', 'B1', 'B2'][id]; }; })
        .filter("rawhtml", ['$sce', function ($sce) { return function (htmlCode) { return $sce.trustAsHtml(htmlCode); }; }])
        .directive('lmEnterKey', ['$document', function ($document) {
            return {
                link: function (scope, element, attrs) {
                    var enterWatcher = function (event) {
                        if (event.which === 13) {
                            scope.lmEnterKey();
                            scope.$apply();
                            event.preventDefault();
                            $document.unbind("keydown keypress", enterWatcher);
                        }
                    };
                    $document.bind("keydown keypress", enterWatcher);
                },
                scope: {
                    lmEnterKey: "&"
                },
            };
        }])
        .directive('collapsablemanager', ['$cookies', function (cookies) { return new collapseMan(cookies); }]);
    var collapseMan = (function () {
        function collapseMan(cookies) {
            this.link = function (scope, el, attrs) {
                var id = attrs['collapsablemanager'];
                var collapsed = true;
                if (id.charAt(0) == '+') {
                    id = id.substr(1);
                    collapsed = false;
                }
                if (id.indexOf('help') >= 0) {
                    collapsed = cookies.get('lmcoll_' + id) == 'collapsed';
                }
                var th = {
                    isCollapsed: collapsed,
                    collapseToogle: function () {
                        var act = (scope[id]);
                        if (act.isCollapsed)
                            _.each(collapseMan.allCollapsable, function (man, id) { return man.isCollapsed = true; });
                        act.isCollapsed = !act.isCollapsed;
                        var now = new Date();
                        var exp = new Date(now.getFullYear(), now.getMonth() + 6, now.getDate());
                        cookies.put('lmcoll_' + id, act.isCollapsed ? 'collapsed' : 'expanded', { 'expires': exp });
                    },
                };
                scope[id] = collapseMan.allCollapsable[id] = th;
                scope.$on('$destroy', function () { return delete collapseMan.allCollapsable[id]; });
            };
        }
        collapseMan.allCollapsable = {};
        return collapseMan;
    })();
    blended.collapseMan = collapseMan;
})(blended || (blended = {}));
var blended;
(function (blended) {
    (function (exDoneStatus) {
        exDoneStatus[exDoneStatus["no"] = 0] = "no";
        exDoneStatus[exDoneStatus["passive"] = 1] = "passive";
        exDoneStatus[exDoneStatus["active"] = 2] = "active";
    })(blended.exDoneStatus || (blended.exDoneStatus = {}));
    var exDoneStatus = blended.exDoneStatus;
    //********************* RESOLVES
    blended.loadEx = ['$stateParams', function ($stateParams) {
            blended.finishContext($stateParams);
            return blended.loader.adjustEx($stateParams);
        }];
    blended.loadLongData = ['$stateParams', function (ctx) {
            blended.finishContext(ctx);
            var def = ctx.$q.defer();
            try {
                proxies.vyzva57services.getLongData(ctx.companyid, ctx.userDataId(), ctx.productUrl, ctx.taskid, ctx.Url, function (long) {
                    var res = JSON.parse(long);
                    def.resolve(res);
                });
            }
            finally {
                return def.promise;
            }
        }];
    //***************** EXERCISE controller
    var exerciseTaskViewController = (function (_super) {
        __extends(exerciseTaskViewController, _super);
        function exerciseTaskViewController($scope /*union types*/, $state, $loadedEx, $loadedLongData) {
            _super.call(this, $scope, $state);
            this.exParent = this;
            if (this.isFakeCreate)
                return;
            var modIdx = _.indexOf(this.moduleParent.exercises, this.dataNode);
            this.exService = new exerciseService($loadedEx, $loadedLongData, this, modIdx); //, () => this.confirmWrongScoreDialog());
            this.modService = new blended.moduleService(this.moduleParent.dataNode, this.exService, this.moduleParent.state.moduleType, this);
            this.exService.modService = this.modService;
            var sc = $scope;
            sc.exService = this.exService;
            sc.modService = this.modService;
            this.user = this.exService.user;
            this.title = this.dataNode.title;
            this.moduleParent.onExerciseLoaded(modIdx); //zmena actChildIdx v persistentnich datech modulu
        }
        exerciseTaskViewController.prototype.confirmWrongScoreDialog = function () {
            var def = this.ctx.$q.defer();
            setTimeout(function () {
                if (confirm('Špatné skore, pokračovat?'))
                    def.resolve();
                else
                    def.reject();
            }, 1000);
            return def.promise;
        };
        exerciseTaskViewController.prototype.congratulationDialog = function () {
            var def = this.ctx.$q.defer();
            setTimeout(function () {
                alert('Gratulace');
                def.resolve();
                ;
            }, 1000);
            return def.promise;
        };
        //osetreni zelene sipky
        exerciseTaskViewController.prototype.moveForward = function (sender) {
            var _this = this;
            var res = this.exService.evaluate(this.moduleParent.state.moduleType != blended.moduleServiceType.lesson, this.state.exerciseShowWarningPercent);
            if (!res.confirmWrongScore) {
                return res.showResult ? blended.moveForwardResult.selfInnner : blended.moveForwardResult.toParent;
            }
            res.confirmWrongScore.then(function (okScore) {
                if (!okScore)
                    return;
                _this.$scope.$apply();
            });
            return blended.moveForwardResult.selfInnner;
        };
        //provede reset cviceni, napr. v panelu s instrukci
        exerciseTaskViewController.prototype.resetExercise = function () { alert('reset'); };
        exerciseTaskViewController.prototype.greenClick = function () {
            this.exService.greenArrowRoot.navigateAhead(this);
        };
        exerciseTaskViewController.$inject = ['$scope', '$state', '$loadedEx', '$loadedLongData'];
        return exerciseTaskViewController;
    })(blended.taskController);
    blended.exerciseTaskViewController = exerciseTaskViewController;
    //********************* SHOW EXERCISES DIRECTIVE
    var showExerciseModel = (function () {
        function showExerciseModel($stateParams) {
            this.$stateParams = $stateParams;
            this.link = function (scope, el, attrs) {
                var exService = scope.exService();
                //scope.$on('$destroy', ev => exService.onDestroy(el));
                scope.$on('onStateChangeSuccess', function (ev) { return exService.onDestroy(el); });
                exService.onDisplay(el, $.noop);
            };
            this.scope = { exService: '&exService' };
        }
        return showExerciseModel;
    })();
    blended.showExerciseModel = showExerciseModel;
    blended.rootModule
        .directive('showExercise', ['$stateParams', function ($stateParams) { return new showExerciseModel($stateParams); }]);
    //********************* EXERCISE SERVICE
    var exerciseService = (function () {
        function exerciseService(exercise, long, controller, modIdx) {
            this.exercise = exercise;
            this.long = long;
            this.controller = controller;
            this.modIdx = modIdx;
            //this.exercise = exercise; this.modIdx = modIdx;
            this.confirmWrongScoreDialog = function () { return controller.confirmWrongScoreDialog(); };
            this.ctx = controller.ctx;
            this.product = controller.productParent.dataNode;
        }
        exerciseService.prototype.resetPretest = function (newLevel) {
            var _this = this;
            proxies.vyzva57services.deleteProduct(this.ctx.companyid, this.ctx.userDataId(), this.ctx.productUrl, this.ctx.taskid, function () {
                _.each(_this.product.nodeList, function (it) { return blended.clearPersistData(it, _this.ctx.taskid); });
                if (newLevel >= 0) {
                    var course = _this.product;
                    //pretest a prvni pretest item se oznaci DONE. Pak se ukazuje lektorovi moznost opet zmenit pomoci A1 pretest item level
                    blended.setPersistData(course.pretest, _this.ctx.taskid, function (d) { d.history = [0]; d.targetLevel = newLevel; d.lectorSetTarget = true; d.flag = CourseModel.CourseDataFlag.blPretest | CourseModel.CourseDataFlag.done; });
                    blended.setPersistData(course.pretest.Items[0], _this.ctx.taskid, function (d) { d.flag = CourseModel.CourseDataFlag.blPretestItem | CourseModel.CourseDataFlag.done; d.actChildIdx = 0; });
                }
                _this.product.saveProduct(_this.controller.ctx, function () { return _this.controller.navigate({ stateName: blended.prodStates.home.name, pars: _this.ctx }); });
            });
        };
        exerciseService.prototype.confirmLesson = function (alow) {
            var _this = this;
            if (alow) {
                this.saveLectorEvaluation();
                //alow se pro lekci nevyuzije => jsem urcite v testu
                blended.setPersistData(this.modService.node, this.ctx.taskid, function (modUser) { return modUser.lectorControlTestOK = true; });
            }
            else {
                blended.clearPersistData(this.modService.node, this.ctx.taskid);
                _.each(this.modService.node.Items, function (it) {
                    if (!blended.isEx(it))
                        return;
                    blended.clearPersistData(it, _this.ctx.taskid);
                });
            }
            this.product.saveProduct(this.controller.ctx, function () { return _this.controller.navigate({ stateName: blended.prodStates.home.name, pars: _this.ctx }); });
        };
        //ICoursePageCallback
        exerciseService.prototype.onRecorder = function (page, msecs) { if (page != this.page)
            debugger; this.user.modified = true; if (!this.user.short.sRec)
            this.user.short.sRec = 0; this.user.short.sRec += Math.round(msecs / 1000); };
        exerciseService.prototype.onPlayRecorder = function (page, msecs) { this.user.modified = true; if (!this.user.short.sPRec)
            this.user.short.sPRec = 0; this.user.short.sPRec += Math.round(msecs / 1000); };
        exerciseService.prototype.onPlayed = function (page, msecs) { this.user.modified = true; if (!this.user.short.sPlay)
            this.user.short.sPlay = 0; this.user.short.sPlay += Math.round(msecs / 1000); };
        exerciseService.prototype.saveLectorEvaluation = function () {
            var _this = this;
            var humanEvals = _.map($('.human-form:visible').toArray(), function (f) {
                var id = f.id.substr(5);
                return { ctrl: (_this.page.tags[f.id.substr(5)]), edit: $('#human-ed-' + id) };
            });
            _.each(humanEvals, function (ev) {
                _this.user.modified = true;
                var val = parseInt(ev.edit.val());
                if (!val)
                    val = 0;
                if (val > 100)
                    val = 100;
                ev.ctrl.result.hPercent = val / 100 * ev.ctrl.scoreWeight;
                ev.ctrl.result.flag &= ~CourseModel.CourseDataFlag.needsEval;
                ev.ctrl.setScore();
            });
            var score = this.page.getScore();
            this.user.short.s = score.s;
            this.user.short.flag = Course.setAgregateFlag(this.user.short.flag, score.flag);
            this.lectorHumanScore = score.ms ? Math.round(score.s / score.ms * 100) : -1;
        };
        exerciseService.prototype.score = function () {
            return blended.scorePercent(this.user.short);
        };
        exerciseService.prototype.onDisplay = function (el, completed) {
            var _this = this;
            this.exType = this.modService.lessonType;
            this.isTest = this.exType != blended.moduleServiceType.lesson;
            this.user = blended.getPersistWrapper(this.exercise.dataNode, this.ctx.taskid, function () {
                var res = $.extend({}, blended.shortDefault);
                res.ms = _this.exercise.dataNode.ms;
                res.flag = CourseModel.CourseDataFlag.ex;
                if (_this.controller.pretestParent)
                    res.flag |= CourseModel.CourseDataFlag.blPretestEx;
                else if (_this.isTest)
                    res.flag |= CourseModel.CourseDataFlag.testEx;
                return res;
            });
            if (!this.long) {
                this.long = {};
                this.user.modified = true;
            }
            this.user.long = this.long;
            this.startTime = Utils.nowToNum();
            //greenArrowRoot
            this.greenArrowRoot = this.controller.pretestParent ? this.controller.pretestParent : this.controller.moduleParent;
            this.lectorMode = !!this.ctx.onbehalfof && this.modService.moduleDone;
            this.lectorCanEvaluateRecording = this.lectorMode && !!(this.user.short.flag & CourseModel.CourseDataFlag.pcCannotEvaluate);
            if (this.lectorMode) {
                var autoH = blended.agregateAutoHuman(this.modService.node, this.controller.ctx.taskid);
                this.lectorAutoScore = autoH.auto.score;
                this.lectorHumanScore = autoH.human.score;
            }
            var pg = this.page = CourseMeta.extractEx(this.exercise.pageJsonML);
            if (this.lectorMode && !!(this.user.short.flag & CourseModel.CourseDataFlag.pcCannotEvaluate))
                this.page.humanEvalMode = true;
            this.recorder = this;
            pg.blendedExtension = this; //navazani rozsireni na Page
            Course.localize(pg, function (s) { return CourseMeta.localizeString(pg.url, s, _this.exercise.mod.loc); });
            var isGramm = CourseMeta.isType(this.exercise.dataNode, CourseMeta.runtimeType.grammar);
            if (!isGramm) {
                if (pg.evalPage)
                    this.exercise.dataNode.ms = pg.evalPage.maxScore;
            }
            //instrukce
            var instrs = this.product.instructions;
            var instrBody = _.map(pg.instrs, function (instrUrl) { return instrs[instrUrl]; });
            this.instructionData = { title: pg.instrTitle, body: instrBody.join('') };
            var exImpl = (this.exercise.dataNode);
            exImpl.page = pg;
            exImpl.result = this.user.long;
            pg.finishCreatePage((this.exercise.dataNode));
            pg.callInitProcs(Course.initPhase.beforeRender, function () {
                var html = JsRenderTemplateEngine.render("c_gen", pg);
                CourseMeta.actExPageControl = pg; //knockout pro cviceni binduje CourseMeta.actExPageControl
                ko.cleanNode(el[0]);
                el.html('');
                el.html(html);
                ko.applyBindings({}, el[0]);
                pg.callInitProcs(Course.initPhase.afterRender, function () {
                    pg.callInitProcs(Course.initPhase.afterRender2, function () {
                        if (_this.isTest && blended.persistUserIsDone(_this.user.short) && !_this.modService.moduleDone && !_this.lectorMode) {
                            //test cviceni nesmi byt (pro nedokonceny test) videt ve vyhodnocenem stavu. Do vyhodnoceneho stav se vrati dalsim klikem na zelenou sipku.
                            blended.persistUserIsDone(_this.user.short, false);
                        }
                        pg.acceptData(blended.persistUserIsDone(_this.user.short), exImpl.result);
                        completed(pg);
                    });
                });
            });
        };
        exerciseService.prototype.onDestroy = function (el) {
            //elapsed
            var now = Utils.nowToNum();
            var delta = Math.min(maxDelta, Math.round(now - this.startTime));
            if (this.user.short) {
                var short = this.user.short;
                if (!short.elapsed)
                    short.elapsed = 0;
                short.elapsed += delta;
                short.end = Utils.nowToNum();
                this.user.modified = true;
                if (!blended.persistUserIsDone(this.user.short))
                    this.page.provideData(); //prevzeti poslednich dat z kontrolek cviceni
            }
            //uklid
            if (this.page.sndPage)
                this.page.sndPage.htmlClearing();
            if (this.page.sndPage)
                this.page.sndPage.leave();
            ko.cleanNode(el[0]);
            el.html('');
            delete (this.exercise.dataNode).result;
        };
        //vrati budto promise v IEvaluateResult.confirmWrongScore (= aktivni pod 75% = cekani na wrongScore confirmation dialog) 
        // nebo IEvaluateResult.showResult (ukazat vysledek vyhodnoceni: pro aktivni nad 75% cviceni ano, pro pasivni a test ne)
        exerciseService.prototype.evaluate = function (isTest, exerciseShowWarningPercent) {
            var _this = this;
            if (exerciseShowWarningPercent === void 0) { exerciseShowWarningPercent = 75; }
            if (blended.persistUserIsDone(this.user.short)) {
                return { showResult: false };
            }
            this.user.modified = true;
            var short = this.user.short;
            //pasivni stranka
            if (this.page.isPassivePage()) {
                this.page.processReadOnlyEtc(true, true);
                blended.persistUserIsDone(short, true);
                return { showResult: false };
            }
            //aktivni stranka
            this.page.provideData(); //prevzeti vysledku z kontrolek
            var score = this.page.getScore(); //vypocet score
            if (!score) {
                debugger;
                blended.persistUserIsDone(short, true);
                return null;
            }
            var afterConfirmScore = function () {
                _this.page.processReadOnlyEtc(true, true); //readonly a skipable controls
                if (!isTest)
                    _this.page.acceptData(true);
                _this.user.modified = true;
                blended.persistUserIsDone(short, true);
                if (_this.exercise.dataNode.ms != score.ms) {
                    debugger;
                    def.reject("this.maxScore != score.ms");
                    return null;
                }
                short.s = score.s;
                short.flag = Course.setAgregateFlag(short.flag, score.flag);
                //short.flag |= score.flag;
            };
            var exerciseOK = isTest || !this.confirmWrongScoreDialog ? true : (score == null || score.ms == 0 || (score.s / score.ms * 100) >= exerciseShowWarningPercent);
            if (!exerciseOK) {
                var def = this.ctx.$q.defer();
                try {
                    this.confirmWrongScoreDialog().then(function () {
                        afterConfirmScore();
                        def.resolve(true);
                    }, function () {
                        def.resolve(false);
                    });
                }
                finally {
                    return { confirmWrongScore: def.promise };
                }
            }
            else {
                afterConfirmScore();
                return { showResult: !isTest };
            }
        };
        return exerciseService;
    })();
    blended.exerciseService = exerciseService;
    var maxDelta = 10 * 60; //10 minut
})(blended || (blended = {}));
var blended;
(function (blended) {
    //export var loadExSimple = ['$stateParams', ($stateParams: blended.learnContext) => {
    //  blended.finishContext($stateParams);
    //  return blended.loader.adjustExSimple($stateParams);
    //}];
    //********************* SHOW EXERCISES DIRECTIVE
    var showExerciseModelSimple = (function () {
        function showExerciseModelSimple() {
            this.restrict = 'EA';
            this.link = function (scope, el, attrs) {
                var exService = scope.exService();
                scope.$on('onStateChangeSuccess', function (ev) { return exService.onDestroy(el); });
                exService.onDisplay(el, $.noop);
            };
            this.scope = { exService: '&exService' };
        }
        return showExerciseModelSimple;
    })();
    blended.showExerciseModelSimple = showExerciseModelSimple;
    blended.rootModule
        .directive('showExerciseSimple', function () { return new showExerciseModelSimple(); });
    var exerciseServiceSimple = (function () {
        function exerciseServiceSimple(pageJsonML, loc, userLongData) {
            this.pageJsonML = pageJsonML;
            this.loc = loc;
            this.userLongData = userLongData;
        }
        exerciseServiceSimple.prototype.onDisplay = function (el, completed) {
            var _this = this;
            var pg = this.page = CourseMeta.extractEx(this.pageJsonML);
            Course.localize(pg, function (s) { return CourseMeta.localizeString(pg.url, s, _this.loc); });
            if (!this.userLongData)
                this.userLongData = {};
            this.dataNode = { page: pg, result: this.userLongData };
            pg.finishCreatePage(this.dataNode);
            pg.callInitProcs(Course.initPhase.beforeRender, function () {
                var html = JsRenderTemplateEngine.render("c_gen", pg);
                CourseMeta.actExPageControl = pg; //na chvili: knockout pro cviceni binduje CourseMeta.actExPageControl
                ko.cleanNode(el[0]);
                el.html('');
                el.html(html);
                ko.applyBindings({}, el[0]);
                pg.callInitProcs(Course.initPhase.afterRender, function () {
                    pg.callInitProcs(Course.initPhase.afterRender2, function () {
                        completed(pg);
                    });
                });
            });
        };
        exerciseServiceSimple.prototype.onDestroy = function (el) {
            if (this.page.sndPage)
                this.page.sndPage.htmlClearing();
            if (this.page.sndPage)
                this.page.sndPage.leave();
            ko.cleanNode(el[0]);
            el.html('');
            delete (this.dataNode).result;
        };
        return exerciseServiceSimple;
    })();
    blended.exerciseServiceSimple = exerciseServiceSimple;
})(blended || (blended = {}));
var blended;
(function (blended) {
    (function (levelIds) {
        levelIds[levelIds["A1"] = 0] = "A1";
        levelIds[levelIds["A2"] = 1] = "A2";
        levelIds[levelIds["B1"] = 2] = "B1";
        levelIds[levelIds["B2"] = 3] = "B2";
    })(blended.levelIds || (blended.levelIds = {}));
    var levelIds = blended.levelIds;
    function encodeUrl(url) {
        if (!url)
            return url;
        return url.replace(/\//g, '!');
    }
    blended.encodeUrl = encodeUrl;
    function decodeUrl(url) {
        if (!url)
            return url;
        return url.replace(/\!/g, '/');
    }
    blended.decodeUrl = decodeUrl;
    function newGuid() { return (new Date().getTime() + (startGui++)).toString(); }
    blended.newGuid = newGuid;
    var startGui = new Date().getTime();
    blended.baseUrlRelToRoot = '..'; //jak se z root stranky dostat do rootu webu
    function downloadExcelFile(url) {
        var hiddenIFrameID = 'hiddenDownloader';
        var iframe = ($('#hiddenDownloader')[0]);
        if (!iframe) {
            iframe = ($('<iframe id="hiddenDownloader" style="display:none" src="about:blank"></iframe>')[0]);
            $('body').append(iframe);
        }
        iframe.src = url;
    }
    blended.downloadExcelFile = downloadExcelFile;
    function cloneAndModifyContext(ctx, modify) {
        if (modify === void 0) { modify = null; }
        var res = {};
        $.extend(res, ctx);
        if (modify) {
            modify(res);
            finishContext(res);
        }
        return res;
    }
    blended.cloneAndModifyContext = cloneAndModifyContext;
    function finishContext(ctx) {
        ctx.productUrl = decodeUrl(ctx.producturl);
        ctx.Url = decodeUrl(ctx.url);
        ctx.pretestUrl = decodeUrl(ctx.pretesturl);
        ctx.moduleUrl = decodeUrl(ctx.moduleurl);
        ctx.userDataId = function () { return ctx.onbehalfof || ctx.loginid; };
        if (_.isString(ctx.onbehalfof))
            ctx.onbehalfof = parseInt((ctx.onbehalfof));
        else if (!ctx.onbehalfof)
            ctx.onbehalfof = '';
        if (_.isString(ctx.loginid))
            ctx.loginid = parseInt((ctx.loginid));
        if (_.isString(ctx.companyid))
            ctx.companyid = parseInt((ctx.companyid));
        if (_.isString(ctx.loc))
            ctx.loc = parseInt((ctx.loc));
        if (!ctx.$http) {
            var inj = angular.injector(['ng']);
            ctx.$http = (inj.get('$http'));
            ctx.$q = (inj.get('$q'));
        }
        return ctx;
    }
    blended.finishContext = finishContext;
    function waitForEvaluation(sc) { return !!(sc.flag & CourseModel.CourseDataFlag.needsEval); }
    blended.waitForEvaluation = waitForEvaluation;
    function scorePercent(sc) { return sc.ms == 0 ? -1 : Math.round(sc.s / sc.ms * 100); }
    blended.scorePercent = scorePercent;
    function donesPercent(sc) { return sc.count == 0 ? -1 : Math.round((sc.dones || 0) / sc.count * 100); }
    blended.donesPercent = donesPercent;
    function scoreText(sc) { var pr = scorePercent(sc); return pr < 0 ? '' : pr.toString() + '%'; }
    blended.scoreText = scoreText;
    function agregateShorts(shorts) {
        var res = $.extend({}, blended.shortDefaultAgreg);
        blended.persistUserIsDone(res, true);
        _.each(shorts, function (short) {
            if (!short) {
                blended.persistUserIsDone(res, false);
                return;
            }
            var done = blended.persistUserIsDone(short);
            res.waitForEvaluation = res.waitForEvaluation || short.waitForEvaluation;
            if (!done)
                blended.persistUserIsDone(res, false);
            res.count += short.count || 1;
            res.dones += (short.dones ? short.dones : (blended.persistUserIsDone(short) ? 1 : 0));
            if (done) {
                res.ms += short.ms || 0;
                res.s += short.s || 0;
            }
            //elapsed, beg a end
            res.beg = setDate(res.beg, short.beg, true);
            res.end = setDate(res.end, short.end, false);
            res.elapsed += short.elapsed || 0;
            res.sPlay += short.sPlay;
            res.sPRec += short.sPRec;
            res.sRec += short.sRec;
        });
        res.score = blended.scorePercent(res);
        res.finished = blended.donesPercent(res);
        return res;
    }
    blended.agregateShorts = agregateShorts;
    function agregateAutoHuman(node, taskId) {
        var res = { auto: { ms: 0, s: 0, score: 0 }, human: { ms: 0, s: 0, score: 0 } };
        _.each(node.Items, function (nd) {
            if (!blended.isEx(nd))
                return;
            var us = blended.getPersistWrapper(nd, taskId);
            var done = us && blended.persistUserIsDone(us.short);
            if (!done || !nd.ms)
                return;
            if (!!(us.short.flag & CourseModel.CourseDataFlag.pcCannotEvaluate)) {
                res.human.ms += nd.ms;
                res.human.s += us.short.s;
            }
            else {
                res.auto.ms += nd.ms;
                res.auto.s += us.short.s;
            }
        });
        res.auto.score = res.auto.ms ? Math.round(res.auto.s / res.auto.ms * 100) : -1;
        res.human.score = res.human.ms ? Math.round(res.human.s / res.human.ms * 100) : -1;
        return res;
    }
    blended.agregateAutoHuman = agregateAutoHuman;
    function agregateShortFromNodes(node, taskId, moduleAlowFinishWhenUndone /*do vyhodnoceni zahrn i nehotova cviceni*/) {
        var res = $.extend({}, blended.shortDefaultAgreg);
        blended.persistUserIsDone(res, true);
        _.each(node.Items, function (nd) {
            if (!blended.isEx(nd))
                return;
            res.count++;
            var us = blended.getPersistWrapper(nd, taskId);
            var done = us && blended.persistUserIsDone(us.short);
            res.waitForEvaluation = res.waitForEvaluation || (done && waitForEvaluation(us.short));
            if (done)
                res.dones += (us.short.dones ? us.short.dones : (blended.persistUserIsDone(us.short) ? 1 : 0));
            if (!done)
                blended.persistUserIsDone(res, false);
            if (nd.ms) {
                if (done) {
                    res.ms += nd.ms;
                    res.s += us.short.s;
                }
                else if (moduleAlowFinishWhenUndone) {
                    res.ms += nd.ms;
                }
            }
            if (us && us.short) {
                res.beg = setDate(res.beg, us.short.beg, true);
                res.end = setDate(res.end, us.short.end, false);
                res.elapsed += us.short.elapsed;
                res.sPlay += us.short.sPlay;
                res.sPRec += us.short.sPRec;
                res.sRec += us.short.sRec;
            }
        });
        res.score = blended.scorePercent(res);
        res.finished = blended.donesPercent(res);
        return res;
    }
    blended.agregateShortFromNodes = agregateShortFromNodes;
    blended.shortDefault = { elapsed: 0, beg: Utils.nowToNum(), end: Utils.nowToNum(), ms: 0, s: 0, sPlay: 0, sPRec: 0, sRec: 0, flag: 0 };
    blended.shortDefaultAgreg = { elapsed: 0, beg: Utils.nowToNum(), end: Utils.nowToNum(), ms: 0, s: 0, count: 0, dones: 0, sPlay: 0, sPRec: 0, sRec: 0, waitForEvaluation: false, flag: 0 };
    function setDate(dt1, dt2, min) { if (!dt1)
        return dt2; if (!dt2)
        return dt1; if (min)
        return dt2 > dt1 ? dt1 : dt2;
    else
        return dt2 < dt1 ? dt1 : dt2; }
})(blended || (blended = {}));
var blended;
(function (blended) {
    function persistUserIsDone(us, val) {
        if (val === undefined)
            return us ? !!(us.flag & CourseModel.CourseDataFlag.done) : false;
        if (val)
            us.flag |= CourseModel.CourseDataFlag.done;
        else
            us.flag &= ~CourseModel.CourseDataFlag.done;
    }
    blended.persistUserIsDone = persistUserIsDone;
    function getPersistWrapper(dataNode, taskid, createProc) {
        if (createProc) {
            if (!dataNode.userData)
                dataNode.userData = {};
            var res = dataNode.userData[taskid];
            if (res && res.short)
                return res;
            res = { long: null, short: createProc(), modified: true };
            dataNode.userData[taskid] = res;
            return res;
        }
        else {
            if (!dataNode.userData)
                return null;
            return (dataNode.userData[taskid]);
        }
    }
    blended.getPersistWrapper = getPersistWrapper;
    function getPersistData(dataNode, taskid) {
        var res = getPersistWrapper(dataNode, taskid);
        return res ? res.short : null;
    }
    blended.getPersistData = getPersistData;
    function clearPersistData(dataNode, taskid) {
        var it = dataNode.userData ? dataNode.userData[taskid] : null;
        if (!it)
            return;
        it.modified = true;
        delete it.short;
        delete it.long;
    }
    blended.clearPersistData = clearPersistData;
    function setPersistData(dataNode, taskid, modify) {
        var it = dataNode.userData ? dataNode.userData[taskid] : null;
        if (!it) {
            it = { short: {}, modified: true, long: null };
            if (!dataNode.userData)
                dataNode.userData = {};
            dataNode.userData[taskid] = it;
        }
        else {
            if (!it.short)
                it.short = {};
            it.modified = true;
        }
        modify((it.short));
        return (it.short);
    }
    blended.setPersistData = setPersistData;
    //rozsireni interface o metody
    function finishProduktStart(prod) {
        $.extend(prod, blended.productEx);
        prod.moduleCache = new blended.loader.cacheOf(3);
    }
    blended.finishProduktStart = finishProduktStart;
    blended.productEx = {
        findParent: function (self, cond) {
            var c = self;
            while (c != null) {
                if (cond(c))
                    return c;
                c = c.parent;
            }
            return null;
        },
        find: function (url) {
            var pe = this;
            return (pe.nodeDir[url]);
        },
        addExternalTaskNode: function (repo) {
            var pe = this;
            if (pe.nodeDir[repo.url])
                return;
            pe.nodeDir[repo.url] = repo;
            pe.nodeList.push(repo);
        },
        saveProduct: function (ctx, completed) {
            var pe = this;
            var toSave = [];
            _.each(pe.nodeList, function (nd) {
                if (!nd.userData)
                    return;
                for (var p in nd.userData) {
                    try {
                        var d = nd.userData[p];
                        if (!d.modified)
                            return;
                        d.modified = false;
                        toSave.push({ url: nd.url, taskId: p, shortData: d.short ? JSON.stringify(d.short) : null, longData: d.long ? JSON.stringify(d.long) : null, flag: d.short ? d.short.flag : 0 });
                        if (!d.short)
                            delete nd.userData[p];
                    }
                    finally {
                        delete p.long;
                    }
                }
            });
            if (toSave.length == 0) {
                completed();
                return;
            }
            proxies.vyzva57services.saveUserData(ctx.companyid, ctx.userDataId(), ctx.productUrl, toSave, completed);
        }
    };
    var cachedModule = (function () {
        function cachedModule(data, dataNode) {
            this.dataNode = dataNode;
            this.cacheOfPages = new loader.cacheOf(30);
            $.extend(this, data);
            if (!this.loc)
                this.loc = {};
            if (this.dict)
                this.dict = RJSON.unpack(this.dict);
        }
        return cachedModule;
    })();
    blended.cachedModule = cachedModule;
    var cacheExercise = (function () {
        function cacheExercise(mod, dataNode, pageJsonML) {
            this.mod = mod;
            this.dataNode = dataNode;
            this.pageJsonML = pageJsonML;
        }
        return cacheExercise;
    })();
    blended.cacheExercise = cacheExercise;
    var loader;
    (function (loader) {
        //baseUrlRelToRoot: relativni adresa rootu Web4 aplikace vyhledem k aktualni HTML strance
        function adjustProduct(ctx) {
            try {
                var deferred = ctx.$q.defer();
                var fromCache = loader.productCache.fromCache(ctx, deferred);
                if (fromCache.prod) {
                    deferred.resolve(fromCache.prod);
                    return;
                } //produkt je jiz nacten, resolve.
                if (!fromCache.startReading)
                    return; //produkt se zacal nacitat jiz drive - deferred se pouze ulozi do seznamu deferreds.
                //novy start nacitani produktu
                var href = ctx.productUrl.substr(0, ctx.productUrl.length - 1);
                var promises = _.map([href + '.js', href + '.' + LMComLib.Langs[ctx.loc] + '.js', href + '_instrs.js'], function (url) { return ctx.$http.get(blended.baseUrlRelToRoot + url, { transformResponse: function (s) { return CourseMeta.jsonParse(s); } }); });
                ctx.$q.all(promises).then(function (files) {
                    var prod = files[0].data;
                    prod.url = ctx.productUrl;
                    prod.instructions = {};
                    prod.nodeDir = {};
                    prod.nodeList = [];
                    finishProduktStart(prod);
                    var loc = files[1].data;
                    if (!loc)
                        loc = {};
                    var instrs = files[2].data;
                    //vypln seznamy a adresar nodes
                    var scan;
                    scan = function (dt) {
                        prod.nodeDir[dt.url] = dt;
                        prod.nodeList.push(dt);
                        if (dt.other)
                            dt = $.extend(dt, JSON.parse(dt.other.replace(/'/g, '"')));
                        _.each(dt.Items, function (it) { it.parent = dt; scan(it); });
                    };
                    scan(prod);
                    //lokalizace produktu
                    _.each(prod.nodeList, function (dt) { return dt.title = CourseMeta.localizeString(dt.url, dt.title, loc); });
                    //finish instrukce
                    if (instrs)
                        for (var p in instrs) {
                            var pg = CourseMeta.extractEx(instrs[p]);
                            if (pg == null) {
                                debugger;
                                throw 'missing instr';
                            }
                            pg.Items = _.filter(pg.Items, function (it) { return !_.isString(it); });
                            Course.localize(pg, function (s) { return CourseMeta.localizeString(pg.url, s, loc); });
                            Course.scanEx(pg, function (tg) { if (!_.isString(tg))
                                delete tg.id; }); //instrukce nemohou mit tag.id, protoze se ID tlucou s ID ze cviceni
                            prod.instructions[p] = JsRenderTemplateEngine.render("c_genitems", pg);
                        }
                    if (ctx.finishProduct)
                        ctx.finishProduct(prod);
                    //user data
                    proxies.vyzva57services.getShortProductDatas(ctx.companyid, ctx.userDataId(), ctx.productUrl, function (res) {
                        _.each(res, function (it) {
                            var node = prod.nodeDir[it.url];
                            if (!node)
                                debugger;
                            if (!node.userData)
                                node.userData = {};
                            var taskData = node.userData[it.taskId];
                            var shortLong = { modified: false, long: null, short: JSON.parse(it.shortData) };
                            if (!taskData)
                                node.userData[it.taskId] = shortLong;
                            //else debugger; /*something wrong*/
                        });
                        //product nacten, resolve vsechny cekajici deferreds
                        loader.productCache.resolveDefereds(fromCache.startReading, prod);
                    });
                }, function (errors) {
                    deferred.reject();
                });
            }
            finally {
                return deferred.promise;
            }
        }
        loader.adjustProduct = adjustProduct;
        function adjustModule(ctx, modData, prod) {
            ctx = blended.finishContext(ctx);
            var deferred = ctx.$q.defer();
            try {
                var mod = prod.moduleCache.fromCache(ctx.moduleUrl, null);
                if (mod) {
                    deferred.resolve(mod);
                    return;
                }
                var href = blended.baseUrlRelToRoot + ctx.moduleUrl.substr(0, ctx.moduleUrl.length - 1) + '.' + LMComLib.Langs[ctx.loc] + '.js';
                ctx.$http.get(href).then(function (file) {
                    mod = new cachedModule(file.data, modData);
                    prod.moduleCache.toCache(ctx.moduleUrl, null, mod);
                    deferred.resolve(mod);
                }, function (errors) {
                    deferred.reject();
                });
            }
            finally {
                return deferred.promise;
            }
        }
        function adjustEx(ctx) {
            ctx = blended.finishContext(ctx);
            var deferred = ctx.$q.defer();
            try {
                adjustProduct(ctx).then(function (prod) {
                    var exNode = prod.find(ctx.Url);
                    var modData = prod.findParent(exNode, function (n) { return CourseMeta.isType(n, CourseMeta.runtimeType.mod); });
                    if (modData == null)
                        throw 'Exercise ' + ctx.Url + ' does not have module';
                    var modCtx = blended.cloneAndModifyContext(ctx, function (m) { return m.moduleurl = blended.encodeUrl(modData.url); });
                    adjustModule(modCtx, modData, prod).then(function (mod) {
                        var exServ = mod.cacheOfPages.fromCache(ctx.Url, ctx.taskid);
                        if (exServ) {
                            deferred.resolve(exServ);
                            return;
                        }
                        var href = blended.baseUrlRelToRoot + ctx.Url + '.js';
                        ctx.$http.get(href, { transformResponse: function (s) { return CourseMeta.jsonParse(s); } }).then(function (file) {
                            var exServ = new cacheExercise(mod, exNode, file.data);
                            mod.cacheOfPages.toCache(ctx.Url, ctx.taskid, exServ);
                            deferred.resolve(exServ);
                        }, function (errors) {
                            deferred.reject();
                        });
                    });
                });
            }
            finally {
                return deferred.promise;
            }
        }
        loader.adjustEx = adjustEx;
        var cacheOfProducts = (function () {
            function cacheOfProducts() {
                this.products = [];
                this.maxInsertOrder = 0;
            }
            //data != null => ihned vrat. Jinak startReading!=null => spust nacitani, jinak ukonci.
            cacheOfProducts.prototype.fromCache = function (ctx, defered) {
                var resIt = _.find(this.products, function (it) { return it.companyid == ctx.companyid && it.onbehalfof == ctx.userDataId() &&
                    it.loc == ctx.loc && it.producturl == ctx.producturl; });
                //jiz nacteno nebo neni defered => return
                if (resIt && resIt.data)
                    return { prod: resIt.data };
                if (!defered)
                    return {};
                //nenacteno
                var justCreated = false;
                if (!resIt) {
                    resIt = this.toCache(ctx); //vytvor polozku v cache
                    resIt.defereds = [];
                    justCreated = true; //start noveho nacitani
                }
                ;
                resIt.defereds.push(defered);
                resIt.insertOrder = this.maxInsertOrder++; //naposledy pouzity produkt (kvuli vyhazovani z cache)
                return { startReading: justCreated ? resIt : null };
            };
            cacheOfProducts.prototype.toCache = function (ctx) {
                if (this.products.length >= 3) {
                    var minIdx = 99999;
                    for (var i = 0; i < this.products.length; i++)
                        minIdx = Math.min(this.products[i].insertOrder, minIdx);
                    this.products.splice(minIdx, 1);
                }
                var res;
                this.products.push(res = {
                    companyid: ctx.companyid, loc: ctx.loc, producturl: ctx.producturl, onbehalfof: ctx.userDataId(),
                    data: null, insertOrder: this.maxInsertOrder++, taskid: null, loginid: -1, lickeys: null, persistence: null
                });
                return res;
            };
            cacheOfProducts.prototype.resolveDefereds = function (resIt, data) {
                resIt.data = data;
                var defs = resIt.defereds;
                delete resIt.defereds;
                _.each(defs, function (def) { return def.resolve(data); });
            };
            cacheOfProducts.prototype.remove = function (ctx) {
                this.products = _.reject(this.products, function (it) { return it.companyid == ctx.companyid && it.onbehalfof == ctx.userDataId() && it.loc == ctx.loc && it.producturl == ctx.producturl; });
            };
            return cacheOfProducts;
        })();
        loader.cacheOfProducts = cacheOfProducts;
        loader.productCache = new cacheOfProducts();
        //*************** CACHE modulu (v produktu), cache cviceni (v modulu)
        var cacheOf = (function () {
            function cacheOf(maxLength) {
                this.maxLength = maxLength;
                this.modules = {};
                this.maxInsertOrder = 0;
            }
            cacheOf.prototype.fromCache = function (url, taskId) {
                var urlTaskId = url + (taskId ? '|' + taskId : '');
                var cch = this.modules[urlTaskId];
                return cch ? cch.data : null;
            };
            cacheOf.prototype.toCache = function (url, taskId, mod) {
                var urlTaskId = url + (taskId ? '|' + taskId : '');
                var cnt = 0;
                var minIdx = 99999;
                var propName;
                for (var p in this.modules) {
                    cnt++;
                    var m = this.modules[p];
                    if (m.insertOrder >= minIdx)
                        return;
                    minIdx = m.insertOrder;
                    propName = p;
                }
                if (cnt > 5)
                    delete this.modules[propName];
                this.modules[urlTaskId] = { data: mod, insertOrder: this.maxInsertOrder++ };
            };
            return cacheOf;
        })();
        loader.cacheOf = cacheOf;
    })(loader = blended.loader || (blended.loader = {}));
})(blended || (blended = {}));
var blended;
(function (blended) {
    (function (exItemBackground) {
        exItemBackground[exItemBackground["no"] = 0] = "no";
        exItemBackground[exItemBackground["warning"] = 1] = "warning";
        exItemBackground[exItemBackground["success"] = 2] = "success";
        exItemBackground[exItemBackground["danger"] = 3] = "danger";
    })(blended.exItemBackground || (blended.exItemBackground = {}));
    var exItemBackground = blended.exItemBackground;
    (function (exItemContent) {
        exItemContent[exItemContent["no"] = 0] = "no";
        exItemContent[exItemContent["check"] = 1] = "check";
        exItemContent[exItemContent["folderOpen"] = 2] = "folderOpen";
        exItemContent[exItemContent["folder"] = 3] = "folder";
        exItemContent[exItemContent["progressBar"] = 4] = "progressBar";
        exItemContent[exItemContent["waitForEvaluation"] = 5] = "waitForEvaluation";
    })(blended.exItemContent || (blended.exItemContent = {}));
    var exItemContent = blended.exItemContent;
    var moduleServiceLow = (function () {
        function moduleServiceLow(node, type, controller, forHome /*konstruktor pro pouziti service na HOME, jinak ve cviceni*/) {
            this.node = node;
            this.controller = controller;
            this.lessonType = type;
            this.onbehalfof = controller.ctx.onbehalfof > 0;
            if (forHome)
                this.refresh(0);
        }
        moduleServiceLow.prototype.refresh = function (actExIdx) {
            var _this = this;
            this.exercises = _.map(_.filter(this.node.Items, function (it) { return isEx(it); }), function (node, idx) {
                return {
                    user: blended.getPersistData(node, _this.controller.ctx.taskid),
                    idx: idx,
                    node: node,
                    active: idx == actExIdx
                };
            });
            this.agregUser = blended.agregateShortFromNodes(this.node, this.controller.ctx.taskid);
        };
        return moduleServiceLow;
    })();
    blended.moduleServiceLow = moduleServiceLow;
    var moduleService = (function (_super) {
        __extends(moduleService, _super);
        function moduleService(node, exService, type, controller) {
            _super.call(this, node, type, controller, false);
            this.exService = exService;
            var user = blended.getPersistData(node, controller.ctx.taskid);
            this.moduleDone = blended.persistUserIsDone(user);
            this.refresh(this.exService.modIdx);
            this.agregUser = $.extend(this.agregUser, user);
            this.exShowPanel = this.moduleDone || this.lessonType != blended.moduleServiceType.pretest;
        }
        moduleService.prototype.refresh = function (actExIdx) {
            var _this = this;
            _super.prototype.refresh.call(this, actExIdx);
            this.exNoclickable = this.lessonType == blended.moduleServiceType.test && !this.moduleDone && !this.controller.ctx.onbehalfof;
            _.each(this.exercises, function (ex) {
                //active item: stejny pro vsechny pripady
                if (ex.active) {
                    ex.content = exItemContent.folderOpen;
                    ex.background = exItemBackground.warning;
                    return;
                }
                var exDone = blended.persistUserIsDone(ex.user);
                //nehotovy test
                if (_this.lessonType == blended.moduleServiceType.test && !_this.moduleDone && !_this.controller.ctx.onbehalfof) {
                    ex.content = exDone ? exItemContent.check : exItemContent.folder;
                    return;
                }
                //vse ostatni: nehotova lekce, hotovy test i pretest
                if (!exDone)
                    ex.content = exItemContent.folder;
                else if (ex.user.ms) {
                    var waitForEval = blended.waitForEvaluation(ex.user);
                    ex.content = waitForEval ? exItemContent.waitForEvaluation : exItemContent.progressBar;
                    ex.percent = blended.scorePercent(ex.user);
                    ex.background = waitForEval && _this.controller.ctx.onbehalfof ? exItemBackground.danger : exItemBackground.success;
                }
                else {
                    ex.background = exItemBackground.success;
                    ex.content = exItemContent.check;
                }
            });
        };
        moduleService.prototype.showResult = function () {
            var res = this.exService.user && this.exService.user.short && blended.persistUserIsDone(this.exService.user.short) &&
                (this.lessonType == blended.moduleServiceType.lesson || this.moduleDone);
            return res;
        };
        //skok na jine cviceni, napr. v module map panelu 
        moduleService.prototype.navigateExercise = function (idx) {
            if (idx == this.exService.modIdx)
                return;
            var exNode = this.exercises[idx].node;
            var ctx = blended.cloneAndModifyContext(this.controller.ctx, function (c) { return c.url = blended.encodeUrl(exNode.url); });
            this.controller.navigate({ stateName: this.controller.state.name, pars: ctx });
        };
        return moduleService;
    })(moduleServiceLow);
    blended.moduleService = moduleService;
    function moduleIsDone(nd, taskId) {
        return !_.find(nd.Items, function (it) { var itUd = blended.getPersistData(it, taskId); return !blended.persistUserIsDone(itUd); });
    }
    blended.moduleIsDone = moduleIsDone;
    function isEx(nd) { return CourseMeta.isType(nd, CourseMeta.runtimeType.ex); }
    blended.isEx = isEx;
    var moduleTaskController = (function (_super) {
        __extends(moduleTaskController, _super);
        function moduleTaskController($scope, $state) {
            var _this = this;
            _super.call(this, $scope, $state);
            this.moduleParent = this;
            this.user = blended.getPersistWrapper(this.dataNode, this.ctx.taskid, function () { return { actChildIdx: 0, flag: blended.serviceTypeToPersistFlag(_this.moduleParent.state.moduleType) }; });
            this.exercises = _.filter(this.dataNode.Items, function (it) { return isEx(it); });
        }
        moduleTaskController.prototype.onExerciseLoaded = function (idx) {
            var ud = this.user.short;
            if (blended.persistUserIsDone(ud)) {
                ud.actChildIdx = idx;
                this.user.modified = true;
            }
        };
        moduleTaskController.prototype.adjustChild = function () {
            var _this = this;
            var ud = this.user.short;
            var exNode = blended.persistUserIsDone(ud) ? this.exercises[ud.actChildIdx] : _.find(this.exercises, function (it) { var itUd = blended.getPersistData(it, _this.ctx.taskid); return !blended.persistUserIsDone(itUd); });
            if (!exNode) {
                debugger;
                blended.persistUserIsDone(ud, true);
                this.user.modified = true;
            }
            var moduleExerciseState = _.find(this.state.childs, function (ch) { return !ch.noModuleExercise; });
            var state = {
                params: blended.cloneAndModifyContext(this.ctx, function (d) { return d.url = blended.encodeUrl(exNode.url); }),
                parent: this,
                current: moduleExerciseState,
            };
            return new moduleExerciseState.controller(state, null);
        };
        moduleTaskController.prototype.moveForward = function (sender) {
            var _this = this;
            if (this.inCongratulation) {
                delete this.inCongratulation;
                return blended.moveForwardResult.toParent;
            }
            var ud = this.user.short;
            if (blended.persistUserIsDone(ud)) {
                ud.actChildIdx = ud.actChildIdx == this.exercises.length - 1 ? 0 : ud.actChildIdx + 1;
                this.user.modified = true;
                return blended.moveForwardResult.selfAdjustChild;
            }
            else {
                var exNode = _.find(this.exercises, function (it) { var itUd = blended.getPersistData(it, _this.ctx.taskid); return !blended.persistUserIsDone(itUd); });
                if (!exNode) {
                    blended.persistUserIsDone(ud, true);
                    this.user.modified = true;
                    if (this.pretestParent)
                        return blended.moveForwardResult.toParent;
                    sender.congratulationDialog().then(function () { return sender.greenClick(); }, function () { return sender.greenClick(); });
                    this.inCongratulation = true;
                    return blended.moveForwardResult.selfInnner;
                }
                return blended.moveForwardResult.selfAdjustChild;
            }
        };
        return moduleTaskController;
    })(blended.taskController);
    blended.moduleTaskController = moduleTaskController;
    blended.rootModule
        .filter('vyzva$exmodule$percentheight', function () { return function (per, maxHeight) { return { height: ((100 - per) * maxHeight / 100).toString() + 'px' }; }; })
        .filter('vyzva$exmodule$percentwidth', function () { return function (per, maxWidth) { return { width: ((100 - per) * maxWidth / 100).toString() + 'px' }; }; })
        .filter('vyzva$exmodule$sec', function () { return function (sec) { return sec ? Utils.formatDateTime(sec) : null; }; })
        .filter('vyzva$exmodule$time', function () { return function (sec) { return sec ? Utils.formatTimeSpan(sec) : null; }; })
        .filter('vyzva$exmodule$score', function () { return function (short) { return blended.scoreText(short); }; })
        .directive('vyzva$exmodule$emptytest', function () {
        return {
            scope: { label: '@label', value: '@value', nobr: '@nobr' },
            template: '<span ng-if="value">{{label}}: <b>{{value}}</b></span><br ng-if="!nobr"/>'
        };
    })
        .directive('vyzva$exmodule$scoreprogress', function () {
        return {
            scope: { value: '@value', colors: '@colors' },
            template: '<div ng-class="colors ? colors: \'score-bar\'"><div class="score-text">{{value}}%</div><div class="progress-red" ng-style="value | vyzva$exmodule$percentwidth : 50"></div></div>'
        };
    });
})(blended || (blended = {}));
var blended;
(function (blended) {
    (function (moduleServiceType) {
        moduleServiceType[moduleServiceType["pretest"] = 0] = "pretest";
        moduleServiceType[moduleServiceType["lesson"] = 1] = "lesson";
        moduleServiceType[moduleServiceType["test"] = 2] = "test";
    })(blended.moduleServiceType || (blended.moduleServiceType = {}));
    var moduleServiceType = blended.moduleServiceType;
    function serviceTypeToPersistFlag(st) {
        switch (st) {
            case moduleServiceType.pretest: return CourseModel.CourseDataFlag.blPretestItem;
            case moduleServiceType.lesson: return CourseModel.CourseDataFlag.blLesson;
            case moduleServiceType.test: return CourseModel.CourseDataFlag.blTest;
        }
    }
    blended.serviceTypeToPersistFlag = serviceTypeToPersistFlag;
    function createStateData(data) { return data; }
    blended.createStateData = createStateData;
    //export var globalApi: {
    //  new ($scope: IControllerScope, $state: angular.ui.IStateService, ctx: learnContext): Object;
    //};
    //export var globalApi: Function;
    //zaregistrovany stav (v app.ts)
    var state = (function () {
        function state(st) {
            //this.oldController = <any>(st.controller); var self = this;
            //if (this.oldController) {
            //  var services: Array<any> = ['$scope', '$state' ];
            //  if (st.resolve) for (var p in st.resolve) services.push(p);
            //  services.push(($scope: IControllerScope, $state: angular.ui.IStateService, ...resolves: Array<Object>) => {
            //    var parent: taskController = (<any>($scope.$parent)).ts;
            //    //kontrola jestli nektery z parentu nenastavil isWrongUrl. Pokud ano, vrat fake controller
            //    if (parent && parent.isWrongUrl) {
            //      parent.isWrongUrl = false;
            //      $scope.ts = <any>{ isWrongUrl: true, parent: parent }; return;
            //    }
            //    //neni isWrongUrl, pokracuj
            //    var params = <learnContext><any>($state.params);
            //    finishContext(params);
            //    params.$state = $state;
            //    var ss: IStateService = { current: self, params: params, parent: parent, createMode: createControllerModes.navigate, $scope: $scope };
            //    var task = <controller>(new this.oldController(ss, resolves));
            //    $scope.ts = task;
            //    if (globalApi) {
            //      var api = new globalApi($scope, $state, params);
            //      $scope.api = () => api;
            //    }
            //  });
            //  st.controller = <any>services;
            //}
            $.extend(this, st);
        }
        //******* Inicializace: linearizace state tree na definict states
        state.prototype.initFromStateTree = function (provider, root) {
            var _this = this;
            provider.state(this);
            _.each(this.childs, function (ch) {
                ch.parent = _this;
                ch.name = _this.name + '.' + ch.name;
                ch.initFromStateTree(provider, root);
            });
        };
        return state;
    })();
    blended.state = state;
})(blended || (blended = {}));
var blended;
(function (blended) {
    blended.taskContextAs = {
        product: 'productParent',
        pretest: 'pretestParent',
        module: 'moduleParent',
        ex: 'exParent',
        lector: 'lectorParent',
    };
    function extendTaskContext($scope, task) {
        for (var p in blended.taskContextAs) {
            var propName = blended.taskContextAs[p];
            var value = $scope[propName];
            if (value)
                task[propName] = $scope[propName];
        }
    }
    blended.extendTaskContext = extendTaskContext;
    var controller = (function () {
        function controller($scope, $state) {
            var stateService = this.getStateService($scope);
            if (stateService) {
                this.isFakeCreate = true;
                this.ctx = stateService.params;
                blended.finishContext(this.ctx);
                //this.parent = stateService.parent;
                this.state = stateService.current;
                extendTaskContext(stateService.parent, this);
                return;
            }
            this.$scope = $scope;
            this.$state = $state;
            extendTaskContext(this.$scope, this);
            this.ctx = $state.params;
            blended.finishContext(this.ctx);
            //this.ctx.$state = $state;
            this.$scope['ts'] = this;
            var st = $state.current;
            var constr = this.constructor;
            while (st) {
                if (st.controller == constr) {
                    this.state = st;
                    break;
                }
                st = st.parent;
            }
            this.$scope.state = this.state;
            this.$scope['appService'] = this.appService = new vyzva.appService(this);
        }
        controller.prototype.getStateService = function ($scope) { return !!$scope['current'] ? $scope : null; };
        controller.prototype.href = function (url) {
            return this.$state.href(url.stateName, url.pars);
        };
        controller.prototype.navigate = function (url) {
            if (!url)
                return;
            var hash = this.href(url);
            setTimeout(function () { return window.location.hash = hash; }, 1);
        };
        controller.prototype.navigateWrapper = function () {
            var self = this;
            return function (stateName) { return self.navigate({ stateName: stateName, pars: self.ctx }); };
        };
        controller.prototype.navigateWebHome = function () {
            if (this.ctx.homelinktype == 'vyzvademo') {
                this.navigate({ stateName: 'vyzvademo', pars: { companytitle: this.ctx.vyzvademocompanytitle } });
            }
            else {
                Pager.gotoHomeUrl();
            }
        };
        controller.prototype.navigateReturnUrl = function () { location.href = this.ctx.returnurl; };
        controller.prototype.getProductHomeUrl = function () { return { stateName: blended.prodStates.home.name, pars: this.ctx }; };
        controller.prototype.navigateProductHome = function () { this.navigate(this.getProductHomeUrl()); };
        controller.prototype.wrongUrlRedirect = function (url) {
            if (!url)
                return;
            this.isWrongUrl = true;
            setTimeout(this.navigate(url), 1);
        };
        controller.$inject = ['$scope', '$state'];
        return controller;
    })();
    blended.controller = controller;
    //******* TASK VIEW - predchudce vsech controllers, co maji vizualni podobu (html stranku)
    var taskViewController = (function (_super) {
        __extends(taskViewController, _super);
        function taskViewController($scope, $state) {
            _super.call(this, $scope, $state);
            this.myTask = this.isFakeCreate ? $scope.parent : $scope.$parent['ts'];
            this.title = this.myTask.dataNode.title;
        }
        return taskViewController;
    })(controller);
    blended.taskViewController = taskViewController;
    (function (moveForwardResult) {
        moveForwardResult[moveForwardResult["toParent"] = 0] = "toParent"; /*neumi se posunout dopredu, musi se volat moveForward parenta*/
        moveForwardResult[moveForwardResult["selfAdjustChild"] = 1] = "selfAdjustChild"; /*posunuto dopredu, nutno spocitat goCurrent a skocit na jiny task*/
        moveForwardResult[moveForwardResult["selfInnner"] = 2] = "selfInnner"; /*posun osetren v ramci zmeny stavu aktualniho tasku (bez nutnosti navigace na jiny task)*/
    })(blended.moveForwardResult || (blended.moveForwardResult = {}));
    var moveForwardResult = blended.moveForwardResult;
    //******* TASK (predchudce vse abstraktnich controllers (mimo cviceni), reprezentujicich TASK). Task umi obslouzit zelenou sipku apod.
    var taskController = (function (_super) {
        __extends(taskController, _super);
        //parent: taskController;
        //isProductHome: boolean;
        //********************* 
        function taskController($scope, $state) {
            _super.call(this, $scope, $state);
            //constructor(state: IStateService, resolves?: Array<any>) {
            //    super(state);
            if (!this.state.dataNodeUrlParName)
                return;
            //provaz parent - child
            //if (this.parent) this.parent.child = this;
            //var parentTask = this.parent = (<ng.IScope>$scope).$parent['ts']; if (parentTask) parentTask.child = this;
            //dataNode
            if (this.productParent) {
                this.dataNode = this.productParent.dataNode.nodeDir[this.ctx[this.state.dataNodeUrlParName]];
                this.user = blended.getPersistWrapper(this.dataNode, this.ctx.taskid);
            }
        }
        //********************** GREEN MANAGEMENT
        // Zelena sipka je prirazena nejakemu ACT_TASK (Pretest nebo Lesson ve VYZVA aplikaci apod.)
        // Zelena sipka neni videt, musi se skocit do tasku pomoci ACT_TASK.goCurrent
        // Pak je videt a pri kliku na sipku se vola ACT_TASK.goAhead 
        // Vrati-li ACT_TASK.goAhead null, skoci se na home produktu
        // **** goCurrent
        // PARENT na zaklade USER dat svych childu urcuje, ktery z nich je narade (pomoci funkce PARENT.adjustChild)
        // skace se na posledni child, co vrati adjustChild() null
        //Fake dodelavka TASKLIST (pridanim taskuu s 'createMode=createControllerModes.adjustChild') tak, aby posledni v rade byl task, na ktery se skace.
        //Sance parent tasku prenest zodpovednost na child.
        //Klicove je do childUrl tasku doplnit spravny task.ctx, aby v goCurrent fungovalo 'return { stateName: t.state.name, pars: t.ctx }'
        taskController.prototype.adjustChild = function () { return null; };
        //posun stavu dal
        taskController.prototype.moveForward = function (sender) { throw 'notimplemented'; };
        //priznak pro 'if (t.taskControllerSignature)' test, ze tento objekt je task.
        taskController.prototype.taskControllerSignature = function () { };
        //nevirtualni funkce: dobuduje TASKLIST umele vytvorenymi tasks (pomoci adjust Child) a vrati URL posledniho child v TASKLIST.
        taskController.prototype.goCurrent = function () {
            var t = this;
            while (t) {
                var newt = t.adjustChild();
                if (!newt)
                    return { stateName: t.state.name, pars: t.ctx };
                t = newt;
            }
        };
        taskController.prototype.navigateAhead = function (sender) {
            this.navigate(this.goAhead(sender));
        };
        taskController.prototype.goAhead = function (sender) {
            var task = sender;
            while (true) {
                switch (task.moveForward(sender)) {
                    case moveForwardResult.selfInnner: return null;
                    case moveForwardResult.toParent:
                        if (task == task.exParent) {
                            task = task.moduleParent;
                            continue;
                        }
                        if (task == task.moduleParent && task.pretestParent) {
                            task = task.pretestParent;
                            continue;
                        }
                        return this.getProductHomeUrl(); //{ stateName: prodStates.home.name, pars: this.ctx }
                    case moveForwardResult.selfAdjustChild: return task.goCurrent();
                }
            }
            //seznam od childs k this
            //var taskList: Array<taskController> = [];
            //var act = this; while (act) {
            //  if (!act.taskControllerSignature) break;
            //  taskList.push(act);
            //  act = act.child;
            //}
            ////najdi prvni task, co se umi posunout dopredu: jdi od spodu nahoru
            //for (var i = taskList.length - 1; i >= 0; i--) {
            //  var act = taskList[i];
            //  switch (act.moveForward()) {
            //    case moveForwardResult.selfInnner: return null;
            //    case moveForwardResult.toParent: break;
            //    case moveForwardResult.selfAdjustChild: return act.goCurrent();
            //  }
            //}
            ////ani jeden z parentu move nevyresil => jdi na home produktu
            //return { stateName: prodStates.home.name, pars: this.ctx }
        };
        taskController.prototype.log = function (msg) {
            console.log('%%% ' + Utils.getObjectClassName(this) + ": " + msg + ' (' + this.dataNode.url + ')');
        };
        return taskController;
    })(controller);
    blended.taskController = taskController;
    //****************** PRODUCT HOME
    var homeTaskController = (function (_super) {
        __extends(homeTaskController, _super);
        function homeTaskController($scope, $state, product) {
            _super.call(this, $scope, $state);
            this.dataNode = product;
        }
        return homeTaskController;
    })(taskController);
    blended.homeTaskController = homeTaskController;
    function pretestScore(dataNode, user, taskId) {
        if (!blended.persistUserIsDone(user))
            return null;
        var users = _.map(user.history, function (l) { return blended.agregateShortFromNodes(dataNode.Items[l], taskId); });
        return blended.agregateShorts(users);
    }
    blended.pretestScore = pretestScore;
    var pretestTaskController = (function (_super) {
        __extends(pretestTaskController, _super);
        //inCongratulation: boolean; //priznak, ze modul byl prave preveden do stavu DONE a ukazuje se congratulation dialog
        function pretestTaskController($scope, $state) {
            _super.call(this, $scope, $state);
            this.pretestParent = this;
            //sance prerusit navigaci
            this.user = blended.getPersistWrapper(this.dataNode, this.ctx.taskid, function () {
                return { actLevel: blended.levelIds.A2, history: [blended.levelIds.A2], targetLevel: -1, flag: CourseModel.CourseDataFlag.blPretest };
            });
            if (this.isFakeCreate)
                return;
            this.wrongUrlRedirect(this.checkCommingUrl());
        }
        pretestTaskController.prototype.checkCommingUrl = function () {
            var ud = this.user.short;
            if (!ud)
                return this.getProductHomeUrl(); //{ stateName: prodStates.home.name, pars: this.ctx }; //pretest jeste nezacal => goto product home
            if (blended.persistUserIsDone(ud))
                return null; //done pretest: vse je povoleno
            var dataNode = this.dataNode;
            var actModule = dataNode.Items[ud.actLevel];
            var actEx = this.productParent.dataNode.nodeDir[this.ctx.Url];
            if (actModule.url != actEx.parent.url) {
                var pars = blended.cloneAndModifyContext(this.ctx, function (c) { return c.moduleurl = blended.encodeUrl(actModule.url); });
                return this.getProductHomeUrl(); //{ stateName: prodStates.home.name, pars: pars }; //v URL je adresa jineho nez aktivniho modulu (asi pomoci back) => jdi na prvni cviceni aktualniho modulu
            }
            return null;
        };
        pretestTaskController.prototype.adjustChild = function () {
            var ud = this.user.short;
            if (blended.persistUserIsDone(ud))
                return null;
            var actModule = this.actRepo(ud.actLevel);
            if (!actModule)
                throw '!actModule';
            var state = {
                params: blended.cloneAndModifyContext(this.ctx, function (d) { return d.moduleurl = blended.encodeUrl(actModule.url); }),
                parent: this,
                current: blended.prodStates.pretestModule,
            };
            return new blended.moduleTaskController(state);
        };
        pretestTaskController.prototype.moveForward = function (sender) {
            //if (this.inCongratulation) { delete this.inCongratulation; return moveForwardResult.toParent; }
            var ud = this.user.short;
            var actTestItem = sender.moduleParent; // <exerciseTaskViewController>(this.child);
            var actRepo = this.actRepo(ud.actLevel);
            if (actTestItem.dataNode != actRepo)
                throw 'actTestItem.dataNode != actRepo';
            var childSummary = blended.agregateShortFromNodes(actTestItem.dataNode, this.ctx.taskid);
            if (!blended.persistUserIsDone(childSummary))
                throw '!childUser.done';
            var score = blended.scorePercent(childSummary);
            if (actRepo.level == blended.levelIds.A1) {
                return this.finishPretest(sender, ud, blended.levelIds.A1);
            }
            else if (actRepo.level == blended.levelIds.A2) {
                if (score >= actRepo.min && score < actRepo.max)
                    return this.finishPretest(sender, ud, blended.levelIds.A2);
                else if (score < actRepo.min)
                    return this.newTestItem(ud, blended.levelIds.A1);
                else
                    return this.newTestItem(ud, blended.levelIds.B1);
            }
            else if (actRepo.level == blended.levelIds.B1) {
                if (score >= actRepo.min && score < actRepo.max)
                    return this.finishPretest(sender, ud, blended.levelIds.B1);
                else if (score < actRepo.min)
                    return this.finishPretest(sender, ud, blended.levelIds.A2);
                else
                    return this.newTestItem(ud, blended.levelIds.B2);
            }
            else if (actRepo.level == blended.levelIds.B2) {
                if (score < actRepo.min)
                    return this.finishPretest(sender, ud, blended.levelIds.B1);
                else
                    return this.finishPretest(sender, ud, blended.levelIds.B2);
            }
            throw 'not implemented';
        };
        pretestTaskController.prototype.newTestItem = function (ud, lev) {
            this.user.modified = true;
            ud.actLevel = lev;
            ud.history.push(lev);
            return moveForwardResult.selfAdjustChild;
        };
        pretestTaskController.prototype.finishPretest = function (sender, ud, lev) {
            var _this = this;
            this.user.modified = true;
            blended.persistUserIsDone(ud, true);
            ud.targetLevel = lev;
            delete ud.actLevel;
            sender.congratulationDialog().then(function () { return _this.navigateProductHome(); }, function () { return _this.navigateProductHome(); });
            //this.inCongratulation = true;
            return moveForwardResult.selfInnner;
        };
        pretestTaskController.prototype.actRepo = function (lev) { return _.find(this.dataNode.Items, function (l) { return l.level == lev; }); };
        return pretestTaskController;
    })(taskController);
    blended.pretestTaskController = pretestTaskController;
})(blended || (blended = {}));
var vyzva;
(function (vyzva) {
    vyzva.vyzvaRoot = blended.baseUrlRelToRoot + '/blendedapi/vyzva/';
    //*************** RESOLVERs
    //adjust produkt
    vyzva.loadProduct = ['$stateParams', function (ctx) {
            blended.finishContext(ctx);
            ctx.finishProduct = vyzva.finishHomeDataNode;
            return blended.loader.adjustProduct(ctx);
        }];
    vyzva.loadIntranetInfo = function () { return ['$stateParams', function (ctx) {
            blended.finishContext(ctx);
            var def = ctx.$q.defer();
            proxies.vyzva57services.loadCompanyData(ctx.companyid, function (res) {
                if (!res) {
                    def.resolve(null);
                    return;
                }
                var compInfo = vyzva.intranet.enteredProductInfo((JSON.parse(res)), ctx.lickeys, LMStatus.Cookie);
                if (compInfo && compInfo.jsonToSave) {
                    proxies.vyzva57services.writeCompanyData(ctx.companyid, compInfo.jsonToSave, function () { return def.resolve(compInfo); });
                }
                else
                    def.resolve(compInfo);
            });
            return def.promise;
        }]; };
    vyzva.stateNames = {}; //taskRoot: 'root', taskCheckTest: 'checktest', taskLesson: 'lesson', taskPretest: 'pretest', taskPretestItem: 'pretestitem' };
    vyzva.initVyzvaApp = ['$rootScope', '$location', '$state', function ($rootScope, $location, $state) {
            //$rootScope.$on('$locationChangeStart', (event: angular.IAngularEvent, newUrl: string, oldUrl: string, newState, oldState) => {
            //})
            //sance zrusit ladovani stranky
            //$rootScope.$on('$stateChangeStart', (e, toState, toParams, fromState, fromParams) => {
            $rootScope.$on('$stateChangeSuccess', function (e, toState, toParams, fromState, fromParams) {
                $rootScope.$broadcast('onStateChangeSuccess'); //sance pred ulozenim produktu naplnit data. Vyuzije pro volani exerciseService.onDestroy
                var prod = blended.loader.productCache.fromCache(fromParams).prod;
                if (prod)
                    prod.saveProduct(fromParams, $.noop);
            });
        }];
    var state = (function (_super) {
        __extends(state, _super);
        function state(st) {
            _super.call(this, st);
        }
        return state;
    })(blended.state);
    vyzva.state = state;
    blended.rootModule
        .filter('vyzva$state$viewpath', function () { return function (id) { return vyzva.vyzvaRoot + 'views/' + id + '.html'; }; });
    var pageTemplate = vyzva.vyzvaRoot + 'views/_pageTemplate.html';
    function initVyzvaStates(params) {
        params.$stateProvider.state({
            name: 'vyzvademo',
            url: "/vyzvademo?companytitle&key&hideorder",
            controller: vyzva.runController,
            templateUrl: blended.baseUrlRelToRoot + '/blendedapi/vyzva/views/vyzvademo.html',
            resolve: {
                $checkOldApplicationStart: blended.checkOldApplicationStart,
                $keysFromCompanyTitle: vyzva.keysFromCompanyTitle
            }
        });
        params.$stateProvider.state({
            name: 'vyzvaprovoz',
            url: "/vyzvaprovoz?companytitle",
            controller: vyzva.vyzvaProvozController,
            templateUrl: blended.baseUrlRelToRoot + '/blendedapi/vyzva/views/vyzvaprovoz.html',
            resolve: {
                $vyzvaProvoz: vyzva.vyzvaProvoz
            }
        });
        vyzva.stateNames.root = new state({
            name: 'pg.ajs',
            url: '/ajs',
            abstract: true,
            controller: function () { Pager.clearHtml(); },
            template: "<div data-ui-view></div>",
            onEnter: function () { return anim.inAngularjsGui = true; },
            onExit: function () { return anim.inAngularjsGui = false; },
            childs: [
                blended.prodStates.homeTask = vyzva.stateNames.homeTask = new state({
                    name: 'vyzva',
                    //lickeys ve formatu <UserLicences.LicenceId>|<UserLicences.Counter>#<UserLicences.LicenceId>|<UserLicences.Counter>...
                    url: "/vyzva/:companyid/:loginid/:persistence/:loc/:lickeys?returnurl&homelinktype&vyzvademocompanytitle",
                    abstract: true,
                    template: "<div data-ui-view></div>",
                    resolve: {
                        $intranetInfo: vyzva.loadIntranetInfo(),
                    },
                    childs: [
                        vyzva.stateNames.langmasterManager = new state({
                            name: 'langmastermanager',
                            url: "/langmastermanager",
                            templateUrl: pageTemplate,
                            layoutContentId: 'managerLangmaster',
                            layoutSpecial: true,
                            controller: vyzva.managerLangmaster,
                        }),
                        vyzva.stateNames.shoolManager = new state({
                            name: 'schoolmanager',
                            url: "/schoolmanager",
                            templateUrl: pageTemplate,
                            layoutContentId: 'managerschool',
                            controller: vyzva.managerSchool,
                        }),
                        vyzva.stateNames.faq = new state({
                            name: 'faq',
                            url: "/faq",
                            layoutSpecial: true,
                            templateUrl: pageTemplate,
                            layoutContentId: 'faq',
                            controller: vyzva.faqController,
                        }),
                        new state({
                            name: 'prod',
                            url: "/prod/:producturl/:taskid/:onbehalfof",
                            template: "<div data-ui-view></div>",
                            controller: vyzva.homeTaskController,
                            controllerAs: blended.taskContextAs.product,
                            abstract: true,
                            resolve: {
                                $loadedProduct: vyzva.loadProduct,
                                $intranetInfo: vyzva.loadIntranetInfo(),
                            },
                            childs: [
                                vyzva.stateNames.testhw = new state({
                                    name: 'testhw',
                                    url: "/testhw/:url",
                                    templateUrl: pageTemplate,
                                    layoutContentId: 'testHw',
                                    layoutSpecial: true,
                                    controller: vyzva.testHwController,
                                    resolve: {
                                        $loadedEx: blended.loadEx,
                                    }
                                }),
                                blended.prodStates.home = vyzva.stateNames.home = new state({
                                    name: 'home',
                                    url: "/home",
                                    templateUrl: pageTemplate,
                                    layoutContentId: 'home',
                                    controller: vyzva.homeViewController,
                                }),
                                vyzva.stateNames.lector = new state({
                                    name: 'lector',
                                    url: "/lector/:groupid",
                                    controller: vyzva.lectorController,
                                    controllerAs: blended.taskContextAs.lector,
                                    abstract: true,
                                    template: "<div data-ui-view></div>",
                                    childs: [
                                        vyzva.stateNames.lectorHome = new state({
                                            name: 'home',
                                            url: "/home",
                                            controller: vyzva.lectorViewController,
                                            layoutContentId: 'lector',
                                            templateUrl: pageTemplate,
                                        }),
                                    ]
                                }),
                                vyzva.stateNames.pretestTask = new state({
                                    name: 'pretest',
                                    url: '/pretest/:pretesturl',
                                    controller: blended.pretestTaskController,
                                    controllerAs: blended.taskContextAs.pretest,
                                    dataNodeUrlParName: 'pretestUrl',
                                    //isGreenArrowRoot:true,
                                    abstract: true,
                                    template: "<div data-ui-view></div>",
                                    childs: [
                                        vyzva.stateNames.pretest = new state({
                                            name: 'home',
                                            url: "/home",
                                            layoutContentId: 'pretest',
                                            controller: vyzva.pretestViewController,
                                            templateUrl: pageTemplate,
                                        }),
                                        blended.prodStates.pretestModule = new state({
                                            name: 'test',
                                            url: '/test/:moduleurl',
                                            controller: vyzva.moduleTaskController,
                                            controllerAs: blended.taskContextAs.module,
                                            dataNodeUrlParName: 'moduleUrl',
                                            abstract: true,
                                            moduleType: blended.moduleServiceType.pretest,
                                            template: "<div data-ui-view></div>",
                                            childs: [
                                                blended.prodStates.pretestExercise = vyzva.stateNames.pretestExercise = new state({
                                                    name: 'ex',
                                                    url: '/ex/:url',
                                                    controller: vyzva.pretestExercise,
                                                    controllerAs: blended.taskContextAs.ex,
                                                    dataNodeUrlParName: 'Url',
                                                    layoutSpecial: true,
                                                    layoutContentId: 'exercise',
                                                    //layoutToolbarType: 'toolbar/run',
                                                    ignorePageTitle: true,
                                                    //exerciseIsTest: true,
                                                    //exerciseOmitModuleMap: true,
                                                    resolve: {
                                                        $loadedEx: blended.loadEx,
                                                        $loadedLongData: blended.loadLongData,
                                                    },
                                                    templateUrl: pageTemplate,
                                                })
                                            ]
                                        }),
                                    ]
                                }),
                                vyzva.stateNames.pretestPreview = new state({
                                    name: 'testview',
                                    url: '/testview/:moduleurl',
                                    controller: vyzva.moduleTaskController,
                                    controllerAs: blended.taskContextAs.module,
                                    dataNodeUrlParName: 'moduleUrl',
                                    moduleType: blended.moduleServiceType.pretest,
                                    //isGreenArrowRoot: true,
                                    abstract: true,
                                    template: "<div data-ui-view></div>",
                                    childs: [
                                        new state({
                                            name: 'ex',
                                            url: '/:url',
                                            controller: vyzva.lessonTest,
                                            controllerAs: blended.taskContextAs.ex,
                                            //exerciseIsTest: true,
                                            dataNodeUrlParName: 'Url',
                                            layoutSpecial: true,
                                            layoutContentId: 'exercise',
                                            resolve: {
                                                $loadedEx: blended.loadEx,
                                                $loadedLongData: blended.loadLongData,
                                            },
                                            templateUrl: pageTemplate,
                                        })
                                    ]
                                }),
                                vyzva.stateNames.moduleLessonTask = new state({
                                    name: 'lesson',
                                    url: '/lesson/:moduleurl',
                                    controller: vyzva.moduleTaskController,
                                    controllerAs: blended.taskContextAs.module,
                                    dataNodeUrlParName: 'moduleUrl',
                                    //isGreenArrowRoot: true,
                                    moduleType: blended.moduleServiceType.lesson,
                                    abstract: true,
                                    template: "<div data-ui-view></div>",
                                    childs: [
                                        new state({
                                            name: 'ex',
                                            url: '/:url',
                                            controller: vyzva.lessonExercise,
                                            controllerAs: blended.taskContextAs.ex,
                                            dataNodeUrlParName: 'Url',
                                            layoutSpecial: true,
                                            layoutContentId: 'exercise',
                                            //layoutToolbarType: 'toolbar/run',
                                            resolve: {
                                                $loadedEx: blended.loadEx,
                                                $loadedLongData: blended.loadLongData,
                                            },
                                            templateUrl: pageTemplate,
                                        }),
                                    ]
                                }),
                                vyzva.stateNames.moduleTestTask = new state({
                                    name: 'test',
                                    url: '/test/:moduleurl',
                                    controller: vyzva.moduleTaskController,
                                    controllerAs: blended.taskContextAs.module,
                                    dataNodeUrlParName: 'moduleUrl',
                                    //isGreenArrowRoot: true,
                                    abstract: true,
                                    template: "<div data-ui-view></div>",
                                    moduleType: blended.moduleServiceType.test,
                                    childs: [
                                        new state({
                                            name: 'ex',
                                            url: '/:url',
                                            controller: vyzva.lessonTest,
                                            controllerAs: blended.taskContextAs.ex,
                                            //exerciseIsTest: true,
                                            dataNodeUrlParName: 'Url',
                                            layoutSpecial: true,
                                            layoutContentId: 'exercise',
                                            //layoutToolbarType: 'toolbar/run',
                                            resolve: {
                                                $loadedEx: blended.loadEx,
                                                $loadedLongData: blended.loadLongData,
                                            },
                                            templateUrl: pageTemplate,
                                        })
                                    ]
                                })
                            ]
                        }),
                    ]
                })
            ]
        });
        vyzva.stateNames.root.initFromStateTree(params.$stateProvider);
    }
    vyzva.initVyzvaStates = initVyzvaStates;
})(vyzva || (vyzva = {}));
var vyzva;
(function (vyzva) {
    var intranet;
    (function (intranet) {
        //***************** odvozene informace, vhodne pro zobrazeni
        var alocatedKeyRoot = (function () {
            function alocatedKeyRoot(alocatedKeyInfos, //dato, odvozene z companyData
                companyData, userDir, jsonToSave) {
                this.alocatedKeyInfos = alocatedKeyInfos;
                this.companyData = companyData;
                this.userDir = userDir;
                this.jsonToSave = jsonToSave;
            } //null => nezmeneno
            alocatedKeyRoot.prototype.userInfo = function (lmcomId) {
                return this.userDir[lmcomId.toString()];
            };
            //LANGMaster only
            alocatedKeyRoot.prototype.deleteStudentKey = function (groupId, keyStr) {
                var grp = _.find(this.companyData.studyGroups, function (g) { return g.groupId == groupId; });
                for (var i = 0; i < grp.studentKeys.length; i++) {
                    if (grp.studentKeys[i].keyStr != keyStr)
                        continue;
                    grp.studentKeys.splice(i, 1);
                    break;
                }
            };
            alocatedKeyRoot.prototype.addStudentKey = function (groupId, keyStr) {
                var grp = _.find(this.companyData.studyGroups, function (g) { return g.groupId == groupId; });
                grp.studentKeys.push({ keyStr: keyStr });
            };
            return alocatedKeyRoot;
        })();
        intranet.alocatedKeyRoot = alocatedKeyRoot;
        function lmAdminCreateLicenceKeys_request(groups) {
            var res = [];
            //school manager keys: 2 dalsi klice pro spravce (mimo prvniho spravce = self)
            res.push({ line: LMComLib.LineIds.no, num: 2, keys: null });
            //students keys: pro kazdou line a group a pocet
            var lineGroups = _.groupBy(groups, function (g) { return g.line; });
            _.each(lineGroups, function (lineGroup, line) {
                var lg = { line: parseInt(line), num: 3 /*3 klice pro Spravce-visitora*/ + Utils.sum(lineGroup, function (grp) { return parseInt(grp.num) + 6; } /*3 pro lector-visitora, 3 pro lektora*/ /*3 pro lector-visitora, 3 pro lektora*/), keys: null };
                res.push(lg);
            });
            return res;
        }
        intranet.lmAdminCreateLicenceKeys_request = lmAdminCreateLicenceKeys_request;
        function lmAdminCreateLicenceKeys_reponse(groups, respKeys) {
            var useKey = function (line, num) {
                //odeber NUM klicu pro line
                var key = _.find(respKeys, function (k) { return k.line == line; });
                var keyStrs = key.keys.slice(0, num);
                if (keyStrs.length != num)
                    throw 'keyStrs.length != num';
                key.keys.splice(0, num);
                //zkonvertuj lienceId|counter na encoded licence key
                return _.map(keyStrs, function (keyStr) {
                    var parts = keyStr.split('|');
                    return { keyStr: keys.toString({ licId: parseInt(parts[0]), counter: parseInt(parts[1]) }) };
                });
            };
            _.each(groups, function (grp) {
                grp.studentKeys = useKey(grp.line, parseInt(grp.num));
                grp.visitorsKeys = useKey(grp.line, 3);
                grp.lectorKeys = useKey(grp.line, 3);
            });
            var managerKeys = useKey(LMComLib.LineIds.no, 2);
            //Visitors pro Spravce:
            var lineGroups = _.groupBy(groups, function (g) { return g.line; });
            var visitorsKeys = [];
            _.each(lineGroups, function (lineGroup, line) {
                visitorsKeys.push({ line: parseInt(line), visitorsKeys: useKey(parseInt(line), 3) });
            });
            return { studyGroups: groups, managerKeys: managerKeys, visitorsKeys: visitorsKeys };
        }
        intranet.lmAdminCreateLicenceKeys_reponse = lmAdminCreateLicenceKeys_reponse;
        //******************* zakladni info PO SPUSTENI PRODUKTU
        //informace o licencich a klicich k spustenemu produktu
        function enteredProductInfo(companyData, licenceKeysStr /*platne licencni klice k produktu*/, cookie) {
            if (!companyData)
                return null;
            //if (_.isEmpty(json)) return null;
            var licenceKeys = licenceKeysStr ? licenceKeysStr.split('#') : [];
            //var companyData = <ICompanyData>(JSON.parse(json));
            var oldJson = JSON.stringify(companyData);
            //linearizace klicu
            var alocList = [];
            alocList.pushArray(_.map(companyData.managerKeys, function (alocKey) { return { key: alocKey, group: null, isLector: false, isVisitor: false, isStudent: false }; }));
            _.each(companyData.studyGroups, function (grp) {
                alocList.pushArray(_.map(grp.lectorKeys, function (alocKey) { return { key: alocKey, group: grp, isLector: true, isVisitor: false, isStudent: false }; }));
                alocList.pushArray(_.map(grp.studentKeys, function (alocKey) { return { key: alocKey, group: grp, isLector: false, isVisitor: false, isStudent: true }; }));
                alocList.pushArray(_.map(grp.visitorsKeys, function (alocKey) { return { key: alocKey, group: grp, isLector: false, isVisitor: true, isStudent: false }; }));
            });
            _.each(companyData.visitorsKeys, function (keys) {
                alocList.pushArray(_.map(keys.visitorsKeys, function (alocKey) { return { key: alocKey, group: null, isLector: false, isVisitor: true, isStudent: false }; }));
            });
            ////student nebo visitor lmcomid => seznam lines. Pomaha zajistit jednoznacn
            //var lmcomIdToLineDir: { [lmcomid: number]: Array<LMComLib.LineIds>; } = {};
            //_.each(_.filter(alocList, l => l.isStudent || l.isVisitor), l => {
            //  var lines = lmcomIdToLineDir[l.key.lmcomId];
            //  if (!lines) lmcomIdToLineDir[l.key.lmcomId] = lines = [];
            //  lines.push(l.group.line);
            //});
            //doplneni udaju do alokovaneho klice uzivatele. Alokovany klice se paruje s licencnim klicem
            var alocatedKeyInfos = [];
            _.each(licenceKeys, function (licenceKey) {
                var alocatedKeyInfo = _.find(alocList, function (k) { return k.key.keyStr == licenceKey; });
                if (!alocatedKeyInfo)
                    return;
                alocatedKeyInfo.key.email = cookie.EMail || cookie.Login;
                alocatedKeyInfo.key.firstName = cookie.FirstName;
                alocatedKeyInfo.key.lastName = cookie.LastName;
                alocatedKeyInfo.key.lmcomId = cookie.id;
                alocatedKeyInfos.push(alocatedKeyInfo);
            });
            //adresar lmcomid => user udaje
            var userDir = {};
            _.each(alocList, function (al) {
                if (!al.key || !al.key.lmcomId)
                    return;
                userDir[al.key.lmcomId.toString()] = al.key;
            });
            var newJson = JSON.stringify(companyData);
            return new alocatedKeyRoot(alocatedKeyInfos, companyData, userDir, oldJson == newJson ? null : newJson);
        }
        intranet.enteredProductInfo = enteredProductInfo;
    })(intranet = vyzva.intranet || (vyzva.intranet = {}));
})(vyzva || (vyzva = {}));
var vyzva;
(function (vyzva) {
    function finishHomeDataNode(prod) {
        if (prod.pretest)
            return;
        var urlRoot = '/lm/blcourse/' + LMComLib.LineIds[prod.line].toLowerCase() + '/';
        var levels = _.map(['a1', 'a2', 'b1', 'b2'], function (lev) { return prod.find(urlRoot + lev + '/'); });
        var clonedLessons = _.map(levels, function (lev) { return (_.clone(lev.Items)); }); //pro kazdou level kopie napr. </lm/blcourse/english/a1/>.Items
        var firstEntryTests = _.map(clonedLessons, function (l) { return l.splice(0, 1)[0]; }); //z kopie vyndej prvni prvek (entry test) a dej jej do firstPretests;
        prod.pretest = (prod.find(urlRoot + 'pretests/'));
        prod.entryTests = firstEntryTests;
        prod.lessons = clonedLessons;
    }
    vyzva.finishHomeDataNode = finishHomeDataNode;
    function breadcrumbBase(ctrl, homeOnly) {
        var res = [];
        if (ctrl.ctx.homelinktype == 'vyzvademo')
            res.push({ title: 'Vyzkoušení', url: '#/vyzvademo?companytitle=' + encodeURIComponent(ctrl.ctx.vyzvademocompanytitle) });
        else
            res.push({ title: 'Moje Online jazykové kurzy a testy', url: '#' + Pager.getHomeUrl() });
        if (!homeOnly)
            res.push({ title: ctrl.productParent.dataNode.title, url: ctrl.href(ctrl.getProductHomeUrl() /*{ stateName: stateNames.home.name, pars: ctrl.ctx }*/), active: false });
        return res;
    }
    vyzva.breadcrumbBase = breadcrumbBase;
    //services, spolecne pro Vyzva aplikaci. Jsou dostupne v scope.appService
    var appService = (function () {
        function appService(controller) {
            this.controller = controller;
            this.home = (controller.productParent);
        }
        appService.prototype.schoolUserInfo = function (lmcomId) {
            return this.home.intranetInfo.userInfo(lmcomId || this.controller.ctx.userDataId());
        };
        appService.prototype.isLangmasterUser = function () {
            var hash = LowUtils.parseQuery(location.search);
            return hash && hash['lmadmin'] == 'true';
            //return _.indexOf(['pzika@langmaster.cz', 'rjeliga@langmaster.cz', 'zzikova@langmaster.cz', 'pjanecek@langmaster.cz'], LMStatus.Cookie.EMail) >= 0;
        };
        return appService;
    })();
    vyzva.appService = appService;
    //********** REPORTS
    //musi souhlasit s D:\LMCom\REW\Web4\BlendedAPI\vyzva\Server\ExcelReport.cs
    (function (reportType) {
        reportType[reportType["managerKeys"] = 0] = "managerKeys";
        reportType[reportType["lectorKeys"] = 1] = "lectorKeys";
        reportType[reportType["managerStudy"] = 2] = "managerStudy";
        reportType[reportType["lectorStudy"] = 3] = "lectorStudy";
        reportType[reportType["finalReport"] = 4] = "finalReport";
    })(vyzva.reportType || (vyzva.reportType = {}));
    var reportType = vyzva.reportType;
    function downloadExcelReport(par) {
        var url = Pager.basicUrl + 'vyzva57services/reports' + "?" + $.param({ reportpar: JSON.stringify(par) });
        blended.downloadExcelFile(url.toLowerCase());
    }
    vyzva.downloadExcelReport = downloadExcelReport;
    //********** FOOTER COPYRIGHT
    var vyzva$common$whenproblem = (function () {
        function vyzva$common$whenproblem($modal) {
            this.templateUrl = 'vyzva$common$whenproblem.html';
            this.link = function (scope, el, attrs) {
                scope.copyrNavigateFaq = function () { return scope.ts.navigate({ stateName: vyzva.stateNames.faq.name, pars: { returnurl: location.hash } }); };
                var modalInstance;
                scope.copyrShowWriteUs = function () {
                    modalInstance = $modal.open({
                        templateUrl: 'vyzva$common$writeus.html',
                        scope: scope
                    });
                };
                scope.copyrShowWriteUsOK = function () {
                    //odvod user info
                    var homeCtrl = (scope.ts.productParent);
                    var info = homeCtrl && homeCtrl.intranetInfo ? homeCtrl.intranetInfo : scope.ts['intranetInfo']; //intranetInfo drzi budto taskControl.productParent nebo managerSchool
                    var userInfo = info ? info.userInfo(scope.ts.ctx.loginid) : null; //dej info o zalogovanem uzivateli
                    var req = {
                        stateName: scope.ts.state.name, stateParsJson: JSON.stringify(scope.ts.$state.params), text: scope.copyrWriteUsText,
                        userJson: JSON.stringify(userInfo), userEmail: userInfo.email, userFirstName: userInfo.firstName, userLastName: userInfo.lastName
                    };
                    proxies.vyzva57services.writeUs(JSON.stringify(req), $.noop);
                    modalInstance.close();
                };
            };
        }
        return vyzva$common$whenproblem;
    })();
    vyzva.vyzva$common$whenproblem = vyzva$common$whenproblem;
    blended.rootModule
        .directive('vyzva$common$whenproblem', ['$modal', function ($modal) { return new vyzva$common$whenproblem($modal); }]);
    //********** BACK TOP BAR
    var vyzva$common$backheader = (function () {
        function vyzva$common$backheader() {
            this.restrict = 'EA';
            this.link = function (scope, el, attrs) { return scope.title = attrs['title']; };
            this.templateUrl = 'vyzva$common$backheader.html';
        }
        return vyzva$common$backheader;
    })();
    vyzva.vyzva$common$backheader = vyzva$common$backheader;
    blended.rootModule
        .directive('vyzva$common$backheader', function () { return new vyzva$common$backheader(); });
})(vyzva || (vyzva = {}));
var vyzva;
(function (vyzva) {
    var moduleTaskController = (function (_super) {
        __extends(moduleTaskController, _super);
        function moduleTaskController() {
            _super.apply(this, arguments);
        }
        return moduleTaskController;
    })(blended.moduleTaskController);
    vyzva.moduleTaskController = moduleTaskController;
    var exerciseViewLow = (function (_super) {
        __extends(exerciseViewLow, _super);
        function exerciseViewLow($scope, $state, $loadedEx, $loadedLongData, $modal) {
            _super.call(this, $scope, $state, $loadedEx, $loadedLongData);
            this.$modal = $modal;
        }
        exerciseViewLow.prototype.tbClick = function () { this.greenClick(); };
        exerciseViewLow.prototype.tbNavigateProductHome = function () { this.navigateProductHome(); }; //this.navigate({ stateName: stateNames.home.name, pars: this.ctx }) }
        exerciseViewLow.prototype.confirmWrongScoreDialog = function () {
            return this.$modal.open({
                templateUrl: 'vyzva$exercise$wrongscore.html',
            }).result;
        };
        exerciseViewLow.prototype.congratulationDialog = function () {
            return this.$modal.open({
                templateUrl: 'vyzva$exercise$congratulation.html',
                scope: this.$scope,
            }).result;
        };
        exerciseViewLow.$inject = ['$scope', '$state', '$loadedEx', '$loadedLongData', '$modal'];
        return exerciseViewLow;
    })(blended.exerciseTaskViewController);
    vyzva.exerciseViewLow = exerciseViewLow;
    var pretestExercise = (function (_super) {
        __extends(pretestExercise, _super);
        function pretestExercise($scope, $state, $loadedEx, $loadedLongData, $modal) {
            _super.call(this, $scope, $state, $loadedEx, $loadedLongData, $modal);
            if (this.isFakeCreate)
                return;
            this.breadcrumb = vyzva.breadcrumbBase(this);
            this.breadcrumb.push({ title: 'Rozřazovací test', url: null, active: true });
            this.tbTitle = 'Pokračovat v Rozřazovacím testu';
            this.tbDoneTitle = 'Rozřazovací test dokončen';
            this.tbCongratulation = 'Gratulujeme k dokončení Rozřazovacího testu!';
        }
        return pretestExercise;
    })(exerciseViewLow);
    vyzva.pretestExercise = pretestExercise;
    var lessonExercise = (function (_super) {
        __extends(lessonExercise, _super);
        function lessonExercise($scope, $state, $loadedEx, $loadedLongData, $modal) {
            _super.call(this, $scope, $state, $loadedEx, $loadedLongData, $modal);
            if (this.isFakeCreate)
                return;
            this.breadcrumb = vyzva.breadcrumbBase(this);
            this.breadcrumb.push({ title: this.title, url: null, active: true });
            this.tbTitle = 'Pokračovat v lekci';
            this.tbDoneTitle = 'Lekce dokončena';
            this.tbCongratulation = 'Gratulujeme k dokončení lekce!';
        }
        return lessonExercise;
    })(exerciseViewLow);
    vyzva.lessonExercise = lessonExercise;
    var lessonTest = (function (_super) {
        __extends(lessonTest, _super);
        function lessonTest($scope, $state, $loadedEx, $loadedLongData, $modal) {
            _super.call(this, $scope, $state, $loadedEx, $loadedLongData, $modal);
            if (this.isFakeCreate)
                return;
            this.breadcrumb = vyzva.breadcrumbBase(this);
            this.breadcrumb.push({ title: this.title, url: null, active: true });
            this.tbTitle = 'Pokračovat v testu';
            this.tbDoneTitle = 'Test dokončen';
        }
        lessonTest.prototype.congratulationDialog = function () {
            var ok = this.modService.agregUser.ms ? Math.round(this.modService.agregUser.s / this.modService.agregUser.ms * 100) > 65 : false;
            if (ok) {
                this.tbCongratulation = 'Gratulujeme k dokončení testu! Pokud test obsahuje mluvený projev, byl zaslán vašemu Učiteli k vyhodnocení.';
            }
            else {
                this.tbCongratulationTitle = 'Test nesplněn';
                this.tbCongratulation = 'Skóre, dosažené v testu, je menší než 65%. O dalším pokračování v kurzu musí rozhodnout váš učitel';
            }
            return _super.prototype.congratulationDialog.call(this);
        };
        return lessonTest;
    })(exerciseViewLow);
    vyzva.lessonTest = lessonTest;
})(vyzva || (vyzva = {}));
var vyzva;
(function (vyzva) {
    var faqController = (function (_super) {
        __extends(faqController, _super);
        function faqController($scope, $state) {
            _super.call(this, $scope, $state);
        }
        return faqController;
    })(blended.controller);
    vyzva.faqController = faqController;
    blended.rootModule
        .directive('vyzva$faq$item', function () { return new vyzva$faq$item(); })
        .directive('vyzva$faq$toc', function () { return new vyzva$faq$toc(); });
    var vyzva$faq$item = (function () {
        function vyzva$faq$item() {
            this.scope = { title: '@title', type: '@type' };
            this.restrict = 'EA';
            this.transclude = true;
            this.templateUrl = 'vyzva$faq$item.html';
            this.link = function (scope) {
                var id = 'tocitem-' + (vyzva$faq$item.count++).toString();
                scope.datatoc = { id: id, title: scope.title, type: scope.type };
                scope.id = id;
            };
        }
        vyzva$faq$item.count = 0;
        return vyzva$faq$item;
    })();
    vyzva.vyzva$faq$item = vyzva$faq$item;
    var vyzva$faq$toc = (function () {
        function vyzva$faq$toc() {
            this.link = function (scope, el) {
                setTimeout(function () {
                    var items = [];
                    $('[data-toc]').each(function (idx, el) { return items.push($(el).data('toc')); });
                    scope.groups = _.groupBy(items, function (it) { return it.type; });
                    scope.$apply();
                });
            };
            this.restrict = 'EA';
            this.templateUrl = 'vyzva$faq$toc.html';
        }
        return vyzva$faq$toc;
    })();
    vyzva.vyzva$faq$toc = vyzva$faq$toc;
})(vyzva || (vyzva = {}));
var vyzva;
(function (vyzva) {
    (function (homeLessonStates) {
        homeLessonStates[homeLessonStates["no"] = 0] = "no";
        homeLessonStates[homeLessonStates["entered"] = 1] = "entered";
        homeLessonStates[homeLessonStates["done"] = 2] = "done";
    })(vyzva.homeLessonStates || (vyzva.homeLessonStates = {}));
    var homeLessonStates = vyzva.homeLessonStates;
    (function (rightButtonTypes) {
        rightButtonTypes[rightButtonTypes["no"] = 0] = "no";
        rightButtonTypes[rightButtonTypes["run"] = 1] = "run";
        rightButtonTypes[rightButtonTypes["preview"] = 2] = "preview";
    })(vyzva.rightButtonTypes || (vyzva.rightButtonTypes = {}));
    var rightButtonTypes = vyzva.rightButtonTypes;
    (function (leftMarkTypes) {
        leftMarkTypes[leftMarkTypes["no"] = 0] = "no";
        leftMarkTypes[leftMarkTypes["active"] = 1] = "active";
        leftMarkTypes[leftMarkTypes["pretestLevel"] = 2] = "pretestLevel";
        leftMarkTypes[leftMarkTypes["progress"] = 3] = "progress";
        leftMarkTypes[leftMarkTypes["waitForEvaluation"] = 4] = "waitForEvaluation";
    })(vyzva.leftMarkTypes || (vyzva.leftMarkTypes = {}));
    var leftMarkTypes = vyzva.leftMarkTypes;
    //****************** VIEW
    var homeLesson = (function (_super) {
        __extends(homeLesson, _super);
        function homeLesson() {
            _super.apply(this, arguments);
        }
        return homeLesson;
    })(blended.moduleServiceLow);
    vyzva.homeLesson = homeLesson;
    var homeViewController = (function (_super) {
        __extends(homeViewController, _super);
        function homeViewController($scope, $state) {
            var _this = this;
            _super.call(this, $scope, $state);
            this.breadcrumb = vyzva.breadcrumbBase(this);
            this.breadcrumb[1].active = true;
            var pretestItem;
            var pretestUser;
            var firstNotDoneCheckTestIdx; //index prvnio nehotoveho kontrolniho testu
            var mustWaitForEvaluation = false;
            var fromNode = function (node, idx) {
                var res = new homeLesson(node, idx == 0 ? blended.moduleServiceType.pretest : (node.url.indexOf('/test') > 0 ? blended.moduleServiceType.test : blended.moduleServiceType.lesson), _this, true);
                res.idx = idx;
                var nodeUser = blended.getPersistData(node, _this.ctx.taskid);
                if (idx == 0) {
                    res.agregUser = blended.pretestScore((node), nodeUser, _this.ctx.taskid);
                    pretestUser = res.agregUser = $.extend(res.agregUser, nodeUser);
                    if (_.isNumber(pretestUser.targetLevel) && pretestUser.targetLevel >= 0)
                        pretestUser.flag = CourseModel.CourseDataFlag.done;
                }
                else {
                    res.agregUser = blended.agregateShortFromNodes(res.node, _this.ctx.taskid, false); //vysledek modulu ze cviceni
                    res.agregUser = $.extend(res.agregUser, nodeUser);
                }
                res.status = !res.agregUser ? homeLessonStates.no : (blended.persistUserIsDone(res.agregUser) ? homeLessonStates.done : homeLessonStates.entered);
                //rightButtonType management: vsechny nehotove testy a lekce dej RUN 
                if (res.lessonType != blended.moduleServiceType.pretest)
                    res.rightButtonType = res.status == homeLessonStates.done ? rightButtonTypes.preview : rightButtonTypes.run;
                //Pro tests:
                //ikona "ceka se na vyhodnoceni": done && pcCannotEvaluate && !nodeUser.lectorControlTestOK
                //nejde pokracovat dal: existuje test s: done && !nodeUser.lectorControlTestOK && score< 65
                //firstNotDoneCheckTestIdx: prvni test s !done nebo 'nejde pokracovat dal' test
                if (res.lessonType == blended.moduleServiceType.test) {
                    if (res.status == homeLessonStates.done) {
                        var pcCannotEvaluate = nodeUser && !!(nodeUser.flag & CourseModel.CourseDataFlag.pcCannotEvaluate);
                        var lectorControlTestOK = nodeUser && nodeUser.lectorControlTestOK;
                        var denyNextLessons = !lectorControlTestOK && res.agregUser.score < 65; //nejde pokracovat, skore je mensi nez 65 a lektor jeste nerozohodl
                        res.leftMarkType = denyNextLessons || (pcCannotEvaluate && !lectorControlTestOK) ? leftMarkTypes.waitForEvaluation : leftMarkTypes.progress;
                        if (denyNextLessons) {
                            mustWaitForEvaluation = true;
                            if (!firstNotDoneCheckTestIdx)
                                firstNotDoneCheckTestIdx = idx;
                        }
                    }
                    else {
                        if (!firstNotDoneCheckTestIdx)
                            firstNotDoneCheckTestIdx = idx; //add: prvni test s !done nebo 'nejde pokracovat dal' test
                    }
                }
                else if (res.status == homeLessonStates.done) {
                    if (res.lessonType == blended.moduleServiceType.pretest)
                        res.leftMarkType = leftMarkTypes.pretestLevel;
                    else
                        res.leftMarkType = leftMarkTypes.progress;
                }
                //if (!firstNotDoneCheckTestIdx && res.lessonType == blended.moduleServiceType.test) {
                //  lcOK = undefined;
                //  if (nodeUser) {
                //    if (!(nodeUser.flag & CourseModel.CourseDataFlag.pcCannotEvaluate)) lcOK = true;
                //    else lcOK = (<blended.IModuleUser>nodeUser).lectorControlTestOK;
                //  }
                //  if (lcOK == undefined && res.status == homeLessonStates.done) {
                //    if (false && res.agregUser.score < 65) firstNotDoneCheckTestIdx = idx;
                //  } else {
                //    res.agregUser.lectorControlTestOK = nodeUser && (<blended.IModuleUser>nodeUser).lectorControlTestOK;
                //    if (!res.agregUser.lectorControlTestOK) firstNotDoneCheckTestIdx = idx;
                //  }
                //  res.agregUser.lectorControlTestOK = lcOK;
                //}
                //left mark
                //if (res.status == homeLessonStates.done) {
                //  switch (res.lessonType) {
                //    case blended.moduleServiceType.pretest: res.leftMarkType = leftMarkTypes.pretestLevel; break;
                //    case blended.moduleServiceType.test:
                //      if (lcOK === false) mustWaitForEvaluation = true; //hotovy test se spatnym score => nejde pokracovat dal
                //      res.leftMarkType = !res.agregUser.lectorControlTestOK ? leftMarkTypes.waitForEvaluation : leftMarkTypes.progress; break;
                //    default: res.leftMarkType = leftMarkTypes.progress;
                //  }
                //} else {
                //  switch (res.lessonType) {
                //    case blended.moduleServiceType.test: if (!firstNotDoneCheckTestIdx) firstNotDoneCheckTestIdx = idx;
                //  }
                //}
                return res;
            };
            this.lessons = [pretestItem = fromNode(this.myTask.dataNode.pretest, 0)];
            if (pretestUser && blended.persistUserIsDone(pretestUser)) {
                this.pretestLevels = pretestUser.history;
                this.pretestLevel = pretestUser.targetLevel;
                this.lessons.push(fromNode(this.myTask.dataNode.entryTests[this.pretestLevel], 1));
                this.lessons.pushArray(_.map(this.myTask.dataNode.lessons[this.pretestLevel], function (nd, idx) { return fromNode(nd, idx + 2); }));
            }
            //rightButtonType management: vsechna cviceni za firstNotDoneCheckTestIdx dej rightButtonTypes=no
            for (var i = firstNotDoneCheckTestIdx + 1; i < this.lessons.length; i++)
                this.lessons[i].rightButtonType = rightButtonTypes.no;
            //pokud se neceka na vyhodnoceni tak prvni nehotovy node je aktivni
            if (!mustWaitForEvaluation)
                _.find(this.lessons, function (pl) {
                    if (pl.status == homeLessonStates.done)
                        return false;
                    pl.active = true;
                    pl.leftMarkType = leftMarkTypes.active;
                    return true;
                });
            //skore za cely kurz
            var users = _.map(this.lessons, function (l) { return l.agregUser; });
            this.agregCourseUser = blended.agregateShorts(users);
            //this.score = blended.scorePercent(this.user);
        }
        homeViewController.prototype.navigateTestHw = function () {
            var _this = this;
            var pars = blended.cloneAndModifyContext(this.ctx, function (ctx) {
                ctx.url = blended.encodeUrl('/lm/blcourse/' + LMComLib.LineIds[_this.productParent.dataNode.line].toLowerCase() + '/hwtest/hwtest');
                ctx.returnurl = location.hash;
            });
            this.navigate({ stateName: vyzva.stateNames.testhw.name, pars: pars });
        };
        homeViewController.prototype.navigateLesson = function (lesson) {
            var _this = this;
            //if (lesson.cannotRun) return;
            var service = {
                params: lesson.lessonType == blended.moduleServiceType.pretest ?
                    blended.cloneAndModifyContext(this.ctx, function (d) { return d.pretesturl = blended.encodeUrl(_this.myTask.dataNode.pretest.url); }) :
                    blended.cloneAndModifyContext(this.ctx, function (d) { return d.moduleurl = blended.encodeUrl(lesson.node.url); }),
                current: lesson.lessonType == blended.moduleServiceType.pretest ?
                    vyzva.stateNames.pretestTask :
                    (lesson.lessonType == blended.moduleServiceType.test ? vyzva.stateNames.moduleTestTask : vyzva.stateNames.moduleLessonTask),
                parent: this.myTask,
            };
            var nextTask = lesson.lessonType == blended.moduleServiceType.pretest ?
                new blended.pretestTaskController(service) :
                new vyzva.moduleTaskController(service);
            var url = nextTask.goCurrent();
            this.navigate(url);
            //this.myTask.child = lesson.lessonType == blended.moduleServiceType.pretest ?
            //  new blended.pretestTaskController(service) :
            //  new moduleTaskController(service);
            //var url = this.myTask.child.goCurrent();
        };
        ;
        homeViewController.prototype.navigatePretestLevel = function (lev) {
            var _this = this;
            var service = {
                params: blended.cloneAndModifyContext(this.ctx, function (d) { var mod = _this.myTask.dataNode.pretest.Items[lev]; d.moduleurl = blended.encodeUrl(mod.url); }),
                current: vyzva.stateNames.pretestPreview,
                //current: blended.prodStates.pretestModule,
                parent: this.myTask,
            };
            var nextTask = new vyzva.moduleTaskController(service);
            var url = nextTask.goCurrent();
            this.navigate(url);
            //this.myTask.child = new moduleTaskController(service);
            //var url = this.myTask.child.goCurrent();
        };
        homeViewController.prototype.gotoLector = function (groupId) {
            this.navigate({ stateName: vyzva.stateNames.lectorHome.name, pars: { groupid: groupId } });
        };
        homeViewController.prototype.debugClearProduct = function () {
            proxies.vyzva57services.debugClearProduct(this.ctx.companyid, this.ctx.userDataId(), this.ctx.productUrl, function () { return location.reload(); });
        };
        return homeViewController;
    })(blended.taskViewController);
    vyzva.homeViewController = homeViewController;
    //****************** TASK
    var homeTaskController = (function (_super) {
        __extends(homeTaskController, _super);
        function homeTaskController($scope, $state, product, intranetInfo) {
            _super.call(this, $scope, $state, product);
            this.intranetInfo = intranetInfo;
            //  super(state, resolves);
            this.productParent = this;
            this.user = blended.getPersistWrapper(this.dataNode, this.ctx.taskid, function () { return { startDate: Utils.nowToNum(), flag: CourseModel.CourseDataFlag.blProductHome }; });
            //Intranet
            //this.intranetInfo = intranetInfo;
            if (!this.intranetInfo)
                return;
            var alocatedKeyInfos = this.intranetInfo.alocatedKeyInfos;
            this.lectorGroups = _.uniq(_.map(_.filter(alocatedKeyInfos, function (inf) { return inf.isLector; }), function (inf) { return inf.group; }), function (it) { return it.groupId; });
            var studentGroups = _.map(_.filter(alocatedKeyInfos, function (inf) { return inf.isStudent || inf.isVisitor; }), function (inf) { return inf.group; });
            //this.studentGroup = studentGroups.length > 0 ? studentGroups[0] : null;
            this.showLectorPart = !this.ctx.onbehalfof && this.lectorGroups.length > 0;
            //debugger;
            this.showStudentPart = studentGroups.length > 0 /*jsem primo student*/ || !!this.ctx.onbehalfof /**/;
        }
        homeTaskController.$inject = ['$scope', '$state', '$loadedProduct', '$intranetInfo'];
        return homeTaskController;
    })(blended.homeTaskController);
    vyzva.homeTaskController = homeTaskController;
    blended.rootModule
        .filter('vyzva$home$nodeclass', function () {
        return function (lesson) {
            if (lesson.active && lesson.lessonType != blended.moduleServiceType.pretest)
                return "list-group-item-success-primary";
            else if (lesson.status == homeLessonStates.done || (lesson.active && lesson.lessonType == blended.moduleServiceType.pretest))
                return "list-group-item-success";
        };
    })
        .directive('vyzva$common$summary', function () {
        return {
            scope: { user: '&user' },
            templateUrl: 'vyzva$common$summary.html'
        };
    });
})(vyzva || (vyzva = {}));
var vyzva;
(function (vyzva) {
    blended.rootModule
        .directive('vyzva$lector$tabs', function () { return new lectorTabs(); });
    var lectorTabs = (function () {
        function lectorTabs() {
            this.link = function (scope, el) {
                scope.tabs = getLectorTabs();
                scope.navigate = function (idx) {
                    var actIdx = (scope.actIdx());
                    if (idx == actIdx)
                        return;
                    var doNavigate = (scope.doNavigate());
                    var tab = getLectorTabs()[idx];
                    doNavigate(tab.stateName);
                };
            };
            this.templateUrl = 'vyzva$lector$tabs.html';
            this.scope = { doNavigate: '&doNavigate', actIdx: '&actIdx', longTitle: '&longTitle' };
        }
        return lectorTabs;
    })();
    vyzva.lectorTabs = lectorTabs;
    var tabs;
    function getLectorTabs() {
        return tabs || [
            { idx: 0, stateName: vyzva.stateNames.lectorHome.name, shortTitle: 'Seznam studentů' },
            { idx: 1, stateName: vyzva.stateNames.lectorEval.name, shortTitle: 'Vyhodnocení testů' }
        ];
    }
    vyzva.getLectorTabs = getLectorTabs;
})(vyzva || (vyzva = {}));
var vyzva;
(function (vyzva) {
    var lectorController = (function (_super) {
        __extends(lectorController, _super);
        function lectorController($scope, $state) {
            var _this = this;
            _super.call(this, $scope, $state);
            var lectorGroups = this.productParent.lectorGroups;
            this.groupId = parseInt(this.ctx.groupid);
            this.lectorGroup = _.find(lectorGroups, function (grp) { return grp.groupId == _this.groupId; });
        }
        return lectorController;
    })(blended.controller);
    vyzva.lectorController = lectorController;
    var lectorViewBase = (function (_super) {
        __extends(lectorViewBase, _super);
        function lectorViewBase($scope, $state) {
            _super.call(this, $scope, $state);
            this.title = this.lectorParent.lectorGroup.title;
            this.breadcrumb = this.breadcrumbBase();
            this.breadcrumb[this.breadcrumb.length - 1].active = true;
        }
        lectorViewBase.prototype.breadcrumbBase = function () {
            var res = vyzva.breadcrumbBase(this);
            res.push({ title: this.title, url: this.href({ stateName: vyzva.stateNames.lectorHome.name, pars: this.ctx }) });
            return res;
        };
        return lectorViewBase;
    })(blended.controller);
    vyzva.lectorViewBase = lectorViewBase;
    var lectorViewController = (function (_super) {
        __extends(lectorViewController, _super);
        function lectorViewController($scope, $state) {
            _super.call(this, $scope, $state);
            this.breadcrumb[this.breadcrumb.length - 1].active = true;
            this.tabIdx = 0;
            this.students = _.map(this.lectorParent.lectorGroup.studentKeys, function (k) { return { key: k }; });
            this.visitors = _.map(this.lectorParent.lectorGroup.visitorsKeys, function (k) { return { key: k }; });
        }
        lectorViewController.prototype.gotoStudentResult = function (student) {
            var _this = this;
            var ctx = blended.cloneAndModifyContext(this.ctx, function (c) {
                c.onbehalfof = student.key.lmcomId;
                c.returnurl = _this.href({ stateName: vyzva.stateNames.lectorHome.name, pars: _this.ctx });
            });
            this.navigate({ stateName: vyzva.stateNames.home.name, pars: ctx });
        };
        //POUZE LANGMASTER
        lectorViewController.prototype.deleteKey = function () {
            this.lectorParent.productParent.intranetInfo.deleteStudentKey(this.lectorParent.lectorGroup.groupId, this.deleteKeyValue);
            saveCompanyInfo(this.ctx.companyid, this.lectorParent.productParent.intranetInfo.companyData, function () { return location.reload(); });
        };
        lectorViewController.prototype.addKey = function () {
            var _this = this;
            proxies.vyzva57services.lmAdminCreateSingleLicenceKey(this.ctx.companyid, this.productParent.dataNode.url, function (key) {
                var parts = key.split('|');
                var key = keys.toString({ licId: parseInt(parts[0]), counter: parseInt(parts[1]) });
                _this.lectorParent.productParent.intranetInfo.addStudentKey(_this.lectorParent.lectorGroup.groupId, key);
                saveCompanyInfo(_this.ctx.companyid, _this.lectorParent.productParent.intranetInfo.companyData, function () { return location.reload(); });
            });
        };
        lectorViewController.prototype.downloadLicenceKeys = function () {
            vyzva.downloadExcelReport({ type: vyzva.reportType.lectorKeys, companyId: this.ctx.companyid, groupId: this.lectorParent.groupId });
        };
        lectorViewController.prototype.downloadSummary = function () {
            vyzva.downloadExcelReport({ type: vyzva.reportType.lectorStudy, companyId: this.ctx.companyid, groupId: this.lectorParent.groupId });
        };
        return lectorViewController;
    })(lectorViewBase);
    vyzva.lectorViewController = lectorViewController;
    function saveCompanyInfo(companyId, company, completed) {
        proxies.vyzva57services.writeCompanyData(companyId, JSON.stringify(company), function () { return completed(); });
    }
    blended.rootModule
        .directive('vyzva$lector$user', function () {
        return {
            scope: { student: '&student', ts: '&ts' },
            templateUrl: 'vyzva$lector$user.html'
        };
    })
        .directive('vyzva$lector$users', function () {
        return {
            scope: { students: '=students', ts: '&ts' },
            templateUrl: 'vyzva$lector$users.html'
        };
    })
        .directive('vyzva$lector$visitors', function () {
        return {
            scope: { students: '&students', ts: '&ts' },
            templateUrl: 'vyzva$lector$visitors.html'
        };
    })
        .directive('vyzva$lector$visitor', function () {
        return {
            scope: { student: '&student', ts: '&ts' },
            templateUrl: 'vyzva$lector$visitor.html'
        };
    });
})(vyzva || (vyzva = {}));
var vyzva;
(function (vyzva) {
    var managerLangmaster = (function (_super) {
        __extends(managerLangmaster, _super);
        function managerLangmaster($scope, $state, intranetInfo) {
            _super.call(this, $scope, $state);
            this.intranetInfo = intranetInfo;
            this.sablona4 = 1;
            this.sablona3 = 0;
            this.allUsers = []; //vystupni dato 2: seznam demouctu 
        }
        managerLangmaster.prototype.sum4 = function () { return this.priceToString(this.sablona4 * 18490); };
        managerLangmaster.prototype.sum3 = function () { return this.priceToString(this.sablona3 * 3499); };
        managerLangmaster.prototype.sum = function () { return this.priceToString(this.sablona4 * 18490 + this.sablona3 * 3499); };
        managerLangmaster.prototype.sum4NoDPH = function () { return this.priceToString(this.sablona4 * 15281); };
        managerLangmaster.prototype.sum3NoDPH = function () { return this.priceToString(this.sablona3 * 2892); };
        managerLangmaster.prototype.sumNoDPH = function () { return this.priceToString(this.sablona4 * 15281 + this.sablona3 * 2892); };
        managerLangmaster.prototype.priceToString = function (price) {
            var s = price.toString();
            return s.substr(0, s.length - 3) + ' ' + s.substr(s.length - 3);
        };
        managerLangmaster.prototype.url = function () {
            var host = location.href.split('/')[2];
            return 'http://' + host + (host == 'localhost' ? '/Web4/Schools/NewEA.aspx?lang=cs-cz' : '/schools/index_cs_cz.html');
        };
        managerLangmaster.prototype.encodetitle = function () { return this.url() + '#/vyzvademo?companytitle=' + encodeURIComponent(this.schoolTitle); };
        managerLangmaster.prototype.vyzvaProvoz = function () { return this.url() + '#/vyzvaprovoz?companytitle=' + encodeURIComponent('"' + this.schoolTitle + '"'); };
        managerLangmaster.prototype.exportLectorInfoToXml = function () {
            blended.downloadExcelFile(Pager.basicUrl + 'vyzva57services/lmlectorexportinfotoxml');
            //downloadExcelReport({ type: reportType.managerStudy, companyId: this.ctx.companyid });
            // invoke('vyzva57services/lmlectorexportinfotoxml', 'get', null, null, completed);
            //proxies.vyzva57services.lmLectorExportInfoToXml($.noop);
        };
        //encodetitle(): string { return 'http://' + location.href.split('/')[2] + '/schools/index_cs_cz.html#/vyzvademo?companytitle=' + encodeURIComponent(this.schoolTitle); }
        //encodetitle(): string { return 'http://localhost/Web4/Schools/NewEA.aspx?lang=cs-cz#/vyzvademo?companytitle=' + encodeURIComponent(this.schoolTitle); }
        //vyzvaProvoz(): string { return 'http://' + location.href.split('/')[2] + '/schools/index_cs_cz.html#/vyzvaprovoz?companytitle=' + encodeURIComponent('"' + this.schoolTitle + '"'); }
        //vyzvaProvoz(): string { return 'http://localhost/Web4/Schools/NewEA.aspx?lang=cs-cz#/vyzvaprovoz?companytitle=' + encodeURIComponent('"' + this.schoolTitle + '"'); }
        managerLangmaster.prototype.gotoLicKey = function () {
            this.navigate({ stateName: 'vyzvademo', pars: { key: this.licKeyForGoto } });
        };
        //ostry klic pro spravce skoly
        managerLangmaster.prototype.createEmptySchool = function () {
            var _this = this;
            proxies.vyzva57services.createEmptyCompany(this.schoolTitle, function (emptyResult) {
                _this.key = keys.toString({ licId: emptyResult.licId, counter: emptyResult.licCounter });
                _this.$scope.$apply();
            });
        };
        //seznam demouctu 
        managerLangmaster.prototype.createSchool = function () {
            var _this = this;
            proxies.vyzva57services.createDemoCompanyStart(this.schoolTitle, this.uniqueId, function (newDataResult) {
                vyzva.managerSchool.createCompany(newDataResult.companyId, managerLangmaster.groups, null, function (newComp) {
                    proxies.vyzva57services.loadCompanyData(newDataResult.fromCompanyId, function (str) {
                        //funkce na doplneni klicu vytvorenych na serveru (createDemoCompanyStart) do nove company
                        var fillCompUserData = function (id, role, key) {
                            var userData = _.find(newDataResult.users, function (u) { return Utils.startsWith(u.email, id + '.'); });
                            if (!userData)
                                return;
                            key.keyStr = keys.toString({ licId: userData.licId, counter: userData.licCounter });
                            key.firstName = userData.firstName;
                            key.lastName = userData.lastName;
                            key.email = userData.email;
                            key.lmcomId = userData.lmcomId;
                            key.role = role;
                            return key;
                        };
                        //4 pouziti studenti v new Company
                        var newUsers = [null, null, null, null];
                        var allUsers = [];
                        //dopln klice a osobnich udaju do new company
                        _this.allUsers.push(fillCompUserData('spravce', 'Správce', newComp.managerKeys[0]));
                        _this.allUsers.push(fillCompUserData('ucitel1', 'Učitele, možnost 1', newComp.studyGroups[0].lectorKeys[0]));
                        _this.allUsers.push(fillCompUserData('ucitel2', 'Učitele, možnost 2', newComp.studyGroups[1].lectorKeys[0]));
                        _this.allUsers.push(fillCompUserData('student1', 'Studenta, možnost 1', newUsers[0] = newComp.studyGroups[0].studentKeys[0]));
                        _this.allUsers.push(fillCompUserData('student2', 'Studenta, možnost 2', newUsers[1] = newComp.studyGroups[0].studentKeys[1]));
                        _this.allUsers.push(fillCompUserData('student3', 'Studenta, možnost 3', newUsers[2] = newComp.studyGroups[1].studentKeys[0]));
                        _this.allUsers.push(fillCompUserData('student4', 'Studenta, možnost 4', newUsers[3] = newComp.studyGroups[1].studentKeys[1]));
                        _this.$scope.$apply();
                        //najdi 4 pouzite studenty v zdrojove company
                        var srcComp = (JSON.parse(str));
                        var srcUsers = _.filter(srcComp.studyGroups[0].studentKeys.slice(0).pushArray(srcComp.studyGroups[1].studentKeys.slice(0)), function (k) { return k.lmcomId > 0; });
                        //sparovani zdrojovych a novych lmcomid kvuli kopii CourseData
                        var srcToNewLMComIds = _.map(_.zip(srcUsers, newUsers), function (arr) {
                            var srcKey = arr[0];
                            if (!srcKey)
                                return null;
                            var newKey = arr[1];
                            return { fromLmcomId: srcKey.lmcomId, toLmLmcomId: newKey.lmcomId };
                        });
                        srcToNewLMComIds = _.filter(srcToNewLMComIds, function (ids) { return !!ids; });
                        //save nove company
                        proxies.vyzva57services.writeCompanyData(newDataResult.companyId, JSON.stringify(newComp), function () {
                            proxies.vyzva57services.createDemoCompanyEnd({
                                fromCompanyId: newDataResult.fromCompanyId,
                                toCompanyId: newDataResult.companyId,
                                users: srcToNewLMComIds,
                            }, function () {
                            });
                        });
                    });
                });
            });
        };
        //static ids = [ "spravce", "ucitel1", "ucitel2", "student1", "student2", "student3", "student4" ];
        //static srcCompanyId = 1;
        managerLangmaster.groups = [
            {
                "groupId": 2,
                "title": "Třída 3.A",
                "line": LMComLib.LineIds.English,
                "num": "20",
                "isPattern3": false
            },
            {
                "groupId": 1,
                "title": "Třída 2.B",
                "line": LMComLib.LineIds.English,
                "num": "20",
                "isPattern3": false
            }
        ];
        return managerLangmaster;
    })(blended.controller);
    vyzva.managerLangmaster = managerLangmaster;
})(vyzva || (vyzva = {}));
var vyzva;
(function (vyzva) {
    var managerSchool = (function (_super) {
        __extends(managerSchool, _super);
        function managerSchool($scope, $state, intranetInfo) {
            _super.call(this, $scope, $state);
            this.intranetInfo = intranetInfo;
            this.groupNameCounter = 1;
            this.groups = [];
            this.company = intranetInfo ? intranetInfo.companyData : null;
            this.breadcrumb = vyzva.breadcrumbBase(this, true);
            this.breadcrumb.push({ title: this.title = 'Správa Studijních skupin a Učitelů', active: true });
            if (this.company) {
                this.wizzardStep = 2;
                return;
            }
            this.wizzardStep = 0;
            this.adjustWizzardButtons();
        }
        managerSchool.prototype.downloadLicenceKeys = function (managerIncludeStudents) {
            vyzva.downloadExcelReport({ type: vyzva.reportType.managerKeys, companyId: this.ctx.companyid, managerIncludeStudents: managerIncludeStudents });
        };
        managerSchool.prototype.downloadSummary = function () {
            vyzva.downloadExcelReport({ type: vyzva.reportType.managerStudy, companyId: this.ctx.companyid });
        };
        managerSchool.prototype.addItem = function (line, isPattern3) {
            var item = {
                groupId: managerSchool.groupIdCounter++,
                title: isPattern3 ? blended.lineIdToText(line) + ' pro Studující učitele' : 'Pokročilí' + (this.groupNameCounter++).toString() + ' - 3.A (2015/2016)',
                line: line,
                num: isPattern3 ? '1' : '20',
                isPattern3: isPattern3
            };
            this.groups.splice(0, 0, item);
        };
        managerSchool.prototype.removeItem = function (idx) {
            this.groups.splice(idx, 1);
        };
        managerSchool.prototype.wizzardClick = function (isBack) {
            var _this = this;
            if (!isBack)
                switch (this.wizzardStep) {
                    case 0:
                        this.wizzardStep = 1;
                        break;
                    case 1:
                        var actualManagerKey = this.ctx.lickeys.split('#')[0];
                        var cook = LMStatus.Cookie;
                        var managerKey = { keyStr: actualManagerKey, email: cook.EMail, firstName: cook.FirstName, lastName: cook.LastName, lmcomId: cook.id };
                        managerSchool.createCompany(this.ctx.companyid, this.groups, managerKey, function (comp) {
                            _this.company = comp;
                            _this.wizzardStep = 2;
                            _this.$scope.$apply();
                        });
                        //var req = intranet.lmAdminCreateLicenceKeys_request(this.groups);
                        //proxies.vyzva57services.lmAdminCreateLicenceKeys(this.ctx.companyid, req, resp => {
                        //  this.company = intranet.lmAdminCreateLicenceKeys_reponse(this.groups, resp);
                        //  /*pred zalozenim company nema sanci mit manager vice klicu. Ten jeden pridej mezi klice spravce*/
                        //  var actualManagerKey = this.ctx.lickeys.split('#')[0];
                        //  var cook = LMStatus.Cookie;
                        //  this.company.managerKeys.push({ keyStr: actualManagerKey, email: cook.EMail, firstName: cook.FirstName, lastName: cook.LastName, lmcomId: cook.id });
                        //  proxies.vyzva57services.lmAdminCreateCompany(this.ctx.companyid, JSON.stringify(this.company), () => {
                        //    this.wizzardStep = 2;
                        //    this.$scope.$apply();
                        //  });
                        //});
                        break;
                }
            else
                switch (this.wizzardStep) {
                    case 1:
                        this.wizzardStep = 0;
                        break;
                }
            this.adjustWizzardButtons();
        };
        managerSchool.createCompany = function (companyId, groups, managerKey, completed) {
            var req = vyzva.intranet.lmAdminCreateLicenceKeys_request(groups);
            proxies.vyzva57services.lmAdminCreateLicenceKeys(companyId, req, function (resp) {
                var comp = vyzva.intranet.lmAdminCreateLicenceKeys_reponse(groups, resp);
                /*pred zalozenim company nema sanci mit manager vice klicu. Ten jeden pridej mezi klice spravce*/
                //var actualManagerKey = '';
                //var cook = LMStatus.Cookie;
                if (managerKey)
                    comp.managerKeys.push(managerKey);
                proxies.vyzva57services.lmAdminCreateCompany(companyId, JSON.stringify(comp), function () {
                    completed(comp);
                });
            });
        };
        managerSchool.prototype.adjustWizzardButtons = function () {
            switch (this.wizzardStep) {
                case 0:
                    this.nextTitle = 'Potvrzení údajů';
                    break;
                case 1:
                    this.nextTitle = 'Údaje v pořádku';
                    break;
            }
        };
        managerSchool.prototype.lineToFlagClass = function (id) {
            switch (id) {
                case LMComLib.LineIds.English: return "flag-small-english";
                case LMComLib.LineIds.German: return "flag-small-german";
                case LMComLib.LineIds.French: return "flag-small-french";
                default: return "???";
            }
        };
        managerSchool.prototype.disabled = function (line) { return _.any(this.groups, function (g) { return g.line == line && g.isPattern3; }); };
        managerSchool.prototype.debugDeletCompany = function () {
            proxies.vyzva57services.writeCompanyData(this.ctx.companyid, null, $.noop);
        };
        managerSchool.$inject = ['$scope', '$state', '$intranetInfo'];
        managerSchool.groupIdCounter = 1;
        return managerSchool;
    })(blended.controller);
    vyzva.managerSchool = managerSchool;
    blended.rootModule
        .filter('vyzva$managerschool$sablonaid', function () {
        return function (id) { return id ? "Učitelé (č.3)" : "Studenti (č.4)"; };
    })
        .directive('vyzva$managerschool$usekey', function () {
        return {
            scope: { item: '&item' },
            templateUrl: 'vyzva$managerschool$usekey.html'
        };
    })
        .directive('vyzva$managerchool$usekeys', function () {
        return {
            scope: { items: '&items', for: '&for' },
            templateUrl: 'vyzva$managerchool$usekeys.html'
        };
    });
})(vyzva || (vyzva = {}));
//class managerSchool_usedKey {
//  constructor($scope) {
//    debugger;
//  }
//}
//namespace vyzva {
//  //export class moduleViewController extends blended.taskViewController {
//  //  constructor($scope: ng.IScope | blended.IStateService, $state?: angular.ui.IStateService) {
//  //    super($scope, $state);
//  //    this.breadcrumb = breadcrumbBase(this);
//  //    this.breadcrumb.push({ title: this.title, url: null, active: true });
//  //  }
//  //}
//} 
var vyzva;
(function (vyzva) {
    var pretestViewController = (function (_super) {
        __extends(pretestViewController, _super);
        function pretestViewController($scope, $state) {
            _super.call(this, $scope, $state);
            this.breadcrumb = vyzva.breadcrumbBase(this);
            this.breadcrumb.push({ title: this.title, url: null, active: true });
        }
        return pretestViewController;
    })(blended.taskViewController);
    vyzva.pretestViewController = pretestViewController;
})(vyzva || (vyzva = {}));
var vyzva;
(function (vyzva) {
    var testHwController = (function (_super) {
        __extends(testHwController, _super);
        function testHwController($scope, $state, $loadedEx) {
            _super.call(this, $scope, $state);
            this.exService = new blended.exerciseServiceSimple($loadedEx.pageJsonML, $loadedEx.mod.loc, null);
        }
        testHwController.$inject = ['$scope', '$state', '$loadedEx'];
        return testHwController;
    })(blended.controller);
    vyzva.testHwController = testHwController;
})(vyzva || (vyzva = {}));
var vyzva;
(function (vyzva) {
    //********** RUN DEMO controller
    vyzva.keysFromCompanyTitle = ['$stateParams', '$q', function (params, def) {
            var deferred = def.defer();
            try {
                var key = params['key'];
                if (key) {
                    deferred.resolve(null);
                    return;
                }
                var companytitle = params['companytitle'];
                proxies.vyzva57services.keysFromCompanyTitle(companytitle, function (companyInfo) {
                    if (companyInfo.newCompanyId > 0) {
                        var groups = companyInfo.teacherDe ? groupsBoth : groupsEn;
                        vyzva.managerSchool.createCompany(companyInfo.newCompanyId, groups, null, function (newComp) {
                            proxies.vyzva57services.loadCompanyData(companyInfo.newCompanyId, function (str) {
                                //nahrazeni puvodnich klicu nove vygenerovanymi
                                var fillCompUserData = function (key, userData) {
                                    key.keyStr = keys.toString({ licId: userData.licId, counter: userData.licCounter });
                                    key.firstName = userData.firstName;
                                    key.lastName = userData.lastName;
                                    key.email = userData.email;
                                    key.lmcomId = userData.lmcomId;
                                    return key;
                                };
                                fillCompUserData(newComp.managerKeys[0], companyInfo.admin);
                                fillCompUserData(newComp.studyGroups[0].lectorKeys[0], companyInfo.teacher);
                                fillCompUserData(newComp.studyGroups[0].studentKeys[0], companyInfo.student);
                                if (companyInfo.teacherDe)
                                    fillCompUserData(newComp.studyGroups[1].lectorKeys[0], companyInfo.teacherDe);
                                if (companyInfo.studentDe)
                                    fillCompUserData(newComp.studyGroups[1].studentKeys[0], companyInfo.studentDe);
                                //ulozeni company
                                proxies.vyzva57services.writeCompanyData(companyInfo.newCompanyId, JSON.stringify(newComp), function () { return deferred.resolve(companyInfo); });
                            });
                        });
                    }
                    else {
                        deferred.resolve(companyInfo);
                    }
                });
            }
            finally {
                return deferred.promise;
            }
        }];
    var groupsEn = [
        {
            "groupId": 1,
            "title": "Třída 2.B, Angličtina",
            "line": LMComLib.LineIds.English,
            "num": "20",
            "isPattern3": false
        },
    ];
    var groupsBoth = [
        {
            "groupId": 1,
            "title": "Třída 2.B, Angličtina",
            "line": LMComLib.LineIds.English,
            "num": "20",
            "isPattern3": false
        },
        {
            "groupId": 2,
            "title": "Třída 3.A, Němčina",
            "line": LMComLib.LineIds.German,
            "num": "20",
            "isPattern3": false
        }
    ];
    var runController = (function (_super) {
        __extends(runController, _super);
        function runController($scope, $state, companyInfo) {
            _super.call(this, $scope, $state);
            this.companyInfo = companyInfo;
            //***** Objednavka
            this.order = {};
            if (!companyInfo) {
                var keyStr = $state.params['key'];
                var key = keys.fromString(keyStr);
                this.navigateLow(key);
                throw 'vyzvademo.ts, runController ABORT';
            }
            this.masterKey = keys.toString({ licId: companyInfo.masterLicId, counter: companyInfo.masterLLicCounter });
            if (Utils.endWith(companyInfo.companyTitle, ' *'))
                companyInfo.companyTitle = companyInfo.companyTitle.substr(0, companyInfo.companyTitle.length - 2);
            this.hashGerman = !!companyInfo.studentDe;
            this.hideOrder = $state.params['hideorder'] == 'true';
            $('#splash').hide();
        }
        runController.prototype.navigateLow = function (key) {
            var _this = this;
            proxies.vyzva57services.runDemoInformation(key.licId, key.counter, function (res) {
                var ctx = {
                    companyid: res.companyId,
                    producturl: blended.encodeUrl(res.productUrl),
                    loginid: res.lmcomId,
                    //companyId: res.companyId,
                    lickeys: _.map(res.licKeys, function (key) {
                        var parts = key.split('|');
                        return keys.toString({ licId: parseInt(parts[0]), counter: parseInt(parts[1]) });
                    }).join('#'),
                    loc: Trados.actLang,
                    persistence: null,
                    taskid: '',
                    homelinktype: _this.companyInfo ? 'vyzvademo' : '',
                    vyzvademocompanytitle: _this.companyInfo ? _this.companyInfo.companyTitle : '',
                };
                blended.finishContext(ctx);
                //login
                var cookie = { id: res.lmcomId, EMail: res.email, FirstName: res.firstName, LastName: res.lastName, Type: res.otherType, Roles: 0 };
                LMStatus.setCookie(cookie, false);
                LMStatus.Cookie = cookie;
                LMStatus.onLogged(function () {
                    //after login
                    var statName;
                    switch (ctx.productUrl) {
                        case '/lm/blcourse/langmastermanager.product/':
                            statName = vyzva.stateNames.langmasterManager.name;
                            break;
                        case '/lm/blcourse/schoolmanager.product/':
                            statName = vyzva.stateNames.shoolManager.name;
                            break;
                        default:
                            statName = blended.prodStates.home.name;
                            break;
                    }
                    _this.navigate({ stateName: statName, pars: ctx });
                });
            });
        };
        runController.prototype.navigateKey = function (keyCode) {
            var user = this.companyInfo[keyCode];
            //var key: keys.Key = keys.fromString(this.ctx[keyName].trim());
            var key = { licId: user.licId, counter: user.licCounter };
            this.navigateLow(key);
        };
        runController.prototype.celkemsablona4 = function () { return (this.order.sablona4 || 0) * 18490; };
        runController.prototype.celkemsablona3 = function () { return (this.order.sablona3 || 0) * 3499; };
        runController.prototype.celkembezdph = function () { return Math.round(this.celkembesdph() / 1.21); };
        runController.prototype.celkembesdph = function () { return this.celkemsablona4() + this.celkemsablona3(); };
        runController.prototype.sendOrder = function () {
            proxies.vyzva57services.lmAdminSendOrder(JSON.stringify(this.order), function () { return alert('Děkujeme za vaši objednávku.'); });
        };
        runController.$inject = ['$scope', '$state', '$keysFromCompanyTitle'];
        return runController;
    })(blended.controller);
    vyzva.runController = runController;
    blended.rootModule
        .filter('price', function () { return function (value) {
        var res = value.toString();
        if (value < 1000)
            return res;
        return res.substr(0, res.length - 3) + ' ' + res.substr(res.length - 3);
    }; });
})(vyzva || (vyzva = {}));
//http://localhost/Web4/Schools/NewEA.aspx?lang=cs-cz&#/vyzvademo?teacher=9Q1ZNF4V&admin=92XR5UQH&student=9659NYB3&studentempty=9659NYB3
//http://localhost/Web4/Schools/NewEA.aspx?lang=cs-cz&#/vyzvademo?teacher=99CE7PA1&admin=9659NKW6&student=9KUV3Z4B&studentempty=9U912GV1
//http://localhost/Web4/Schools/NewEA.aspx?lang=cs-cz#/vyzvademo?companytitle=asdsadfasdfsadf
//http://blendedtest.langmaster.cz/schools/index_cs_cz.html#/vyzvademo?companytitle=asdsadfasdfsadf
//http://blended.langmaster.cz/schools/index_cs_cz.html#/vyzvademo?companytitle=asdsadfasdfsadf 
var vyzva;
(function (vyzva) {
    vyzva.vyzvaProvoz = ['$stateParams', '$q', function (params, def) {
            var deferred = def.defer();
            try {
                var companytitle = params['companytitle'];
                proxies.vyzva57services.createEmptyCompany(companytitle, function (res) {
                    deferred.resolve({ licId: res.licId, licCounter: res.licCounter, companyTitle: companytitle });
                });
            }
            finally {
                return deferred.promise;
            }
        }];
    var vyzvaProvozController = (function (_super) {
        __extends(vyzvaProvozController, _super);
        function vyzvaProvozController($scope, $state, companyInfo) {
            _super.call(this, $scope, $state);
            this.companyInfo = companyInfo;
            this.masterKey = keys.toString({ licId: companyInfo.licId, counter: companyInfo.licCounter });
            $('#splash').hide();
        }
        vyzvaProvozController.$inject = ['$scope', '$state', '$vyzvaProvoz'];
        return vyzvaProvozController;
    })(blended.controller);
    vyzva.vyzvaProvozController = vyzvaProvozController;
})(vyzva || (vyzva = {}));
var angular$course;
(function (angular$course) {
    ko.bindingHandlers['angularjs'] = {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var directiveName = valueAccessor();
            var el = angular.element('<' + directiveName + '/>');
            $(element).append(el);
            var compiled = blended.compile(el);
            var ctrl = bindingContext.$data;
            var exService = (ctrl._myPage.blendedExtension);
            var scope = blended.rootScope.$new(); //true, rootScope);
            scope.ctrl = ctrl;
            scope.exService = exService;
            compiled(scope);
            //scope.$apply();
        },
    };
    var controller = (function () {
        function controller($scope) {
            $scope.ts = this;
            this.ctrl = $scope.ctrl;
            this.exService = $scope.exService;
        }
        return controller;
    })();
    //********************** audiocapture$humaneval
    var audiocapture$humaneval = (function (_super) {
        __extends(audiocapture$humaneval, _super);
        function audiocapture$humaneval($scope) {
            _super.call(this, $scope);
        }
        audiocapture$humaneval.prototype.visible = function () { return this.exService.lectorMode && this.exService.isTest; };
        return audiocapture$humaneval;
    })(controller);
    //Direktiva vznika v:
    //- kodu D:\LMCom\REW\Web4\BlendedAPI\app.ts, ko.bindingHandlers['angularjs']
    //- datech napr. D:\LMCom\REW\Web4\Courses\Media.html
    blended.rootModule.directive('course$audiocapture$humaneval', function () {
        return {
            restrict: 'E',
            controller: audiocapture$humaneval,
            templateUrl: 'course$audiocapture$humaneval.html'
        };
    });
})(angular$course || (angular$course = {}));
var Course;
(function (Course) {
    (function (chinhTaskType) {
        chinhTaskType[chinhTaskType["listen"] = 0] = "listen";
        chinhTaskType[chinhTaskType["read"] = 1] = "read";
        chinhTaskType[chinhTaskType["finish"] = 2] = "finish";
    })(Course.chinhTaskType || (Course.chinhTaskType = {}));
    var chinhTaskType = Course.chinhTaskType;
    var chinhSpeaking = (function () {
        function chinhSpeaking(control) {
            var _this = this;
            this.control = control;
            this.actTaskIdx = 0;
            this.remaining = ko.observable(0);
            this.done = ko.observable(false);
            this.actIdx = ko.observable(0);
            this.initProc = function (phase, getTypeOnly, completed) {
                switch (phase) {
                    case Course.initPhase.afterRender:
                        if (!getTypeOnly) {
                            _this.$modal = $('#chinh-speaking-dialog');
                            _this.$modal.click(function () { return false; });
                            _this.$modal.modal({ backdrop: 'static', show: false, keyboard: false });
                            _.each(_this.$modal.find('.modal-body').children(), function (ch) { return $(ch).hide(); });
                        }
                        return Course.initPhaseType.sync;
                }
                return Course.initPhaseType.no;
            };
            Course.extension = this;
            var tasks = control.cdata ? JSON.parse(control.cdata) : {};
            this.tasks = _.map(tasks.tasks, function (t) {
                switch (t.type) {
                    case chinhTaskType.finish: return new ch_finish(t);
                    case chinhTaskType.listen: return new ch_listenAndTalkTask(t);
                    case chinhTaskType.read: return new ch_readAndTalkTask(t);
                    default: throw 'not implemented';
                }
            });
        }
        chinhSpeaking.prototype.getTemplateId = function () { return 'chinhspeaking'; };
        chinhSpeaking.prototype.run = function () {
            var _this = this;
            this.$modal.modal('show');
            setTimeout(function () { return _this.tasks[0].start(); }, 1);
        };
        chinhSpeaking.prototype.runNext = function () {
            Course.extension.actTask().end();
            if (Course.extension.actTaskIdx == Course.extension.tasks.length - 1) {
                Course.extension.$modal.modal('hide');
            }
            else {
                Course.extension.actTaskIdx++;
                Course.extension.actTask().start();
                Course.extension.actIdx(Course.extension.actTaskIdx);
            }
        };
        chinhSpeaking.prototype.actTask = function () { return Course.extension.tasks[Course.extension.actTaskIdx]; };
        chinhSpeaking.prototype.instructionOK = function () { Course.extension.actTask().instructionOK(); };
        return chinhSpeaking;
    })();
    Course.chinhSpeaking = chinhSpeaking;
    var ch_task = (function () {
        function ch_task(json) {
            if (json)
                for (var p in json)
                    this[p] = json[p];
        }
        ch_task.prototype.start = function () { };
        ch_task.prototype.end = function () { };
        ch_task.prototype.instructionOK = function () { };
        ch_task.prototype.record = function () {
            var _this = this;
            this.rec.record();
            this.$instr.hide();
            (this.$instr = $('#recording')).show();
            var now = new Date().getTime();
            var recTimer = setInterval(function () {
                if (new Date().getTime() - now < _this.rec.limitMax * 1000)
                    return;
                _this.rec.stopRecording();
                clearInterval(recTimer);
                _this.$instr.hide();
                (_this.$instr = $('#saving-recording')).show();
                setTimeout(function () {
                    _this.$instr.hide();
                    Course.extension.runNext();
                }, 3000);
            }, 500);
        };
        return ch_task;
    })();
    Course.ch_task = ch_task;
    var ch_finish = (function (_super) {
        __extends(ch_finish, _super);
        function ch_finish() {
            _super.apply(this, arguments);
        }
        ch_finish.prototype.start = function () {
            Course.extension.done(true);
            Course.extension.runNext();
        };
        return ch_finish;
    })(ch_task);
    Course.ch_finish = ch_finish;
    var ch_readAndTalkTask = (function (_super) {
        __extends(ch_readAndTalkTask, _super);
        function ch_readAndTalkTask() {
            _super.apply(this, arguments);
        }
        ch_readAndTalkTask.prototype.start = function () {
            var _this = this;
            (this.$taskDiv = $('#' + this.taskDivId)).show();
            this.rec = (Course.extension.control._myPage.getItem(this.recordId));
            //extension.remaining(6);
            Course.extension.remaining(60);
            (this.$instr = $('#thinking')).show();
            var timer = setInterval(function () {
                Course.extension.remaining(Course.extension.remaining() - 1);
                if (Course.extension.remaining() > 0)
                    return;
                clearInterval(timer);
                var mark = (Course.extension.control._myPage.getItem('gong'));
                mark.play();
                setTimeout(function () {
                    $('#' + _this.questId).hide();
                    _this.record();
                }, 1000);
            }, 1000);
        };
        ch_readAndTalkTask.prototype.end = function () {
            this.$taskDiv.hide();
        };
        return ch_readAndTalkTask;
    })(ch_task);
    Course.ch_readAndTalkTask = ch_readAndTalkTask;
    var ch_listenAndTalkTask = (function (_super) {
        __extends(ch_listenAndTalkTask, _super);
        function ch_listenAndTalkTask() {
            _super.apply(this, arguments);
        }
        ch_listenAndTalkTask.prototype.start = function () {
            (this.$instr = $('#instruction1')).show();
        };
        ch_listenAndTalkTask.prototype.end = function () {
            this.$taskDiv.hide();
        };
        ch_listenAndTalkTask.prototype.instructionOK = function () {
            var _this = this;
            this.$instr.hide();
            (this.$instr = $('#playing-question')).show();
            var mark = (Course.extension.control._myPage.getItem(this.questId));
            this.rec = (Course.extension.control._myPage.getItem(this.recordId));
            mark.play();
            var timer = setInterval(function () {
                if (mark.active())
                    return;
                clearInterval(timer);
                _this.$instr.hide();
                _this.record();
            }, 500);
            (this.$taskDiv = $('#' + this.taskDivId)).show();
        };
        return ch_listenAndTalkTask;
    })(ch_task);
    Course.ch_listenAndTalkTask = ch_listenAndTalkTask;
})(Course || (Course = {}));
var docreference;
(function (docreference) {
    var ext = (function () {
        function ext(control) {
            this.control = control;
            this.data = metaJS.metaObj;
            this.pars = control.cdata ? JSON.parse(control.cdata) : {};
        }
        ext.prototype.getTemplateId = function () { return 'docxsd'; };
        return ext;
    })();
    docreference.ext = ext;
})(docreference || (docreference = {}));
//##GOTO
function gotoHref(event, url) {
    if (_.isEmpty(url))
        url = $(event.currentTarget).attr('href');
    url = Utils.combineUrl(CourseMeta.actNode.url, url);
    CourseMeta.gotoData(url);
    return false;
}
var CourseMeta;
(function (CourseMeta) {
    //inline contrtols
    var oliReplace = 'olireplace';
    function processInlineControls(scriptId, completed) {
        if (!scriptId) {
            _.each($(oliReplace), function (el) { return $(el).remove(); });
            completed();
            return;
        }
        var txt = $('#' + scriptId).html();
        if (!txt) {
            debugger;
            throw scriptId;
        }
        //nacti page
        var root = JSON.parse(txt);
        var pg = CourseMeta.extractEx(root);
        var ex = new CourseMeta.exImpl();
        ex.onSetPage(pg, {});
        var pgCtrl = Course.finishCreatePage(ex);
        //replace <oli-replace> elements with controls 
        _.each($(oliReplace), function (el) {
            var ctrl = pg.tags[el.id];
            if (!ctrl) {
                $(el).remove();
                return;
            }
            var html = JsRenderTemplateEngine.render('c_gen', ctrl);
            var $html = $('<div>' + html + '</div>');
            $(el).replaceWith($html);
            ko.applyBindings(ctrl, $html[0]);
        });
        //init controls
        pg.callInitProcs(Course.initPhase.beforeRender, function () {
            pg.callInitProcs(Course.initPhase.afterRender, function () {
                pg.callInitProcs(Course.initPhase.afterRender2, function () {
                    ex.evaluator = pg;
                    ex.evaluator.acceptData(ex.done, ex.result);
                    if (completed)
                        completed();
                });
            });
        });
    }
    CourseMeta.processInlineControls = processInlineControls;
    $(function () { return document.createElement(oliReplace); });
    //jsonML decoding
    function jsonML_to_Tag(jml, metaObj, owner, propertyTags) {
        if (owner === void 0) { owner = null; }
        if (propertyTags === void 0) { propertyTags = null; }
        _.isArray = function (val) { return val instanceof Array; };
        if (!_.isArray(jml) || jml.length < 1 || !_.isString(jml[0]))
            throw 'invalid JsonML';
        var tagName = jml[0];
        var classMeta = metaObj.types[tagName];
        if (jml.length == 1)
            return createClass(metaObj, tagName, { _tg: tagName, _owner: owner });
        var startIdx = 1;
        var elem = null;
        if (jml.length > 1 && !_.isArray(jml[1]) && !_.isString(jml[1])) {
            startIdx = 2;
            elem = {};
            var jmlObj = jml[1];
            for (var p in jmlObj) {
                if (p == 'cdata' && classMeta.st & CourseModel.tgSt.cdata) {
                    elem.Items = [jmlObj[p]];
                    continue;
                } //cdata jako text
                var oldVal = jmlObj[p];
                var propStatus = CourseModel.getPropInfo(tagName, p, metaObj);
                var val;
                if (!propStatus) {
                    val = p == 'class' ? oldVal.split(' ') : oldVal;
                } //obycejna property
                else if (propStatus.enumType) {
                    if (_.isString(oldVal)) {
                        var s = oldVal;
                        var parts = s.split(' ');
                        val = 0;
                        _.each(parts, function (p) {
                            p = Utils.toCammelCase(p);
                            return val |= propStatus.enumType[p];
                        });
                    }
                    else
                        val = oldVal;
                }
                else if (propStatus.st & CourseModel.tgSt.isArray) {
                    if (!_.isString(oldVal))
                        throw 'something wrong'; //continue;
                    val = oldVal.split(' ');
                }
                else
                    val = oldVal; //else
                var propName = p != 'data-bind' ? Utils.toCammelCase(p) : p;
                elem[propName] = val;
            }
            elem._tg = tagName;
        }
        else
            elem = { _tg: tagName };
        //class create
        elem._owner = owner;
        elem = createClass(metaObj, tagName, elem);
        var childTypeToProp = {};
        if (classMeta)
            for (var p in classMeta.props) {
                var pr = classMeta.props[p];
                if (_.isEmpty(pr.childPropTypes))
                    continue;
                _.each(pr.childPropTypes.split('|'), function (tp) { return childTypeToProp[tp] = { name: p, prop: pr }; });
            }
        for (var i = startIdx; i < jml.length; i++) {
            if (!elem.Items)
                elem.Items = [];
            if (_.isString(jml[i])) {
                elem.Items.push(jml[i]);
                continue;
            } //string
            var childObj = (jsonML_to_Tag(jml[i], metaObj, elem, propertyTags)); //rekurze
            if (childObj.jsonMLParsed)
                childObj.jsonMLParsed();
            var childProp = childTypeToProp[childObj._tg];
            if (!childProp) {
                elem.Items.push(childObj);
                continue;
            } //ne => sub-tag v items
            var childName = Utils.toCammelCase(childProp.name);
            if ((childProp.prop.st & CourseModel.tgSt.isArray) == 0)
                elem[childName] = childObj;
            else if (!elem[childName])
                elem[childName] = [childObj];
            else
                elem[childName].push(childObj); //array property => dosad nebo obohat array
            //evidence tagu v property
            if (propertyTags)
                propertyTags.push(childObj);
        }
        if (elem.Items && elem.Items.length == 0)
            delete elem.Items;
        return elem;
    }
    CourseMeta.jsonML_to_Tag = jsonML_to_Tag;
    ;
    function createClass(meta, tg, def) {
        var cls = meta.classDir ? meta.classDir[tg] : null;
        if (!cls)
            return def;
        var res = new cls(def);
        return res;
    }
    function xmlEscape(str, res) {
        for (var i = 0; i < str.length; ++i) {
            var c = str[i];
            var code = c.charCodeAt(0);
            var s = reventities[c];
            if (s) {
                res.push("&" + s + ";");
            }
            else if (code >= 128) {
                res.push("&#" + code + ";");
            }
            else {
                res.push(c);
            }
        }
    }
    var reventities = (function () {
        var result = {};
        for (var key in entities)
            if (entities.hasOwnProperty(key))
                result[entities[key]] = key;
        return result;
    })();
    var entities = {
        "quot": '"',
        "amp": '&',
        "apos": "'",
        "lt": '<',
        "gt": '>'
    };
    function finishLoadedProduct(prod) {
        CourseMeta.actProduct = prod;
        prod.allNodes = {};
        extend(prod, CourseMeta.productImpl);
        CourseMeta.actCourseRoot = (prod.Items[0]); //kurz nebo test
        CourseMeta.actGrammar = prod.find(function (dt) { return isType(dt, CourseMeta.runtimeType.grammarRoot); }); //a jeho eventuelni gramatika
        //grammar
        if (CourseMeta.actGrammar) {
            var lastNode = null;
            CourseMeta.actGrammarExCount = 0;
            scan(CourseMeta.actGrammar, function (it) {
                extend(it, CourseMeta.dataImpl, CourseMeta.runtimeType.no);
                prod.allNodes[it.url] = it;
                it.type |= CourseMeta.runtimeType.grammar;
                it.each(function (t) { return t.parent = it; });
                if (isType(it, CourseMeta.runtimeType.ex)) {
                    extend(it, CourseMeta.grammEx, CourseMeta.runtimeType.ex);
                    var ge = it;
                    ge.idx = CourseMeta.actGrammarExCount++;
                    if (lastNode) {
                        lastNode.next = ge;
                        ge.prev = lastNode;
                    }
                    lastNode = ge;
                }
                if (isType(it, CourseMeta.runtimeType.mod))
                    extend(it, CourseMeta.modImpl, CourseMeta.runtimeType.mod);
            });
            extend(CourseMeta.actGrammar, CourseMeta.grammarRoot, CourseMeta.runtimeType.grammarRoot);
        }
        var uniqId = 0;
        //prvni pruchod
        scan(CourseMeta.actCourseRoot, function (it) {
            it.uniqId = uniqId++;
            prod.allNodes[it.url] = it;
            extend(it, CourseMeta.courseNode, CourseMeta.runtimeType.courseNode);
            it.each(function (t) { return t.parent = it; });
            if (isType(it, CourseMeta.runtimeType.ex) && cfg.forceEval)
                it.designForceEval = true; //pro design time - ukaz se vyhodnoceny na 100%
        });
        //druhy pruchod
        scan(CourseMeta.actCourseRoot, function (it) {
            if (isType(it, CourseMeta.runtimeType.ex))
                extend(it, CourseMeta.exImpl);
            else if (isType(it, CourseMeta.runtimeType.multiTask))
                extend(it, CourseMeta.multiTaskImpl);
            else if (isType(it, CourseMeta.runtimeType.product))
                extend(it, CourseMeta.productImpl);
            else if (isType(it, CourseMeta.runtimeType.taskCourse))
                extend(it, CourseMeta.courseImpl);
            else if (isType(it, CourseMeta.runtimeType.test))
                extend(it, testMe.testImpl);
            else if (isType(it, CourseMeta.runtimeType.multiTest))
                extend(it, testMe.multiTestImpl);
            else if (isType(it, CourseMeta.runtimeType.taskTestInCourse)) {
                it.type |= CourseMeta.runtimeType.dynamicTestModule;
                extend(it, CourseMeta.courseTestImpl, CourseMeta.runtimeType.mod);
            }
            else if (isType(it, CourseMeta.runtimeType.taskPretest))
                extend(it, CourseMeta.pretestImpl);
            else if (isType(it, CourseMeta.runtimeType.taskTestSkill)) {
                it.type |= CourseMeta.runtimeType.dynamicTestModule;
                extend(it, testMe.testSkillImpl, CourseMeta.runtimeType.mod);
            }
            else if (isType(it, CourseMeta.runtimeType.taskPretestTask)) {
                extend(it, CourseMeta.pretestTaskImpl, CourseMeta.runtimeType.mod);
                it.each(function (e) { return e.testMode = CSLocalize('3859695377c4444abce16f7af9f5d2ec', 'Pretest'); });
            }
            else if (isType(it, CourseMeta.runtimeType.mod))
                extend(it, CourseMeta.modImpl);
            //else if (isType(it, runtimeType.questionnaire)) extend(it, ex, runtimeType.ex);
        });
        //actCourseRoot: prepsani set x getUser
        if (!isType(CourseMeta.actCourseRoot, CourseMeta.runtimeType.test) && !isType(CourseMeta.actCourseRoot, CourseMeta.runtimeType.multiTest))
            extend(CourseMeta.actCourseRoot, CourseMeta.skipAbleRoot, CourseMeta.runtimeType.skipAbleRoot);
    }
    var lib;
    (function (lib) {
        //reakce na zmenu URL. Nacte se modul, cviceni a user data ke cviceni
        function onChangeUrl(prodUrl, persistence, nodeUrl, completed) {
            CourseMeta.foundGreenEx = null;
            if (_.isEmpty(prodUrl)) {
                completed(null);
                return;
            }
            prodUrl = decodeURIComponent(prodUrl);
            adjustProduct(prodUrl, persistence, function () {
                if (CourseMeta.actNode && CourseMeta.actNode.url == nodeUrl) {
                    completed(isType(CourseMeta.actNode, CourseMeta.runtimeType.ex) ? CourseMeta.actNode : null);
                    return;
                } //zadna zmena aktualniho node
                var oldEx = CourseMeta.actEx;
                var oldMod = CourseMeta.actModule;
                var oldNode = CourseMeta.actNode;
                var oldGrammarEx = CourseMeta.actGrammarEx;
                var oldGrammarModule = CourseMeta.actGrammarModule;
                var doCompleted = function (loadedEx) {
                    if (CourseMeta.actEx && oldEx && CourseMeta.actEx != oldEx)
                        oldEx.onUnloadEx();
                    if (CourseMeta.actModule && oldMod && CourseMeta.actModule != oldMod)
                        oldMod.onUnloadMod();
                    if (CourseMeta.actGrammarEx && oldGrammarEx && CourseMeta.actGrammarEx != oldGrammarEx)
                        oldGrammarEx.onUnloadEx();
                    if (CourseMeta.actGrammarModule && oldGrammarModule && CourseMeta.actGrammarModule != oldGrammarModule)
                        oldGrammarModule.onUnloadMod();
                    completed(loadedEx);
                };
                CourseMeta.actNode = null;
                if (!_.isEmpty(nodeUrl))
                    CourseMeta.actNode = CourseMeta.actProduct.getNode(nodeUrl);
                if (!CourseMeta.actNode)
                    CourseMeta.actNode = CourseMeta.actCourseRoot; //novy actNode
                if (!CourseMeta.actNode) {
                    doCompleted(null);
                    return;
                } //zadny node
                if (isType(CourseMeta.actNode, CourseMeta.runtimeType.ex))
                    adjustEx(CourseMeta.actNode, doCompleted);
                else if (isType(CourseMeta.actNode, CourseMeta.runtimeType.mod))
                    adjustMod(CourseMeta.actNode, function (mod) { return doCompleted(null); });
                else
                    doCompleted(null);
            });
        }
        lib.onChangeUrl = onChangeUrl;
        function doRefresh(completed) {
            var compl = function () { if (completed)
                completed(); };
            if (isType(CourseMeta.actNode, CourseMeta.runtimeType.grammar)) {
                compl();
                return;
            }
            CourseMeta.greenArrowDict = {};
            //spocitej nodes udaje
            CourseMeta.actCourseRoot.refreshNumbers();
            //hotovo
            if (CourseMeta.actCourseRoot.done) {
                if (!treatBlueEx())
                    fillArrowInfo(info_courseFinished());
                compl();
                return;
            }
            if (CourseMeta.actCourseRoot.isSkiped) {
                fillArrowInfo(info_courseFinished());
                compl();
                return;
            }
            //najdi aktualni uzel
            findGreenExGlobal(CourseMeta.actCourseRoot, function (findRes) {
                CourseMeta.foundGreenEx = null;
                if (!findRes) {
                    compl();
                    return;
                }
                CourseMeta.foundGreenEx = findRes.grEx;
                //nezelene cviceni
                if (findRes.grEx != CourseMeta.actNode && treatBlueEx()) {
                    compl();
                    return;
                }
                //spocti green parent chain
                var nd = findRes.grEx;
                while (true) {
                    CourseMeta.greenArrowDict[nd.url] = true;
                    if (nd == CourseMeta.actCourseRoot)
                        break;
                    nd = (nd.parent);
                } //parent chain zeleneho cviceni
                //actNode neni v green parent chain => modra sipka
                if (!CourseMeta.greenArrowDict[CourseMeta.actNode.url]) {
                    fillArrowInfo(info_continue());
                    compl();
                    return;
                }
                //jiny task multitasku - prejdi pres home
                if (changeTaskInMultitask(CourseMeta.actNode, findRes.grEx))
                    findRes.info = new CourseMeta.greenArrowInfo(CSLocalize('e64fb875261a4c5e849a9952ecc4ae63', 'Continue'), false, 'success', 'hand-o-right', function () { return CourseMeta.gui.gotoData(null); });
                //muze nastat?
                if (!findRes.info)
                    return;
                fillArrowInfo(findRes.info);
                compl();
            });
        }
        lib.doRefresh = doRefresh;
        //globalni funkce na nalezeni aktualniho (zeleneho) cviceni
        function findGreenExGlobal(nd, completed) {
            var findRes;
            var toExpand;
            findDeepNotSkiped(nd, function (n) {
                if (n.done || n.findParent(function (t) { return t.done; }) != null)
                    return false; //hleda se pouze v nehotovych a non skiped uzlech
                var md = n;
                if (md.getDynamic && md.getDynamic()) {
                    toExpand = n;
                    return true;
                } //uzel je potrena nejdrive expandovat => konec find
                var an = n;
                if (an.findGreenEx && !!(findRes = an.findGreenEx())) {
                    return true; //uzel ma vlastni findGreenEx a ten vrati zelene cviceni
                }
                return false; //pokracuj dal
            });
            if (findRes) {
                completed(findRes);
                return;
            } //nalezeno cviceni
            if (toExpand) {
                toExpand.expandDynamic(); /*kdy se pouziva???*/
                lib.saveProduct(function () { return findGreenExGlobal(toExpand, completed); });
                return;
            } //nalezen uzel k expanzi => rekurze
            completed(null); //nenalezeno nic
        }
        function findProduct(productId) {
            var res = _.find(CourseMeta.allProductList, function (prod) { return prod.url == productId; });
            if (!res) {
                _.find(Login.myData.Companies, function (c) {
                    res = _.find(c.companyProducts, function (p) { return p.url == productId; });
                    return !!res;
                });
            }
            return res;
        }
        lib.findProduct = findProduct;
        function isTest(prod) {
            return prod && CourseMeta.isType(prod, CourseMeta.runtimeType.test);
        }
        lib.isTest = isTest;
        function isVyzvaProduct(prod) {
            return prod && CourseMeta.isType(prod, CourseMeta.runtimeType.productNew);
        }
        lib.isVyzvaProduct = isVyzvaProduct;
        function keyTitle(prod, Days) {
            return prod.title + ' / ' + (CourseMeta.lib.isTest(prod) ? 'test' : 'days: ' + Days.toString());
        }
        lib.keyTitle = keyTitle;
        function productLineTxt(productId) {
            return LowUtils.EnumToString(LMComLib.LineIds, findProduct(productId).line);
        }
        lib.productLineTxt = productLineTxt;
        //zajisti existenci produktu
        function adjustProduct(prodUrl, persistence, completed, lmcomUserId) {
            if (lmcomUserId === void 0) { lmcomUserId = 0; }
            if (!lmcomUserId)
                lmcomUserId = schools.LMComUserId();
            if (CourseMeta.actProduct && CourseMeta.actProduct.url == prodUrl && CourseMeta.actProductLmcomId == lmcomUserId && CourseMeta.actProductPersistence == persistence) {
                completed(false);
                return;
            }
            if (CourseMeta.actProduct)
                CourseMeta.actProduct.unloadActProduct();
            loadLocalizedProductAndInstrs(prodUrl, function (prod) {
                CourseMeta.actProductPersistence = persistence;
                actPersistence().loadShortUserData(lmcomUserId, CourseMeta.actCompanyId, prodUrl, function (data) {
                    CourseMeta.actProductLmcomId = lmcomUserId;
                    if (data)
                        for (var p in data)
                            try {
                                CourseMeta.actProduct.getNode(p).setUserData(data[p]);
                            }
                            catch (msg) { } //dato nemusi existovat v pripade zmeny struktury kurzu
                    completed(true);
                });
            });
        }
        lib.adjustProduct = adjustProduct;
        //zajisti existenci modulu (= lokalizace a slovnik)
        function adjustMod(nd, completed) {
            var actm = nd.findParent(function (n) { return isType(n, CourseMeta.runtimeType.mod); });
            if (actm == null) {
                completed(null);
                return;
            }
            var isGramm = isType(actm, CourseMeta.runtimeType.grammar);
            if ((isGramm && actm == CourseMeta.actGrammarModule) || (!isGramm && actm == CourseMeta.actModule)) {
                completed(actm);
                return;
            } //zadna zmena modulu
            if (isGramm)
                CourseMeta.actGrammarModule = actm;
            else
                CourseMeta.actModule = actm;
            load(urlStripLast(actm.url) + '.' + Trados.actLangStr, function (locDict) {
                if (!locDict)
                    locDict = { loc: {}, dict: null };
                actm.loc = locDict.loc;
                actm.dict = locDict.dict ? RJSON.unpack(locDict.dict) : null;
                actm.expandDynamic(); /*kdy se pouziva???*/
                lib.saveProduct(function () { return completed(actm); });
            });
        }
        lib.adjustMod = adjustMod;
        //zajisti existenci cviceni (= modul)
        function adjustEx(ex, completed, lmcomUserId) {
            if (lmcomUserId === void 0) { lmcomUserId = 0; }
            adjustMod(ex, function (mod) {
                if (mod == null)
                    throw 'Missing module for exercise';
                var isGramm = isType(ex, CourseMeta.runtimeType.grammar);
                if (isGramm)
                    CourseMeta.actGrammarEx = ex;
                else
                    CourseMeta.actEx = ex;
                if (ex.page) {
                    completed(ex);
                    return;
                }
                load(ex.url, function (pgJsonML) {
                    var pg = extractEx(pgJsonML);
                    Course.localize(pg, function (s) { return localizeString(pg.url, s, (isGramm ? CourseMeta.actGrammarModule : CourseMeta.actModule).loc); });
                    if (isGramm) {
                        ex.onSetPage(pg, null);
                        completed(ex);
                    }
                    else
                        actPersistence().loadUserData(lmcomUserId == 0 ? schools.LMComUserId() : lmcomUserId, CourseMeta.actCompanyId, CourseMeta.actProduct.url, ex.url, function (exData) {
                            if (!exData)
                                exData = {};
                            ex.onSetPage(pg, exData);
                            completed(ex);
                        });
                });
            });
        }
        lib.adjustEx = adjustEx;
        //zajisti existenci adresare vsech produktu
        function adjustAllProductList(completed) {
            if (CourseMeta.allProductList) {
                completed();
                return;
            }
            load(urlStripLast(cfg.dataBatchUrl ? cfg.dataBatchUrl : '/siteroot/'), function (obj) { CourseMeta.allProductList = obj.Items; if (Login.finishMyData)
                Login.finishMyData(); completed(); });
        }
        lib.adjustAllProductList = adjustAllProductList;
        //zajisteni existence instrukci
        //export function adjustInstr(completed: () => void) {
        //  completed(); return;
        //  //if (instructions /*&& rootGrammar != null*/) { completed(); return; }
        //  //var pgUrl = '../data/instr/std/ex.js'; var locUrl = '../data/instr/std.' + Trados.actLangStr + '.js';
        //  //loadFiles([pgUrl, locUrl], ress => {
        //  //  instructions = {};
        //  //  if (!ress[0]) { completed(); return; }
        //  //  var pg = extractEx(<Array<any>>(jsonParse(ress[0]))); if (pg == null) throw 'missing instr' + pgUrl;
        //  //  pg.Items = _.filter(pg.Items, it => !_.isString(it));
        //  //  var loc: locDict = <locDict>jsonParse(ress[1]);
        //  //  Course.localize(pg, s => localizeString(pg.url, s, loc ? loc.loc : null));
        //  //  _.each(pg.Items, it => instructions[it.id.toLowerCase()] = JsRenderTemplateEngine.render("c_gen", it));
        //  //  completed();
        //  //});
        //}
        function finishHtmlDOM() {
            //Uprav content
            var cnt = $('.content-place');
            //anchory
            _.each(cnt.find("a"), function (a) {
                var href = $(a).attr('href');
                if (_.isEmpty(href))
                    return;
                if (href.match(/^(\/?\w)+$/)) {
                    $(a).attr('href', '#');
                    a.onclick = function (ev) { return gotoHref(ev, href); };
                }
            });
            //images
            //_.each(cnt.find("img"), (img: HTMLImageElement) => {
            //  var src = $(img).attr('src'); if (_.isEmpty(src)) return;
            //  src = Utils.fullUrl(src) ? src : Pager.basicDir + Utils.combineUrl(CourseMeta.actNode ? CourseMeta.actNode.url : null, src);
            //  $(img).attr('src', src);
            //});
            //help
            //doc.finishHtmlDOM();
        }
        lib.finishHtmlDOM = finishHtmlDOM;
        function info_continue() { return new CourseMeta.greenArrowInfo(CSLocalize('2882c6a2ef6343089ae90c898cac63f6', 'Continue'), false, "info", "reply", function () { return CourseMeta.gui.gotoData(null); }); }
        lib.info_continue = info_continue;
        function info_courseFinished() { return new CourseMeta.greenArrowInfo(CSLocalize('e06a4208d7c84c8ba97c1a700f00046c', 'Course completed!'), CourseMeta.actNode == CourseMeta.actCourseRoot, "info", "thumbs-up", CourseMeta.actNode == CourseMeta.actCourseRoot ? $.noop : function () { return CourseMeta.gui.gotoData(null); }); }
        lib.info_courseFinished = info_courseFinished;
        //vykresleni naladovaneho cviceni
        function displayEx(loadedEx, beforeUpdate, afterUpdate) {
            //TODO EVAL
            var pgCtrl = CourseMeta.actExPageControl = Course.finishCreatePage(loadedEx);
            CourseMeta.gui.exerciseHtml = function () { return JsRenderTemplateEngine.render("c_gen", loadedEx.page); };
            CourseMeta.gui.exerciseCls = function () { return loadedEx.page.isOldEa ? "ea" : "new-ea"; };
            pgCtrl.callInitProcs(Course.initPhase.beforeRender, function () {
                //if (!pgCtrl.isOldEa) pgCtrl.isPassive = _.all(pgCtrl.items, it => !it.isEval()); //pasivni cviceni ma vsechna isEval=false
                //pgCtrl.sound = new Course.pageSound(pgCtrl);
                if (beforeUpdate)
                    beforeUpdate(loadedEx);
                oldEAInitialization = null;
                Pager.renderHtmlEx(true, loadedEx.page.bodyStyle); //HTML rendering (kod, provedeny normalne za onUpdate)
                pgCtrl.callInitProcs(Course.initPhase.afterRender, function () {
                    if (!oldEAInitialization)
                        oldEAInitialization = function (completed) { return completed(); };
                    oldEAInitialization(function () {
                        pgCtrl.callInitProcs(Course.initPhase.afterRender2, function () {
                            loadedEx.evaluator = loadedEx.page.isOldEa ? new EA.oldToNewScoreProvider($evalRoot()) : pgCtrl;
                            loadedEx.evaluator.acceptData(loadedEx.done, loadedEx.result);
                            loadedEx.setStartTime();
                            //*** design mode => dosad do cviceni spravne hodnoty a vyhodnot jej
                            if (loadedEx.designForceEval) {
                                loadedEx.evaluator.acceptData(true, loadedEx.result);
                                if (loadedEx.evaluate()) {
                                    lib.saveProduct(function () {
                                        if (CourseMeta.actCourseRoot) {
                                            CourseMeta.actCourseRoot.refreshNumbers();
                                            var inf = loadedEx.findGreenEx().info;
                                            inf.css = CourseMeta.greenCss();
                                            lib.fillArrowInfo(inf);
                                            CourseMeta.refreshExerciseBar(loadedEx);
                                        }
                                    });
                                }
                                loadedEx.designForceEval = false;
                            }
                            if (afterUpdate)
                                afterUpdate(loadedEx);
                            //vse OK => display content
                            Pager.renderHtmlEx(false);
                            Pager.callLoaded();
                        });
                    });
                });
            });
        }
        lib.displayEx = displayEx;
        function actPersistence() { return CourseMeta.actProductPersistence == schools.memoryPersistId ? persistMemory.persistCourse : CourseMeta.persist; }
        lib.actPersistence = actPersistence;
        //save user dat
        function saveProduct(completed, lmcomUserId) {
            if (lmcomUserId === void 0) { lmcomUserId = 0; }
            if (!CourseMeta.actProduct) {
                completed();
                return;
            }
            var res = [];
            //var persistObj = actCourseRoot.
            scan(CourseMeta.actCourseRoot, function (dt) { if (!dt.userPending)
                return; dt.getUserData(function (shrt, lng, flag, key) { return res.push([key ? key : dt.url, shrt, lng, flag ? flag.toString() : '0']); }); dt.userPending = false; });
            if (res.length > 0) {
                Logger.trace_course('saveProduct lib, items=' + _.map(res, function (r) { return r[0]; }).join('; '));
                actPersistence().saveUserData(!lmcomUserId ? schools.LMComUserId() : lmcomUserId, CourseMeta.actCompanyId, CourseMeta.actProduct.url, res, function () {
                    if (cfg.target == LMComLib.Targets.scorm) {
                        CourseMeta.actCourseRoot.refreshNumbers();
                        scorm.reportProgress(CourseMeta.actCourseRoot.elapsed, CourseMeta.actCourseRoot.done ? (CourseMeta.actCourseRoot.complNotPassiveCnt == 0 || CourseMeta.actCourseRoot.ms == 0 ? 100 : Math.round(CourseMeta.actCourseRoot.s / CourseMeta.actCourseRoot.ms /*/ actCourseRoot.complNotPassiveCnt*/)) : null);
                    }
                    completed();
                });
            }
            else
                completed(); //prazdny res, NOOP
        }
        lib.saveProduct = saveProduct;
        //osetreni nezeleneho cviceni
        function treatBlueEx() {
            if (!CourseMeta.actNode || !isType(CourseMeta.actNode, CourseMeta.runtimeType.ex))
                return false;
            var findRes = CourseMeta.actNode.findGreenEx();
            findRes.info.css = 'info';
            fillArrowInfo(findRes.info);
            return true;
        }
        //zmena tasku v multitasku (=> skok pres home)
        function changeTaskInMultitask(nd1, nd2) {
            if (!isType(CourseMeta.actCourseRoot, CourseMeta.runtimeType.multiTask))
                return false;
            var p1 = nd1.findParent(function (nd) { return _.any(CourseMeta.actCourseRoot.Items, function (it) { return it == nd; }); });
            var p2 = nd2.findParent(function (nd) { return _.any(CourseMeta.actCourseRoot.Items, function (it) { return it == nd; }); });
            return p1 && p2 && p1 != p2;
        }
        //nalezne prvni neprobrane cviceni
        function findGreenExLow(nd) { return findDeepNotSkiped(nd, function (n) { return isType(n, CourseMeta.runtimeType.ex) && !n.done; }); }
        lib.findGreenExLow = findGreenExLow;
        //informace pro zelenou sipku
        function fillInfo(title, disable, css, iconId, _greenClick) {
            CourseMeta.greenTitle(title);
            CourseMeta.greenIcon(Trados.isRtl && iconId == "hand-o-left" ? "hand-o-right" : iconId);
            CourseMeta.greenCss(!CourseMeta.actCourseRoot.done && lib.keepGreen ? 'success' : css);
            CourseMeta.greenDisabled(disable);
            CourseMeta.greenClick = _greenClick;
            lib.keepGreen = false;
        }
        lib.fillInfo = fillInfo;
        function fillArrowInfo(info) { fillInfo(info.title, info.disable, info.css, info.iconId, info.greenClick); }
        lib.fillArrowInfo = fillArrowInfo;
    })(lib = CourseMeta.lib || (CourseMeta.lib = {}));
    var jsExt = '.js';
    var testModuleExercises = '@test_module_exercises';
    function setDate(dt1, dt2, min) {
        if (dt1 == 0)
            return dt2;
        if (dt2 == 0)
            return dt1;
        if (min)
            return dt2 > dt1 ? dt1 : dt2;
        else
            return dt2 < dt1 ? dt1 : dt2;
    }
    function addUserData(key, shrt, lng, data) { data.push([key, shrt, lng]); }
    CourseMeta.addUserData = addUserData;
    function isType(dt, tp) { return (dt.type & tp) == tp; }
    CourseMeta.isType = isType;
    function scan(dt, action, cond) {
        if (cond === void 0) { cond = null; }
        if (dt.Items)
            _.each(dt.Items, function (it) { return scan(it, action, cond); });
        if (!cond || cond(dt))
            action(dt);
    }
    CourseMeta.scan = scan;
    function scanParentFirst(dt, action, cond) {
        if (cond === void 0) { cond = null; }
        if (!cond || cond(dt))
            action(dt);
        if (dt.Items)
            _.each(dt.Items, function (it) { return scanParentFirst(it, action, cond); });
    }
    CourseMeta.scanParentFirst = scanParentFirst;
    function scanOfType(dt, type, action) {
        scan(dt, function (d) { return action(d); }, function (d) { return d.type == type; });
    }
    CourseMeta.scanOfType = scanOfType;
    function findDeep(dt, cond) {
        if (cond === void 0) { cond = null; }
        if (cond(dt))
            return dt;
        if (!dt.Items)
            return null;
        var res = null;
        return _.find(dt.Items, function (it) { return (res = findDeep(it, cond)) != null; }) ? res : null;
    }
    CourseMeta.findDeep = findDeep;
    function findDeepNotSkiped(dt, cond) {
        if (cond === void 0) { cond = null; }
        if (dt.isSkiped)
            return null;
        if (cond(dt))
            return dt;
        if (!dt.Items)
            return null;
        var res = null;
        return _.find(dt.Items, function (it) { return (res = findDeepNotSkiped(it, cond)) != null; }) ? res : null;
    }
    CourseMeta.findDeepNotSkiped = findDeepNotSkiped;
    function extend(d, t, tp) {
        if (tp === void 0) { tp = 0; }
        extendLow(d, t);
        d.type = d.type | tp;
    }
    function extendLow(d, t) { t = t.prototype; for (var p in t)
        d[p] = t[p]; d.constructor(); }
    CourseMeta.extendLow = extendLow;
    function localizeString(keyPrefix, data, loc) {
        if (_.isEmpty(data) || data.indexOf('{{') < 0)
            return data;
        if (!loc)
            loc = {};
        return data.replace(locEx, function (match) {
            var gm = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                gm[_i - 1] = arguments[_i];
            }
            var idVal = gm[0].split('|');
            var val = idVal.length < 2 ? null : idVal[1];
            var parts = keyPrefix ? keyPrefix.split('/') : [];
            parts.push(idVal[0]);
            var idx = 0;
            var res = '';
            var l = loc;
            while (idx < parts.length) {
                l = l[parts[idx]];
                if (!l) {
                    res = val;
                    break;
                }
                if (idx == parts.length - 1) {
                    res = l;
                    break;
                }
                idx++;
            }
            return Trados.locNormalize(res);
        });
    }
    CourseMeta.localizeString = localizeString;
    var locEx = /{{(.*?)}}/g;
    function extractEx(pgJsonML) {
        var tagsInProperties = [];
        var html = jsonML_to_Tag(pgJsonML, CourseModel.meta, null, tagsInProperties);
        var pg = html.Items[1];
        var head = html.Items[0];
        var headItems = head && head.Items ? head.Items : null;
        var tit;
        var bodyStyle;
        if (headItems) {
            var tit = _.find(headItems, function (it) { return it._tg == 'title'; });
            var bodyStyle = _.find(headItems, function (it) { return it._tg == 'style'; });
        }
        pg.title = tit && tit.Items && _.isString(tit.Items[0]) ? tit.Items[0] : '';
        pg.bodyStyle = bodyStyle && bodyStyle.Items && _.isString(bodyStyle.Items[0]) ? bodyStyle.Items[0] : '';
        pg.bodyStyle = pg.bodyStyle.replace(/\/\*.*\*\//, '');
        pg._tg = CourseModel.tbody; //hack. body ma jinak Type=body 
        if (!_.isEmpty(pg.seeAlsoStr)) {
            pg.seeAlso = _.map(pg.seeAlsoStr.split('#'), function (sa) {
                var parts = sa.split('|');
                var res = { url: parts[0], title: parts[1], type: 0 };
                return res;
            });
        }
        if (!_.isEmpty(pg.instrBody))
            pg.instrs = pg.instrBody.split('|');
        pg.propertyTags = tagsInProperties;
        return pg;
    }
    CourseMeta.extractEx = extractEx;
    //persist.readFiles muze byt nahrazeno JS soubory, ulozenymi  primo v HTML strance v <script type="text/inpagefiles" data-id="url"> scriptu.
    //json soubory jsou ulozeny ve strance jako <script type="text/inpagefiles" data-id="url">. Pouziva se pro Author, v d:\LMCom\rew\NewLMComModel\Design\CourseMeta.cs, getServerScript 
    function loadFiles(urls, completed) {
        if (!inPageFiles) {
            inPageFiles = {};
            $('script[type="text/inpagefiles"]').each(function (idx, el) {
                var sc = $(el);
                inPageFiles[sc.attr('data-id').toLowerCase()] = sc.html().replace(/^\s*/, '');
                //inPageAny = true; //existuje-li jediny type="text/inpagefiles", pak se vsechny JS berou z inPageFiles
            });
        }
        //priorita - nacti soubor z script[type="text/inpagefiles"]
        var values = _.map(urls, function (url) { return inPageFiles[url.substr(2).toLowerCase()]; }); //url zacina ../
        var fromScript = _.zip(urls, values);
        //nenactene ze scriptu => nacti z webu
        var webUrls = _.map(_.filter(fromScript, function (uv) { return !uv[1]; }), function (uv) { return uv[0]; }); //nenactene ze scriptu
        if (webUrls.length > 0) {
            CourseMeta.persist.readFiles(webUrls, function (webValues) {
                //merge fromScript a fromWeb
                var fromWeb = _.zip(webUrls, webValues);
                var fromWebIdx = 0;
                _.each(fromScript, function (kv) {
                    if (kv[1])
                        return;
                    kv[1] = fromWeb[fromWebIdx][1];
                    fromWebIdx++;
                });
                //vrat values z merged
                completed(_.map(fromScript, function (kv) { return kv[1]; }));
            });
        }
        else
            completed(values); //vse nactene ze scriptu
    }
    CourseMeta.loadFiles = loadFiles;
    var inPageFiles; //var inPageAny = false;
    function loadResponseScript(serverAndUrl, completed) {
        $.ajax(serverAndUrl, {
            async: true,
            type: 'GET',
            dataType: 'text',
            contentType: "text/plain; charset=UTF-8"
        }).done(function (txt) {
            var parts = txt.split('%#%#[[[]]]');
            for (var i = 0; i < parts.length; i += 2)
                inPageFiles[parts[i]] = parts[i + 1];
            completed(true);
        }).fail(function () {
            debugger;
            completed(false);
        });
    }
    CourseMeta.loadResponseScript = loadResponseScript;
    function load(href, completed) {
        loadFiles(['..' + href + jsExt], function (ress) { return completed(jsonParse(ress[0])); });
    }
    CourseMeta.load = load;
    function urlStripLast(url) {
        url = url.split('|')[0]; //odstran z productUrl cast |<archiveId>
        return url.charAt(url.length - 1) == '/' ? url.substr(0, url.length - 1) : url;
    }
    function loadLocalizedProductAndInstrs(url, completed) {
        url = decodeURIComponent(url);
        var href = urlStripLast(url);
        href = '..' + (href[0] == '/' ? '' : '/') + href;
        loadFiles([href + jsExt, href + '.' + Trados.actLangStr + jsExt, href + '_instrs.js'], function (ress) {
            //sitemap
            var prod = (jsonParse(ress[0]));
            if (!prod)
                throw 'error loading ' + href;
            finishLoadedProduct(prod);
            prod.url = url;
            //a jeji lokalizace
            var loc = jsonParse(ress[1]);
            if (!loc)
                loc = {};
            scan(prod, function (it) { if (it.localize)
                it.localize(function (s) { return localizeString(it.url, s, loc); }); });
            //instrukce
            var instrs = jsonParse(ress[2]);
            CourseMeta.instructions = {};
            if (instrs)
                for (var p in instrs)
                    finishInstr(p, instrs[p], loc);
            completed(prod);
        });
    }
    CourseMeta.loadLocalizedProductAndInstrs = loadLocalizedProductAndInstrs;
    function finishInstr(url, jsonML, loc) {
        var pg = extractEx((jsonML));
        if (pg == null) {
            debugger;
            throw 'missing instr';
        }
        pg.Items = _.filter(pg.Items, function (it) { return !_.isString(it); });
        Course.localize(pg, function (s) { return localizeString(pg.url, s, loc); });
        Course.scanEx(pg, function (tg) { if (!_.isString(tg))
            delete tg.id; }); //instrukce nemohou mit tag.id, protoze se ID tlucou s ID ze cviceni
        CourseMeta.instructions[url] = JsRenderTemplateEngine.render("c_genitems", pg);
    }
    CourseMeta.finishInstr = finishInstr;
    function jsonParse(str) {
        if (!str || str.length < 1)
            return null;
        var isRjson = str.substr(0, 1) == rjsonSign;
        if (isRjson)
            str = str.substr(1);
        var obj = JSON.parse(str);
        if (isRjson)
            obj = RJSON.unpack(obj);
        return obj;
    }
    CourseMeta.jsonParse = jsonParse;
    //function loadDataAndLoc(href: string, completed: (mod, loc) => void) {
    //  href = '..' + (href[0] == '/' ? '' : '/') + href;
    //  loadFiles([href + jsExt, href + '.' + Trados.actLangStr + jsExt], ress => {
    //    var pages = jsonParse(ress[0]); if (!pages) throw 'error loading ' + href;
    //    var locDict = jsonParse(ress[1]);
    //    completed(pages, locDict);
    //  });
    //}
    var rjsonSign = "@";
    $.views.helpers({
        productLineTxt: lib.productLineTxt,
        productLineTxtLower: function (productId) { return lib.productLineTxt(productId).toLowerCase(); },
    });
})(CourseMeta || (CourseMeta = {}));
//module help {
//  export function click() {
//    //return false;
//  }
//  export function finishHtmlDOM() {
//    //_.each($('.ctx-help'), el => {
//    //  var hlp = $('<div class="help-btn fa"></div>');
//    //  $(el).prepend(hlp[0]);
//    //  hlp.click(() => help.click());
//    //});
//  }
//} 
var CourseModel;
(function (CourseModel) {
    function find(dt, cond) {
        if (cond === void 0) { cond = null; }
        if (cond(dt))
            return dt;
        if (!dt.Items)
            return null;
        var res = null;
        return _.find(dt.Items, function (it) { return (res = find(it, cond)) != null; }) ? res : null;
    }
    CourseModel.find = find;
})(CourseModel || (CourseModel = {}));
var CourseMeta;
(function (CourseMeta) {
    function finishedAndLocked() { return CourseMeta.actCourseRoot.done && CourseMeta.previewMode; }
    CourseMeta.finishedAndLocked = finishedAndLocked;
    var dataImpl = (function () {
        function dataImpl() {
        }
        //funkce a akce
        dataImpl.prototype.localize = function (locProc) { this.title = locProc(this.title); };
        dataImpl.prototype.each = function (action) { if (this.Items)
            _.each(this.Items, function (it) { return action(it); }); };
        dataImpl.prototype.find = function (cond) { return (_.find(this.Items, function (it) { return cond(it); })); };
        dataImpl.prototype.findParent = function (cond) {
            var c = this;
            while (c != null) {
                if (cond(c))
                    return c;
                c = c.parent;
            }
            return null;
        };
        dataImpl.prototype.hrefCompl = function (companyId, productUrl, persistence) {
            var tp;
            if (CourseMeta.isType(this, CourseMeta.runtimeType.grammar))
                tp = CourseMeta.isType(this, CourseMeta.runtimeType.ex) ? schools.tGrammPage : schools.tGrammFolder;
            else if (CourseMeta.isType(this, CourseMeta.runtimeType.taskPretest))
                tp = schools.tCoursePretest;
            else
                tp = CourseMeta.isType(this, CourseMeta.runtimeType.ex) ? schools.tEx : schools.tCourseMeta;
            return schools.getHash(tp, companyId, productUrl, persistence, this.url);
        };
        dataImpl.prototype.href = function () {
            return this.hrefCompl(CourseMeta.actCompanyId, encodeUrlHash(CourseMeta.actProduct.url), CourseMeta.actProductPersistence);
        };
        dataImpl.prototype.iconId = function () {
            if (this == CourseMeta.actCourseRoot)
                return "book";
            else if (CourseMeta.isType(this, CourseMeta.runtimeType.ex))
                return CourseMeta.isType(this, CourseMeta.runtimeType.grammar) ? "file-o" : "edit";
            else
                return "folder-open";
        };
        return dataImpl;
    })();
    CourseMeta.dataImpl = dataImpl;
    Utils.applyMixins(dataImpl, []);
    var productImpl = (function (_super) {
        __extends(productImpl, _super);
        function productImpl() {
            _super.apply(this, arguments);
        }
        productImpl.prototype.getNode = function (url) { return (this.allNodes[url]); };
        productImpl.prototype.unloadActProduct = function () {
            if (CourseMeta.actEx)
                CourseMeta.actEx.onUnloadEx();
            if (CourseMeta.actModule)
                CourseMeta.actModule.onUnloadMod();
            CourseMeta.actNode = null;
            CourseMeta.actProduct = null;
            CourseMeta.actGrammar = null;
            CourseMeta.actCourseRoot = null;
            CourseMeta.actModule = null;
            CourseMeta.actEx = null;
        };
        return productImpl;
    })(dataImpl);
    CourseMeta.productImpl = productImpl;
    var grammarRoot = (function (_super) {
        __extends(grammarRoot, _super);
        function grammarRoot() {
            _super.apply(this, arguments);
        }
        return grammarRoot;
    })(dataImpl);
    CourseMeta.grammarRoot = grammarRoot;
    //vsechny uzlu kurzu (mimo vlastniho kurzu)
    var courseNode = (function (_super) {
        __extends(courseNode, _super);
        function courseNode() {
            _super.apply(this, arguments);
        }
        //********** GUI
        courseNode.prototype.getScoreInit = function () {
            return (this.getScoreValue = this.complNotPassiveCnt == 0 || !this.ms ? -1 : Math.round(this.s / this.ms * 100));
        };
        courseNode.prototype.progress = function () { return this.exCount - this.skipedCount == 0 ? 0 : Math.round(100 * (this.complNotPassiveCnt + this.complPassiveCnt - this.skipedCount) / (this.exCount - this.skipedCount)); };
        courseNode.prototype.statusText = function () {
            var pr = this.progress();
            return (pr > 0 ? CSLocalize('f124b261dbf9482d9c92e0c1b029f98a', 'Progress') + ' ' + pr.toString() + '%, ' : '') + this.statusStr();
        };
        courseNode.prototype.statusStr = function () {
            if (this.isSkiped)
                return CSLocalize('d96c8f11b16d4c9aa91ac8d8142267fa', 'skipped');
            return this.done ?
                CSLocalize('01fbc5f8a77c4e2491a9ed3ede74e966', 'completed') :
                (CourseMeta.greenArrowDict[this.url] ? CSLocalize('1fe40e2548924e519e9b226d4ced7bce', 'run') : CSLocalize('b7ed3c7fc67640ceb98417153f731d63', 'browse'));
        };
        courseNode.prototype.labelCls = function () { return CourseMeta.greenArrowDict[this.url] ? 'warning' : 'default'; };
        courseNode.prototype.btnIconId = function () { return CourseMeta.greenArrowDict[this.url] ? 'play' : null; };
        courseNode.prototype.iconId = function () { return 'folder-open'; };
        courseNode.prototype.contentCss = function () { var res = ''; if (_.isEmpty(this.btnIconId()))
            res += 'btn-icon-hidden'; if (this.isSkiped)
            res += ' disabled'; return res; };
        //disabledCss(): string { return this.isSkiped ? 'disabled' : ''; }
        courseNode.prototype.notRunnableMsg = function () { return null; };
        courseNode.prototype.showProgress = function () { return this.complNotPassiveCnt > 0; };
        //menu(): schoolHome.menuItem[] { return []; }
        //btnColor(): string { return }
        courseNode.prototype.btnClick = function () { CourseMeta.gui.gotoData(this); };
        courseNode.prototype.getSkiped = function () {
            var skiped = this.getSkipedTable(false);
            if (!skiped)
                return false;
            var nd = this;
            if (!skiped.allSkiped)
                return false;
            while (nd != null) {
                if (skiped.allSkiped[this.url])
                    return true;
                nd = nd.parent;
            }
            return false;
        };
        courseNode.prototype.setSkiped = function (value, withSave) {
            if (value == this.isSkiped)
                return;
            var skiped = this.getSkipedTable(true);
            if (!skiped)
                return;
            CourseMeta.scan(this, function (d) { delete skiped.allSkiped[d.url]; d.isSkiped = false; });
            if (value)
                skiped.allSkiped[this.url] = true;
            if (withSave)
                CourseMeta.lib.saveProduct(CourseMeta.gui.onReload);
        };
        courseNode.prototype.getSkipedTable = function (willModify) {
            var skRoot = this.findParent(function (it) { return CourseMeta.isType(it, CourseMeta.runtimeType.skipAbleRoot); });
            if (!skRoot)
                return null; //throw 'missin skiped root';
            if (willModify) {
                if (!skRoot.allSkiped)
                    skRoot.allSkiped = {};
                skRoot.userPending = true;
            }
            return skRoot;
        };
        courseNode.prototype.refreshNumbers = function (exCountOnly) {
            if (exCountOnly === void 0) { exCountOnly = false; }
            courseNode.doRefreshNumbers(this, exCountOnly);
        };
        courseNode.doRefreshNumbers = function (th, exCountOnly) {
            if (exCountOnly === void 0) { exCountOnly = false; }
            th.complPassiveCnt = th.complNotPassiveCnt = th.s = th.beg = th.end = th.elapsed = th.skipedCount = th.exCount = th.flag = 0;
            th.done = th.isSkiped = false;
            var isTest = CourseMeta.lib.isTest(CourseMeta.actProduct);
            if (!isTest)
                th.ms = 0;
            //skiped => done
            if (th.getSkiped()) {
                th.exCount = 0;
                th.each(function (it) { it.refreshNumbers(true); th.exCount += it.exCount; });
                th.skipedCount = th.exCount;
                th.isSkiped = true;
                return;
            }
            //agregate childs
            _.each(th.Items, function (it) {
                it.refreshNumbers(exCountOnly); //refresh childs
                th.exCount += it.exCount;
                if (exCountOnly)
                    return;
                th.skipedCount += it.skipedCount;
                if (it.getSkiped())
                    return;
                th.complPassiveCnt += it.complPassiveCnt;
                th.complNotPassiveCnt += it.complNotPassiveCnt;
                th.elapsed += it.elapsed;
                //if (it.ms >= 0) th.ms += it.ms; //zaporne score => nevyhodnotitelne
                if (!it.s)
                    it.s = 0;
                //29.4.2015, osetreni starych cviceni. Pro nadrazene uzly jsou spravne tehdy, kdyz je score vetsi nez 0.75%
                if (CourseMeta.isType(it, CourseMeta.runtimeType.ex)) {
                    if (it.complNotPassiveCnt == 1) {
                        //var e = <exImpl>it;
                        //if (e.isOldEa)
                        //  th.s += e.isOldEaPassive ? 0 : (e.ms && e.s / e.ms > 0.75 ? 1 : 0);
                        //else
                        th.s += it.s;
                        if (!isTest)
                            th.ms += it.ms;
                    }
                }
                else {
                    th.s += it.s;
                    if (!isTest)
                        th.ms += it.ms;
                }
                th.flag |= it.flag;
                th.beg = setDate(th.beg, it.beg, true);
                th.end = setDate(th.end, it.end, false);
            });
            if (exCountOnly)
                return;
            if (th.skipedCount > 0 && th.skipedCount == th.exCount) {
                th.isSkiped = true;
                return;
            } //all child skiped => return
            if (th.complNotPassiveCnt + th.complPassiveCnt + th.skipedCount == th.exCount)
                th.done = true;
            //if (th.complNotPassiveCnt == 0 && th.complPassiveCnt > 0) th.score = -1;
            //else if (th.complNotPassiveCnt > 0) th.score = Math.round(th.score / th.complNotPassiveCnt);
        };
        courseNode.prototype.availableActions = function () {
            if (this.isSkiped)
                return CourseMeta.NodeAction.createActions(this, CourseMeta.nodeAction.unskip);
            return this.done ?
                CourseMeta.NodeAction.createActions(this, CourseMeta.nodeAction.browse, this.complNotPassiveCnt + this.complPassiveCnt > 0 ? CourseMeta.nodeAction.reset : CourseMeta.nodeAction.no, CourseMeta.nodeAction.skip) :
                CourseMeta.NodeAction.createActions(this, CourseMeta.greenArrowDict[this.url] ? CourseMeta.nodeAction.run : CourseMeta.nodeAction.browse, this.complNotPassiveCnt + this.complPassiveCnt > 0 ? CourseMeta.nodeAction.reset : CourseMeta.nodeAction.no, CourseMeta.nodeAction.skip);
        };
        //dostupne akce nad node 
        courseNode.prototype.onAction = function (type) {
            switch (type) {
                case CourseMeta.nodeAction.browse:
                case CourseMeta.nodeAction.run:
                    CourseMeta.gui.gotoData(this);
                    break;
                case CourseMeta.nodeAction.skip:
                    this.setSkiped(true, true);
                    break;
                case CourseMeta.nodeAction.unskip:
                    this.setSkiped(false, true);
                    break;
                case CourseMeta.nodeAction.reset:
                    //majdi all a resetable urls
                    var resetableUrls = [];
                    var allUrls = [];
                    CourseMeta.scan(this, function (it) { allUrls.push(it.url); if (!it.doReset)
                        return; if (it.doReset())
                        resetableUrls.push(it.url); });
                    //vlastni reset funkce
                    var resetProc = function () { return CourseMeta.lib.actPersistence().resetExs(schools.LMComUserId(), CourseMeta.actCompanyId, CourseMeta.actProduct.url, resetableUrls, CourseMeta.gui.onReload); };
                    //vyrad je ze skiped a volej resetProc
                    var skiped = this.getSkipedTable(false);
                    if (skiped.allSkiped) {
                        var changed = false;
                        _.each(allUrls, function (u) { delete skiped.allSkiped[u]; changed = true; });
                        if (changed) {
                            skiped.userPending = true;
                            CourseMeta.lib.saveProduct(resetProc);
                        }
                        else
                            resetProc();
                    }
                    else
                        resetProc();
                    break;
                case CourseMeta.nodeAction.runTestAgain:
                    break;
                case CourseMeta.nodeAction.cancelTestSkip:
                    break;
            }
        };
        courseNode.prototype.setUserData = function (data) { };
        courseNode.prototype.getUserData = function (setData) { };
        courseNode.prototype.expandDynamic = function (completed) { if (completed)
            completed(); };
        return courseNode;
    })(dataImpl);
    CourseMeta.courseNode = courseNode;
    var skipAbleRoot = (function (_super) {
        __extends(skipAbleRoot, _super);
        function skipAbleRoot() {
            _super.apply(this, arguments);
        }
        skipAbleRoot.prototype.setUserData = function (data) {
            this.allSkiped = data;
            if (!this.allSkiped)
                this.allSkiped = {};
        };
        skipAbleRoot.prototype.getUserData = function (setData) {
            setData(JSON.stringify(this.allSkiped), null, CourseModel.CourseDataFlag.skipAbleRoot, null);
        };
        skipAbleRoot.prototype.doReset = function () { if (!this.allSkiped)
            return false; delete this.allSkiped; return true; };
        return skipAbleRoot;
    })(courseNode);
    CourseMeta.skipAbleRoot = skipAbleRoot;
    var multiTaskImpl = (function (_super) {
        __extends(multiTaskImpl, _super);
        function multiTaskImpl() {
            _super.apply(this, arguments);
        }
        multiTaskImpl.prototype.iconId = function () { return 'th'; };
        return multiTaskImpl;
    })(courseNode);
    CourseMeta.multiTaskImpl = multiTaskImpl;
    var modImpl = (function (_super) {
        __extends(modImpl, _super);
        function modImpl() {
            _super.apply(this, arguments);
        }
        modImpl.prototype.iconId = function () { return 'book'; };
        modImpl.prototype.setUserData = function (data) {
            this.adjustSitemap(data);
        };
        modImpl.prototype.adjustSitemap = function (urls) {
            var _this = this;
            this.oldItems = this.Items;
            var exDir = {};
            CourseMeta.scan(this, function (e) { if (!CourseMeta.isType(e, CourseMeta.runtimeType.ex))
                return; exDir[e.url] = e; });
            this.Items = _.map(urls, function (url) { var e = exDir[url]; e.parent = _this; CourseMeta.actProduct.allNodes[e.url] = e; return e; });
            this.ms = 0;
            this.each(function (e) {
                //if (e.isOldEa)
                //  //this.ms += e.isOldEaPassive ? 0 : 1;
                //  throw 'oldEA exercise cannot be in test'; //pz 30.4.2015
                //else
                _this.ms += e.ms;
                e.testMode = CSLocalize('b8601c3b0385401b912f5f104b8d728e', 'Test');
            });
        };
        modImpl.prototype.getUserData = function (setData) {
            setData(JSON.stringify(_.map(this.Items, function (it) { return it.url; })), null, CourseModel.CourseDataFlag.modImpl, null);
        };
        modImpl.prototype.onUnloadMod = function () { this.dict = null; this.loc = null; };
        modImpl.prototype.doReset = function () { if (!this.oldItems)
            return false; this.Items = this.oldItems; delete this.oldItems; return true; };
        modImpl.prototype.expandDynamic = function () {
            if (this.Items == null)
                return false;
            var taskGroups = _.filter(this.Items, function (it) { return CourseMeta.isType(it, CourseMeta.runtimeType.testTaskGroup); });
            if (taskGroups.length != this.Items.length)
                return false;
            //var dynData = this.getDynamic(); if (!dynData) return false;
            var urls = _.flatten(_.map(taskGroups, function (grp) { return _.sample(_.map(grp.Items, function (e) { return e.url; }), cfg.testGroup_debug ? 1 : grp.take); }));
            this.adjustSitemap(urls);
            this.userPending = true;
            return true;
        };
        modImpl.prototype.refreshNumbers = function (exCountOnly) {
            if (exCountOnly === void 0) { exCountOnly = false; }
            var th = this;
            var dynData = th.getDynamic();
            if (dynData) {
                th.complPassiveCnt = th.complNotPassiveCnt = th.s = th.beg = th.end = th.elapsed = th.skipedCount = th.exCount = 0;
                th.done = th.isSkiped = false;
                //_.each(dynData.groups, g => th.exCount += cfg.testGroup_debug ? 1 : g.take);
                _.each(dynData.Items, function (g) { return th.exCount += cfg.testGroup_debug ? 1 : g.take; });
                if (th.getSkiped()) {
                    th.isSkiped = true;
                    th.skipedCount = th.exCount;
                }
            }
            else
                courseNode.doRefreshNumbers(th, exCountOnly);
        };
        modImpl.prototype.getDynamic = function () {
            var dynData = (this.Items ? this.Items[0] : null);
            return dynData && CourseMeta.isType(dynData, CourseMeta.runtimeType.dynamicModuleData) ? dynData : null;
        };
        return modImpl;
    })(courseNode);
    CourseMeta.modImpl = modImpl;
    function setDate(dt1, dt2, min) {
        if (!dt1)
            return dt2;
        if (!dt2)
            return dt1;
        if (min)
            return dt2 > dt1 ? dt1 : dt2;
        else
            return dt2 < dt1 ? dt1 : dt2;
    }
    var exImpl = (function (_super) {
        __extends(exImpl, _super);
        function exImpl() {
            _super.apply(this, arguments);
            this.flag = 0;
        }
        //isOldEa: boolean;
        //isOldEaPassive: boolean;
        //ms: number;
        exImpl.prototype.iconId = function () {
            if ((this.parent.type & (CourseMeta.runtimeType.taskTestInCourse | CourseMeta.runtimeType.taskTestSkill | CourseMeta.runtimeType.taskPretestTask)) != 0)
                return 'puzzle-piece';
            if (this.findParent(function (it) { return CourseMeta.isType(it, CourseMeta.runtimeType.grammar); }))
                return 'file-o';
            return 'edit';
        };
        exImpl.prototype.doReset = function () {
            var th = this;
            if (!th.result && !th.done)
                return false;
            delete th.done;
            delete th.s;
            delete th.beg;
            delete th.end;
            delete th.elapsed;
            th.onUnloadEx();
            return true;
        };
        exImpl.prototype.refreshNumbers = function (exCountOnly) {
            if (exCountOnly === void 0) { exCountOnly = false; }
            var th = this;
            if (exCountOnly) {
                th.exCount = 1;
                return;
            }
            th.complPassiveCnt = th.complNotPassiveCnt = th.skipedCount = 0;
            th.exCount = 1;
            th.isSkiped = false;
            if (!th.elapsed)
                th.elapsed = 0;
            if (th.getSkiped()) {
                th.skipedCount = 1;
                th.isSkiped = true;
                return;
            } //skiped => done
            if (th.done)
                if (!th.ms)
                    th.complPassiveCnt = 1;
                else
                    th.complNotPassiveCnt = 1;
        };
        exImpl.prototype.onUnloadEx = function () { delete this.page; delete this.result; delete this.evaluator; };
        exImpl.prototype.setUserData = function (user) {
            exImpl.asignResult(user, this);
        };
        exImpl.prototype.getUserData = function (setData) {
            var res = {};
            exImpl.asignResult(this, res);
            if (this.done)
                res.flag |= CourseModel.CourseDataFlag.done;
            if (this.complPassiveCnt == 1)
                res.flag |= CourseModel.CourseDataFlag.passive;
            var flag = CourseModel.CourseDataFlag.ex;
            if (this.parent && CourseMeta.isType(this.parent, CourseMeta.runtimeType.taskTestSkill))
                flag |= CourseModel.CourseDataFlag.testEx;
            setData(JSON.stringify(res), JSON.stringify(this.result), res.flag | flag, null);
        };
        exImpl.prototype.onSetPage = function (page, result) {
            this.page = page;
            if (!result)
                result = {};
            this.result = result;
            if (page.evalPage && !page.isOldEa)
                this.ms = page.evalPage.maxScore; //
            //if (page.evalPage) this.ms = page.isOldEa && !page.oldEaIsPassive ? 1 : page.evalPage.maxScore;
            //if (!page.isOldEa) page.isPassive = !CourseModel.find(page, data => data._tg && CourseModel.hasStatus(data, CourseModel.tgSt.isEval)); //pasivni cviceni nema zadne kontrolky
        };
        exImpl.prototype.setStartTime = function () {
            this.startTime = new Date().getTime();
            if (!this.beg)
                this.beg = Utils.dayToInt(new Date());
        };
        exImpl.asignResult = function (from, to) { to.beg = from.beg; to.elapsed = from.elapsed; to.end = from.end; to.ms = from.ms; to.s = from.s; to.done = from.done; to.flag = from.flag; };
        exImpl.prototype.findGreenEx = function () {
            var _this = this;
            var th = this;
            if (th.isSkiped)
                return null;
            var selfIdx = _.indexOf(th.parent.Items, this);
            var parentCount = 0;
            th.parent.each(function (nd) { if (nd.isSkiped || !CourseMeta.isType(nd, CourseMeta.runtimeType.ex))
                return; parentCount++; });
            var notSkipIdx = 0;
            th.parent.find(function (nd) { if (!nd.isSkiped)
                notSkipIdx++; return nd == th; });
            var idxFrom = ' (' + notSkipIdx.toString() + '/' + parentCount.toString() + ')';
            var res = { grEx: this, info: new CourseMeta.greenArrowInfo(CSLocalize('4f40988151d646308e50bf2225211081', 'Continue'), false, 'success', 'hand-o-right', function () { return CourseMeta.gui.gotoData(_this); }) };
            if (!th.page)
                return res; //pripad, kdy je cviceni na rade ale jsem na jine strance, tudiz jeste neni naladovano};
            var lastInMod;
            var nextEx = null;
            //dalsi cviceni stejneho parenta
            for (var i = selfIdx + 1; i < this.parent.Items.length; i++) {
                var it = (this.parent.Items[i]);
                if (CourseMeta.isType(it, CourseMeta.runtimeType.ex) && !it.isSkiped) {
                    nextEx = it;
                    break;
                }
            }
            lastInMod = nextEx == null;
            //jdi na dalsi node
            var nd = lastInMod && !th.testMode ? th.parent : nextEx; //nd je null pro posledni polozku testu
            //var gotoData = () => gui.gotoData(nd);
            if (CourseMeta.actNode != this) {
                res.info.title = CSLocalize('9a48bff2169240759d9e5b1c87618c1b', 'Continue');
                res.info.greenClick = function () { return CourseMeta.gui.gotoData(th); };
            }
            else if (!th.testMode && !th.page.isPassivePage() && !th.done) {
                res.info.title = CourseMeta.actNode == this ? CSLocalize('0b129b06c25b49908cd4576008025495', 'Evaluate') + idxFrom : CSLocalize('89024e890690456aaaf0251de3225fd6', 'Continue');
                res.info.greenClick = function () {
                    if (_this.evaluate()) {
                        CourseMeta.lib.saveProduct(function () {
                            CourseMeta.actCourseRoot.refreshNumbers();
                            //if (cfg.target == LMComLib.Targets.scorm) {
                            //  scorm.reportProgress(actCourseRoot.elapsed, actCourseRoot.done ? (actCourseRoot.complNotPassiveCnt == 0 ? 100 : Math.round(actCourseRoot.score / actCourseRoot.complNotPassiveCnt)) : null);
                            //}
                            var inf = th.findGreenEx().info;
                            inf.css = CourseMeta.greenCss();
                            CourseMeta.lib.fillArrowInfo(inf);
                            CourseMeta.refreshExerciseBar(th);
                        });
                    }
                };
            }
            else {
                res.info.title = (th.testMode ? th.testMode : (lastInMod ? CSLocalize('d874aa91bc914690ad75fe97a707e196', 'Completed') : CSLocalize('ba88aabeae6d4d59b235c927472c6440', 'Next'))) + idxFrom;
                if (!th.testMode && lastInMod)
                    res.info.iconId = 'th-list';
                res.info.greenClick = function () {
                    if (!th.done) {
                        if (_this.evaluate()) {
                            //if (cfg.target == LMComLib.Targets.scorm) {
                            //  actCourseRoot.refreshNumbers();
                            //  scorm.reportProgress(actCourseRoot.elapsed, actCourseRoot.done ? (actCourseRoot.complNotPassiveCnt == 0 ? 100 : Math.round(actCourseRoot.score / actCourseRoot.complNotPassiveCnt)) : null);
                            //}
                            CourseMeta.lib.saveProduct(function () { return CourseMeta.gui.gotoData(nd); });
                        }
                    }
                    else {
                        //human eval pro kurzy, zatim se asi nepouziva, pouzije se jen 'gui.gotoData(nd)'
                        var humanEval = Course.humanEvalControlImpl.useEvalForms(th);
                        if (humanEval === undefined)
                            CourseMeta.gui.gotoData(nd);
                        else if (humanEval == true)
                            CourseMeta.lib.saveProduct(function () { return CourseMeta.gui.gotoData(nd); });
                        else
                            return;
                    }
                };
            }
            return res;
        };
        exImpl.prototype.evaluate = function () {
            //aktualizace casu na konci cviceni
            var now = new Date().getTime();
            var delta = Math.min(exImpl.maxDelta, Math.round((now - this.startTime) / 1000));
            if (!this.elapsed)
                this.elapsed = 0;
            this.elapsed += delta;
            this.end = Utils.dayToInt(new Date());
            this.userPending = true;
            //pasivni
            if (this.page.isPassivePage()) {
                this.page.processReadOnlyEtc(true, true); //readonly a skipable controls
                this.done = true;
                return true;
            }
            //zjisteni score
            this.evaluator.provideData(this.result);
            var score = this.evaluator.getScore();
            if (!score) {
                debugger;
                throw "!score"; /*this.page.isPassive = true;*/
                this.done = true;
                return true;
            }
            //cviceni je mozne vyhodnotit
            var exerciseOK = this.testMode ? true : (score == null || score.ms == 0 || (score.s / score.ms * 100) >= 75);
            if (!exerciseOK && !CourseMeta.gui.alert(CourseMeta.alerts.exTooManyErrors, true)) {
                this.userPending = false;
                return false;
            } //je hodne chyb a uzivatel chce cviceni znova
            this.page.processReadOnlyEtc(true, true); //readonly a skipable controls
            if (!this.testMode)
                this.evaluator.acceptData(true, this.result);
            this.done = true;
            if (this.page.isOldEa)
                this.ms = score.ms;
            else if (this.ms != score.ms) {
                debugger;
                throw "this.maxScore != score.ms";
            }
            this.s = score.s;
            this.flag = score.flag;
            return true;
        };
        exImpl.prototype.testEvaluate = function () {
            this.evaluator.provideData(this.result);
            this.userPending = true;
            var score = this.evaluator.getScore();
            this.done = true;
            if (this.ms != score.ms) {
                debugger;
                throw "this.maxScore != score.ms";
            }
            this.s = score.s;
            this.flag = score.flag;
        };
        exImpl.prototype.reset = function () {
            if (!this.done)
                return;
            this.done = false;
            if (!this.page.isPassivePage())
                this.evaluator.resetData(this.result);
            this.userPending = true;
            CourseMeta.saveAndReload();
        };
        exImpl.maxDelta = 10 * 60; //10 minut
        return exImpl;
    })(courseNode);
    CourseMeta.exImpl = exImpl;
    var grammEx = (function (_super) {
        __extends(grammEx, _super);
        function grammEx() {
            _super.apply(this, arguments);
        }
        return grammEx;
    })(exImpl);
    CourseMeta.grammEx = grammEx;
    var courseImpl = (function (_super) {
        __extends(courseImpl, _super);
        function courseImpl() {
            _super.apply(this, arguments);
        }
        return courseImpl;
    })(courseNode);
    CourseMeta.courseImpl = courseImpl;
    var courseTestImpl = (function (_super) {
        __extends(courseTestImpl, _super);
        function courseTestImpl() {
            _super.apply(this, arguments);
        }
        return courseTestImpl;
    })(modImpl);
    CourseMeta.courseTestImpl = courseTestImpl;
    (function (taskPretestStatus) {
        taskPretestStatus[taskPretestStatus["questionaries"] = 0] = "questionaries";
        taskPretestStatus[taskPretestStatus["firstTest"] = 1] = "firstTest";
        taskPretestStatus[taskPretestStatus["lastTest"] = 2] = "lastTest";
        taskPretestStatus[taskPretestStatus["done"] = 3] = "done";
    })(CourseMeta.taskPretestStatus || (CourseMeta.taskPretestStatus = {}));
    var taskPretestStatus = CourseMeta.taskPretestStatus;
    var pretestTaskImpl = (function (_super) {
        __extends(pretestTaskImpl, _super);
        function pretestTaskImpl() {
            _super.apply(this, arguments);
        }
        return pretestTaskImpl;
    })(modImpl);
    CourseMeta.pretestTaskImpl = pretestTaskImpl;
    var pretestImpl = (function (_super) {
        __extends(pretestImpl, _super);
        function pretestImpl() {
            _super.apply(this, arguments);
        }
        pretestImpl.prototype.iconId = function () { return 'puzzle-piece'; };
        pretestImpl.prototype.showProgress = function () { return false; };
        pretestImpl.prototype.doReset = function () { var th = this; if (!th.pretestStatus)
            return false; delete th.pretestStatus; delete th.firstTestIdx; delete th.lastTestIdx; delete th.questionnaire; return true; };
        pretestImpl.prototype.initFields = function () {
            var _this = this;
            if (this.questionnaire)
                return;
            if (!this.pretestStatus)
                this.pretestStatus = taskPretestStatus.questionaries;
            this.questionnaire = CourseMeta.findDeep(this, function (it) { return it.name == 'questionnaire'; });
            this.result = CourseMeta.findDeep(this, function (it) { return it.name == 'result'; });
            this.pretests = [];
            this.each(function (it) { if (CourseMeta.isType(it, CourseMeta.runtimeType.taskPretestTask))
                _this.pretests.push(it); });
        };
        pretestImpl.prototype.findGreenEx = function () {
            var _this = this;
            var th = this;
            return th.pretestStatus == taskPretestStatus.done ? null : { grEx: this, info: new CourseMeta.greenArrowInfo('Pretest', false, 'success', 'hand-o-right', function () { return CourseMeta.gui.gotoData(_this); }) };
        };
        pretestImpl.prototype.pretestContinue = function () {
            var th = this;
            if (CourseMeta.actEx != th.actPretestEx())
                throw 'actEx != th.actPretestEx()';
            th.initFields();
            var nextEx;
            switch (th.pretestStatus) {
                case taskPretestStatus.questionaries:
                    CourseMeta.actEx.evaluate();
                    CourseMeta.actCourseRoot.refreshNumbers();
                    //zpracuj dotaznik
                    //TODO
                    th.firstTestIdx = 0;
                    th.pretestStatus = taskPretestStatus.firstTest;
                    th.userPending = true;
                    nextEx = CourseMeta.lib.findGreenExLow(th.pretests[th.firstTestIdx]);
                    break;
                case taskPretestStatus.firstTest:
                    CourseMeta.actEx.evaluate();
                    CourseMeta.actCourseRoot.refreshNumbers();
                    nextEx = CourseMeta.lib.findGreenExLow(th.pretests[th.firstTestIdx]);
                    if (!nextEx) {
                        //zpracuj prvni pretest
                        //TODO
                        th.lastTestIdx = 1;
                        th.pretestStatus = taskPretestStatus.lastTest;
                        th.userPending = true;
                        nextEx = CourseMeta.lib.findGreenExLow(th.pretests[th.lastTestIdx]);
                    }
                    break;
                case taskPretestStatus.lastTest:
                    CourseMeta.actEx.evaluate();
                    CourseMeta.actCourseRoot.refreshNumbers();
                    nextEx = CourseMeta.lib.findGreenExLow(th.pretests[th.lastTestIdx]);
                    if (!nextEx) {
                        //zpracuj druhy pretest
                        //TODO
                        th.pretestStatus = taskPretestStatus.done;
                        th.userPending = true;
                        nextEx = th.result;
                    }
                    break;
                case taskPretestStatus.done:
                    break;
            }
            CourseMeta.lib.saveProduct(function () {
                if (nextEx)
                    CourseMeta.lib.adjustEx(nextEx, function () {
                        return CourseMeta.lib.displayEx(nextEx, function (ex) { return Pager.clearHtml(); }, null);
                    });
                else
                    CourseMeta.gui.gotoData(null);
            });
        };
        pretestImpl.prototype.actPretestEx = function () {
            var th = this;
            th.initFields();
            switch (th.pretestStatus) {
                case taskPretestStatus.questionaries: return th.questionnaire;
                case taskPretestStatus.firstTest: return CourseMeta.lib.findGreenExLow(th.pretests[th.firstTestIdx]);
                case taskPretestStatus.lastTest: return CourseMeta.lib.findGreenExLow(th.pretests[th.lastTestIdx]);
                default: return th.result;
            }
        };
        pretestImpl.prototype.initModel = function () {
            var th = this;
            var ex = th.actPretestEx();
            var res = { grEx: ex, info: null };
            if (CourseMeta.actCourseRoot.done)
                res.info = CourseMeta.lib.info_courseFinished();
            else if (ex == th.result)
                res.info = CourseMeta.lib.info_continue();
            else
                res.info = new CourseMeta.greenArrowInfo('Pretest', false, 'success', 'hand-o-right', function () { return th.pretestContinue(); });
            return res;
        };
        pretestImpl.prototype.refreshNumbers = function (exCountOnly) {
            if (exCountOnly === void 0) { exCountOnly = false; }
            var th = this;
            th.initFields();
            var tempItems = th.Items;
            th.Items = [];
            th.Items.push(th.questionnaire);
            if (th.pretestStatus > taskPretestStatus.questionaries)
                th.Items.push(th.pretests[th.firstTestIdx]);
            if (th.pretestStatus > taskPretestStatus.firstTest)
                th.Items.push(th.pretests[th.lastTestIdx]);
            courseNode.doRefreshNumbers(th, exCountOnly);
            th.Items = tempItems;
        };
        pretestImpl.prototype.setUserData = function (user) {
            pretestImpl.asignResult(user, this);
        };
        pretestImpl.prototype.getUserData = function (setData) {
            var res = {};
            pretestImpl.asignResult(this, res);
            setData(JSON.stringify(res), null, CourseModel.CourseDataFlag.pretestImp, null);
        };
        pretestImpl.asignResult = function (from, to) { to.pretestStatus = from.pretestStatus; to.firstTestIdx = from.firstTestIdx; to.lastTestIdx = from.lastTestIdx; };
        return pretestImpl;
    })(courseNode);
    CourseMeta.pretestImpl = pretestImpl;
})(CourseMeta || (CourseMeta = {}));
var CourseModel;
(function (CourseModel) {
    function registerClassToInterface(meta, tg, cls) {
        if (!meta.classDir)
            meta.classDir = {};
        meta.classDir[tg] = cls;
    }
    CourseModel.registerClassToInterface = registerClassToInterface;
    CourseModel.tspan = "span";
    CourseModel.tp = "p";
    CourseModel.ta = "a";
    CourseModel.tbr = "br";
    CourseModel.tdiv = "div";
    CourseModel.thr = "hr";
    function hasStatus(tg, st) {
        var tp = CourseModel.meta.types[tg._tg];
        return !tp ? false : (tp.st & st) == st;
    }
    CourseModel.hasStatus = hasStatus;
    function hasStatusLow(status, st) {
        return (status & st) == st;
    }
    CourseModel.hasStatusLow = hasStatusLow;
    function metaObjRootTag(metaObj) {
        if (metaObj === void 0) { metaObj = null; }
        return metaObj.rootTagName;
    }
    function ancestorsAndSelf(type, metaObj) {
        if (metaObj === void 0) { metaObj = null; }
        var ancs = ancestorsAndSelfObj(type, metaObj);
        return !ancs ? null : _.map(ancestorsAndSelfObj(type, metaObj), function (m) { return m.name; });
    }
    CourseModel.ancestorsAndSelf = ancestorsAndSelf;
    function isDescendantOf(self, ancestor) {
        return _.any(ancestorsAndSelfObj(self), function (a) { return a.name == ancestor; });
    }
    CourseModel.isDescendantOf = isDescendantOf;
    function ancestorsAndSelfObj(type, metaObj) {
        if (metaObj === void 0) { metaObj = null; }
        if (!metaObj)
            metaObj = CourseModel.meta;
        var res = [];
        var obj = metaObj.types[type];
        if (!obj)
            return null;
        var name = type;
        while (true) {
            res.push({ meta: obj, name: name });
            if (name == metaObjRootTag(metaObj))
                break;
            name = obj.anc;
            obj = metaObj.types[name];
        }
        return res;
    }
    CourseModel.ancestorsAndSelfObj = ancestorsAndSelfObj;
    function descendants(type, metaObj) {
        if (metaObj === void 0) { metaObj = null; }
        if (!metaObj)
            metaObj = CourseModel.meta;
        var res = [];
        for (var p in metaObj.types) {
            if (p == metaObjRootTag(metaObj))
                continue; //ttag neni anc niceho
            var anc = p;
            while (true) {
                anc = metaObj.types[anc].anc;
                if (anc == type) {
                    res.push(p);
                    break;
                } //'type' je mezi nacestory 'p'
                if (anc == metaObjRootTag(metaObj))
                    break;
            }
        }
        while (true) {
            res.unshift(type);
            type = metaObj.types[type].anc;
            if (type == metaObjRootTag(metaObj))
                break;
        }
        return res;
    }
    CourseModel.descendants = descendants;
    function getPropInfo(type, propName, metaObj) {
        if (metaObj === void 0) { metaObj = null; }
        var res = null;
        _.find(ancestorsAndSelfObj(type, metaObj), function (m) { res = m.meta.props ? m.meta.props[propName] : null; return !!res; });
        return res;
    }
    CourseModel.getPropInfo = getPropInfo;
    function getPropInfos(type, metaObj) {
        if (metaObj === void 0) { metaObj = null; }
        var res = [];
        _.each(ancestorsAndSelfObj(type, metaObj).reverse(), function (m) {
            if (!m.meta.props)
                return;
            for (var p in m.meta.props)
                res.push({ name: p, meta: m.meta.props[p] });
        });
        return res;
    }
    CourseModel.getPropInfos = getPropInfos;
})(CourseModel || (CourseModel = {}));
//module CourseModel {
//  export class itemObj implements ItemObj {
//    Item: tag;
//  }
//  export class tag implements Tag {
//    constructor() {
//      this.tagInfo = tagInfos[this.Type];
//    }
//    //Tag
//    Type: string;
//    Classes: string;
//    id: string;
//    Width: string;
//    style: string;
//    specItems: Array<tag>;
//    Items: Array<tag>;
//    Item: itemObj;
//    //other
//    parent: tag;
//    myPage: page;
//    localize(locProc: (s: string) => string): void { }
//    tagInfo: TagStatic;
//  }
//  export class text extends tag implements Text {
//    Title: string;
//    localize(locProc: (s: string) => string): void {
//      super.localize(locProc);
//      this.Title = locProc(this.Title);
//    }
//  }
//  export class control extends tag implements Result {
//    //constructor(public data: CourseModel.Tag, public myPage: Page) {
//    //  this.tagInfo = CourseModel.tagInfos[data.Type];
//    //  (<any>data).control = this;
//    //  if (data.Item && data.Item.Item) {
//    //    data.specItems = _.clone(data.Items);
//    //    data.Items.unshift(data.Item.Item);
//    //    data.Item = <any>(data.Item.Item); //hack, dereference
//    //  } else
//    //    data.specItems = data.Items;
//    //}
//    tagInfo: CourseModel.TagStatic;
//    parent: control; // parent control
//    childs: Array<control> = []; //child controls (nikoliv tags, pouze controls)
//    result: CourseModel.Result; //pointer na vysledek kontrolky
//    status(): LMComLib.ExerciseStatus { return this.myPage.st; }
//    createResult(forceEval: boolean = false): CourseModel.Result { throw "not overwrited"; } //inicializace objektu s vysledkem kontrolky
//    provideData(data: CourseModel.Result): void { throw "not overwrited"; } //predani dat z kontrolky do persistence
//    acceptData(exSt: LMComLib.ExerciseStatus, userData: CourseModel.Result): void { } //zmena stavu kontrolky na zaklade persistentnich dat
//    score(): CourseModel.Score { var c = this.isCorrect(); return { ms: 1, s: c ? 1 : 0, needsHumanEval: false }; } //spocti score kontrolky
//    isCorrect(): boolean { throw "not overwrited"; } //pro 0 x 1 score
//    finishLoading: (completed: () => void) => void; //dokonceni kontrolky
//    finish(): void { }
//    selfElement() { return Course.idToElement(this.id); }
//    getItem(id: string): control { return this.myPage.getItem(id); }
//    //style(): string {
//    getStyle(): string {
//      var res = this.widthStyle();
//      if (res != null) return " style='" + res + "'";
//    }
//    widthStyle() { return Course.getWidthStyle(this.Width); }
//    forDescendants(action: (ctrl: control) => void) {
//      _.each(this.childs, c => { action(c); c.forDescendants(action); });
//    }
//  }
//  export class page extends control implements Page, PageUser {
//    //Page
//    //info: schools.page; //obsolete
//    url: string;
//    order: number;
//    title: string;
//    instrTitle: string;
//    instrs: Array<string>;
//    seeAlso: Array<schools.seeAlsoLink>;
//    externals: Array<string>;
//    courseSeeAlsoStr: string;
//    CrsId: LMComLib.CourseIds;
//    isPassive: boolean;
//    isOldEA: boolean;
//    //sitemapIgnore: boolean;
//    //PageUser
//    i: number;
//    s: Score;
//    st: LMComLib.ExerciseStatus;
//    bt: number;
//    et: number;
//    t: number;
//    Results: any;
//    //other
//    controls: { [id: string]: control; };
//    localize(locProc: (s: string) => string): void {
//      super.localize(locProc);
//      this.title = locProc(this.title);
//    }
//    items: Array<control> = [];
//    getItem(id: string): control { return _.find(this.items, (c: control) => c.id == id); }
//    normalStatus = ko.observable<boolean>(false);
//    //sound: pageSound; TODO
//    finishPageLoading(completed: () => void) {
//      var compl = () => {
//        //this.sound = new pageSound(this); TODO
//        this.isPassive = _.all(this.items, (it: control) => CourseModel.tagInfos[it.Type].noEval); //pasivni cviceni nema zadne kontrolky
//        completed();
//      };
//      if (typeof $.ajax == 'undefined') { //bez JQuery
//        _.each(this.items, ctrl => ctrl.finishLoading(() => { }));
//        compl(); return;
//      }
//      var promises = _.compact(_.map(this.items, ctrl => {
//        var defered = $.Deferred();
//        ctrl.finishLoading(defered.resolve);
//        return defered.promise();
//      }));
//      $.whenall(promises).done(compl);
//    }
//    /*** IScoreProvider ***/
//    provideData(exData: { [ctrlId: string]: Object; }): void { _.each(this.items, (ctrl: control) => { if (ctrl.tagInfo.noEval) return; ctrl.provideData(exData[ctrl.id]); }); }
//    acceptData(exSt: LMComLib.ExerciseStatus, exData: { [ctrlId: string]: Object; }): void {
//      _.each(this.items, (ctrl: control) => { ctrl.acceptData(exSt, exData[ctrl.id]); });
//      this.normalStatus(exSt == LMComLib.ExerciseStatus.Normal);
//    }
//    resetData(exData: { [ctrlId: string]: Object; }): void {
//      _.each(this.items, (ctrl: control) => { if (ctrl.tagInfo.noEval) return; ctrl.result = exData[ctrl.id] = ctrl.createResult(); });
//      this.acceptData(LMComLib.ExerciseStatus.Normal, exData);
//    }
//    get_score(): number[] { throw "not implemented"; } //implementuje stary EA. V Exercise.ts se meni na getScore
//    getScoreLow(): CourseModel.Score {
//      var res: CourseModel.Score = { ms: 0, s: 0, needsHumanEval: false };
//      _.each(this.items, (ctrl: control) => {
//        if (ctrl.tagInfo.noEval) return;
//        var sc = ctrl.score();
//        res.ms += sc.ms; res.s += sc.s; res.needsHumanEval = res.needsHumanEval || sc.needsHumanEval;
//      });
//      return res;
//    }
//    getScore: () => CourseModel.Score;
//    status(): LMComLib.ExerciseStatus { return this.st; }
//    //Helper
//    find(id: string): control { return _.find(this.items, it => it.id == id); }
//    filter(cond: (c: control) => boolean): control[] { return _.filter(this.items, it => cond(it)); }
//  }
//  export class checkItem extends control implements CheckItem, CheckItemResult {
//    //CheckItem
//    CorrectValue: boolean;
//    //CheckItemResult
//    TextId: CheckItemTexts;
//    Value: boolean;
//  }
//  export class pairing extends control implements Pairing, PairingResult {
//    Value: Array<number>;
//  }
//  export class singleChoiceLow extends control implements SingleChoiceLow, SingleChoiceResult {
//    CorrectValue: number;
//    Data: Array<string>;
//    Value: number;
//  }
//  export class singleChoice extends singleChoiceLow {
//  }
//  export class wordSelection extends singleChoiceLow {
//    Words: string;
//  }
//  export function scan(dt: Tag, action: (dt: Tag) => void, cond: (dt: Tag) => boolean = null): void {
//    if (dt.Items) _.each(dt.Items, it => scan(it, action, cond));
//    if (!cond || cond(dt)) action(dt);
//  }
//  export function find(dt: Tag, cond: (dt: Tag) => boolean = null): Tag {
//    if (cond(dt)) return dt; if (!dt.Items) return null;
//    var res: Tag = null;
//    return _.find(dt.Items, it => (res = find(it, cond)) != null) ? res : null;
//  }
//  export function finishAndLocalize(pgLow: Page, locProc: (s: string) => string): void {
//    var pg = <page>pgLow;
//    pg.controls = {};
//    scan(pg, (dt: tag) => {
//      if (dt.Items) _.each(dt.Items, (it: tag) => { it.parent = dt; it.myPage = pg; });
//      switch (dt.Type) {
//        case tPage: Utils.extend(dt, page); break;
//        case tText: Utils.extend(dt, text); break;
//        case tGapFill: Utils.extend(dt, tag); break;
//        case tPairing: Utils.extend(dt, pairing); break;
//        case tSingleChoice: Utils.extend(dt, singleChoice); break;
//        case tWordSelection: Utils.extend(dt, wordSelection); break;
//        case tCheckItem: Utils.extend(dt, tag); break;
//        case tPossibilities: Utils.extend(dt, tag); break;
//        case tDragSource: Utils.extend(dt, tag); break;
//        case tDragTarget: Utils.extend(dt, tag); break;
//        case tPassiveDialog: Utils.extend(dt, tag); break;
//        case tMediaDialog: Utils.extend(dt, tag); break;
//        case tMediaText: Utils.extend(dt, tag); break;
//        case tMediaBigMark: Utils.extend(dt, tag); break;
//        case tMediaBar: Utils.extend(dt, tag); break;
//        case tMediaTitle: Utils.extend(dt, tag); break;
//        case tMediaVideo: Utils.extend(dt, tag); break;
//        case tMediaReplica: Utils.extend(dt, tag); break;
//        case tSndSent: Utils.extend(dt, tag); break;
//        case tSndReplica: Utils.extend(dt, tag); break;
//        default: Utils.extend(dt, tag); break;
//      };
//      if (dt.id) pg.controls[dt.id] = <any>dt;
//      dt.localize(locProc);
//    });
//  }
//  //**** normalize GapFill string
//  export function normalize(value: string): string {
//    if (value == null || value == '') return value;
//    value = value.toLowerCase();
//    var st = 0; var res = "";
//    for (var i = 0; i < value.length; i++) {
//      var ch = value.charAt(i);
//      switch (st) {
//        case 0: if (!Unicode.isLeterOrDigit(ch)) continue; res += ch; st = 1; break; //pocatecni whitespaces
//        case 1: if (!Unicode.isLeterOrDigit(ch)) { st = 2; continue; } res += ch; break; //neni whitestapce
//        case 2: if (!Unicode.isLeterOrDigit(ch)) continue; res += " "; res += ch; st = 1; break; //dalsi whitespaces
//      }
//    }
//    return res;
//  }
//}  
var JsRenderTemplateEngine;
(function (JsRenderTemplateEngine) {
    JsRenderTemplateEngine.tmpl = function (id) { return $.views.templates[id]; };
})(JsRenderTemplateEngine || (JsRenderTemplateEngine = {}));
var ko = { observable: function () { return { subscribe: function () { } }; } };
var Utils;
(function (Utils) {
    Utils.randomizeArray = function (array) {
        for (var i = array.length - 1; i > 0; i--) {
            var j = i;
            while (j == i)
                j = Math.floor(Math.random() * (i + 1));
            var temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
        return array;
    };
})(Utils || (Utils = {}));
$.views.helpers({
    tmpl: JsRenderTemplateEngine.tmpl,
    T: JsRenderTemplateEngine.tmpl,
});
var DesignDictSource;
(function (DesignDictSource) {
    function compileNewExerciseLow(data) {
        for (var id in data.templates)
            $.views.templates(id, data.templates[id]);
        //var pg = new Course.Page(data.page, { i: 1, s: { s: 0, ms: 0, needsHumanEval: false }, st: LMComLib.ExerciseStatus.Normal, bt: 0, et: 0, t: 0, Results: null });
        //var pg = new Course.Page(data.page, { done: false, beg: 0, end: 0, elapsed: 0, score: 0, result: null, designForceEval: false, testSkiped:false });
        var html;
        //pg.onBeforeRender(() => {
        //  html = $.views.templates["c_gen"].render(data.page);
        //});
        return html;
    }
    DesignDictSource.compileNewExerciseLow = compileNewExerciseLow;
    function compileNewExercise(data) {
        return compileNewExerciseLow(JSON.parse(data));
    }
    DesignDictSource.compileNewExercise = compileNewExercise;
})(DesignDictSource || (DesignDictSource = {}));
var Course;
(function (Course) {
    var _evalObj = (function (_super) {
        __extends(_evalObj, _super);
        function _evalObj() {
            _super.apply(this, arguments);
        }
        _evalObj.prototype.controlData = function (id) { return this._myPage.result.result[id]; };
        return _evalObj;
    })(Course.tagImpl);
    Course._evalObj = _evalObj;
    var evalPageImpl = (function (_super) {
        __extends(evalPageImpl, _super);
        function evalPageImpl() {
            _super.apply(this, arguments);
        }
        evalPageImpl.prototype.pageCreated = function () {
            var _this = this;
            _super.prototype.pageCreated.call(this);
            if (this.radioGroups) {
                //provazani radiobutton nebo wordSelection s radio grupou
                var radGrps = {};
                _.each(_.map(this.radioGroups.split('|'), function (str) { return str.split(':'); }), function (kv) { return radGrps[kv[0]] = _.map(kv[1].split(','), function (id) { return (_this._myPage.tags[id]); }); });
                _.each(radGrps, function (radios) { return _.each(radios, function (r) { return r.myEvalGroup = radios; }); });
            }
        };
        evalPageImpl.prototype.provideData = function () {
            _.each(this.Items, function (btn) { return btn.provideData(); }); //btn ma vlastni persistenci
            _.each(this.Items, function (btn) { return _.each(btn.Items, function (grp) { return grp.provideData(); }); }); //persistence podrizenych evalGroupImpl
        };
        evalPageImpl.prototype.acceptData = function (done) {
            _.each(this.Items, function (btn) { return btn.acceptData(done); });
            _.each(this.Items, function (btn) { return _.each(btn.Items, function (grp) { return grp.acceptData(done); }); });
        };
        evalPageImpl.prototype.resetData = function () {
            _.each(this.Items, function (btn) { return btn.resetData(); });
            _.each(this.Items, function (btn) { return _.each(btn.Items, function (grp) { return grp.resetData(); }); });
        };
        evalPageImpl.prototype.getScore = function () {
            var res = { ms: 0, s: 0, flag: 0 };
            _.each(this.Items, function (btn) { return _.each(btn.Items, function (grp) { return addORScore(res, grp.score()); }); });
            return res;
        };
        evalPageImpl.prototype.findBtn = function (b) {
            return _.find(this.Items, function (eb) { return eb.myBtn == b; });
        };
        return evalPageImpl;
    })(_evalObj);
    Course.evalPageImpl = evalPageImpl;
    var evalBtnImpl = (function (_super) {
        __extends(evalBtnImpl, _super);
        function evalBtnImpl() {
            _super.apply(this, arguments);
        }
        evalBtnImpl.prototype.pageCreated = function () {
            _super.prototype.pageCreated.call(this);
            this.myBtn = _.isEmpty(this.btnId) ? null : (this._myPage.tags[this.btnId]);
        };
        evalBtnImpl.prototype.provideData = function () { if (!this.myBtn)
            return; /*this.myBtn.result = this.controlData(this.btnId);*/ this.myBtn.doProvideData(); };
        evalBtnImpl.prototype.acceptData = function (done) { if (!this.myBtn)
            return; /*this.myBtn.result = this.controlData(this.btnId);*/ this.myBtn.acceptData(done); };
        evalBtnImpl.prototype.resetData = function () { if (!this.myBtn)
            return; this.myBtn.resetData(this._myPage.result.result); };
        evalBtnImpl.prototype.click = function (doneResult) {
            var _this = this;
            if (!this.myBtn)
                return null;
            _.each(this.Items, function (grp) {
                if (!doneResult) {
                    grp.resetData();
                    return null;
                }
                else {
                    grp.provideData();
                    var res = createORScoreObj(_.map(_this.Items, function (it) { return it.score(); }));
                    grp.acceptData(true);
                    return res;
                }
            });
            return doneResult ? createORScoreObj(_.map(this.Items, function (it) { return it.score(); })) : null;
        };
        return evalBtnImpl;
    })(_evalObj);
    Course.evalBtnImpl = evalBtnImpl;
    var evalGroupImpl = (function (_super) {
        __extends(evalGroupImpl, _super);
        function evalGroupImpl() {
            _super.apply(this, arguments);
            this.evalControls = [];
        }
        evalGroupImpl.prototype.pageCreated = function () {
            var _this = this;
            _super.prototype.pageCreated.call(this);
            this.evalControls = [];
            _.each(this.evalControlIds, function (t) {
                var ctrl = (_this._myPage.tags[t]);
                _this.evalControls.push(ctrl);
                //ctrl.myEvalGroup = this;
                ctrl.myEvalBtn = _this._owner.myBtn;
            });
        };
        evalGroupImpl.prototype.provideData = function () {
            _.each(this.evalControls, function (c) { return c.doProvideData(); });
            if (this.isExchangeable) {
                var res = this._myPage.result.result[this.id] = this.provideExchangeable();
                this.acceptExchangeable(res);
            }
        };
        evalGroupImpl.prototype.acceptData = function (done) {
            var _this = this;
            if (this.isExchangeable)
                this.acceptExchangeable(this.controlData(this.id));
            _.each(this.evalControls, function (c) { c.result = _this.controlData(c.id); c.acceptData(done); });
        };
        evalGroupImpl.prototype.resetData = function () {
            var _this = this;
            if (this.isExchangeable)
                delete this.controlData[this.id];
            _.each(this.evalControls, function (c) { return c.resetData(_this._myPage.result.result); });
            if (this.isExchangeable)
                this.provideExchangeable();
        };
        evalGroupImpl.prototype.score = function () {
            if (this.isAnd) {
                return createAndScoreObj(_.map(this.evalControls, function (c) { return c.result; }));
            }
            else {
                return createORScoreObj(_.map(this.evalControls, function (c) { return c.result; }));
            }
        };
        evalGroupImpl.prototype.acceptExchangeable = function (res) {
            if (!res || !res.onBehavMap)
                return;
            //adresar vsech eval group edits
            var edits = {};
            _.map(Course.edit.filter(this.evalControls), function (ed) { return edits[ed.id] = ed; });
            //vypln editum jejich onBehav
            for (var p in res.onBehavMap) {
                if (!edits[p]) {
                    delete res.onBehavMap;
                    _.each(edits, function (ed) { return ed.onBehav(ed); });
                    return;
                }
                edits[p].onBehav(edits[res.onBehavMap[p]]);
            }
        };
        evalGroupImpl.prototype.provideExchangeable = function () {
            var res = { tg: undefined, flag: 0, onBehavMap: {}, ms: 0, s: 0 };
            var edits = Course.edit.filter(this.evalControls);
            var isDropDown = edits[0]._tg == CourseModel.tdropDown && !(edits[0]).gapFillLike;
            var resultValue = function (ed) {
                if (!isDropDown)
                    return ed.result.Value;
                if (_.isEmpty(ed.result.Value))
                    return null;
                return ed.source.findDropDownViaId(ed.result.Value.substr(1)).correctValue;
            };
            //normalizovane uzivatelovy odpovedi
            var userVals = _.map(edits, function (e) { return { ed: e, val: resultValue(e), norm: isDropDown ? resultValue(e) : e.doNormalize(resultValue(e)) }; });
            //normalizovane spravne odpovedi
            var corrects = _.map(edits, function (e) { return { ed: e, vals: _.map(e.correctValue.split('|'), function (c) { return isDropDown ? c : e.doNormalize(c); }) }; });
            //jsou vsechny spravne odpovedi rozdilne?
            var corrAll = _.flatten(_.map(corrects, function (c) { return c.vals; }));
            if (_.uniq(corrAll).length < corrAll.length) {
                debugger;
                throw '_.uniq(corrAll).length < corrAll.length';
            }
            //sparovani spravnych odpoved
            for (var i = 0; i < userVals.length; i++) {
                var userVal = userVals[i];
                for (var j = 0; j < corrects.length; j++) {
                    var correct = corrects[j];
                    if (!correct || !_.any(correct.vals, function (v) { return v == userVal.norm; }))
                        continue; //uzivatelova odpoved v spravnych odpovedich nenalezena
                    res.onBehavMap[userVal.ed.id] = correct.ed.id; //nalezena => dosad do persistence
                    userVals[i] = null;
                    corrects[j] = null; //odstran uzivatelovu odpoved i nalezeny edit ze seznamu
                }
                ;
            }
            //pouziti spatnych odpovedi
            _.each(_.zip(_.filter(userVals, function (u) { return !!u; }), _.filter(corrects, function (u) { return !!u; })), function (uc) {
                var userVal = uc[0];
                var correct = uc[1];
                res.onBehavMap[userVal.ed.id] = correct.ed.id;
            });
            //je potreba znova spocitat score
            this.acceptExchangeable(res); //doplni onBehav
            _.each(this.evalControls, function (ctrl) { return ctrl.setScore(); }); //do vysledku dosadi score
            return res;
        };
        return evalGroupImpl;
    })(_evalObj);
    Course.evalGroupImpl = evalGroupImpl;
    //k SUM prida agregatabe priznaky
    function agregateFlag(sum, flag) {
        return sum | (flag & addAbleFlags) /*k sum prida addAbleTags z flag*/;
    }
    Course.agregateFlag = agregateFlag;
    //do SUM nastavi agregatabe priznaky
    function setAgregateFlag(sum, flag) {
        return (sum & ~addAbleFlags /*v sum vynuluje addAbleTags*/) | (flag & addAbleFlags /*prida addAbleTags z flag do sum*/);
    }
    Course.setAgregateFlag = setAgregateFlag;
    var addAbleFlags = CourseModel.CourseDataFlag.needsEval | CourseModel.CourseDataFlag.pcCannotEvaluate | CourseModel.CourseDataFlag.hasExternalAttachments;
    function addORScore(res, sc) {
        res.ms += sc.ms;
        res.s += sc.s;
        res.flag = agregateFlag(res.flag, sc.flag);
    }
    function createORScoreObj(scs) {
        var res = { ms: 0, s: 0, flag: 0 };
        _.each(scs, function (sc) { return addORScore(res, sc); });
        return res;
    }
    function _createAndScoreObj(scs) {
        //var allOK = _.all(this.evalControls, ctrl => ctrl.result.ms == ctrl.result.s);
        //return { ms: 1, s: allOK ? 1 : 0, flag: 0 };
        var res = { ms: 1, s: 1, flag: 0 };
        var hasWrong = false;
        _.each(scs, function (sc) { hasWrong = hasWrong || sc.ms != sc.s; res.flag = agregateFlag(res.flag, sc.flag); });
        if (hasWrong)
            res.s = 0;
        return res;
    }
    function createAndScoreObj(scs) {
        var res = { ms: 0, s: 0, flag: 0 };
        var cnt = 0;
        _.each(scs, function (sc) { res.ms += sc.ms; res.s += sc.s; res.flag = agregateFlag(res.flag, sc.flag); cnt++; });
        var ok = res.ms == res.s;
        res.ms = Math.round(res.ms / cnt);
        res.s = ok ? res.ms : 0;
        return res;
    }
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.t_evalPage, evalPageImpl);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.t_evalGroup, evalGroupImpl);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.t_evalBtn, evalBtnImpl);
})(Course || (Course = {}));
var Course;
(function (Course) {
    var c_used = "used";
    var fakeEdit = '???ignore???';
    var edit = (function (_super) {
        __extends(edit, _super);
        function edit(staticData) {
            var _this = this;
            _super.call(this, staticData);
            this.onBehav = ko.observable(null); //pro isExchangeable evalGroup: tento edit control se chova jako onBehav edit control (vypocet isCorrect a hodnota teacher)
            this.user = ko.observable('');
            this.teacher = ko.computed(function () { var th = _this.onBehav(); return th ? th.getTeacher() : ''; });
            this.st = ko.observable('');
            if (!this.correctValue)
                this.correctValue = '';
            else if (Utils.startsWith(this.correctValue, fakeEdit)) {
                this.isFakeEdit = true;
            }
            this.onBehav(this);
        }
        edit.prototype.getTeacher = function () { return ''; };
        edit.prototype.createResult = function (forceEval) { this.done(false); return { ms: 0, s: 0, tg: this._tg, flag: 0, Value: forceEval ? this.correctValue.split('|')[0] : "" }; };
        edit.prototype.setScore = function () {
            if (this.onBehav().isFakeEdit) {
                this.result.ms = 0;
                return;
            }
            _super.prototype.setScore.call(this);
        };
        edit.prototype.isCorrect = function () {
            if (this.isSkipEvaluation())
                return true;
            var res = this.doNormalize(this.result.Value);
            return _.any(this.onBehav().corrects, function (s) { return s == res; });
        };
        edit.prototype.provideData = function () {
            if (this.done())
                return;
            this.result.Value = this.user();
            if (this.isSkipEvaluation())
                this.corrects = [this.result.Value]; //pro isSkipEvaluation je vse co se vyplni spravne
        };
        edit.prototype.acceptData = function (done) {
            _super.prototype.acceptData.call(this, done);
            this.user(this.result.Value);
            var val = this.doNormalize(this.result.Value);
            if (!this.done())
                this.st('edit');
            else if (this.isCorrect())
                this.st('ok');
            else
                this.st(!val || val == '' ? 'empty' : 'wrong');
        };
        edit.prototype.doNormalize = function (s) { return this.caseSensitive ? s : s.toLowerCase(); };
        edit.filter = function (ctrls) {
            return (_.filter(ctrls, function (c) { return c._tg == CourseModel.tgapFill || c._tg == CourseModel.tdropDown; }));
        };
        edit.adjustSmartWidths = function (pg) {
            var offers = (_.filter(pg.items, function (c) { return c._tg == CourseModel.toffering; }));
            var usedEdits = {};
            //zpracuj offering
            _.each(offers, function (off) {
                var both = _.partition(off.words.split('|'), function (w) { return w.length > 2 && w.charAt(0) == "#"; }); //rozdel words na id a word
                var words = both[1];
                var eds = (_.map(both[0], function (id) { return pg.tags[id.substr(1)]; })); //offering edits
                _.each(eds, function (ed) { return usedEdits[ed.id] = true; }); //edits hotovy
                //zjisti maximum z sirek
                var firstEd = true;
                var max = 0;
                _.each(eds, function (ed) {
                    var w = ed.smartWidthPropAction(undefined, firstEd ? words : null); //v prvnim edit se zpracuji i offering words
                    firstEd = false;
                    if (w > max)
                        max = w;
                });
                //dosat maximim z sirek
                _.each(eds, function (ed) { return ed.smartWidthPropAction(max); });
            });
            //zpracuj zbyle edits (s smartWidth i bez)
            var edits = (_.filter(pg.items, function (c) { return (c._tg == CourseModel.tgapFill || c._tg == CourseModel.tdropDown) && !usedEdits[c.id]; }));
            var grps = _.groupBy(edits, function (e) { return e.widthGroup; });
            for (var p in grps) {
                if (p == 'undefined') {
                    _.each(grps[p], function (ed) {
                        var w = ed.smartWidthPropAction(undefined);
                        if (w > 0)
                            ed.smartWidthPropAction(w);
                    });
                }
                else {
                    var eds = _.map(grps[p], function (ed) { return { ed: ed, width: ed.smartWidthPropAction(undefined) }; });
                    var max = _.max(eds, function (e) { return e.width; });
                    if (max.width > 0)
                        _.each(eds, function (e) { if (e.width >= 0)
                            e.ed.smartWidthPropAction(max.width); });
                }
            }
        };
        //vrati nebo nastavi spolecnou sirku
        edit.prototype.smartWidthPropAction = function (setw, offerWords) {
            if (offerWords === void 0) { offerWords = null; }
            var selfEl = this.selfElement();
            var isGapFill = this._tg == CourseModel.tgapFill;
            if (setw == undefined) {
                //if (selfEl.width() > 10) return -1; //odstraneno 19.5.2015, k cemu bylo?
                if (this.width > 0)
                    return this.width;
                var arr = this.correctValue.split('|');
                arr = _.map(arr, function (a) { return a.length == 1 ? 'x' : (a.length == 2 ? 'xx' : (a.length == 3 ? 'xxx' : a)); });
                if (isGapFill) {
                    var gp = this;
                    if (gp.initValue)
                        arr.push(gp.initValue);
                    if (gp.hint)
                        arr.push(gp.hint);
                }
                if (offerWords != null && offerWords.length > 0)
                    arr.pushArray(offerWords);
                var growby = 1;
                if (isGapFill) {
                    var charnum = _.max(arr, function (s) { return s.length; }).length;
                    if (charnum == 0)
                        return 20;
                    if (charnum == 1)
                        growby = 4;
                    else if (charnum == 2)
                        growby = 2;
                    else if (charnum == 3)
                        growby = 1.5;
                    else if (charnum < 5)
                        growby = 1.7;
                    else if (charnum < 10)
                        growby = 1.5;
                    else if (charnum < 15)
                        growby = 1.3;
                    else
                        growby = 1.2;
                }
                return Math.round(growby * Gui2.maxTextWidth(arr, selfEl));
            }
            else {
                var w = setw + (isGapFill ? 26 : 44);
                selfEl.css('width', w.toString() + 'px'); //nejaky bug, spatne se do sirky zapocitavaji padding a margin, jen ale po Eval x reset.
            }
        };
        return edit;
    })(Course.evalControlImpl);
    Course.edit = edit;
    var gapFill = (function (_super) {
        __extends(gapFill, _super);
        function gapFill(staticData) {
            var _this = this;
            _super.call(this, staticData);
            if (!this.initValue)
                this.initValue = '';
            if (this.readOnly || this.skipEvaluation) {
                this.correctValue = this.initValue;
                this.result = this.createResult(false);
            }
            this.corrects = _.map(this.correctValue.split('|'), function (s) { return _this.doNormalize(s); });
        }
        gapFill.prototype.getTeacher = function () { var res = this.correctValue.split('|')[0]; return Utils.startsWith(res, fakeEdit) ? '' : res; };
        gapFill.prototype.createResult = function (forceEval) {
            return {
                ms: 0, s: 0, tg: this._tg, flag: 0,
                Value: forceEval ? this.correctValue.split('|')[0] : this.initValue
            };
        };
        gapFill.prototype.doNormalize = function (s) { return Course.normalize(s, this.caseSensitive); };
        gapFill.prototype.isReadOnly = function () { return this.readOnly; };
        gapFill.prototype.isSkipEvaluation = function () { return this.skipEvaluation; }; // || this.onBehav().isFakeEdit; }
        return gapFill;
    })(edit);
    Course.gapFill = gapFill;
    var dropDown = (function (_super) {
        __extends(dropDown, _super);
        function dropDown(staticData) {
            var _this = this;
            _super.call(this, staticData);
            this.userText = ko.observable(''); //uzivatelem vybrany text
            this.click = function (data, ev) {
                clickedDropDown = _this;
                anim.toggleMenuLow(ev);
            }; //dragList.target = this; dragList.show(); } //klik na sipku u dragTarget slova
            this.corrects = this.gapFillLike ? _.map(this.correctValue.split('|'), function (s) { return _this.doNormalize(s); }) : ['#' + this.id];
            var self = this;
            this.user.subscribe(function (userVal) {
                if (_.isEmpty(userVal)) {
                    self.userText('');
                    return;
                } //odstraneni
                if (userVal[0] != '#') {
                    self.userText(userVal);
                    return;
                } //text
                self.userText(self.source.findDropDownViaId(userVal.substr(1)).getTeacher());
            });
        }
        dropDown.prototype.getTeacher = function () { return Utils.startsWith(this.correctValue, fakeEdit) ? '' : this.correctValue; };
        dropDown.prototype.createResult = function (forceEval) { return { ms: 0, s: 0, tg: this._tg, flag: 0, Value: forceEval ? this.corrects[0] : '' }; };
        dropDown.prototype.resetData = function (allData) {
            _super.prototype.resetData.call(this, allData);
            if (this.source)
                this.source.resetData();
        };
        return dropDown;
    })(edit);
    Course.dropDown = dropDown;
    var dragTarget = (function (_super) {
        __extends(dragTarget, _super);
        function dragTarget() {
            _super.apply(this, arguments);
        }
        return dragTarget;
    })(dropDown);
    Course.dragTarget = dragTarget;
    var offering = (function (_super) {
        __extends(offering, _super);
        function offering(staticData) {
            _super.call(this, staticData);
        }
        offering.prototype.initProc = function (phase, getTypeOnly, completed) {
            var _this = this;
            switch (phase) {
                case Course.initPhase.beforeRender:
                    if (!getTypeOnly) {
                        this.edits = [];
                        this.wordItems = [];
                        var hasDropDown = false;
                        _.each(this.words.split('|'), function (w) {
                            if (w[0] == '#') {
                                var ed = (_this._myPage.tags[w.substr(1)]);
                                ed.widthGroup = '@sw-' + _this.id;
                                ed.source = _this;
                                hasDropDown = ed._tg == CourseModel.tdropDown && !ed.gapFillLike;
                                _this.edits.push(ed);
                                ed.source = _this;
                                if (!ed.isFakeEdit)
                                    _this.wordItems.pushArray(_.map(ed.correctValue.split('|'), function (c) { return new dragWord(hasDropDown ? ed : c); }));
                            }
                            else
                                _this.wordItems.push(new dragWord(w));
                        });
                        this.passive = !hasDropDown || this.mode == CourseModel.offeringDropDownMode.dropDownKeep;
                        if (this.passive)
                            this.wordItems = _.uniq(this.wordItems, function (w) { return w.title(); });
                        this.wordItems = _.sortBy(this.wordItems, function (wi) { return wi.title(); }); //BT 2168 
                    }
                    return Course.initPhaseType.sync;
            }
            return _super.prototype.initProc.call(this, phase, getTypeOnly, completed);
        };
        offering.prototype.resetData = function () { _.each(this.wordItems, function (w) { return w.st(''); }); };
        offering.prototype.findWordViaValue = function (value) { return _.isEmpty(value) ? null : _.find(this.wordItems, function (w) { return w.value() == value; }); };
        offering.prototype.findEditViaSelected = function (selected) { return _.isEmpty(selected) ? null : _.find(this.edits, function (ed) { return ed.user() == selected; }); };
        offering.prototype.findDropDownViaId = function (id) { return (_.find(this.edits, function (ed) { return ed.id == id; })); };
        return offering;
    })(Course.tagImpl);
    Course.offering = offering;
    var dragWord = (function () {
        function dragWord(content) {
            var _this = this;
            this.st = ko.observable(''); //'' nebo used
            this.click = function () {
                try {
                    var selected = _this.value();
                    if (clickedDropDown.source.passive) {
                        clickedDropDown.user(selected);
                        return;
                    }
                    var oldVal = clickedDropDown.user(); //obsah clicked dropdown
                    if (oldVal == selected) {
                        _this.st('');
                        clickedDropDown.user('');
                        return;
                    } //vybrano to same slovo => undo (zrus vyber)
                    //najdi dropdown, ktery ma vybrany selected word
                    var withSelected = clickedDropDown.source.findEditViaSelected(selected);
                    if (withSelected != null)
                        withSelected.user('');
                    //vrat doposud vybrane slovo v dragList.target mezi nepouzite
                    var oldWord = clickedDropDown.source.findWordViaValue(oldVal);
                    if (oldWord != null)
                        oldWord.st('');
                    //aktualizuje clicked dropdown a selected word status
                    clickedDropDown.user(selected); //pouzij newVal
                    _this.st(c_used);
                }
                finally {
                    anim.hideMenus(null);
                }
            };
            if (_.isString(content))
                this.word = content;
            else {
                this.myDropDown = content;
                this.myDropDown.myWord = this;
            }
        }
        dragWord.prototype.title = function () { return this.word ? this.word : this.myDropDown.teacher(); };
        dragWord.prototype.value = function () { return this.word ? this.word : '#' + this.myDropDown.id; };
        return dragWord;
    })();
    Course.dragWord = dragWord;
    var clickedDropDown;
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.toffering, offering);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tgapFill, gapFill);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tdropDown, dropDown);
})(Course || (Course = {}));
var CourseMeta;
(function (CourseMeta) {
    (function (runtimeType) {
        runtimeType[runtimeType["no"] = 0] = "no";
        runtimeType[runtimeType["courseNode"] = 1] = "courseNode";
        runtimeType[runtimeType["multiTask"] = 2] = "multiTask";
        runtimeType[runtimeType["product"] = 4] = "product";
        runtimeType[runtimeType["test"] = 8] = "test";
        runtimeType[runtimeType["grammarRoot"] = 16] = "grammarRoot";
        runtimeType[runtimeType["taskCourse"] = 32] = "taskCourse";
        runtimeType[runtimeType["taskPretest"] = 64] = "taskPretest";
        runtimeType[runtimeType["taskPretestTask"] = 128] = "taskPretestTask";
        runtimeType[runtimeType["taskTestInCourse"] = 256] = "taskTestInCourse";
        runtimeType[runtimeType["taskTestSkill"] = 512] = "taskTestSkill";
        runtimeType[runtimeType["ex"] = 1024] = "ex";
        runtimeType[runtimeType["dynamicModuleData"] = 2048] = "dynamicModuleData";
        runtimeType[runtimeType["project"] = 4096] = "project";
        runtimeType[runtimeType["mod"] = 8192] = "mod";
        runtimeType[runtimeType["dynamicTestModule"] = 16384] = "dynamicTestModule";
        runtimeType[runtimeType["skipAbleRoot"] = 32768] = "skipAbleRoot";
        runtimeType[runtimeType["grammar"] = 65536] = "grammar";
        runtimeType[runtimeType["instrs"] = 131072] = "instrs";
        runtimeType[runtimeType["noDict"] = 262144] = "noDict";
        runtimeType[runtimeType["publisher"] = 524288] = "publisher";
        runtimeType[runtimeType["sitemap"] = 1048576] = "sitemap";
        runtimeType[runtimeType["products"] = 2097152] = "products";
        runtimeType[runtimeType["mediaCutFile"] = 4194304] = "mediaCutFile";
        runtimeType[runtimeType["mediaDir"] = 8388608] = "mediaDir";
        runtimeType[runtimeType["error"] = 16777216] = "error";
        runtimeType[runtimeType["testTaskGroup"] = 33554432] = "testTaskGroup";
        runtimeType[runtimeType["multiTest"] = 67108864] = "multiTest";
        runtimeType[runtimeType["multiQuestionnaire"] = 134217728] = "multiQuestionnaire";
        runtimeType[runtimeType["testDemo"] = 268435456] = "testDemo";
        runtimeType[runtimeType["productNew"] = 536870912] = "productNew";
    })(CourseMeta.runtimeType || (CourseMeta.runtimeType = {}));
    var runtimeType = CourseMeta.runtimeType;
    (function (childMode) {
        childMode[childMode["child"] = 0] = "child";
        childMode[childMode["self"] = 1] = "self";
        childMode[childMode["selfChild"] = 2] = "selfChild";
        childMode[childMode["childsWithParent"] = 3] = "childsWithParent";
        childMode[childMode["childsWithParentIfMulti"] = 4] = "childsWithParentIfMulti";
        childMode[childMode["skrivanek_multiTest_std"] = 5] = "skrivanek_multiTest_std";
        childMode[childMode["skrivanek_multiTest_compl"] = 6] = "skrivanek_multiTest_compl";
    })(CourseMeta.childMode || (CourseMeta.childMode = {}));
    var childMode = CourseMeta.childMode;
    (function (dictTypes) {
        dictTypes[dictTypes["unknown"] = 0] = "unknown";
        dictTypes[dictTypes["no"] = 1] = "no";
        dictTypes[dictTypes["L"] = 2] = "L";
    })(CourseMeta.dictTypes || (CourseMeta.dictTypes = {}));
    var dictTypes = CourseMeta.dictTypes;
    (function (testNeeds) {
        testNeeds[testNeeds["no"] = 0] = "no";
        testNeeds[testNeeds["playing"] = 1] = "playing";
        testNeeds[testNeeds["recording"] = 2] = "recording";
    })(CourseMeta.testNeeds || (CourseMeta.testNeeds = {}));
    var testNeeds = CourseMeta.testNeeds;
    CourseMeta.meta = { "rootTagName": "data", "types": { "data": { "props": { "title": {}, "order": { "st": 1088 }, "url": {}, "line": { "enumType": LMComLib.LineIds }, "type": { "enumType": CourseMeta.runtimeType }, "name": {}, "other": {}, "ms": { "st": 64 }, "allLocs": { "st": 1024 }, "styleSheet": { "st": 1024 }, "parent": { "st": 512 }, "uniqId": { "st": 64 }, "Items": {}, "dataItems": { "st": 1536 }, "spaceId": { "st": 1536 }, "globalId": { "st": 1536 }, "style": { "st": 1536 }, "pathParts": { "st": 1024 } } }, "sitemap": { "anc": "data", "props": {} }, "publisher": { "anc": "data", "props": { "vsNetData": { "st": 1024 }, "publisherRoot": { "st": 1024 } } }, "project": { "anc": "data", "props": { "ftpPassword": {}, "FtpUser": {}, "FtpPassword": { "st": 512 } } }, "ptr": { "anc": "data", "props": { "takeChilds": { "enumType": CourseMeta.childMode }, "skip": { "st": 64 }, "take": { "st": 64 }, "urls": {}, "isGramm": { "st": 64 }, "modify": {} } }, "products": { "anc": "data", "props": {} }, "product": { "anc": "data", "props": { "defaultDictType": { "enumType": CourseMeta.dictTypes }, "defaultLocs": {} } }, "taskTestInCourse": { "anc": "data", "props": {} }, "test": { "anc": "data", "props": { "demoTestUrl": {}, "level": {}, "needs": { "enumType": CourseMeta.testNeeds }, "isDemoTest": { "st": 64 } } }, "mod": { "anc": "data", "props": {} }, "taskCourse": { "anc": "data", "props": {} }, "multiTask": { "anc": "data", "props": {} }, "taskTestSkill": { "anc": "data", "props": { "skill": {}, "minutes": { "st": 64 }, "scoreWeight": { "st": 64 } } }, "dynamicModuleData": { "anc": "data", "props": { "groups": {} } }, "testTaskGroup": { "anc": "data", "props": { "urls": {}, "take": { "st": 64 }, "designTitle": {} } }, "ex": { "anc": "data", "props": { "isOldEa": { "st": 1088 }, "isOldEaPassive": { "st": 1088 }, "instrs": { "st": 1024 } } } } };
    CourseMeta.tdata = 'data';
    CourseMeta.tsitemap = 'sitemap';
    CourseMeta.tpublisher = 'publisher';
    CourseMeta.tproject = 'project';
    CourseMeta.tptr = 'ptr';
    CourseMeta.tproducts = 'products';
    CourseMeta.tproduct = 'product';
    CourseMeta.ttaskTestInCourse = 'taskTestInCourse';
    CourseMeta.ttest = 'test';
    CourseMeta.tmod = 'mod';
    CourseMeta.ttaskCourse = 'taskCourse';
    CourseMeta.tmultiTask = 'multiTask';
    CourseMeta.ttaskTestSkill = 'taskTestSkill';
    CourseMeta.tdynamicModuleData = 'dynamicModuleData';
    CourseMeta.ttestTaskGroup = 'testTaskGroup';
    CourseMeta.tex = 'ex';
})(CourseMeta || (CourseMeta = {}));
var Course;
(function (Course) {
    (function (ordItemStatus) {
        ordItemStatus[ordItemStatus["no"] = 0] = "no"; /*nezarazene*/
        ordItemStatus[ordItemStatus["fake"] = 1] = "fake"; /*posledni fake item, kvul vlozeni na konec*/
        ordItemStatus[ordItemStatus["done"] = 2] = "done"; /*zarazene, nevybrane pro editaci*/
        ordItemStatus[ordItemStatus["edited"] = 3] = "edited"; /*vybrane pro editaci*/
    })(Course.ordItemStatus || (Course.ordItemStatus = {}));
    var ordItemStatus = Course.ordItemStatus;
    var orderItem = (function (_super) {
        __extends(orderItem, _super);
        function orderItem() {
            _super.apply(this, arguments);
        }
        orderItem.prototype.click = function () {
            var inSrc = this.inSrc();
            this.$self.detach();
            (inSrc ? this.owner.$destBlock : this.owner.$srcBlock).append(this.$self[0]);
        };
        orderItem.prototype.inSrc = function () {
            return this.$self[0].parentElement == this.owner.$srcBlock[0];
        };
        return orderItem;
    })(Course.tagImpl);
    Course.orderItem = orderItem;
    var ordering = (function (_super) {
        __extends(ordering, _super);
        function ordering() {
            _super.apply(this, arguments);
            this.evaluated = ko.observable(false);
        }
        ordering.prototype.initProc = function (phase, getTypeOnly, completed) {
            switch (phase) {
                case Course.initPhase.afterRender2:
                    if (!getTypeOnly) {
                        this.$srcBlock = $('#ordering-' + this.id + ' .src-block');
                        this.$destBlock = $('#ordering-' + this.id + ' .dest-block');
                        _.each(_.zip(this.$srcBlock.children('div').toArray(), this.randomItems), function (arr) { return arr[1].$self = $(arr[0]); });
                    }
                    return Course.initPhaseType.sync;
            }
            return _super.prototype.initProc.call(this, phase, getTypeOnly, completed);
        };
        ordering.prototype.initRandomize = function () {
            var _this = this;
            var cnt = 0;
            _.each(this.Items, function (it) { it.idx = cnt++; it.owner = _this; });
            var rnd = Utils.randomizeArray(_.range(this.Items.length));
            this.randomItems = _.map(rnd, function (i) { return (_this.Items[i]); });
        };
        ordering.prototype.dones = function () {
            var _this = this;
            if (!this.$destBlock)
                return [];
            return _.filter(_.map(this.$destBlock[0].children, function (ch) { return _.find(_this.Items, function (it) { return it.$self[0] == ch; }); }), function (it) { return !!it; });
        };
        ordering.prototype.createResult = function (forceEval) {
            return {
                ms: 0, s: 0,
                tg: this._tg,
                flag: 0,
                indexes: forceEval ? _.range(this.randomItems.length) : [] //_.map(this.randomItems, it => it.idx)
            };
        };
        ordering.prototype.isCorrect = function () {
            return this.isCorrectEx().isCorrect;
        };
        ordering.prototype.isCorrectEx = function () {
            var res = { isCorrect: false, dones: null };
            res.dones = this.dones();
            if (res.dones.length != this.Items.length)
                return res;
            for (var i = 0; i < res.dones.length; i++)
                if (res.dones[i].idx != i)
                    return res;
            res.isCorrect = true;
            return res;
        };
        ordering.prototype.acceptData = function (done) {
            var _this = this;
            _super.prototype.acceptData.call(this, done);
            try {
                if (!this.result.indexes || this.result.indexes.length == 0)
                    return;
                _.each(this.result.indexes, function (idx) { if (_this.Items[idx].inSrc())
                    _this.Items[idx].click(); });
            }
            finally {
                this.evaluated(done);
            }
        };
        ordering.prototype.provideData = function () {
            if (this.done())
                return;
            this.result.indexes = _.map(this.dones(), function (it) { return it.idx; });
        };
        return ordering;
    })(Course.evalControlImpl);
    Course.ordering = ordering;
    var orderWordItem = (function (_super) {
        __extends(orderWordItem, _super);
        function orderWordItem() {
            _super.apply(this, arguments);
        }
        return orderWordItem;
    })(orderItem);
    Course.orderWordItem = orderWordItem;
    var wordOrdering = (function (_super) {
        __extends(wordOrdering, _super);
        function wordOrdering() {
            _super.apply(this, arguments);
            this.user = ko.observable('');
            this.evalStatus = ko.observable('');
        }
        wordOrdering.prototype.pageCreated = function () {
            this.Items = _.map(this.correctOrder.split('|'), function (txt) {
                var res = new orderWordItem();
                var parts = txt.split('#');
                res.text = parts[0];
                res.evalText = parts[parts.length == 2 ? 1 : 0];
                return res;
            });
            this.teacher = _.map(this.Items, function (it) { return it.evalText; }).join(' ');
            this.initRandomize();
            _super.prototype.pageCreated.call(this);
        };
        wordOrdering.prototype.acceptData = function (done) {
            _super.prototype.acceptData.call(this, done);
            if (!done)
                return;
            var corr = this.isCorrectEx();
            this.user(corr.isCorrect ? this.teacher : _.map(corr.dones, function (it) { return it.text; }).join(' '));
            this.evalStatus(corr.isCorrect ? 'eval-green' : (corr.dones.length == 0 ? 'eval-red' : 'eval-strike'));
        };
        return wordOrdering;
    })(ordering);
    Course.wordOrdering = wordOrdering;
    var orderSentenceItem = (function (_super) {
        __extends(orderSentenceItem, _super);
        function orderSentenceItem() {
            _super.apply(this, arguments);
            this.evalStatus = ko.observable('');
            this.teacher = ko.observable('');
        }
        return orderSentenceItem;
    })(orderItem);
    Course.orderSentenceItem = orderSentenceItem;
    var sentenceOrdering = (function (_super) {
        __extends(sentenceOrdering, _super);
        function sentenceOrdering() {
            _super.apply(this, arguments);
        }
        sentenceOrdering.prototype.jsonMLParsed = function () {
            _super.prototype.jsonMLParsed.call(this);
            _.each(this.Items, function (it) { return it.text = (it.Items[0]); });
            this.initRandomize();
        };
        sentenceOrdering.prototype.acceptData = function (done) {
            var _this = this;
            _super.prototype.acceptData.call(this, done);
            if (!done)
                return;
            var corr = this.isCorrectEx();
            //jiz pretazene
            for (var i = 0; i < corr.dones.length; i++) {
                var it = (corr.dones[i]);
                it.teacher(this.Items[i].text);
                it.evalStatus(it.idx == i ? 'eval-green' : 'eval-strike');
            }
            //nepretazene
            var lastIdx = corr.dones.length;
            var noDones = _.filter(this.Items, function (it) { return _.all(corr.dones, function (d) { return d != it; }); });
            _.each(noDones, function (nd) { nd.click(); nd.evalStatus('eval-red'); nd.teacher(_this.Items[lastIdx++].text); });
        };
        return sentenceOrdering;
    })(ordering);
    Course.sentenceOrdering = sentenceOrdering;
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.twordOrdering, wordOrdering);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tsentenceOrdering, sentenceOrdering);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tsentenceOrderingItem, orderSentenceItem);
})(Course || (Course = {}));
/*
SQL Server word breking and stemming
SELECT  *  FROM sys.dm_fts_parser ('FORMSOF( FREETEXT, "koněm")', 1029, 0, 1)
SELECT * FROM sys.dm_fts_parser (N'FORMSOF ( FREETEXT, "берлинский")', 1049, 0, 1)
select * from sys.fulltext_languages
*/
var DictConnector;
(function (DictConnector) {
    function initDict(add) {
        //if (cfg.dictType == schools.dictTypes.no) { actDictData = null; /*completed();*/ return; }
        //courseLang = LMComLib.LineToLang[line]; actLoc = loc; //dictType = d;
        //readDictInfo(completed);
        DictConnector.actDictData = add;
        if (initialized)
            return;
        initialized = true;
        //**************** events
        $(document).bind('keydown', function (ev) {
            if (DictConnector.actDictData == null)
                return;
            switch (ev.which) {
                case 67: //C           
                case 81:
                    if (!ev.ctrlKey)
                        return;
                    if (ev.which == 67 && selectedText() != '')
                        break;
                    keyMousePos = anim.mousePos; //zapamatuj si aktualni pozici mysi
                    callDict();
                    //readDictInfo(() => setTimeout(callDict, 1));
                    break;
            }
        });
        //*********** popuo okno
        $(function () {
            if (!model) {
                model = new dictModel();
                dlg = JsRenderTemplateEngine.createGlobalTemplate('Dict', model);
                dlg.css('display', 'none');
                dlg.click(function (ev) { ev.cancelBubble = true; ev.stopPropagation(); return false; });
                dlgBody = dlg.find('.panel-content');
            }
            ko.applyBindings(model, dlg[0]);
        });
    }
    DictConnector.initDict = initDict;
    var initialized = false;
    var dictModel = (function () {
        function dictModel() {
            this.height = ko.observable(0);
            this.header = ko.observable("");
            this.body = ko.observable("");
            this.cpv = new schoolCpv.model(schools.tDictCpv, null);
        }
        return dictModel;
    })();
    var dlg; //modalni popup
    var dlgBody; //obsah
    var isCtrlDown = false; /*ctrl key je stisknut*/
    var keyMousePos; /*souradnice mysi, zkopirovane v key-down z current_ev*/
    var model; //model
    //var dicts: LMComLib.Dict[];
    function callDict() {
        if (DictConnector.actDictData == null)
            return;
        schoolCpv.hide(schools.tDictCpv);
        Logger.trace_dict('Dict: wordUnderCursorStart (top=' + keyMousePos.clientY.toString() + ",left=" + keyMousePos.clientX.toString());
        var hit_elem = $(document.elementFromPoint(keyMousePos.clientX, keyMousePos.clientY));
        Logger.trace_dict("top=" + hit_elem.offset().top.toString() + ",left=" + hit_elem.offset().left.toString() + ',html=' + hit_elem.html() + ',parent html=' + hit_elem.parent().html());
        //Logger.trace_dict('Dict: actDictId = ' + actDict.Code);
        var textNodes = [];
        var textNodesText = [];
        hit_elem.contents().filter(function () {
            return this.nodeType == 3;
        }).each(function (i) { textNodes.push($(this)); textNodesText.push($(this).text()); });
        if (textNodes.length <= 0)
            return;
        //proved word wrap 
        var data = startSplitWords(textNodesText);
        Logger.trace_dict('Dict: wordWrap, 1.sent = ' + data[0].join(''));
        //nahrad slova word-spany
        for (var i = 0; i < data.length; i++) {
            var toRepl = [];
            $.each(data[i], function (i, val) {
                //na IE8 se ztraci mezery
                //var el = $('<span class="w">' + val + '</span>')[0];
                var sp = document.createElement('span');
                var att = document.createAttribute("class");
                att.value = 'w';
                sp.setAttributeNode(att);
                sp.appendChild(document.createTextNode(val));
                var el = $(sp);
                toRepl.push(el);
            });
            textNodes[i].replaceWith(toRepl);
        }
        setTimeout(function () {
            var new_nodes = hit_elem.contents().filter('span.w');
            //get the exact word under cursor 
            var el = document.elementFromPoint(keyMousePos.clientX, keyMousePos.clientY);
            var hit_word_elem = $(el);
            if (el == null || !hit_word_elem.hasClass("w")) {
                Logger.trace_dict("null or not w-class" + 'cursor top=' + keyMousePos.clientY.toString() + ",left=" + keyMousePos.clientX.toString());
                for (var i = 0; i < new_nodes.length; i++) {
                    var we = $(new_nodes[i]);
                    Logger.trace_dict("*** element top=" + we.offset().top.toString() + ",left=" + we.offset().left.toString() + ",width=" + we.width().toString() + ",height=" + we.height().toString() + ',html=' + we.html());
                }
                new_nodes.replaceWith(function () { return $(this).contents(); });
                return;
            }
            Logger.trace_dict('cursor top=' + keyMousePos.clientY.toString() + ",left=" + keyMousePos.clientX.toString() +
                "; element top=" + hit_word_elem.offset().top.toString() + ",left=" + hit_word_elem.offset().left.toString() + ",width=" + hit_word_elem.width().toString() + ",height=" + hit_word_elem.height().toString() + ',html=' + hit_word_elem.html());
            var actWord = hit_word_elem.text();
            Logger.trace_dict('Dict: ct_word=' + actWord);
            //return original content:
            new_nodes.replaceWith(function () { return $(this).contents(); });
            //normalize word
            var splitWord = finishSplitWord(actWord, DictConnector.actDictData.crsLang);
            actWord = splitWord.word;
            if (actWord == null)
                return;
            var key = DictConnector.actDictData.Keys[actWord];
            var html;
            if (!key)
                html = "Cannot find " + splitWord.wordRaw;
            else {
                var res = [];
                parseLingeaDict(actWord, DictConnector.actDictData.Entries[key], DictConnector.actDictData.Tags, res);
                html = res.join(' ');
            }
            showWindow(splitWord.wordRaw, html);
        }, 1);
    }
    ;
    function parseLingeaDict(actWord, it, tags, res) {
        if (!it.tag) {
            if (it.text)
                res.push(it.text);
            return;
        }
        var tagStr = tags[it.tag];
        var tg = tagStr.split(' ')[0];
        if (tg == 'sound') {
            if (!cfg.dictNoSound) {
                var url = Pager.basicUrl + it.text;
                //res.push(Utils.string_format(soundMarkHtmlNew, ['../' + url, actWord.replace('\'', '\\\'')]));
                res.push(Utils.string_format(soundMarkHtmlNew, [url, actWord.replace('\'', '\\\'')]));
            }
        }
        else {
            res.push('<' + tagStr + '>');
            if (it.text)
                res.push(it.text);
            if (it.items)
                _.each(it.items, function (subIt) { return parseLingeaDict(actWord, subIt, DictConnector.actDictData.Tags, res); });
            res.push('</' + tg + '>');
        }
    }
    function playFile(url) { setTimeout(function () { return LMSnd.Player.playFile(url, 0); }, 1); }
    DictConnector.playFile = playFile;
    var soundMarkHtmlNew = [
        '<span class="sound-repro-new fa fa-volume-off" onclick="DictConnector.playFile(\'{0}\', 0)"></span>',
        '<span class="sound-listen-talk-new fa fa-microphone" onclick="schoolCpv.show(schools.tDictCpv, \'{0}\', \'{1}\')"></span>',
    ].join('');
    function showWindow(word, html) {
        //vloz data do popup okna
        model.body(html);
        model.header(word);
        anim.showMenu(dlg, anim.mousePos);
    }
    ;
    var selectedText = function () {
        var t = '';
        if (window.getSelection)
            t = window.getSelection();
        else if (document.getSelection)
            t = document.getSelection();
        else if (document.selection)
            t = document.selection.createRange().text;
        return t;
    };
    var russianAccent = "\u0301";
    var wrongCyrilic = { 'á': "а" + russianAccent, 'a': "а", 'p': "р", 'e': "е", 'y': "у", 'c': "с", 'ë': "ё", 'ý': "у" + russianAccent, 'é': "е" + russianAccent, 'x': "х", 'ó': "о" + russianAccent, 'm': "м", 'o': "о" };
    function isWordChar(ch) {
        return Unicode.isLetter(ch) || ch == russianAccent || ch == '-' || ch == "'"; // || ch == "'" || ch == "’" || ch == russianAccent;
    }
    ;
    function normalizeRussian(s) {
        var rep = [];
        for (var i = 0; i < s.length; i++) {
            var ch = s.charAt(i);
            var ok = wrongCyrilic[ch];
            rep.push(ok ? ok.charAt(0) : ch);
        }
        return rep.join('');
    }
    function startSplitWords(sentences) {
        var res = new Array(sentences.length);
        for (var i = 0; i < sentences.length; i++) {
            var sentRes = startSplitWord(sentences[i]);
            res[i] = sentRes;
        }
        return res;
    }
    //funkce musi odpovidat d:\LMCom\rew\NewLMComModel\Design\Dictionaries.cs, wordsForDesignTime
    function startSplitWord(sent) {
        if (_.isEmpty(sent))
            return [];
        var res = [];
        var word = [];
        var wordCharFound = false;
        for (var i = 0; i < sent.length; i++) {
            var ch = sent.charAt(i);
            var isWord = isWordChar(ch);
            if (isWord)
                wordCharFound = true;
            if (wordCharFound && word.length > 0 && !isWord) {
                res.push(word.join(''));
                word = [];
                wordCharFound = false;
            }
            word.push(ch);
        }
        if (word.length > 0)
            res.push(word.join(''));
        return res;
    }
    DictConnector.startSplitWord = startSplitWord;
    function finishSplitWord(word, crsLang) {
        if (_.isEmpty(word))
            return null;
        if (crsLang == LMComLib.Langs.ru_ru)
            word = normalizeRussian(word);
        var res = [];
        var resRaw = [];
        for (var i = 0; i < word.length; i++) {
            var ch = word.charAt(i);
            var isWord = isWordChar(ch);
            if (isWord) {
                resRaw.push(ch);
                if (ch != russianAccent)
                    res.push(ch);
            }
            else if (res.length > 0 && !isWord)
                break;
        }
        return res.length > 0 ? { word: res.join('').toLowerCase(), wordRaw: resRaw.join('') } : null;
    }
    function wordsForDesignTime(sent, crsLang, res) {
        if (_.isEmpty(sent))
            return null;
        sent = sent.toLowerCase();
        if (crsLang == LMComLib.Langs.ru_ru)
            sent = normalizeRussian(sent);
        var word = [];
        for (var i = 0; i <= sent.length; i++) {
            var ch = i < sent.length ? sent.charAt(i) : ' ';
            var isWord = isWordChar(ch);
            if (isWord)
                word.push(ch);
            else if (word.length > 0 && !isWord) {
                res.push(word.join(''));
                word = [];
            }
        }
    }
    DictConnector.wordsForDesignTime = wordsForDesignTime;
})(DictConnector || (DictConnector = {}));
//xx/#DEBUG
var Logger;
(function (Logger) {
    function trace_dict(msg) {
        Logger.trace("Dict", msg);
    }
    Logger.trace_dict = trace_dict;
})(Logger || (Logger = {}));
//xx/#ENDDEBUG
//var noop_dict = null;
var TreeView;
(function (TreeView) {
    function nodeToData(nd) {
        var res = {};
        for (var n in nd.data)
            res[n] = nd.data[n];
        res.Title = nd.title();
        res.isNew = nd.isNew;
        res.Items = _.map(nd.items(), function (it) { return nodeToData(it); });
        return res;
    }
    function path(self) {
        if (!self)
            return '... missing ...';
        var res = self.Title;
        while (self.parent != null) {
            self = self.parent;
            res = self.Title + ' / ' + res;
        }
        return res;
    }
    TreeView.path = path;
    function root(self) {
        while (self.parent)
            self = self.parent;
        return self;
    }
    TreeView.root = root;
    function adjustParents(self, parent) {
        if (!self)
            return;
        self.parent = parent;
        if (self.Items)
            _.each(self.Items, function (it) { return adjustParents(it, self); });
    }
    TreeView.adjustParents = adjustParents;
    function findNode(root, cond) {
        if (!root)
            return null;
        if (cond(root))
            return root;
        if (!root.Items)
            return null;
        for (var i = 0; i < root.Items.length; i++) {
            var res = findNode(root.Items[i], cond);
            if (res != null)
                return res;
        }
    }
    TreeView.findNode = findNode;
    var Model = (function () {
        function Model(data, isNew, isLocked, options) {
            this.options = options;
            this.refreshCutPaste = ko.observable(0); //fake observable pro vynuceni aktualizace nekterych computed observables
            this.root = new Node(data, null, this, isNew, isLocked);
        }
        Model.prototype.getResult = function () {
            return nodeToData(this.root);
        };
        Model.prototype.getJSON = function () {
            return JSON.stringify(this.getResult());
        };
        Model.prototype.cutCopy = function (nd, isCut) {
            try {
                if (this.cutCopied == nd && this.isCut == isCut) {
                    this.cutCopied = null;
                    nd.cutCopyFlag('');
                    return;
                }
                if (this.cutCopied != null)
                    this.cutCopied.cutCopyFlag('');
                if (nd)
                    nd.cutCopyFlag(isCut ? 'cut' : 'copy');
                this.cutCopied = nd;
                this.isCut = isCut;
            }
            finally {
                this.refreshCutPaste(this.refreshCutPaste() + 1); //zmena fake property -> prepocet CutPaste ikonek
            }
        };
        Model.prototype.paste = function (nd, isFirst) {
            var cutCopied = this.cutCopied;
            var isCut = this.isCut;
            cutCopied.cutCopyFlag('');
            if (isCut) {
                cutCopied.parent.items.remove(cutCopied);
                cutCopied.parent.adjustIcon();
            }
            else {
                var dt = nodeToData(cutCopied);
                cutCopied = new Node(dt, null, this, true, null);
            }
            if (isFirst) {
                nd.items.splice(0, 0, cutCopied);
                nd.adjustIcon();
                cutCopied.parent = nd;
            }
            else {
                nd.parent.items.splice(nd.parent.items.indexOf(nd) + 1, 0, cutCopied);
                nd.parent.adjustIcon();
                cutCopied.parent = nd.parent;
            }
            this.cutCopied = null;
            this.refreshCutPaste(this.refreshCutPaste() + 1); //zmena fake property -> prepocet CutPaste ikonek
        };
        Model.prototype.hover = function (nd, ishover) {
            if (ishover) {
                if (this.hovered == nd)
                    return;
                if (this.hovered)
                    this.hovered.hovered(false);
                this.hovered = nd;
                nd.hovered(true);
            }
            else {
                if (this.hovered == nd) {
                    this.hovered = null;
                    nd.hovered(false);
                }
            }
        };
        Model.prototype.edit = function (nd) {
            var self = this;
            if (this.edited == nd)
                return;
            if (this.edited) {
                var el = this.edited.editElement;
                el.text(this.edited.title());
            }
            if (nd) {
                var el = nd.editElement;
                var inputbox = "<input type='text' class='inputbox' value=\"" + nd.title() + "\">"; //Insert the HTML into the div 
                el.html(inputbox);
                var input = el.find("input.inputbox");
                input.click(function () { return false; }); //spolkni click
                input.focus(); //Immediately give the input box focus
                input.keydown(function (ev) {
                    if (ev.keyCode == 13) {
                        var value = input.val();
                        nd.title(value);
                        nd.title.valueHasMutated();
                        self.edited = null;
                    }
                    else if (ev.keyCode == 27) {
                        el.html(nd.title());
                        self.edited = null;
                    }
                });
            }
            this.edited = nd;
        };
        return Model;
    })();
    TreeView.Model = Model;
    function hasIsLocked(nd) {
        return _.any(nd.items(), function (it) { return it.isLocked || hasIsLocked(it); });
    }
    var Node = (function () {
        function Node(data, parent, model, isNew, isLocked) {
            this.data = data;
            this.parent = parent;
            this.model = model;
            this.isNew = isNew;
            this.checked = ko.observable(false);
            this.hovered = ko.observable(false);
            this.expanded = ko.observable(true);
            this.selected = ko.observable(false);
            this.icon = ko.observable('');
            //*********** Checbox management
            this.explicitOnChecked = false;
            //*********** CopyPaste
            this.cutCopyFlag = ko.observable(null);
            //naplneni dat
            var self = this;
            this.isLocked = (isLocked ? isLocked(data) : false);
            self.title = ko.observable(data.Title);
            self.items = data.Items ? ko.observableArray(_.map(data.Items, function (it) { return new Node(it, self, model, isNew, isLocked); })) : ko.observableArray();
            //inicializace fieldu
            self.adjustIcon();
            //Checked
            self.checked.subscribe(self.onChecked, self);
            //Expand
            self.expanded.subscribe(function (isExp) { self.adjustIcon(); });
            //Display Tools
            self.displayDelete = this.testDisplay(function () { return !self.isLocked && !!self.parent && !hasIsLocked(self); });
            self.displayEdit = ko.computed(function () { return true; });
            self.displayAddNext = this.testDisplay(function () { return !!self.parent; });
            self.displayAddFirst = ko.computed(function () { return true; });
            self.displayCut = this.testDisplay(function () { return !!self.parent; });
            self.displayCopy = ko.computed(function () { return true; });
            self.displayPasteFirst = this.testDisplay(function () {
                var cutCopied = self.model.cutCopied;
                var isCut = self.model.isCut;
                if (cutCopied == null)
                    return false;
                if (!isCut)
                    return true;
                var ptr = self;
                while (ptr != null) {
                    if (ptr == cutCopied)
                        return false;
                    ptr = ptr.parent;
                }
                return true;
            });
            self.displayPasteNext = this.testDisplay(function () { return !!self.parent && self.displayPasteFirst(); });
            //prida metody jmene itsMeHover a itsMeEdit k modelu. Ty pak zajisti volani registerElement('Hover', el), coz je sance zaregistrovat nebo pouzit element.
            ko_bindingHandlers_itsMe_register(self, ['Hover', 'Edit']);
        }
        //*********** basic opers
        Node.prototype.hover = function (ishover) { this.model.hover(this, ishover); };
        Node.prototype.expandCollapse = function () { this.expanded(!this.expanded()); };
        Node.prototype.testDisplay = function (cond) {
            var _this = this;
            return ko.computed(function () {
                if (!_this.model.options.editable)
                    return false; //netestuje se pro not editable mode
                if (_this.model.refreshCutPaste() < 0)
                    return false; //sideefekt / prepocitani computed observable
                return cond();
            });
        };
        //inicializace dulezituch HTML tagu
        Node.prototype.registerElement = function (itsMeName, el) {
            var _this = this;
            switch (itsMeName) {
                case "Hover":
                    $(el).hover(function () { return _this.hover(true); }, function () { return _this.hover(false); });
                    break;
                case "Edit":
                    this.editElement = $(el);
                    break;
            }
        };
        //*********** Helper
        Node.prototype.hasChild = function () { return this.items().length > 0; };
        Node.prototype.adjustIcon = function () { this.icon(this.hasChild() ? (this.expanded() ? 'folder-open' : 'folder') : 'book'); };
        Node.prototype.displayTools = function () { return this.model.options.editable && this.hovered() && this.model.edited != this; };
        Node.prototype.doEdit = function () { this.model.edit(this); };
        Node.prototype.doDelete = function () { this.parent.items.remove(this); this.parent.adjustIcon(); };
        Node.prototype.doAddNext = function () {
            var nd = new Node({ Items: null, Title: 'New Item', isNew: undefined }, this.parent, this.model, true, null);
            this.parent.items.splice(this.parent.items.indexOf(this) + 1, 0, nd);
            this.parent.adjustIcon();
            nd.doEdit();
        };
        Node.prototype.doAddFirst = function () {
            var nd = new Node({ Items: null, Title: 'New Item', isNew: undefined }, this, this.model, true, null);
            this.items.splice(0, 0, nd);
            this.adjustIcon();
            nd.doEdit();
        };
        Node.prototype.onChecked = function (checked) {
            if (this.explicitOnChecked)
                return;
            //if (!!this.items) _.forEach(this.itemsLow(), i => i.checked(checked));
            //if (!!this.items) _.forEach(this.items(), i => i.checked(checked));
            _.forEach(this.items(), function (i) { return i.checked(checked); });
            if (this.parent)
                this.parent.onChildChecked();
        };
        Node.prototype.onChildChecked = function () {
            this.explicitOnChecked = true;
            this.checked(this.allChildrenChecked());
            this.explicitOnChecked = false;
            if (this.parent)
                this.parent.onChildChecked();
        };
        //allChildrenChecked(): boolean { return _.all(this.itemsLow(), i => i.checked()); }
        Node.prototype.allChildrenChecked = function () { return _.all(this.items(), function (i) { return i.checked(); }); };
        Node.prototype.doCut = function () { this.model.cutCopy(this, true); };
        Node.prototype.doCopy = function () { this.model.cutCopy(this, false); };
        Node.prototype.doPasteFirst = function () { this.model.paste(this, true); };
        Node.prototype.doPasteNext = function () { this.model.paste(this, false); };
        return Node;
    })();
    TreeView.Node = Node;
})(TreeView || (TreeView = {}));
var Pager;
(function (Pager) {
    (function (pathType) {
        //root,
        pathType[pathType["eTestMe"] = 0] = "eTestMe";
        pathType[pathType["restServices"] = 1] = "restServices";
        pathType[pathType["loggerService"] = 2] = "loggerService";
        pathType[pathType["restServicesScorm"] = 3] = "restServicesScorm";
        pathType[pathType["eaScormServer"] = 4] = "eaScormServer";
        pathType[pathType["eaData"] = 5] = "eaData";
        pathType[pathType["relPath"] = 6] = "relPath";
        //schoolCourse, //lmcom/rew/schools/courses/
        pathType[pathType["cpv"] = 7] = "cpv";
        //
        pathType[pathType["grammar"] = 8] = "grammar";
        pathType[pathType["instructions"] = 9] = "instructions";
        pathType[pathType["sitemaps"] = 10] = "sitemaps";
        pathType[pathType["sitemapRoot"] = 11] = "sitemapRoot";
        pathType[pathType["moduleData"] = 12] = "moduleData";
        pathType[pathType["dictInfo"] = 13] = "dictInfo";
        pathType[pathType["course2rewiseMap"] = 14] = "course2rewiseMap";
        pathType[pathType["rewiseIndex"] = 15] = "rewiseIndex";
        pathType[pathType["rewiseLesson"] = 16] = "rewiseLesson";
        pathType[pathType["prod"] = 17] = "prod";
        pathType[pathType["data"] = 18] = "data";
    })(Pager.pathType || (Pager.pathType = {}));
    var pathType = Pager.pathType;
    //base tag musi byt absolutni URL, neboli je k nicemu
    //var bases = document.getElementsByTagName('base');
    //export var basicDir: string;
    //export var basicUrl: string;
    //if (bases && bases.length == 1) {
    //  var parts = bases[0].href.toLowerCase().split('/');
    //  var schoolIdx = _.indexOf(parts, 'schools');
    //  parts = parts.slice(0, schoolIdx >= 0 ? schoolIdx : parts.length - 2); //odrizni Schools
    //  basicDir = parts.join('/');
    //  basicUrl = basicDir + '/';
    //  //basicDir = basicUrl.substr(0, basicUrl.length - 1);
    //} else {
    //k http://www.langmaster.com/rew/Schools/NewEA.aspx... vrati http://www.langmaster.com/rew/
    var parts = location.pathname.toLowerCase().split('/');
    var schoolIdx = _.indexOf(parts, 'schools');
    ////var href = 'http(s)://server/_layouts/SharePointLearningKit/Frameset/Frameset.aspx'.toLowerCase();
    ////var idx = href.indexOf('/sharepointlearningkit/');
    ////href = href.substr(0, idx + 1) + 'SLMS/SLMSLoadLM.ashx';
    parts = parts.slice(0, schoolIdx >= 0 ? schoolIdx : parts.length - 2); //odrizni Schools/NewEA.aspx
    Pager.basicDir = location.protocol + '//' + location.host + parts.join('/');
    Pager.basicUrl = Pager.basicDir + '/';
    //}
    //export var cfg: ajaxConfig = { forceServiceUrl: null };
    function path(type, url, loc) {
        if (url === void 0) { url = ""; }
        if (loc === void 0) { loc = LMComLib.Langs.no; }
        var res = null;
        switch (type) {
            //case pathType.root: res = '../'; break;
            case pathType.relPath:
                return '../' + url;
                break;
            case pathType.restServices:
                return !cfg.forceServiceUrl ? Pager.basicUrl + 'service.ashx' : serviceUrl();
                break;
            case pathType.loggerService:
                return cfg.forceLoggerUrl ? cfg.forceLoggerUrl : path(pathType.restServices);
                break;
            case pathType.restServicesScorm:
                return cfg.forceServiceUrl == null ? Pager.basicUrl + 'scormEx.ashx' : serviceUrl();
                break;
            /*********** OBSOLETE **************/
            case pathType.eTestMe:
                res = 'lmcom/eTestMe.com/Test.aspx';
                break;
            case pathType.eaScormServer:
                res = 'lmcom/services/rpc/ea/scormserver.aspx';
                break;
            case pathType.eaData:
                res = LMComLib.LangToEADir[loc.toString()] + "/";
                break;
            case pathType.cpv:
                res = "lmcom/eTestMe.com/site/" + Trados.actLangCode + '/ListeningAndPronunc.aspx#/AppPronunc/FactSoundView.xaml?IsFactOnly=true&';
                break;
            default: throw "NotImplemented";
        }
        return Pager.basicUrl + res + url;
    }
    Pager.path = path;
    function serviceUrl() {
        var cfgUrl = cfg.forceServiceUrl;
        switch (cfgUrl) {
            case 'edoceo':
                return location.protocol + '//' + location.host + '/' + location.pathname.split('/')[1] + '/courseresult/langmaster';
            case 'scomp-sharepoint':
                var href = location.href.toLowerCase();
                var idx = href.indexOf('/sharepointlearningkit/');
                href = href.substr(0, idx + 1);
                href += 'SLMS/SLMSLoadLM.ashx'.toLowerCase();
                //Query GUID
                var frame = window;
                var guid = null;
                var lkpar = 'LearnerAssignmentId'.toLowerCase();
                while (frame != null) {
                    guid = LowUtils.getQuery(LowUtils.parseQuery(frame.location.search), lkpar, null);
                    if (guid != null)
                        break;
                    frame = frame == frame.parent ? null : frame.parent;
                }
                if (guid != null)
                    href += '?AttemptIdGuid=' + guid;
                return href;
            case 'scomp-sharepoint-test':
                return "http://localhost/rew/scormexNet35.ashx";
            case 'moodle-pchelp':
                var href = scorm.apiUrl.replace('mod/scorm/player.php', 'filter/langmaster/service.php');
                return href;
            default:
                return cfgUrl;
        }
    }
    function replaceJSON(fn, replace) {
        return replace ? fn.replace('.json', '.js').replace('.rjson', '.js').replace('.lst', '.txt') : fn;
    }
    Pager.replaceJSON = replaceJSON;
    //export function filePath(type: pathType, id: string, loc: string = null): locPaths {
    //  var dir: string; var ext = "json"; var locExt = "json"; //var urlDict = null;
    //  switch (type) {
    //    case pathType.prod:
    //    //case pathType.data:
    //    //  id = "../" + pathType[type] + "/" + id.toLowerCase() + '.json';
    //    //  return { url: id, urlLoc: id.replace('.', '.' + loc + '.') };
    //    //case pathType.sitemaps: dir = "eacourses"; ext = "rjson"; break;
    //    //case pathType.sitemapRoot: dir = "eacourses"; id = "courses"; ext = "rjson"; break; //id se ignoruje
    //    //case pathType.sitemapRoot: dir = "eacourses"; id = "courses"; break; //id se ignoruje
    //    //case pathType.dictInfo: dir = "eacourses"; id = "dicts"; ext = "rjson"; break; //id se ignoruje
    //    //case pathType.grammar: dir = "eagrammar"; break;
    //    //case pathType.instructions: dir = "eadata"; id = "instructions"; break; //id se ignoruje
    //    //case pathType.moduleData: dir = "eadata"; /*urlDict = "lingDict_" + id;*/ break;
    //    //case pathType.course2rewiseMap: dir = "../rwbooks/runtime"; id = "crs2rwmap"; locExt = "rjson"; break; //id se ignoruje, pouze lokalizovana cast
    //    //case pathType.rewiseIndex: dir = "../rwbooks/runtime"; id = "index"; locExt = "rjson"; break; //id se ignoruje, pouze lokalizovana cast
    //    //case pathType.rewiseLesson: dir = "../rwbooks/runtime"; id = Utils.hashDir1(id, 0x3f) + "/" + id; locExt = "rjson"; break; //pouze lokalizovana cast, id je cislo lekce
    //      //case pathType.dictData: dir = "eadata"; locExt = "rjson";
    //      //pro English?E vezmi English? slovnik
    //      //id = id.replace(/(_english\d)e(_)/i, '$1$2');
    //      break;
    //  }
    //  //if (urlDict != null) urlDict = dir + "/" + loc + "/" + urlDict + ".json";
    //  return { url: dir + "/" + id.toLowerCase() + "." + ext, urlLoc: dir + "/" + loc + "/" + id.toLowerCase() + "." + locExt };
    //}
    ////Ajax z Silverlight, volani pres URL mechanismus (napr. pro edoceo v Schools\PersistScormEx.ts)
    //export function doSLAjax(isPost: boolean, url: string, type: string, data: string, callbackObj): void {
    //  doAjax(isPost, url, type, data, (res: string) => callbackObj.completed(res));
    //}
    ////Ajax z Silverlight, volani pres CMD mechanismus (napr. Schools\PersistNewEA.ts)
    //export function doSLAjaxCmd(isPost: boolean, url: string, type: string, data: string, callbackObj): void {
    //  doAjax(isPost, url, type, data, (str: any) => {
    //    if (str == null) { callbackObj.completed(null); return; }
    //    var res: LMComLib.RpcResponse = typeof str == 'string' ? (_.isEmpty(str) ? null : JSON.parse(str)) : str;
    //    if (res == null) return;
    //    if (res.error != 0)
    //      Logger.error('Ajax.doSLAjaxCmd', res.error.toString() + ": " + res.errorText + ", " + url, '');
    //    else
    //      callbackObj.completed(res.result);
    //  });
    //}
    //Ajax pres CMD mechanismus (napr. Schools\PersistNewEA.ts)
    function doAjaxCmd(isPost, url, type, data, completed, error) {
        if (error === void 0) { error = null; }
        doAjax(isPost, url, type, data, function (str) {
            if (str == null) {
                completed(null);
                return;
            }
            var res = typeof str == 'string' ? (_.isEmpty(str) ? null : JSON.parse(str)) : str;
            if (res == null) {
                completed(null);
                return;
            }
            else if (res.error != 0) {
                Logger.error('Ajax.doSLAjaxCmd', res.error.toString() + ": " + res.errorText + ", " + url, '');
                if (error)
                    error(res.error, res.errorText);
            }
            else
                completed(res.result);
        });
    }
    Pager.doAjaxCmd = doAjaxCmd;
    function ajax_download(url, data, type, input_name) {
        if (input_name === void 0) { input_name = "par"; }
        var $iframe, iframe_doc, iframe_html;
        if (($iframe = $('#download_iframe')).length === 0) {
            $iframe = $("<iframe id='download_iframe'" +
                " style='display: none' src='about:blank'></iframe>").appendTo("body");
        }
        url += url.indexOf('?') >= 0 ? "&" : '?';
        url += "timestamp=" + new Date().getTime().toString();
        if (type)
            url += '&type=' + type;
        if (url.charAt(0) == '/')
            url = '..' + url;
        iframe_doc = $iframe[0].contentWindow || $iframe[0].contentDocument;
        if (iframe_doc.document) {
            iframe_doc = iframe_doc.document;
        }
        iframe_html = "<html><head></head><body><form method='POST' action='" +
            url + "'>" +
            "<input type=hidden name='" + input_name + "' value='" +
            JSON.stringify(data) + "'/></form>" +
            "</body></html>";
        iframe_doc.open();
        iframe_doc.write(iframe_html);
        $(iframe_doc).find('form').submit();
    }
    Pager.ajax_download = ajax_download;
    //Univerzalni AJAX funkce pro POST x GET. crossdomain x bez
    function doAjax(isPost, url, type, data, completed /*, error: (id: number, msg: string) => void = null*/) {
        var isCrossDomain = Utils.isCrossDomain(url);
        //var isCrossDomain = true;
        var timestamp = new Date().getTime().toString();
        url += url.indexOf('?') >= 0 ? "&" : '?';
        url += "timestamp=" + timestamp;
        if (type)
            url += '&type=' + type;
        if (url.charAt(0) == '/')
            url = '..' + url;
        if (isPost && isCrossDomain) {
            Utils.iFrameSubmit(url + '&LoggerLogId=' + Logger.logId() + "&LMComVersion=" + Utils.LMComVersion, data, completed);
        }
        else {
            if (!isPost && data)
                url += "&par=" + encodeURIComponent(data);
            Logger.trace('<#' + timestamp + ' doAjax', 'url=' + url + (isPost ? ', data=' + data : ''));
            $.ajax(url, {
                async: true,
                type: isPost ? 'POST' : 'GET',
                dataType: isCrossDomain ? 'jsonp' : 'text',
                data: isPost ? data : '',
                contentType: "text/plain; charset=UTF-8",
                headers: { "LoggerLogId": Logger.logId(), "LMComVersion": Utils.LMComVersion }
            }).
                done(function (res) { if (completed)
                completed(res); }).
                fail(function () { debugger; Logger.error('Ajax.doAjax', url, ''); });
        }
    }
    Pager.doAjax = doAjax;
    //Obsolete, POST (nema obecne callback - pro crossdomain) 
    function ajaxPost(pthType, type, data, completed, error) {
        if (completed === void 0) { completed = null; }
        if (error === void 0) { error = null; }
        var url = Pager.path(pthType);
        doAjax(true, url, type, JSON.stringify(data), function (str) {
            if (!completed)
                return;
            var res = typeof str == 'string' ? (_.isEmpty(str) ? {} : JSON.parse(str)) : str;
            //if (res.error && res.error != 0)
            //  if (res.error == 999) Logger.error('ajaxPost', url + ": " + res.errorText + ", " + url, '');
            //  else {
            //    if (error) error(res.error, res.errorText); else Logger.error('ajaxPost', res.errorText, '');
            //  }
            //else if (completed != null) completed(res.result);
            if (res.error && res.error != 0)
                switch (res.error) {
                    case 999:
                        Logger.error('ajaxGet', url + ": " + res.errorText + ", " + url, '');
                        break;
                    case 998:
                        Logger.error('Warning: User logged under other account', url + ": " + res.errorText, '');
                        LMStatus.LogoutLow();
                        break;
                    default:
                        if (error)
                            error(res.error, res.errorText);
                        else
                            Logger.error('ajaxGet', res.errorText, '');
                        break;
                }
            else if (completed != null)
                completed(res.result);
        });
    }
    Pager.ajaxPost = ajaxPost;
    //export function ajaxGetEx<T>(pthType: Pager.pathType, type: string, objData: T, completed: (res: any) => void, error: (id: number, msg: string) => void = null): void {
    //  var url = Pager.path(pthType);
    //  doAjax(false, url, type, JSON.stringify(objData),
    //    (str: any) => {
    //      var res: LMComLib.RpcResponse = typeof str == 'string' ? JSON.parse(str) : str;
    //      if (res.error && res.error != 0)
    //        switch (res.error) {
    //          case 999:
    //            Logger.error('ajaxGet', url + ": " + res.errorText + ", " + url, '');
    //            break;
    //          case 998:
    //            break;
    //          default:
    //            if (error) error(res.error, res.errorText); else Logger.error('ajaxGet', res.errorText, '');
    //            break;
    //        }
    //      else if (completed != null) completed(res.result);
    //    });
    //}
    //Obsolete, GET
    function ajaxGet(pthType, type, objData, completed, error) {
        if (error === void 0) { error = null; }
        var url = Pager.path(pthType);
        doAjax(false, url, type, JSON.stringify(objData), function (str) {
            var res = typeof str == 'string' ? JSON.parse(str) : str;
            if (res.error && res.error != 0)
                switch (res.error) {
                    case 999:
                        Logger.error('ajaxGet', url + ": " + res.errorText + ", " + url, '');
                        break;
                    case 998:
                        Logger.error('Warning: User logged under other account', url + ": " + res.errorText, '');
                        LMStatus.LogoutLow();
                        break;
                    default:
                        if (error)
                            error(res.error, res.errorText);
                        else
                            Logger.error('ajaxGet', res.errorText, '');
                        break;
                }
            else if (completed != null)
                completed(res.result);
        });
    }
    Pager.ajaxGet = ajaxGet;
})(Pager || (Pager = {}));
$.ajaxTransport("+*", function (options, originalOptions, jqXHR) {
    // Test for the conditions that mean we can/want to send/receive blobs or arraybuffers - we need XMLHttpRequest
    // level 2 (so feature-detect against window.FormData), feature detect against window.Blob or window.ArrayBuffer,
    // and then check to see if the dataType is blob/arraybuffer or the data itself is a Blob/ArrayBuffer
    if (window.FormData && ((options.dataType && (options.dataType == 'blob' || options.dataType == 'arraybuffer'))
        || (options.data && ((window.Blob && options.data instanceof Blob)
            || (window.ArrayBuffer && options.data instanceof ArrayBuffer))))) {
        return {
            /**
             * Return a transport capable of sending and/or receiving blobs - in this case, we instantiate
             * a new XMLHttpRequest and use it to actually perform the request, and funnel the result back
             * into the jquery complete callback (such as the success function, done blocks, etc.)
             *
             * @param headers
             * @param completeCallback
             */
            send: function (headers, completeCallback) {
                var xhr = new XMLHttpRequest(), url = options.url || window.location.href, type = options.type || 'GET', dataType = options.dataType || 'text', data = options.data || null, async = options.async || true;
                xhr.addEventListener('load', function () {
                    var res = {};
                    res[dataType] = xhr.response;
                    completeCallback(xhr.status, xhr.statusText, res, xhr.getAllResponseHeaders());
                });
                xhr.open(type, url, async);
                xhr.responseType = dataType;
                xhr.send(data);
            },
            abort: function () {
                jqXHR.abort();
            }
        };
    }
});
//Soucast REW, musi byt po SCORM skupine
//http://blogs.msdn.com/b/kristoffer/archive/2006/12/22/loading-javascript-files-in-parallel.aspx
//http://stackoverflow.com/questions/94141/javascripts-document-write-inline-script-execution-order
var boot;
(function (boot) {
    function Dummy() {
    }
    boot.Dummy = Dummy;
    function Start() {
        bootStart($.noop);
    }
    boot.Start = Start;
    function bootStart(compl) {
        Logger.traceMsg('boot.Start');
        if (cfg.target == LMComLib.Targets.no)
            return;
        var completed = function () { ViewBase.init(); $('#splash').hide(); compl(); };
        if (cfg.target != LMComLib.Targets.web)
            schools.InitModel(completed);
        else {
            Login.InitModel({ logins: cfg.logins ? cfg.logins : [LMComLib.OtherType.LANGMaster, LMComLib.OtherType.Facebook, LMComLib.OtherType.Google, LMComLib.OtherType.Microsoft] }, function () { return schools.InitModel(completed); });
        }
    }
    boot.bootStart = bootStart;
    function rewJSUrl() {
        return cfg.licenceConfig.serviceUrl + '?type=_rew_' + LMComLib.Targets[cfg.target] + '&version=' + cfg.licenceConfig.rewVersion.toString() + '&appUrl=' + Utils.appIdViaUrl() + '&LoggerLogId=' + Logger.logId() + "&LMComVersion=" + Utils.LMComVersion;
    }
    function loadCourseJS(completed) {
        var req = {
            appUrl: typeof (scorm) != 'undefined' ? scorm.apiSignature : Utils.appIdViaUrl(),
            courseVersion: cfg.licenceConfig.courseVersion,
            Type: LMStatus.Cookie.Type,
            TypeId: LMStatus.Cookie.TypeId,
            FirstName: LMStatus.Cookie.FirstName,
            LastName: LMStatus.Cookie.LastName,
            EMail: LMStatus.Cookie.EMail,
            Login: LMStatus.Cookie.Login,
            Target: cfg.target,
            rootCourse: cfg.rootProductId,
        };
        var url = cfg.licenceConfig.serviceUrl + '?type=_course&data=' + encodeURIComponent(Utils.encrypt(req)) + '&appUrl=' + Utils.appIdViaUrl() + '&LoggerLogId=' + Logger.logId() + "&LMComVersion=" + Utils.LMComVersion + "&version=" + cfg.licenceConfig.courseVersion.toString();
        Logger.traceFmt('boot.loadCourseJS', 'appUrl={0}, target={1}, url={2}', req.appUrl, req.Target.toString(), url);
        Pager.renderTemplate('Dummy');
        $('#splash').show();
        $.ajax({
            dataType: "script",
            url: url,
            success: function () {
                Logger.traceMsg('boot.loadCourseJS: success');
                $('#splash').hide();
                completed();
            },
            cache: true,
        });
    }
    boot.loadCourseJS = loadCourseJS;
    function Error() {
        Pager.loadPage(new splash.licenceError());
    }
    boot.Error = Error;
    function minInit() {
        $('body').addClass(Trados.actLangCode);
        var cls;
        if (!_.isEmpty(cls = Gui2.skin.instance.bodyClass()))
            $('body').addClass(cls);
        $('body').addClass("design-" + (cfg.designId ? cfg.designId : ''));
        if (Trados.isRtl)
            $('body').addClass("rtl-able");
    }
    boot.minInit = minInit;
    var doOldApplicationStart = function () {
        if (cfg.startProcName == 'no') {
            minInit();
            return;
        }
        if (_.isEmpty(cfg.startProcName))
            cfg.startProcName = 'boot.Start';
        var parts = cfg.startProcName.split('.');
        var fnc = parts.pop();
        var ctx = window;
        for (var i = 0; i < parts.length; i++)
            ctx = ctx[parts[i]];
        ctx[fnc]();
    };
    function OldApplicationStart() { if (doOldApplicationStart)
        doOldApplicationStart(); doOldApplicationStart = null; }
    boot.OldApplicationStart = OldApplicationStart;
})(boot || (boot = {}));
Array.prototype.pushArray = function (arr) {
    if (arr)
        this.push.apply(this, arr);
    return this;
};
var bowser;
(function (bowser) {
    /**
  * navigator.userAgent =>
  * Chrome:  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_7) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.57 Safari/534.24"
  * Opera:   "Opera/9.80 (Macintosh; Intel Mac OS X 10.6.7; U; en) Presto/2.7.62 Version/11.01"
  * Safari:  "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_7; en-us) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1"
  * IE:      "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C)"
  * IE>=11:  "Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; .NET4.0E; .NET4.0C; Media Center PC 6.0; rv:11.0) like Gecko"
  * Firefox: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0) Gecko/20100101 Firefox/4.0"
  * iPhone:  "Mozilla/5.0 (iPhone Simulator; U; CPU iPhone OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5"
  * iPad:    "Mozilla/5.0 (iPad; U; CPU OS 4_3_2 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8H7 Safari/6533.18.5",
  * Android: "Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; T-Mobile G2 Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1"
  * Touchpad: "Mozilla/5.0 (hp-tabled;Linux;hpwOS/3.0.5; U; en-US)) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/234.83 Safari/534.6 TouchPad/1.0"
  * PhantomJS: "Mozilla/5.0 (Macintosh; Intel Mac OS X) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.5.0 Safari/534.34"
  */
    var ua = navigator.userAgent, t = true, ie = /(msie|trident)/i.test(ua), chrome = /chrome|crios/i.test(ua), phantom = /phantom/i.test(ua), safari = /safari/i.test(ua) && !chrome && !phantom, iphone = /iphone/i.test(ua), ipad = /ipad/i.test(ua), touchpad = /touchpad/i.test(ua), android = /android/i.test(ua), opera = /opera/i.test(ua) || /opr/i.test(ua), firefox = /firefox/i.test(ua), gecko = /gecko\//i.test(ua), seamonkey = /seamonkey\//i.test(ua), webkitVersion = /version\/(\d+(\.\d+)?)/i, firefoxVersion = /firefox\/(\d+(\.\d+)?)/i, o;
    function detect() {
        if (ie)
            return {
                name: 'Internet Explorer',
                msie: t,
                version: ua.match(/(msie |rv:)(\d+(\.\d+)?)/i)[2]
            };
        if (opera)
            return {
                name: 'Opera',
                opera: t,
                version: ua.match(webkitVersion) ? ua.match(webkitVersion)[1] : ua.match(/opr\/(\d+(\.\d+)?)/i)[1]
            };
        if (chrome)
            return {
                name: 'Chrome',
                webkit: t,
                chrome: t,
                version: ua.match(/(?:chrome|crios)\/(\d+(\.\d+)?)/i)[1]
            };
        if (phantom)
            return {
                name: 'PhantomJS',
                webkit: t,
                phantom: t,
                version: ua.match(/phantomjs\/(\d+(\.\d+)+)/i)[1]
            };
        if (touchpad)
            return {
                name: 'TouchPad',
                webkit: t,
                touchpad: t,
                version: ua.match(/touchpad\/(\d+(\.\d+)?)/i)[1]
            };
        if (iphone || ipad) {
            o = {
                name: iphone ? 'iPhone' : 'iPad',
                webkit: t,
                mobile: t,
                ios: t,
                iphone: iphone,
                ipad: ipad
            };
            // WTF: version is not part of user agent in web apps
            if (webkitVersion.test(ua)) {
                o.version = ua.match(webkitVersion)[1];
            }
            return o;
        }
        if (android)
            return {
                name: 'Android',
                webkit: t,
                android: t,
                mobile: t,
                version: (ua.match(webkitVersion) || ua.match(firefoxVersion))[1]
            };
        if (safari)
            return {
                name: 'Safari',
                webkit: t,
                safari: t,
                version: ua.match(webkitVersion)[1]
            };
        if (gecko) {
            o = {
                name: 'Gecko',
                gecko: t,
                mozilla: t,
                version: ua.match(firefoxVersion)[1]
            };
            if (firefox) {
                o.name = 'Firefox';
                o.firefox = t;
            }
            return o;
        }
        if (seamonkey)
            return {
                name: 'SeaMonkey',
                seamonkey: t,
                version: ua.match(/seamonkey\/(\d+(\.\d+)?)/i)[1]
            };
        return {};
    }
    bowser.agent = detect();
    // Graded Browser Support
    // http://developer.yahoo.com/yui/articles/gbs
    if ((bowser.agent.msie && bowser.agent.version >= 8) ||
        (bowser.agent.chrome && bowser.agent.version >= 10) ||
        (bowser.agent.firefox && bowser.agent.version >= 4.0) ||
        (bowser.agent.safari && bowser.agent.version >= 5) ||
        (bowser.agent.opera && bowser.agent.version >= 10.0)) {
        bowser.agent.a = t;
    }
    else if ((bowser.agent.msie && bowser.agent.version < 8) ||
        (bowser.agent.chrome && bowser.agent.version < 10) ||
        (bowser.agent.firefox && bowser.agent.version < 4.0) ||
        (bowser.agent.safari && bowser.agent.version < 5) ||
        (bowser.agent.opera && bowser.agent.version < 10.0)) {
        bowser.agent.c = t;
    }
    else
        bowser.agent.x = t;
    bowser.dataStr = JSON.stringify(bowser.agent);
})(bowser || (bowser = {}));
var Utils;
(function (Utils) {
    function sum(list, getNumber) {
        var res = 0;
        _.each(list, function (item) { return res += getNumber(item); });
        return res;
    }
    Utils.sum = sum;
    function getObjectClassName(obj) {
        if (obj && obj.constructor && obj.constructor.toString()) {
            /*
             *  for browsers which have name property in the constructor
             *  of the object,such as chrome
             */
            if (obj.constructor.name) {
                return obj.constructor.name;
            }
            var str = obj.constructor.toString();
            /*
             * executed if the return of object.constructor.toString() is
             * "[object objectClass]"
             */
            if (str.charAt(0) == '[') {
                var arr = str.match(/\[\w+\s*(\w+)\]/);
            }
            else {
                /*
                 * executed if the return of object.constructor.toString() is
                 * "function objectClass () {}"
                 * for IE Firefox
                 */
                var arr = str.match(/function\s*(\w+)/);
            }
            if (arr && arr.length == 2) {
                return arr[1];
            }
        }
        return undefined;
    }
    Utils.getObjectClassName = getObjectClassName;
    ;
    function applyMixins(derivedCtor, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
            Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
                if (name !== 'constructor') {
                    derivedCtor.prototype[name] = baseCtor.prototype[name];
                }
            });
        });
    }
    Utils.applyMixins = applyMixins;
    //applyMixins (srcType, [copyFrom1, copyFrom2,...]);
    function longLog(lines) { _.each(lines.split('\n'), function (l) { return console.log(l); }); }
    Utils.longLog = longLog;
    function extendJsonDataByClass(jsonData, cls) {
        var t = cls.prototype;
        for (var p in t)
            jsonData[p] = t[p];
        jsonData.constructor();
    }
    Utils.extendJsonDataByClass = extendJsonDataByClass;
    function endsWith(str, suffix) { return str.indexOf(suffix, str.length - suffix.length) !== -1; }
    Utils.endsWith = endsWith;
    function startsWith(str, suffix) { return str.indexOf(suffix) == 0; }
    Utils.startsWith = startsWith;
    // Encodes the basic 4 characters used to malform HTML in XSS hacks
    function htmlEncode(s) {
        return _.isEmpty(s) ? '' : s.replace(/\'/g, "&#39;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    }
    Utils.htmlEncode = htmlEncode;
    function htmlDecode(s) {
        return _.isEmpty(s) ? '' : s.replace(/\'/g, "&#39;").replace(/\"/g, "&#34;").replace(/</g, "&#60;").replace(/>/g, "&#62;");
    }
    Utils.htmlDecode = htmlDecode;
    function endWith(src, suffix) {
        return src.indexOf(suffix, this.length - suffix.length) !== -1;
    }
    Utils.endWith = endWith;
    function toCammelCase(obj) {
        return obj.replace(toCammelCaseRegex, function (s, group1) { return group1.toUpperCase(); });
    }
    Utils.toCammelCase = toCammelCase;
    function fromCammelCase(obj) {
        return obj.replace(fromCammelCaseRegex, function (s, group1) { return '-' + group1.toLowerCase(); });
    }
    Utils.fromCammelCase = fromCammelCase;
    function normalizeCamelCase(obj) {
        _.each(_.keys(obj), function (key) {
            var replaced = toCammelCase(key.toLowerCase());
            if (replaced == key)
                return;
            obj[replaced] = obj[key];
            delete obj[key];
        });
    }
    Utils.normalizeCamelCase = normalizeCamelCase;
    var toCammelCaseRegex = /-([a-z])/gi;
    var fromCammelCaseRegex = /([A-Z])/g;
    function extendClass(derivedCtor, baseCtors) {
        extendObject(derivedCtor.prototype, baseCtors);
    }
    Utils.extendClass = extendClass;
    function extendObject(obj, baseCtors) {
        _.each(baseCtors, function (baseCtor) {
            var p = baseCtor.prototype;
            for (var name in p)
                if (p.hasOwnProperty(name))
                    obj[name] = p[name];
        });
    }
    Utils.extendObject = extendObject;
    //export function extendLow(d: Object, t: Object, tp: runtimeType = 0) { t = (<any>t).prototype; for (var p in t) d[p] = t[p]; }
    function fullUrl(url) {
        return !_.isEmpty(url) && url.indexOf('://') > 0;
    }
    Utils.fullUrl = fullUrl;
    //export function relativeUrl(relativePath: string, basePath: string) {
    //  relativePath = relativePath.toLowerCase(); basePath = basePath.toLowerCase();
    //  if (relativePath.charAt(0) !== '/') throw 'URI is already relative';
    //  if (basePath.charAt(0) !== '/') throw 'Cannot calculate a URI relative to another relative URI';
    //  if (relativePath === basePath) return relativePath;
    //  //var relative = relativePath.split('/'); var base = basePath.split('/');
    //  var common = commonPath(relativePath, basePath);
    //  var parents = basePath
    //    .substring(common)
    //    .replace(/[^\/]*$/, '')
    //    .replace(/.*?\//g, '../');
    //}
    //function commonPath(o: string, t: string): number {
    //  var one = o.split('/'); var two = t.split('/');
    //  var l = 0;
    //  for (var i = 0; i < Math.min(one.length, two.length); i++)
    //    if (one[i] != two[i]) return l; else l += one[i].length + 1;
    //};
    function combineUrl(url, concat) {
        if (_.isEmpty(concat) || concat.charAt(0) == '/' || concat.indexOf('://') > 0)
            return concat;
        if (!url)
            throw "!url";
        var url1 = url.split('/');
        url1 = url1.slice(0, url1.length - 1);
        var url2 = concat.split('/');
        var url3 = [];
        for (var i = 0, l = url1.length; i < l; i++) {
            if (url1[i] == '..') {
                url3.pop();
            }
            else if (url1[i] == '.') {
                continue;
            }
            else {
                url3.push(url1[i]);
            }
        }
        for (var i = 0, l = url2.length; i < l; i++) {
            if (url2[i] == '..') {
                url3.pop();
            }
            else if (url2[i] == '.') {
                continue;
            }
            else {
                url3.push(url2[i]);
            }
        }
        return url3.join('/');
    }
    Utils.combineUrl = combineUrl;
    function extend(literal, type) {
        type = type.prototype;
        literal['constructor'] = type['constructor'];
        for (var name in type)
            literal[name] = type[name];
        literal.constructor();
    }
    Utils.extend = extend;
    function modulo(s, m) {
        var z = s % m;
        return { m: (s - z) / m, z: z };
    }
    Utils.modulo = modulo;
    //http://mark.koli.ch/use-javascript-and-jquery-to-get-user-selected-text
    function getSelection() {
        if (window.getSelection)
            return window.getSelection().toString();
        if (document.getSelection)
            return document.getSelection().toString();
        if (document.selection)
            return document.selection.createRange().text;
        return '';
    }
    Utils.getSelection = getSelection;
    Utils.LMComVersion = "1";
    function scormApiUrl() { return typeof (scorm) == 'undefined' ? '' : scorm.apiUrl; }
    Utils.scormApiUrl = scormApiUrl;
    function appIdViaUrl() {
        var sapi = Utils.scormApiUrl();
        return _.isEmpty(sapi) ? (window.location.host + window.location.pathname).toLowerCase() : sapi;
    }
    Utils.appIdViaUrl = appIdViaUrl;
    function flate(obj) {
        return _.isObject(obj) ? _.object(_.filter(_.pairs(obj), function (p) { return _.isString(p[1]) || _.isNumber(p[1]) || _.isBoolean(p[1]) || _.isDate(p[1]) || _.isEmpty(p[1]); })) : {};
    }
    Utils.flate = flate;
    //Returns a random number between min and max
    function random(min, max) {
        return Math.random() * (max - min) + min;
    }
    //Returns a random integer between min and max
    function randomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    //http://www.htmlblog.us/random-javascript-array 
    //http://stackoverflow.com/questions/2450954/how-to-randomize-a-javascript-array
    function randomizeArray(array) {
        for (var i = array.length - 1; i > 0; i--) {
            var j = i;
            while (j == i)
                j = Math.floor(Math.random() * (i + 1));
            var temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
        return array;
    }
    Utils.randomizeArray = randomizeArray;
    //export function hashDir1(name: string, mask: number = 0x7F): string {
    //  var xor = 0;
    //  _.each(gCrypt.stringToByteArray(md5.Encode(name)), (n: number) => xor = (xor ^ n) & mask);
    //  return LowUtils.bytesToHex([xor]);
    //}
    //export function hashDir2(name: string, mask: number = 0x7F) {
    //  var cd = gCrypt.stringToByteArray(md5.Encode(name));
    //  var xor1 = 0; var xor2 = 0;
    //  for (var i = 0; i < 8; i++) xor1 = (xor1 ^ cd[i]) & mask;
    //  for (var i = 8; i < 16; i++) xor2 = (xor2 ^ cd[i]) & mask;
    //  return LowUtils.bytesToHex([xor1]) + "/" + LowUtils.bytesToHex([xor2]);
    //}
    function toClipboard(s) {
        if (!window.clipboardData)
            return;
        window.clipboardData.setData("Text", s);
    }
    Utils.toClipboard = toClipboard;
    function createLayoutCell(width, tmpl, data) { return { width: width, tmpl: tmpl, data: data }; }
    Utils.createLayoutCell = createLayoutCell;
    function longToByteArray(num) {
        // we want to represent the input as a 8-bytes array
        var byteArray = [0, 0, 0, 0, 0, 0, 0, 0];
        for (var index = 0; index < byteArray.length; index++) {
            var bt = num & 0xff;
            byteArray[index] = bt;
            num = (num - bt) / 256;
        }
        return byteArray;
    }
    Utils.longToByteArray = longToByteArray;
    ;
    function byteArrayToLong(byteArray) {
        var value = 0;
        for (var i = byteArray.length - 1; i >= 0; i--) {
            value = (value * 256) + byteArray[i];
        }
        return value;
    }
    Utils.byteArrayToLong = byteArrayToLong;
    ;
    function Empty(val) {
        return typeof val == "undefined" || !val || val == null || val == '' || val == 0;
    }
    Utils.Empty = Empty;
    if ($.views)
        $.views.helpers({
            empty: Empty,
            call_debugger: function () { debugger; return ""; },
            notEmpty: function (val) { return !_.isEmpty(val); },
            extend: function (src, byStr) {
                var res = JSON.parse("{" + byStr + "}");
                return $.extend(src, res);
            },
            intToDate: function (val) { return Utils.intToDateStr(val); },
            intToDateLong: function (val) { return Utils.intToDateStrLong(val); },
            reverse: function (val) { var res = val.slice(); res.reverse(); return res; },
            smallFlagCls: function (line) { return "flag-small flag-small-" + LowUtils.EnumToString(LMComLib.LineIds, line).toLowerCase(); },
            midFlagCls: function (line, isBkg) { return (isBkg ? "flag-mid-bg " : "flag-mid ") + "flag-mid-" + LowUtils.EnumToString(LMComLib.LineIds, line).toLowerCase(); },
            cfgString: function () { return encodeURIComponent(JSON.stringify(cfg)); }
        });
    function tuples(items) {
        var res = [[]];
        if (items == null || items.length == 0)
            return res;
        for (var i = 0; i < items.length; i += 2) {
            res.push([items[i], i + 1 < items.length ? items[i + 1] : null]);
        }
    }
    Utils.tuples = tuples;
    function guid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    Utils.guid = guid;
    function encodeURL(url, params) {
        var res = url;
        var k, i = 0;
        var firstSeparator = (url.indexOf("?") === -1) ? '?' : '&';
        for (k in params) {
            res += (i++ === 0 ? firstSeparator : '&') + encodeURIComponent(k) + '=' + encodeURIComponent(params[k]);
        }
        return res;
    }
    Utils.encodeURL = encodeURL;
    //http://stackoverflow.com/questions/1877788/javascript-date-to-c-sharp-via-ajax
    var localOffset = new Date().getTimezoneOffset() * 60000;
    function toUtcTime(dt) { return new Date(dt.getTime() + localOffset); }
    Utils.toUtcTime = toUtcTime;
    function nowToInt() { return dateToInt(new Date()); }
    Utils.nowToInt = nowToInt; //milivteriny
    function nowToNum() { return dateToNum(new Date()); }
    Utils.nowToNum = nowToNum; //vteriny
    function nowToDay() { return dayToInt(new Date()); }
    Utils.nowToDay = nowToDay; //dny
    function formatDateLow(dt) { return Globalize.format(dt, 'd'); }
    Utils.formatDateLow = formatDateLow;
    function formatTimeLow(dt) { return Globalize.format(dt, ', H:m:s'); }
    Utils.formatTimeLow = formatTimeLow;
    //vteriny
    function dateToNum(dt) { return Math.floor(dateToInt(dt) / 1000); }
    Utils.dateToNum = dateToNum;
    function numToDate(num) { return new Date(num * 1000); }
    Utils.numToDate = numToDate;
    function formatDate(sec) { return formatDateLow(numToDate(sec)); }
    Utils.formatDate = formatDate;
    function formatDateTime(sec) { return formatDate(sec) + formatTimeLow(numToDate(sec)); }
    Utils.formatDateTime = formatDateTime;
    //miliseconds
    function dateToInt(dt) { return dt.getTime(); }
    Utils.dateToInt = dateToInt;
    function intToDate(num) { return new Date(num); }
    Utils.intToDate = intToDate;
    function intToDateStr(num) { return formatTimeLow(intToDate(num)); }
    Utils.intToDateStr = intToDateStr;
    function intToDateStrLong(num) { return Globalize.format(intToDate(num), 'D'); }
    Utils.intToDateStrLong = intToDateStrLong;
    //days
    function dayToInt(dt) { return Math.floor((dateToInt(dt) + 1) / msecInDay); }
    Utils.dayToInt = dayToInt;
    function intToDay(num) { return new Date(num * msecInDay); }
    Utils.intToDay = intToDay;
    //export function formatDay(day: number) { return formatTimeLow(intToDay(day)); }
    function formatDay(day) { return formatDateLow(intToDay(day)); }
    Utils.formatDay = formatDay;
    var msecInDay = 3600 * 24 * 1000;
    function toInt(n) { return Math.floor(n); }
    Utils.toInt = toInt;
    function formatTimeSpan(secs) {
        var s = Math.floor(secs % 60);
        secs = secs / 60;
        var m = Math.floor(secs % 60);
        var h = Math.floor(secs / 60);
        return (h == 0 ? '' : (h.toString() + ":")) + (m < 10 ? "0" : "") + m.toString() + ":" + (s < 10 ? "0" : "") + s.toString();
    }
    Utils.formatTimeSpan = formatTimeSpan;
    function IsTheSameDay(date1, date2) {
        return date1.setHours(0, 0, 0, 0) == date2.setHours(0, 0, 0, 0);
    }
    Utils.IsTheSameDay = IsTheSameDay;
    function preferedLanguage() {
        var language = navigator.language;
        if (language == null) {
            language = navigator.userLanguage;
            if (language == null)
                language = "??";
        }
        //language = language.substring(0, 2);
        return navigator.language + "|" + navigator.browserLanguage + "|" + navigator.userLanguage + "|" + navigator.systemLanguage;
    }
    Utils.preferedLanguage = preferedLanguage;
    function string_format(str, obj) {
        return str.replace(/{([^{}]*)}/g, function (match) {
            var group_match = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                group_match[_i - 1] = arguments[_i];
            }
            var data = obj[group_match[0]];
            return data == null ? '' : data.toString(); // typeof data === 'string' ? data : match;
        });
    }
    Utils.string_format = string_format;
    //http://erlycoder.com/49/javascript-hash-functions-to-convert-string-into-integer-hash-
    function Hash(str) {
        var hash = 5381;
        for (var i = 0; i < str.length; i++) {
            var ch = str.charCodeAt(i);
            hash = ((hash << 5) + hash) + ch;
        }
        return hash;
    }
    Utils.Hash = Hash;
    //http://stevenbenner.com/2010/03/javascript-regex-trick-parse-a-query-string-into-an-object/
    //var parseQueryRx = new RegExp("([^?=&]+)(=([^&]*))?", "g");
    //export function parseQuery(url: string): Object {
    //  var queryString = {};
    //  url.replace(parseQueryRx, (substring: string, ...args: any[]) => { queryString[args[0].toLowerCase()] = args[2]; });
    //  return queryString;
    //}
    function decrypt(data) {
        return JSON.parse(decryptStr(data));
    }
    Utils.decrypt = decrypt;
    function encrypt(obj) {
        return encryptStr(JSON.stringify(obj));
    }
    Utils.encrypt = encrypt;
    function decryptStr(data) {
        return gCrypt.utf8ByteArrayToString(LowUtils.decrypt(gBase64.LMdecodeString(data)));
    }
    Utils.decryptStr = decryptStr;
    function encryptStr(obj) {
        return gBase64.LMencodeString(LowUtils.encrypt(gCrypt.stringToUtf8ByteArray(obj)));
    }
    Utils.encryptStr = encryptStr;
    function packStr(str) {
        return str ? gBase64.LMencodeString(gCrypt.stringToUtf8ByteArray(str)) : null;
    }
    Utils.packStr = packStr;
    function unpackStr(str) {
        return str ? gCrypt.utf8ByteArrayToString(gBase64.LMdecodeString(str)) : null;
    }
    Utils.unpackStr = unpackStr;
    //export function unpack_(data: string): msgpack.typedObj {
    //  return <msgpack.typedObj>msgpack.unpackBytes(gBase64.LMdecodeString(data));
    //}
    //export function pack_(obj: msgpack.typedObj): string {
    //  return gBase64.LMencodeString(msgpack.packBytes(obj));
    //}
    //export function getQueryVariable(win: Window, name: string): string {
    //  var match = RegExp('[?&]' + name + '=([^&]*)').exec(win.location.search);
    //  return match && decodeURIComponent(match[1].replace(/\+/g, ' '));
    //};
    function IsNullOrEmpty(s) {
        return s == null || s.length == 0;
    }
    Utils.IsNullOrEmpty = IsNullOrEmpty;
    function addDays(date, days) {
        var ms = date.getTime() + (86400000 * days);
        return new Date(ms);
    }
    Utils.addDays = addDays;
    function MSecToDays(msec) {
        return toInt(msec / msecInDay);
    }
    Utils.MSecToDays = MSecToDays;
    var msecInDay = 60 * 60 * 24 * 1000;
    function initStorage() {
        var dt = new Date().getTime().toString();
        var st = window.localStorage;
        try {
            st.setItem(dt, dt);
            if (st.getItem(dt) != dt)
                st = null;
            else
                st.removeItem(dt);
        }
        catch (msg) {
            st = null;
        }
        if (st == null) {
            window.localStorage = {
                remainingSpace: 0,
                length: 0,
                getItem: function (key) { return null; },
                setItem: function (key, data) { },
                clear: function () { },
                removeItem: function (key) { },
                key: function (index) { return null; },
            };
        }
    }
    initStorage();
    function isCrossDomain(url) {
        return url.indexOf('://') >= 0 && url.toLowerCase().indexOf((location.protocol + '//' + location.host).toLowerCase()) < 0;
    }
    Utils.isCrossDomain = isCrossDomain;
    //http://stackoverflow.com/questions/7925260/how-to-use-iframe-to-cross-domain-post-request
    //http://www.d-mueller.de/blog/cross-domain-ajax-guide/
    function iFrameSubmit(url, par, completed) {
        if (completed === void 0) { completed = null; }
        var _form = $('iFrameSubmit');
        var iframe = _form.length == 0 ? null : (_form[0]);
        if (!iframe) {
            var iframe = document.createElement("iframe");
            iframe.id = 'iFrameSubmit';
            var uniqueString = "CrossDomainPost";
            document.body.appendChild(iframe);
            iframe.style.display = "none";
            iframe.contentWindow.name = uniqueString;
            form = document.createElement("form");
            form.style.display = "none";
            form.target = uniqueString;
            form.method = "POST";
            guidInput = document.createElement("input");
            guidInput.type = "hidden";
            guidInput.name = "guid";
            form.appendChild(guidInput);
            parIninput = document.createElement("input");
            parIninput.type = "hidden";
            parIninput.name = "par";
            form.appendChild(parIninput);
            document.body.appendChild(form);
        }
        form.action = url;
        parIninput.value = par;
        var guid = new Date().getTime().toString();
        guidInput.value = guid;
        form.submit();
        if (!completed)
            return;
        //callback
        if (cfg.target != LMComLib.Targets.web) {
            completed(null);
            completed = null;
        }
        else {
            var idx = url.indexOf('?');
            if (idx >= 0)
                url = url.substr(0, idx);
            url += "?waitfor=" + guid;
            $.ajax(url, {
                async: true,
                type: 'GET',
                dataType: 'jsonp',
                headers: { "LoggerLogId": Logger.logId(), "LMComVersion": Utils.LMComVersion }
            }).then(function (res) { completed(res); completed = null; }, function () {
                var reasons = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    reasons[_i - 0] = arguments[_i];
                }
                return Logger.trace('ajax', 'Error: wait for callback not called, 5 sec wait follows');
            });
            setTimeout(function () {
                completed(null);
                completed = null;
            }, 5000);
        }
    }
    Utils.iFrameSubmit = iFrameSubmit;
    var guidInput;
    var parIninput;
    var form = null;
})(Utils || (Utils = {}));
var LowUtils;
(function (LowUtils) {
    function isMobile() {
        /**
         * jQuery.browser.mobile (http://detectmobilebrowser.com/)
         *
         * jQuery.browser.mobile will be true if the browser is a mobile device
         *
         **/
        var nav = navigator;
        var win = window;
        var agent = nav.userAgent || nav.vendor || win.opera;
        var res = /android.+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|meego.+mobile|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(agent) ||
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(agent.substr(0, 4));
        return res;
    }
    LowUtils.isMobile = isMobile;
    /******  ENCRYPT x DECRYPT */
    function Int64ToByte(val) {
        return val & 0xFF;
    }
    ;
    function Int64ToUShort(val) {
        return val & 0xFFFF;
    }
    ;
    var encryptKey = 18475;
    function EncryptString(data) {
        return bytesToHex(EncryptLow(data, 0, data.length, encryptKey));
    }
    LowUtils.EncryptString = EncryptString;
    function DecryptString(data) {
        return DecryptLow(hexToBytes(data), 0, data.length, encryptKey);
    }
    LowUtils.DecryptString = DecryptString;
    function encrypt(data) {
        return EncryptLow(data, 0, data.length, encryptKey);
    }
    LowUtils.encrypt = encrypt;
    function decrypt(data) {
        return DecryptLow(data, 0, data.length, encryptKey);
    }
    LowUtils.decrypt = decrypt;
    function EncryptLow(data, start, len, key) {
        for (var i = start; i < start + len; i++) {
            data[i] = Int64ToByte(data[i] ^ (key >> 8));
            key = Int64ToUShort((data[i] + key) * 52845 + 22719);
        }
        return data;
    }
    //function EncryptLowEx(data: number[], key: number): void {
    //  for (var i = 0; i < data.length; i++) { data[i] = (data[i] ^ (key >> 8)) & 0xFF; key = ((data[i] + key) * 52845 + 22719) & 0xFFFF; }
    //}
    function DecryptLow(data, start, len, key) {
        var old;
        for (var i = 0; i < data.length; i++) {
            old = data[i];
            data[i] = Int64ToByte(old ^ (key >> 8));
            key = Int64ToUShort((old + key) * 52845 + 22719);
        }
        return data;
    }
    //export function NowToInt(): number {
    //  return 0; //dateToInt(new Date());
    //}
    //export function DateToInt(dt: Date): number {
    //  return dt.getTime();
    //}
    //export function IntToDate(d: number): Date {
    //  return new Date(d);
    //}
    //export function dateToInt(dt: Date): number { return dt.getTime(); }
    //http://docs.closure-library.googlecode.com/git/closure_goog_crypt_crypt.js.source.html
    function bytesToHex(input) {
        if (typeof input == "string")
            input = gCrypt.stringToByteArray(input);
        return _.map(input, function (numByte) {
            var hexByte = numByte.toString(16);
            return hexByte.length > 1 ? hexByte : '0' + hexByte;
        }).join('');
    }
    LowUtils.bytesToHex = bytesToHex;
    function hexToBytes(hexString) {
        var arr = [];
        for (var i = 0; i < hexString.length; i += 2) {
            arr.push(parseInt(hexString.substring(i, i + 2), 16));
        }
        return arr;
    }
    LowUtils.hexToBytes = hexToBytes;
    ;
    //var hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];
    //function dec2hex(dec: number): string { return (hexDigits[dec >> 4] + hexDigits[dec & 15]); };
    //function hex2dec(hex: string): number { return (parseInt(hex, 16)); };
    function parseQuery(query) {
        var res = {};
        if (typeof query == 'undefined' || query == '' || query == null)
            return res;
        var fch = query.charAt(0);
        if (fch == "#" || fch == "?")
            query = query.substr(1);
        var vars = query.split('&');
        for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            res[decodeURIComponent(pair[0]).toLowerCase()] = pair.length == 2 ? decodeURIComponent(pair[1]) : "";
        }
        return res;
    }
    LowUtils.parseQuery = parseQuery;
    function getQuery(query, name, default_val) {
        if (default_val === void 0) { default_val = ""; }
        if (query == null)
            return default_val;
        var res = query[name.toLowerCase()];
        return typeof res == "undefined" ? default_val : res;
    }
    LowUtils.getQuery = getQuery;
    function getQueryParams(name, default_val) {
        if (default_val === void 0) { default_val = ""; }
        initQueryParams();
        return getQuery(queryParams, name, default_val);
    }
    LowUtils.getQueryParams = getQueryParams;
    function initQueryParams() {
        if (queryParams == null)
            queryParams = parseQuery(window.location.search);
    }
    var queryParams = null;
    function EnumToString(enumType, val) {
        //var map = enumType["map_"];
        //if (typeof map == "undefined") {
        //  map = {};
        //  enumType["map_"] = map;
        //  for (var p in enumType) map[enumType[p].toString()] = p;
        //}
        //return map[val.toString()];
        return enumType[val];
    }
    LowUtils.EnumToString = EnumToString;
    function EnumParse(enumType, val) {
        return enumType[val];
    }
    LowUtils.EnumParse = EnumParse;
    function cookieDomain() {
        var parts = window.location.host.toLowerCase().split('.');
        var len = parts.length;
        if (len < 3)
            return undefined;
        if (parts[len - 1].length <= 2 || parts[len - 1].match(wrongSecLev)) {
            if (len < 4)
                return undefined;
            return parts[len - 3] + "." + parts[len - 2] + "." + parts[len - 1];
        }
        else
            return parts[len - 2] + "." + parts[len - 1];
    }
    LowUtils.cookieDomain = cookieDomain;
    var wrongSecLev = /^(com|net|mil|org|gov|edu|int)$/;
    //https://bugzilla.mozilla.org/show_bug.cgi?id=252342
    function documentReady(callback) {
        if (readyCalled)
            callback();
        else
            callbacks.push(callback);
    }
    LowUtils.documentReady = documentReady;
    function doReady() {
        readyCalled = true;
        for (var i = 0; i < callbacks.length; i++)
            callbacks[i]();
    }
    var readyCalled = false;
    var callbacks = [];
    if (window.addEventListener) {
        window.addEventListener('load', doReady, false); // NB **not** 'onload' 
    }
    else if (window.attachEvent) {
        window.attachEvent('onload', doReady);
    }
    function globalEval(src) {
        if (window.execScript) {
            window.execScript(src);
            return;
        }
        eval.call(window, src);
    }
    LowUtils.globalEval = globalEval;
    ;
})(LowUtils || (LowUtils = {}));
var LMComLib;
(function (LMComLib) {
    var LMJsContext = (function () {
        function LMJsContext() {
        }
        LMJsContext.jQueryLocale = function () {
            switch (LMJsContext.actLocale) {
                case "cs-cz":
                    return "cs";
                default:
                    return "en-GB";
            }
        };
        LMJsContext.actLocale = null;
        return LMJsContext;
    })();
    LMComLib.LMJsContext = LMJsContext;
    ;
})(LMComLib || (LMComLib = {}));
//http://www.sitepoint.com/building-web-pages-with-local-storage/ 
var Logger;
(function (Logger) {
    var ids = null;
    var logProc;
    var noIds = null;
    function write(msg, appid) {
        if (logProc == null) {
            if (typeof Logger.delphiLog != "undefined")
                logProc = function (msg, appId) { return Logger.delphiLog.log(msg, appId); };
            else
                logProc = function (msg, appId) {
                    if (window.console && window.console.log)
                        window.console.log(msg);
                    if (_.indexOf(Logger.ignores, appId) < 0)
                        logLow(msg);
                };
        }
        logProc(msg + '\r\n', appid);
    }
    ;
    function traceFmt(appId, mask) {
        var pars = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            pars[_i - 2] = arguments[_i];
        }
        trace(appId, Utils.string_format(mask, pars));
    }
    Logger.traceFmt = traceFmt;
    function traceMsg(msg) {
        trace("Global", msg);
    }
    Logger.traceMsg = traceMsg;
    function trace(appId, msg) {
        //if (appId != 'Course') return;
        var time = new Date().toTimeString().split(' GMT')[0];
        var txt = appId + ' (' + time + '): ' + msg;
        if (cfg.debugTypes)
            ids = cfg.debugTypes.split(',');
        if (!cfg.noDebugTypes)
            cfg.noDebugTypes = 'jsrender';
        if (cfg.noDebugTypes)
            noIds = cfg.noDebugTypes.split(',');
        if (typeof _ == "undefined" || !ids || ids.length == 0 || _.indexOf(ids, appId) >= 0) {
            if (noIds && noIds.length > 0 && _.indexOf(noIds, appId) >= 0)
                return;
            write(txt, appId);
        }
    }
    Logger.trace = trace;
    function error(appId, msg, error) {
        if (logId() == '')
            startLog(null);
        var txt = "*** ERROR " + error + "\r\nappId: " + appId + "\r\nmsg: " + msg;
        write(txt, null);
        if (isDynamicJS()) {
        }
    }
    Logger.error = error;
    var maxBufLen = 500;
    var maxBufCount = 20;
    var maxLogTime = 30 /*pocet minut*/ * (60 * 1000);
    var callLoggerMSecs = 3000; //5000
    Logger.ignores = ['jsrender'];
    function startLog(event, logid) {
        if (logid === void 0) { logid = null; }
        var inGui = !logid;
        if (!logid)
            logid = Utils.nowToInt().toString();
        var ws = window.localStorage;
        if (!ws)
            return;
        var inf = getInfo();
        clearLog(inf);
        inf = { id: logid, started: Utils.nowToInt(), count: 1, cookieWrited: false };
        ws.setItem("log_0", JSON.stringify(inf));
        traceFmt('Utils.logger START', 'url={0}, browser={1}, scorm={2}', window.location.href, bowser.dataStr, Utils.scormApiUrl());
        trace('cfg=', JSON.stringify(cfg));
        //if (inGui) refreshPage(null);
    }
    Logger.startLog = startLog;
    function logId(doInit) {
        if (doInit === void 0) { doInit = null; }
        return ''; //PZ 4/24/2015 - no ve logovani pomoci lmconsole.js
        if (logIdFromQuery)
            return logIdFromQuery; //PZ 21.3.2015
        if (!initialized) {
            initialized = true;
            if (doInit)
                doInit();
            info = getInfo();
            if (info == null)
                return '';
        }
        if (info && (Utils.nowToInt() > info.started + maxLogTime || info.count > maxBufCount))
            info = null;
        return info ? info.id : '';
    }
    Logger.logId = logId;
    var logIdFromQuery = LowUtils.getQueryParams('LoggerLogId'); //PZ 21.3.2015
    Logger.noLocalStorageLog = false;
    function logLow(msg) {
        return; //PZ 21.3.2015
        if (Logger.noLocalStorageLog)
            return;
        var ws = window.localStorage;
        if (!ws)
            return;
        if (logId(refreshButtons) == '')
            return;
        var cook = '';
        if (!info.cookieWrited && typeof (LMStatus) != 'undefined' && LMStatus.Cookie) {
            info.cookieWrited = true;
            cook = 'Cookie: ' + JSON.stringify(LMStatus.Cookie) + '\r\n';
        }
        if (buf == '')
            try {
                var infoCount = info.count + 1;
                ws.setItem("log_0", JSON.stringify(info));
                info.count = infoCount;
            }
            catch (err) {
                return;
            }
        try {
            var toWrite = buf + cook + msg;
            ws.setItem("log_" + (info.count - 1).toString(), toWrite);
            buf = toWrite;
        }
        catch (err) {
            return;
        }
        if (buf.length > maxBufLen)
            buf = '';
    }
    function cancelLog(event) {
        var inf = getInfo();
        clearLog(inf);
        refreshButtons();
    }
    Logger.cancelLog = cancelLog;
    function sendLog(event) {
        var inf = getInfo();
        if (inf == null)
            return;
        var log = getLog(inf);
        Pager.doAjaxCmd(true, Pager.path(Pager.pathType.loggerService), scorm.Cmd_Logger_Type, JSON.stringify(LMStatus.createCmd(function (r) { r.id = inf.id; r.data = log; })), 
        //JSON.stringify(scorm.Cmd_Logger_Create(inf.id, log, 0, 0, null, null)),
        function () { alert('Log successfully sent, thank you :-)'); clearLog(inf); refreshButtons(); });
    }
    Logger.sendLog = sendLog;
    function readLog(event) {
        var inf = getInfo();
        if (inf == null)
            return;
        var log = getLog(inf);
        window.prompt("Copy to clipboard: Ctrl+C, Enter\r\n\r\n", log);
        clearLog(inf);
        refreshButtons();
    }
    Logger.readLog = readLog;
    function refreshPage(event) {
        window.location.reload();
    }
    Logger.refreshPage = refreshPage;
    function clearLog(inf) {
        info = null;
        initialized = false;
        buf = '';
        if (inf == null)
            return;
        var ws = window.localStorage;
        if (!ws)
            return null;
        for (var i = 0; i < inf.count; i++)
            ws.removeItem("log_" + i.toString());
    }
    function getLog(inf) {
        if (inf == null)
            return null;
        var ws = window.localStorage;
        if (!ws)
            return null;
        var res = [];
        for (var i = 0; i < inf.count; i++)
            res.push(ws.getItem("log_" + i.toString()));
        return res.join('\r\n');
    }
    function getInfo() {
        var ws = window.localStorage;
        if (!ws)
            return null;
        var infoStr = ws.getItem("log_0");
        if (_.isEmpty(infoStr))
            return null;
        return JSON.parse(infoStr);
    }
    var buf = '';
    var info;
    var initialized = false;
    $(window)
        .mousedown(function (ev) {
        if ($('#bowser').length > 0 || !ev.ctrlKey)
            return; //v bowseru se down neuplatni
        isDownTime = Utils.nowToInt();
    })
        .mouseup(function (ev) {
        if ($('#bowser').length <= 0)
            return; //mimo bowseru se up neuplatni
        if (Utils.getSelection() != '3DEA99769C464982B1D619617A4D6F67')
            return;
        gCookie.setCookie('dynamicjs', 'true');
    })
        .click(function () {
        if (isDownTime == 0)
            return;
        var diff = Utils.nowToInt() - isDownTime - callLoggerMSecs;
        isDownTime = 0;
        if (diff < 0)
            return;
        $('body').html($('#tbowser').html());
        refreshButtons();
    });
    var isDownTime = 0;
    function isDynamicJS() {
        return gCookie.getCookie('dynamicjs') == 'true';
    }
    function refreshButtons() {
        var start = $('#loggerStart');
        var cont = $('#continueLearning');
        var refr = $('#refreshPage');
        var send = $('#loggerSend');
        var read = $('#loggerRead ');
        var can = $('#loggerCancel');
        var inf = info ? info : getInfo();
        if (!inf) {
            start.removeAttr("disabled");
            cont.removeAttr("disabled");
            refr.attr("disabled", "disabled");
            send.attr("disabled", "disabled");
            read.attr("disabled", "disabled");
            can.attr("disabled", "disabled");
            return;
        }
        start.attr("disabled", "disabled");
        cont.attr("disabled", "disabled");
        refr.removeAttr("disabled");
        send.removeAttr("disabled");
        read.removeAttr("disabled");
        can.removeAttr("disabled");
        return;
    }
    //force log
    //var logIdStr = LowUtils.getQueryParams('LoggerLogId'); //PZ 21.3.2015
    var logIdStr = null;
    if (!_.isEmpty(logIdStr))
        startLog(logIdStr);
})(Logger || (Logger = {}));
var EMailer;
(function (EMailer) {
    var defaultDesign = (function () {
        function defaultDesign() {
            this.domain = 'LANGMaster.com';
            this.from = "support@langmaster.com";
        }
        defaultDesign.prototype.wishSuccess = function () { return CSLocalize('06eb87db06e14cf2bad2607093c2bfe7', 'We wish you success with LANGMaster educational products.'); };
        defaultDesign.prototype.LMTeam = function () { return CSLocalize('f217bebab2ad4bfaa456264c9d0ab51d', 'LANGMaster team'); };
        defaultDesign.prototype.contact = function () { return 'LANGMaster, Branicka 107, 147 00 Praha 4, Czech Republic, <a href="mailto:info@langmaster.cz">info@langmaster.cz</a>, <a href="http://www.langmaster.com">www.langmaster.com</a>.'; };
        defaultDesign.prototype.rights = function () { return '© 2011 LANGMaster.All rights reserved.'; };
        return defaultDesign;
    })();
    EMailer.defaultDesign = defaultDesign;
    EMailer.actEmailDesign = new defaultDesign();
    EMailer.from = "support@langmaster.com";
    function sendEMail(cmd, completed, error) {
        if (error === void 0) { error = null; }
        try {
            if (!cmd.From)
                cmd.From = EMailer.actEmailDesign.from;
            cmd['skin'] = EMailer.actEmailDesign;
            //var cmd = LMComLib.CmdEMail_Create(Utils.Empty(em.from) ? from : em.from, em.to, em.cc, em.subject, tmpl.render(em), em.isForgotPassword);
            cmd.Html = JsRenderTemplateEngine.render("TEmail", cmd);
            if (cmd.Html.indexOf("Error") == 0)
                throw "Render error";
            Pager.doAjaxCmd(true, Pager.path(Pager.pathType.restServices), LMComLib.CmdEMail_Type, JSON.stringify(cmd), completed, error);
        }
        catch (err) {
            if (error != null)
                error(999, "Send email error: + err");
        }
    }
    EMailer.sendEMail = sendEMail;
})(EMailer || (EMailer = {}));
//var goog = {
//  now: function () { return +new Date(); },
//  isDef: function (val) { return val !== undefined; }
//};
var gCrypt;
(function (gCrypt) {
    function isArray(obj) {
        return obj.toString() === "[object Array]";
    }
    gCrypt.isArray = isArray;
    /**
     * Turns a string into an array of bytes; a "byte" being a JS number in the
     * range 0-255.
     * @param {string} str String value to arrify.
     * @return {Array.<number>} Array of numbers corresponding to the
     *     UCS character codes of each character in str.
     */
    function stringToByteArray(str) {
        var output = [], p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            while (c > 0xff) {
                output[p++] = c & 0xff;
                c >>= 8;
            }
            output[p++] = c;
        }
        return output;
    }
    gCrypt.stringToByteArray = stringToByteArray;
    /**
     * Turns an array of numbers into the string given by the concatenation of the
     * characters to which the numbers correspond.
     * @param {Array} array Array of numbers representing characters.
     * @return {string} Stringification of the array.
     */
    function byteArrayToString(arr) {
        return String.fromCharCode.apply(null, arr);
    }
    gCrypt.byteArrayToString = byteArrayToString;
    /**
     * Converts a JS string to a UTF-8 "byte" array.
     * @param {string} str 16-bit unicode string.
     * @return {Array.<number>} UTF-8 byte array.
     */
    function stringToUtf8ByteArray(str) {
        // TODO(user): Use native implementations if/when available
        str = str.replace(/\r\n/g, '\n');
        var out = [], p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    }
    gCrypt.stringToUtf8ByteArray = stringToUtf8ByteArray;
    /**
     * Converts a UTF-8 byte array to JavaScript's 16-bit Unicode.
     * @param {Array.<number>} bytes UTF-8 byte array.
     * @return {string} 16-bit Unicode string.
     */
    function utf8ByteArrayToString(bytes) {
        // TODO(user): Use native implementations if/when available
        var out = [], pos = 0, c = 0;
        while (pos < bytes.length) {
            var c1 = bytes[pos++];
            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            }
            else if (c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
            }
            else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
            }
        }
        return out.join('');
    }
    gCrypt.utf8ByteArrayToString = utf8ByteArrayToString;
})(gCrypt || (gCrypt = {}));
var gBase64;
(function (gBase64) {
    function LMencodeString(byteArray) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (typeof (window.btoa) == 'function') {
            return window.btoa(gCrypt.byteArrayToString(byteArray));
        }
        return encodeByteArray(byteArray, false);
    }
    gBase64.LMencodeString = LMencodeString;
    //return byte array
    function LMdecodeString(input) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (typeof (window.atob) == 'function') {
            return gCrypt.stringToByteArray(window.atob(input));
        }
        return decodeStringToByteArray(input, false);
    }
    gBase64.LMdecodeString = LMdecodeString;
    /**
    * Maps bytes to characters.
    * @type {Object}
    * @private
    */
    var byteToCharMap_ = null;
    /**
    * Maps characters to bytes.
    * @type {Object}
    * @private
    */
    var charToByteMap_ = null;
    /**
    * Maps bytes to websafe characters.
    * @type {Object}
    * @private
    */
    var byteToCharMapWebSafe_ = null;
    /**
    * Maps websafe characters to bytes.
    * @type {Object}
    * @private
    */
    var charToByteMapWebSafe_ = null;
    /**
    * Our default alphabet, shared between
    * ENCODED_VALS and ENCODED_VALS_WEBSAFE
    * @type {string}
    */
    var ENCODED_VALS_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +
        'abcdefghijklmnopqrstuvwxyz' +
        '0123456789';
    /**
    * Our default alphabet. Value 64 (=) is special; it means "nothing."
    * @type {string}
    */
    var ENCODED_VALS = ENCODED_VALS_BASE + '+/=';
    /**
    * Our websafe alphabet.
    * @type {string}
    */
    var ENCODED_VALS_WEBSAFE = ENCODED_VALS_BASE + '-_.';
    /**
    * Whether this browser supports the atob and btoa functions. This extension
    * started at Mozilla but is now implemented by many browsers. We use the
    * ASSUME_* variables to avoid pulling in the full useragent detection library
    * but still allowing the standard per-browser compilations.
    *
    * @type {boolean}
    */
    var HAS_NATIVE_SUPPORT = false;
    /*HAS_NATIVE_SUPPORT = goog.userAgent.GECKO ||
    goog.userAgent.WEBKIT ||
    goog.userAgent.OPERA ||
    typeof(goog.global.atob) == 'function';*/
    /**
    * Base64-encode an array of bytes.
    *
    * @param {Array.<number>} input An array of bytes (numbers with value in
    *     [0, 255]) to encode.
    * @param {boolean=} opt_webSafe Boolean indicating we should use the
    *     alternative alphabet.
    * @return {string} The base64 encoded string.
    */
    function encodeByteArray(input, opt_webSafe) {
        //if (!goog.isArrayLike(input)) {
        //throw Error('encodeByteArray takes an array as a parameter');
        //}
        init_();
        var byteToCharMap = opt_webSafe ? byteToCharMapWebSafe_ : byteToCharMap_;
        var output = [];
        for (var i = 0; i < input.length; i += 3) {
            var byte1 = input[i];
            var haveByte2 = i + 1 < input.length;
            var byte2 = haveByte2 ? input[i + 1] : 0;
            var haveByte3 = i + 2 < input.length;
            var byte3 = haveByte3 ? input[i + 2] : 0;
            var outByte1 = byte1 >> 2;
            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
            var outByte3 = ((byte2 & 0x0F) << 2) | (byte3 >> 6);
            var outByte4 = byte3 & 0x3F;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) {
                    outByte3 = 64;
                }
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    }
    gBase64.encodeByteArray = encodeByteArray;
    /**
    * Base64-encode a string.
    *
    * @param {string} input A string to encode.
    * @param {boolean=} opt_webSafe If true, we should use the
    *     alternative alphabet.
    * @return {string} The base64 encoded string.
    */
    function encodeString(input, opt_webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (typeof (window.btoa) === 'function' && !opt_webSafe) {
            return window.btoa(input);
        }
        return encodeByteArray(gCrypt.stringToByteArray(input), opt_webSafe);
    }
    /**
    * Base64-decode a string.
    *
    * @param {string} input to decode.
    * @param {boolean=} opt_webSafe True if we should use the
    *     alternative alphabet.
    * @return {string} string representing the decoded value.
    */
    function decodeString(input, opt_webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (typeof (window.atob) === 'function' && !opt_webSafe) {
            return window.atob(input);
        }
        return gCrypt.byteArrayToString(decodeStringToByteArray(input, opt_webSafe));
    }
    /**
    * Base64-decode a string.
    *
    * @param {string} input to decode (length not required to be a multiple of 4).
    * @param {boolean=} opt_webSafe True if we should use the
    *     alternative alphabet.
    * @return {Array} bytes representing the decoded value.
    */
    function decodeStringToByteArray(input, opt_webSafe) {
        init_();
        var charToByteMap = opt_webSafe ?
            charToByteMapWebSafe_ :
            charToByteMap_;
        var output = [];
        for (var i = 0; i < input.length;) {
            var byte1 = charToByteMap[input.charAt(i++)];
            var haveByte2 = i < input.length;
            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte3 = i < input.length;
            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte4 = i < input.length;
            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            if (byte1 == null || byte2 == null ||
                byte3 == null || byte4 == null) {
                throw Error();
            }
            var outByte1 = (byte1 << 2) | (byte2 >> 4);
            output.push(outByte1);
            if (byte3 != 64) {
                var outByte2 = ((byte2 << 4) & 0xF0) | (byte3 >> 2);
                output.push(outByte2);
                if (byte4 != 64) {
                    var outByte3 = ((byte3 << 6) & 0xC0) | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    }
    gBase64.decodeStringToByteArray = decodeStringToByteArray;
    /**
    * Lazy static initialization function. Called before
    * accessing any of the static map variables.
    * @private
    */
    function init_() {
        if (!byteToCharMap_) {
            byteToCharMap_ = {};
            charToByteMap_ = {};
            byteToCharMapWebSafe_ = {};
            charToByteMapWebSafe_ = {};
            // We want quick mappings back and forth, so we precompute two maps.
            for (var i = 0; i < ENCODED_VALS.length; i++) {
                byteToCharMap_[i] =
                    ENCODED_VALS.charAt(i);
                charToByteMap_[byteToCharMap_[i]] = i;
                byteToCharMapWebSafe_[i] =
                    ENCODED_VALS_WEBSAFE.charAt(i);
                charToByteMapWebSafe_[byteToCharMapWebSafe_[i]] = i;
            }
        }
    }
})(gBase64 || (gBase64 = {}));
var goog = {
    now: function () { return +new Date(); },
    isDef: function (val) { return val !== undefined; }
};
var gCookie;
(function (gCookie) {
    // Copyright 2006 The Closure Library Authors. All Rights Reserved.
    //
    // Licensed under the Apache License, Version 2.0 (the "License");
    // you may not use this file except in compliance with the License.
    // You may obtain a copy of the License at
    //
    //      http://www.apache.org/licenses/LICENSE-2.0
    //
    // Unless required by applicable law or agreed to in writing, software
    // distributed under the License is distributed on an "AS-IS" BASIS,
    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    // See the License for the specific language governing permissions and
    // limitations under the License.
    /**
     * @fileoverview Functions for setting, getting and deleting cookies.
     *
     * @author arv@google.com (Erik Arvidsson)
     */
    /**
     * A class for handling browser cookies.
     * @param {Document} context The context document to get/set cookies on.
     * @constructor
     */
    /**
     * Static constant for the size of cookies. Per the spec, there's a 4K limit
     * to the size of a cookie. To make sure users can't break this limit, we
     * should truncate long cookies at 3950 bytes, to be extra careful with dumb
     * browsers/proxies that interpret 4K as 4000 rather than 4096.
     * @type {number}
     */
    var MAX_COOKIE_LENGTH = 3950;
    /**
     * RegExp used to split the cookies string.
     * @type {RegExp}
     * @private
     */
    var SPLIT_RE_ = /\s*;\s*/;
    /**
     * We do not allow '=', ';', or white space in the name.
     *
     * NOTE: The following are allowed by this method, but should be avoided for
     * cookies handled by the server.
     * - any name starting with '$'
     * - 'Comment'
     * - 'Domain'
     * - 'Expires'
     * - 'Max-Age'
     * - 'Path'
     * - 'Secure'
     * - 'Version'
     *
     * @param {string} name Cookie name.
     * @return {boolean} Whether name is valid.
     *
     * @see <a href="http://tools.ietf.org/html/rfc2109">RFC 2109</a>
     * @see <a href="http://tools.ietf.org/html/rfc2965">RFC 2965</a>
     */
    function isValidName(name) {
        return !(/[;=\s]/.test(name));
    }
    ;
    /**
     * We do not allow ';' or line break in the value.
     *
     * Spec does not mention any illegal characters, but in practice semi-colons
     * break parsing and line breaks truncate the name.
     *
     * @param {string} value Cookie value.
     * @return {boolean} Whether value is valid.
     *
     * @see <a href="http://tools.ietf.org/html/rfc2109">RFC 2109</a>
     * @see <a href="http://tools.ietf.org/html/rfc2965">RFC 2965</a>
     */
    function isValidValue(value) {
        return !(/[;\r\n]/.test(value));
    }
    ;
    /**
     * Sets a cookie.  The max_age can be -1 to set a session cookie. To remove and
     * expire cookies, use remove() instead.
     *
     * Neither the {@code name} nor the {@code value} are encoded in any way. It is
     * up to the callers of {@code get} and {@code set} (as well as all the other
     * methods) to handle any possible encoding and decoding.
     *
     * @throws {!Error} If the {@code name} fails #goog.net.cookies.isValidName.
     * @throws {!Error} If the {@code value} fails #goog.net.cookies.isValidValue.
     *
     * @param {string} name  The cookie name.
     * @param {string} value  The cookie value.
     * @param {number=} opt_maxAge  The max age in seconds (from now). Use -1 to
     *     set a session cookie. If not provided, the default is -1
     *     (i.e. set a session cookie).
     * @param {?string=} opt_path  The path of the cookie. If not present then this
     *     uses the full request path.
     * @param {?string=} opt_domain  The domain of the cookie, or null to not
     *     specify a domain attribute (browser will use the full request host name).
     *     If not provided, the default is null (i.e. let browser use full request
     *     host name).
     * @param {boolean=} opt_secure Whether the cookie should only be sent over
     *     a secure channel.
     */
    function setCookie(name, value, opt_maxAge, opt_path, opt_domain, opt_secure) {
        if (opt_maxAge === void 0) { opt_maxAge = -1; }
        if (opt_path === void 0) { opt_path = ''; }
        if (opt_domain === void 0) { opt_domain = ''; }
        if (opt_secure === void 0) { opt_secure = ''; }
        if (!isValidName(name)) {
            throw Error('Invalid cookie name "' + name + '"');
        }
        if (!isValidValue(value)) {
            throw Error('Invalid cookie value "' + value + '"');
        }
        if (!goog.isDef(opt_maxAge)) {
            opt_maxAge = -1;
        }
        var domainStr = opt_domain ? ';domain=' + opt_domain : '';
        var pathStr = opt_path ? ';path=' + opt_path : '';
        var secureStr = opt_secure ? ';secure' : '';
        var expiresStr;
        // Case 1: Set a session cookie.
        if (opt_maxAge < 0) {
            expiresStr = '';
        }
        else if (opt_maxAge == 0) {
            // Note: Don't use Jan 1, 1970 for date because NS 4.76 will try to convert
            // it to local time, and if the local time is before Jan 1, 1970, then the
            // browser will ignore the Expires attribute altogether.
            var pastDate = new Date(1970, 1 /*Feb*/, 1); // Feb 1, 1970
            expiresStr = ';expires=' + pastDate.toUTCString();
        }
        else {
            var futureDate = new Date(goog.now() + opt_maxAge * 1000);
            expiresStr = ';expires=' + futureDate.toUTCString();
        }
        setCookie_(name + '=' + value + domainStr + pathStr +
            expiresStr + secureStr);
    }
    gCookie.setCookie = setCookie;
    ;
    /**
     * Returns the value for the first cookie with the given name.
     * @param {string} name  The name of the cookie to get.
     * @param {string=} opt_default  If not found this is returned instead.
     * @return {string|undefined}  The value of the cookie. If no cookie is set this
     *     returns opt_default or undefined if opt_default is not provided.
     */
    function getCookie(name, opt_default) {
        if (opt_default === void 0) { opt_default = ""; }
        var nameEq = name + '=';
        var parts = getParts_();
        for (var i = 0, part; part = parts[i]; i++) {
            if (part.indexOf(nameEq) == 0) {
                return part.substr(nameEq.length);
            }
            if (part == name) {
                return '';
            }
        }
        return opt_default;
    }
    gCookie.getCookie = getCookie;
    ;
    /**
     * Removes and expires a cookie.
     * @param {string} name  The cookie name.
     * @param {string=} opt_path  The path of the cookie, or null to expire a cookie
     *     set at the full request path. If not provided, the default is '/'
     *     (i.e. path=/).
     * @param {string=} opt_domain  The domain of the cookie, or null to expire a
     *     cookie set at the full request host name. If not provided, the default is
     *     null (i.e. cookie at full request host name).
     * @return {boolean} Whether the cookie existed before it was removed.
     */
    function remove(name, opt_path, opt_domain) {
        if (opt_path === void 0) { opt_path = ''; }
        if (opt_domain === void 0) { opt_domain = ''; }
        var rv = containsKey(name);
        setCookie(name, '', 0, opt_path, opt_domain);
        return rv;
    }
    gCookie.remove = remove;
    ;
    /**
     * Gets the names for all the cookies.
     * @return {Array.<string>} An array with the names of the cookies.
     */
    function getKeys() {
        return getKeyValues_().keys;
    }
    ;
    /**
     * Gets the values for all the cookies.
     * @return {Array.<string>} An array with the values of the cookies.
     */
    function getValues() {
        return getKeyValues_().values;
    }
    ;
    /**
     * @return {boolean} Whether there are any cookies for this document.
     */
    function isEmpty() {
        return !getCookie_();
    }
    ;
    /**
     * @return {number} The number of cookies for this document.
     */
    function getCount() {
        var cookie = getCookie_();
        if (!cookie) {
            return 0;
        }
        return getParts_().length;
    }
    ;
    /**
     * Returns whether there is a cookie with the given name.
     * @param {string} key The name of the cookie to test for.
     * @return {boolean} Whether there is a cookie by that name.
     */
    function containsKey(key) {
        // substring will return empty string if the key is not found, so the get
        // function will only return undefined
        return goog.isDef(getCookie(key));
    }
    ;
    /**
     * Returns whether there is a cookie with the given value. (This is an O(n)
     * operation.)
     * @param {string} value  The value to check for.
     * @return {boolean} Whether there is a cookie with that value.
     */
    function containsValue(value) {
        // this O(n) in any case so lets do the trivial thing.
        var values = getKeyValues_().values;
        for (var i = 0; i < values.length; i++) {
            if (values[i] == value) {
                return true;
            }
        }
        return false;
    }
    ;
    /**
     * Removes all cookies for this document.  Note that this will only remove
     * cookies from the current path and domain.  If there are cookies set using a
     * subpath and/or another domain these will still be there.
     */
    function clear() {
        var keys = getKeyValues_().keys;
        for (var i = keys.length - 1; i >= 0; i--) {
            remove(keys[i]);
        }
    }
    ;
    /**
     * Private helper function to allow testing cookies without depending on the
     * browser.
     * @param {string} s The cookie string to set.
     * @private
     */
    function setCookie_(s) {
        document.cookie = s;
    }
    ;
    /**
     * Private helper function to allow testing cookies without depending on the
     * browser. IE6 can return null here.
     * @return {?string} Returns the {@code document.cookie}.
     * @private
     */
    function getCookie_() {
        return document.cookie;
    }
    ;
    /**
     * @return {!Array.<string>} The cookie split on semi colons.
     * @private
     */
    function getParts_() {
        return (getCookie_() || '').
            split(SPLIT_RE_);
    }
    ;
    /**
     * Gets the names and values for all the cookies.
     * @return {Object} An object with keys and values.
     * @private
     */
    function getKeyValues_() {
        var parts = getParts_();
        var keys = [], values = [], index, part;
        for (var i = 0; part = parts[i]; i++) {
            index = part.indexOf('=');
            if (index == -1) {
                keys.push('');
                values.push(part);
            }
            else {
                keys.push(part.substring(0, index));
                values.push(part.substring(index + 1));
            }
        }
        return { keys: keys, values: values };
    }
    ;
})(gCookie || (gCookie = {}));
/*!
 * jQuery Validation Bootstrap Tooltip extention v0.6
 *
 * https://github.com/Thrilleratplay/jQuery-Validation-Bootstrap-tooltip
 *
 * Copyright 2014 Tom Hiller
 * Released under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 */
(function ($) {
    $.extend(true, $.validator, {
        prototype: {
            //xdefaultShowErrors: function () {
            //  var self = this;
            //  $.each(self.successList, function (index, value) {
            //    $(value).removeClass(self.settings.errorClass).addClass(self.settings.validClass).tooltip('destroy');
            //    if (self.settings.unhighlight) {
            //      self.settings.unhighlight.call(self, value, self.settings.errorClass, self.settings.validClass);
            //    }
            //  });
            //  $.each(self.errorList, function (index, value) {
            //    $(value.element).removeClass(self.settings.validClass).addClass(self.settings.errorClass).tooltip('destroy').tooltip(self.apply_tooltip_options(value.element, value.message)).tooltip('show');
            //    if (self.settings.highlight) {
            //      self.settings.highlight.call(self, value.element, self.settings.errorClass, self.settings.validClass);
            //    }
            //  });
            //},
            defaultShowErrors: function () {
                var self = this;
                $.each(this.successList, function (index, value) { return self.removeError(value); });
                $.each(this.errorList, function (index, value) { return self.addError(value); });
            },
            removeError: function (value) {
                var self = this;
                $(value).removeClass(self.settings.errorClass).addClass(self.settings.validClass).tooltip('destroy');
                if (self.settings.unhighlight) {
                    self.settings.unhighlight.call(self, value, self.settings.errorClass, self.settings.validClass);
                }
            },
            addError: function (value) {
                var self = this;
                $(value.element).removeClass(self.settings.validClass).addClass(self.settings.errorClass).tooltip('destroy').tooltip(self.apply_tooltip_options(value.element, value.message)).tooltip('show');
                if (self.settings.highlight) {
                    self.settings.highlight.call(self, value.element, self.settings.errorClass, self.settings.validClass);
                }
            },
            apply_tooltip_options: function (element, message) {
                var options = {
                    /* Using Twitter Bootstrap Defaults if no settings are given */
                    animation: $(element).data('animation') || true,
                    html: $(element).data('html') || false,
                    placement: $(element).data('placement') || 'top',
                    selector: $(element).data('animation') || false,
                    title: $(element).attr('title') || message,
                    trigger: $.trim('manual ' + ($(element).data('trigger') || '')),
                    delay: $(element).data('delay') || 0,
                    container: $(element).data('container') || false
                };
                if (this.settings.tooltip_options && this.settings.tooltip_options[element.name]) {
                    $.extend(options, this.settings.tooltip_options[element.name]);
                }
                return options;
            }
        }
    });
}(jQuery));
/// <reference path="../../jsd/jquery.d.ts" />
/// <reference path="../../jsd/knockout.d.ts" />
/// <reference path="../../jsd/jsrender.d.ts" />
/// <reference path="../utils.ts" />
//https://github.com/WTK/ko.mustache.js/blob/master/ko.mustache.js
//http://www.knockmeout.net/2011/03/quick-tip-dynamically-changing.html
//interface KnockoutStatic {
//  mapping: KnockoutMapping;
//}
ko.bindingHandlers.enterEscape = {
    init: function (element, valueAccessor, allBindingsAccessor, data) {
        var _this = this;
        $(element).keydown(function (ev) {
            var c = ev.keyCode;
            if (c != 13 && c != 27)
                return true;
            if (c == 13)
                $(ev.target).trigger('change');
            valueAccessor().call(_this, data, ev);
            return false;
        });
    }
};
ko.observableArray.fn.swap = function (index1, index2) {
    this.valueWillMutate();
    var temp = this()[index1];
    this()[index1] = this()[index2];
    this()[index2] = temp;
    this.valueHasMutated();
};
ko.observableArray.fn.move = function (fromIdx, toIdx) {
    this.valueWillMutate();
    this.valueHasMutated();
};
ko.bindingHandlers['css2'] = ko.bindingHandlers.css;
//sance zaregistrovat HTML element k modelu
ko.bindingHandlers.itsMe = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, context) {
        var value = valueAccessor(); //metoda, pridana v ko_bindingHandlers_itsMe_register
        viewModel.registerElement(value(), element); //registrace elementu daneho jmena
    }
};
function ko_bindingHandlers_itsMe_register(obj, names) {
    _.each(names, function (nm) { obj['itsMe' + nm] = function () { return nm; }; }); //prida metodu jmene itsMe<name> modelu
}
//display block x none
ko.bindingHandlers.display = {
    update: function (element, valueAccessor, allBindings) {
        var val = ko.unwrap(valueAccessor());
        $(element).css('display', val ? "" : "none");
    }
};
//odvazani elementu z DOM
ko.bindingHandlers.destroyed = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, context) {
        $(element).bind('destroyed', valueAccessor());
    }
};
$.event.special.destroyed = {
    remove: function (o) {
        if (o.handler)
            o.handler();
    }
};
var JsRenderTemplateEngine;
(function (JsRenderTemplateEngine) {
    var anyKo = ko;
    //umozni vyuzit nativni template engine, napr. pro phoneJS
    var nativeTemplate = ko.nativeTemplateEngine.instance; //new (<any>ko).nativeTemplateEngine(); 
    var old_makeTemplateSource = nativeTemplate['makeTemplateSource'];
    var old_renderTemplateSource = nativeTemplate['renderTemplateSource'];
    function makeTemplateSource(template, templateDocument) {
        if (typeof template != "string")
            return old_makeTemplateSource(template, templateDocument);
        return template;
    }
    JsRenderTemplateEngine.makeTemplateSource = makeTemplateSource;
    function renderTemplateSource(template, bindingContext, options) {
        if (typeof template != "string")
            return old_renderTemplateSource(template, bindingContext, options);
        var data = bindingContext.$data;
        return renderAndParse(template, data);
    }
    JsRenderTemplateEngine.renderTemplateSource = renderTemplateSource;
    function render(templateId, data) {
        var res = tmpl(templateId).render(data);
        Logger.trace_jsrender(res);
        return res;
    }
    JsRenderTemplateEngine.render = render;
    function renderAndParse(templateId, data) {
        return $.parseHTML(render(templateId, data), null, true);
    }
    JsRenderTemplateEngine.renderAndParse = renderAndParse;
    JsRenderTemplateEngine.allowTemplateRewriting = false;
    JsRenderTemplateEngine.version = '0.9.0';
    var templCache = [];
    function tmpl(id) {
        id = id.toLowerCase();
        var tmpl = templCache[id];
        if (tmpl == null) {
            var t = $('#' + id);
            var txt = t.html();
            if (!txt) {
                debugger;
                throw 'cannot read template ' + id;
            }
            t.remove();
            try {
                tmpl = $.templates(txt);
            }
            catch (msg) {
                alert("cannot compile template " + id);
                throw msg;
            }
            templCache[id] = tmpl;
        }
        return tmpl;
    }
    JsRenderTemplateEngine.tmpl = tmpl;
    function createGlobalTemplate(templateId, model) {
        var els = JsRenderTemplateEngine.renderAndParse(templateId, model);
        var res = $(_.find(els, function (n) { return n.nodeType == 1; } /*Node.ELEMENT_NODE*/ /*Node.ELEMENT_NODE*/));
        var res = templateToJQuery(templateId, model);
        res.insertBefore($('#root'));
        return res;
    }
    JsRenderTemplateEngine.createGlobalTemplate = createGlobalTemplate;
    function templateToJQuery(templateId, model) {
        var els = JsRenderTemplateEngine.renderAndParse(templateId, model);
        return $(_.find(els, function (n) { return n.nodeType == 1; } /*Node.ELEMENT_NODE*/ /*Node.ELEMENT_NODE*/));
    }
    JsRenderTemplateEngine.templateToJQuery = templateToJQuery;
    anyKo.setTemplateEngine(ko.utils.extend(new anyKo.templateEngine(), JsRenderTemplateEngine));
    $.views.helpers({
        tmpl: JsRenderTemplateEngine.tmpl,
        T: JsRenderTemplateEngine.tmpl,
    });
    $.views._err = function (e) {
        debugger;
        return e.message + e.stack;
    };
})(JsRenderTemplateEngine || (JsRenderTemplateEngine = {}));
//xx/#DEBUG
var Logger;
(function (Logger) {
    function trace_jsrender(msg) {
        Logger.trace("jsrender", msg);
    }
    Logger.trace_jsrender = trace_jsrender;
})(Logger || (Logger = {}));
//xx/#ENDDEBUG
//var jsrender_noop = null;
/*
Copyright (c) 2012, Dmytro V. Dogadailo <entropyhacker@gmail.com>

RJSON is Recursive JSON.

RJSON converts any JSON data collection into more compact recursive
form. Compressed data is still JSON and can be parsed with `JSON.parse`. RJSON
can compress not only homogeneous collections, but any data sets with free
structure.

RJSON is stream single-pass compressor, it extracts data schemes from a
document, assign each schema unique number and use this number instead of
repeating same property names again and again.

Bellow you can see same document in both forms.

JSON:

{
    "id": 7,
    "tags": ["programming", "javascript"],
    "users": [
    {"first": "Homer", "last": "Simpson"},
    {"first": "Hank", "last": "Hill"},
    {"first": "Peter", "last": "Griffin"}
    ],
    "books": [
    {"title": "JavaScript", "author": "Flanagan", "year": 2006},
    {"title": "Cascading Style Sheets", "author": "Meyer", "year": 2004}
    ]
}

RJSON:

{
    "id": 7,
    "tags": ["programming", "javascript"],
    "users": [
    {"first": "Homer", "last": "Simpson"},
        [2, "Hank", "Hill", "Peter", "Griffin"]
    ],
    "books": [
    {"title": "JavaScript", "author": "Flanagan", "year": 2006},
        [3, "Cascading Style Sheets", "Meyer", 2004]
    ]
}

RJSON allows to:

* reduce JSON data size and network traffic when gzip isn't available. For
example, in-browser 3D-modeling tools like [Mydeco
3D-planner](http://mydeco.com/3d-planner/) may process and send to server
megabytes of JSON-data;
* analyze large collections of JSON-data without
unpacking of whole dataset. RJSON-data is still JSON-data, so it can be
traversed and analyzed after parsing and fully unpacked only if a document meets
some conditions.

*/
var RJSON;
(function (RJSON) {
    var hasOwnProperty = Object.prototype.hasOwnProperty, toString = Object.prototype.toString, getKeys = Object.keys || _keys, isArray = Array.isArray || _isArray;
    /**
     * @param {*} Any valid for JSON javascript data.
     * @return {*} Packed javascript data, usually a dictionary.
     */
    function pack(data) {
        var schemas = {}, maxSchemaIndex = 0;
        function encodeArray(value) {
            var len = value.length, encoded = [];
            if (len === 0)
                return [];
            if (typeof value[0] === 'number') {
                encoded.push(0); // 0 is schema index for Array
            }
            for (var i = 0; i < len; i++) {
                var v = value[i], current = encode(v), last = encoded[encoded.length - 1];
                if (isEncodedObject(current) &&
                    isArray(last) && current[0] === last[0]) {
                    // current and previous object have same schema,
                    // so merge their values into one array
                    encoded[encoded.length - 1] =
                        last.concat(current.slice(1));
                }
                else {
                    encoded.push(current);
                }
            }
            return encoded;
        }
        function encodeObject(value) {
            var schemaKeys = getKeys(value).sort();
            if (schemaKeys.length === 0) {
                return {};
            }
            var encoded, schema = schemaKeys.length + ':' + schemaKeys.join('|'), schemaIndex = schemas[schema];
            if (schemaIndex) {
                encoded = [schemaIndex];
                for (var i = 0, k; k = schemaKeys[i++];) {
                    encoded[i] = encode(value[k]);
                }
            }
            else {
                schemas[schema] = ++maxSchemaIndex;
                encoded = {};
                for (var i = 0, k; k = schemaKeys[i++];) {
                    encoded[k] = encode(value[k]);
                }
            }
            return encoded;
        }
        function encode(value) {
            if (typeof value !== 'object' || !value) {
                // non-objects or null return as is
                return value;
            }
            else if (isArray(value)) {
                return encodeArray(value);
            }
            else {
                return encodeObject(value);
            }
        }
        return encode(data);
    }
    RJSON.pack = pack;
    /**
     * @param {*} data Packed javascript data.
     * @return {*} Original data.
     */
    function unpack(data) {
        var schemas = {}, maxSchemaIndex = 0;
        function parseArray(value) {
            if (value.length === 0) {
                return [];
            }
            else if (value[0] === 0 || typeof value[0] !== 'number') {
                return decodeArray(value);
            }
            else {
                return decodeObject(value);
            }
        }
        function decodeArray(value) {
            var len = value.length, decoded = []; // decode array of something
            for (var i = (value[0] === 0 ? 1 : 0); i < len; i++) {
                var v = value[i], obj = decode(v);
                if (isEncodedObject(v) && isArray(obj)) {
                    // several objects was encoded into single array
                    decoded = decoded.concat(obj);
                }
                else {
                    decoded.push(obj);
                }
            }
            return decoded;
        }
        function decodeObject(value) {
            var schemaKeys = schemas[value[0]], schemaLen = schemaKeys.length, total = (value.length - 1) / schemaLen, decoded;
            if (total > 1) {
                decoded = []; // array of objects with same schema
                for (var i = 0; i < total; i++) {
                    var obj = {};
                    for (var j = 0, k; k = schemaKeys[j++];) {
                        obj[k] = decode(value[i * schemaLen + j]);
                    }
                    decoded.push(obj);
                }
            }
            else {
                decoded = {};
                for (var j = 0, k; k = schemaKeys[j++];) {
                    decoded[k] = decode(value[j]);
                }
            }
            return decoded;
        }
        function decodeNewObject(value) {
            var schemaKeys = getKeys(value).sort();
            if (schemaKeys.length === 0) {
                return {};
            }
            schemas[++maxSchemaIndex] = schemaKeys;
            var decoded = {};
            for (var i = 0, k; k = schemaKeys[i++];) {
                decoded[k] = decode(value[k]);
            }
            return decoded;
        }
        function decode(value) {
            if (typeof value !== 'object' || !value) {
                // non-objects or null return as is
                return value;
            }
            else if (isArray(value)) {
                return parseArray(value);
            }
            else {
                return decodeNewObject(value);
            }
        }
        return decode(data);
    }
    RJSON.unpack = unpack;
    /**
     * Object is encoded as array and object schema index is stored as
     * first item of the array. Valid schema index should be greater than 0,
     * because 0 is reserved for Array schema.
     * Several objects with same schema can be stored in the one array.
     * @param {*} value encoded value to check.
     * @return {boolean} true if value contains an encoded object or several
     * objects with same schema.
     */
    function isEncodedObject(value) {
        return isArray(value) && typeof value[0] === 'number' && value[0] !== 0;
    }
    function _keys(obj) {
        var keys = [], k;
        for (k in obj) {
            if (hasOwnProperty.call(obj, k)) {
                keys.push(k);
            }
        }
        return keys;
    }
    function _isArray(obj) {
        return toString.apply(obj) === '[object Array]';
    }
})(RJSON || (RJSON = {}));
var anim;
(function (anim) {
    function onModalShow(modal) {
        if (actModal) {
            console.log('anim: onModalShow, hide old');
            if (_alertInfo)
                _alertInfo.okClick = undefined;
            actModal.modal('hide');
            actModal = null;
        }
        actModal = modal;
    }
    anim.onModalShow = onModalShow;
    function onModalHide(modal) {
        if (!modal || !modal.data('bs.modal').isShown)
            return;
        if (modal != actModal) {
            debugger;
            throw 'modal!=actModal';
        }
        actModal = null;
    }
    anim.onModalHide = onModalHide;
    var actModal;
    //template v d:\LMCom\rew\Web4\JsLib\JS\Bowser.html
    var alertInfo = (function () {
        function alertInfo() {
            var _this = this;
            this.text = ko.observable('');
            this.caption = ko.observable('');
            this.isCancelVisible = ko.observable(true);
            this.okClick = false;
            this.lmconsoleClick = $.noop;
            Pager.renderTemplateEx('lm-alert-place', 'lm-alert-template', this);
            this.mod = $('#lm-alert-place #modal-alert');
            Pager.renderTemplateEx('lm-console-place', 'lmconsole-dialog', this);
            this.lmconsoleDialog = $('#lm-console-place #modal-lmconsole-dialog');
            Pager.renderTemplateEx('lm-docdlg-place', 'doc-dialog', this);
            this.lmdocDialog = $('#lm-docdlg-place #modal-doc-dialog');
            this.mod.on('hide.bs.modal', function () {
                console.log('anim: alert hide');
                if (_this.completed)
                    _this.completed(_this.okClick);
                _this.completed = null;
                onModalHide(_this.mod);
            }).on('show.bs.modal', function () {
                console.log('anim: alert show');
                onModalShow(_this.mod);
            });
        }
        alertInfo.prototype.show = function (title, completed, finishParams) {
            if (finishParams === void 0) { finishParams = null; }
            if (actModal) {
                this.okClick = undefined;
                actModal.modal('hide');
                actModal = null;
            }
            this.okClick = false;
            this.text(title);
            this.completed = completed;
            this.isCancelVisible(true);
            this.caption('');
            if (finishParams)
                finishParams();
            this.mod.modal('show');
        };
        alertInfo.prototype.click = function () {
            console.log('anim: alert ok click');
            this.okClick = true;
            this.mod.modal('hide');
        };
        alertInfo.prototype.lmconsoleShow = function (onOK) {
            var _this = this;
            var ok = onOK;
            this.lmconsoleClick = function () { return ok(_this.lmconsoleDialog, function () { return _this.lmconsoleDialog.modal('hide'); }); };
            this.lmconsoleDialog.modal('show');
        };
        alertInfo.prototype.lmcdocDlgShow = function (data) {
            var txt = this.lmdocDialog.find('#modal-doc-text');
            txt.val(data);
            setTimeout(function () { return (txt[0]).select(); }, 1);
            //var txt = this.lmdocDialog.find('#modal-doc-pre');
            //txt.text(data);
            //setTimeout(() => selectText(txt[0]), 1);
            this.lmdocDialog.modal('show');
        };
        return alertInfo;
    })();
    anim.alertInfo = alertInfo;
    function alert() {
        if (!_alertInfo)
            _alertInfo = new alertInfo();
        return _alertInfo;
    }
    anim.alert = alert;
    var _alertInfo;
    function selectText(text) {
        var doc = document;
        if (window.getSelection) {
            var selection = window.getSelection();
            var range2 = doc.createRange();
            range2.selectNodeContents(text);
            selection.removeAllRanges();
            selection.addRange(range2);
        }
        else if ((doc).body.createTextRange) {
            var range = (doc).body.createTextRange();
            range.moveToElementText(text);
            range.select();
        }
    }
    /*
    <div data-toggle="collapse" data-target="#menu1">Expand</div>
    <div id="menu1" class="lm-anim" data-role="collapsed">
      Text Text Text Text Text Text Text Text Text Text Text Text
    </div>
  
    .lm-menu { position:absolute; }
    <div data-toggle="menu" data-target="#m1">Expand m2</div>
    <div id="m1" class="lm-menu lm-anim" data-role="menu">
      Text Text Text Text Text Text Text Text Text Text Text Text
    </div>
    */
    //http://www.bennadel.com/blog/1864-Experimenting-With-jQuery-s-Queue-And-Dequeue-Methods.htm
    //http://jsfiddle.net/enf644/6bX28/2/
    var animInterval = 400;
    //rozbal collapsed
    function toggleShow(block) {
        show(block, true);
    }
    function show(block, isToogle) {
        stopAnim(); //ukonci vsechny animace
        $('[data-role=collapsed]:not(:hidden)').not(block).hide(animInterval); //zabal ostatni collapsed
        if (!block)
            return; //neni co rozbalovat
        //if (isToogle) block.toggle(animInterval); else block.show(animInterval);
        if (isToogle)
            block.toggle(animInterval);
        else
            block.show(animInterval);
    }
    anim.show = show;
    function hideMenus(self) {
        $('[data-role=menu]').not(self).css({ 'opacity': 0, 'visibility': 'hidden' }); //zavri vsechna menu mimo self
    }
    anim.hideMenus = hideMenus;
    //otevri menu
    function showMenu(menu, ev) {
        stopAnim(); //ukonci vsechny animace
        hideMenus(menu);
        setTimeout(function () {
            menu.css({ 'visibility': 'visible', 'display': 'block', 'opacity': 0 }); //pro jistotu: inicializace menu
            menu.position({ my: "left+10 top+10", of: ev, collision: 'flipfit' }); //umisteni menu
            menu.animate({ "opacity": 1 }, animInterval); //animace opacity
        }, 1);
    }
    anim.showMenu = showMenu;
    //jakykoliv click
    $(document).on('click', function (ev) {
        var self = $(ev.target).closest('[data-role=menu]'); //self neprazdne => je klik do menu
        hideMenus(self);
        setTimeout(function () { return self.css({ 'opacity': 0, 'visibility': 'hidden' }); }, 1); //za chvili zavri i self
    });
    //rozbal collapse 
    $(document).on('click', '[data-toggle=collapse], [data-toggle=collapse] *', function (ev) {
        toggleShow($($(ev.target).closest('[data-toggle=collapse]').attr('data-target'))); //animuj element, jehoz id je ulozen v data-target
        ev.stopPropagation();
        return false;
    });
    //objev menu 
    function toggleMenu(ev) {
        return toggleMenuLow($.event.fix(ev));
    }
    anim.toggleMenu = toggleMenu;
    function toggleMenuLow(ev) {
        ev.stopPropagation();
        //ev.stopPropagation();
        showMenu($($(ev.target).closest('[data-toggle=menu]').attr('data-target')), ev); //animuj element s menu, jehoz id je ulozen v data-target
        return false;
    }
    anim.toggleMenuLow = toggleMenuLow;
    $(document).on('click', '[data-toggle=menu], [data-toggle=menu] *', toggleMenuLow);
    //zabrani odchyceni KEY events pro angularjs GUI
    anim.inAngularjsGui = false;
    //uzavri menu
    $(document).on('keydown', '*', function (ev) {
        if (anim.inAngularjsGui)
            return true;
        stopAnim();
        if (ev.keyCode != 27)
            return;
        hideMenus(null);
        return false;
    });
    //zapamatovani si pozice mysi
    $(document).bind('mousemove', function (ev) { return anim.mousePos = ev; });
    //inicializace (funguje pouze pro existujici elementy)
    $(function () {
        $('[data-role=collapsed]').hide();
        $('[data-role=menu]').css({ 'opacity': 0, 'visibility': 'hidden' });
    });
    //collapse all expandables
    function collapseExpanded() {
        $('[data-role=collapsed]:not(:hidden)').hide();
    }
    anim.collapseExpanded = collapseExpanded;
    //collapse all expandables slow
    function collapseExpandedSlow() {
        $('[data-role=collapsed]:not(:hidden)').hide(animInterval);
    }
    anim.collapseExpandedSlow = collapseExpandedSlow;
    //ukonci vsechny animace
    function stopAnim() {
        $('[data-role=collapsed], [data-role=menu]').finish();
    }
    anim.stopAnim = stopAnim;
})(anim || (anim = {}));
var Gui2;
(function (Gui2) {
    var skin = (function () {
        function skin() {
        }
        skin.prototype.bodyClass = function () { return ''; };
        skin.prototype.getSkinHome = function (std) {
            if (LMStatus.isLogged())
                return schools.getHash(schools.tMy, -1, null, null, null);
            var res = this.getHome();
            return _.isEmpty(res) ? std : res;
        };
        skin.prototype.getHome = function () { return null; };
        skin.instance = new skin();
        return skin;
    })();
    Gui2.skin = skin;
    var cancelTouch = function (ev, t) {
        if (ev != null) {
            ev.originalEvent = null;
            ev.preventDefault();
            ev.stopPropagation();
        }
        t.removeClass("lm-click");
    };
    $(document).delegate(".lm-clickable", "tapstart tapend mousedown mouseup", function (ev) {
        //console.log(ev.type);
        switch (ev.type) {
            case "tapstart":
            case "mousedown":
                var t = $(ev.currentTarget);
                if (t.is('.disabled'))
                    return;
                t.addClass("lm-click");
                setTimeout(function () { return cancelTouch(ev, t); }, 800);
                return true;
                break;
            case "tapend":
            case "mouseup":
                cancelTouch(ev, $(ev.currentTarget));
                break;
        }
    });
    function textWidthStart(styleHolder) {
        if (!twEl) {
            twEl = $('<div></div>');
            twEl.css({ position: 'absolute', left: -1000, top: -1000, height: 'auto', width: 'auto', 'white-space': 'nowrap' });
            $('body').append(twEl);
        }
        _.each(twStyles, function (s) { return twEl.css(s, styleHolder.css(s)); });
    }
    function textWidth(txt, styleHolder) {
        textWidthStart(styleHolder);
        twEl.html(txt);
        return twEl.width();
    }
    Gui2.textWidth = textWidth;
    function maxTextWidth(txts, styleHolder) {
        textWidthStart(styleHolder);
        var res = 0;
        _.each(txts, function (txt) {
            twEl.html(txt);
            res = Math.max(res, twEl.width());
        });
        return res;
    }
    Gui2.maxTextWidth = maxTextWidth;
    var twStyles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
    var twEl = null;
})(Gui2 || (Gui2 = {}));
var lmConsole;
(function (lmConsole) {
    function sendStart(el) {
        $(el).data('btn-down', Utils.nowToInt().toString());
    }
    lmConsole.sendStart = sendStart;
    function sendEnd(el) {
        var bd = $(el).data('btn-down');
        if (!bd)
            return;
        var btnDownTime = parseInt(bd);
        if (Utils.nowToInt() - btnDownTime < 2000)
            return;
        send();
    }
    lmConsole.sendEnd = sendEnd;
    function send() {
        if (typeof Pager == 'undefined') {
            $('body').html('<h2>Log</h2>' + getLogData('').replace(/\r\n/g, '<br/>'));
        }
        else {
            var sendId = new Date().getTime().toString();
            var res = sendLogLogDataLow();
            if (res.msg == null) {
                alert('Nothing to send');
                return;
            }
            anim.alert().lmconsoleShow(function (dlg, completed) {
                var st = {
                    nowStr: new Date().toUTCString(),
                    now: Utils.nowToNum(),
                    email: LMStatus.Cookie ? LMStatus.Cookie.EMail : '',
                    replEmail: dlg.find('#repl-email').val(),
                    problem: dlg.find('#problem').val(),
                    action: dlg.find('#action').val(),
                    other: dlg.find('#other').val(),
                    date: '',
                    hasError: false,
                };
                var data = '****************************************************************\r\n'
                    + JSON.stringify(st) + '\r\n'
                    + '****************************************************************\r\n'
                    + res.msg
                    + '#<' + sendId + ' log end\r\n';
                var url = Pager.basicUrl + 'mp3Uploader.ashx?phase=lmconsole&fileUrl=/app_data/logs/' + lmConsole.signature + '.js.log' + '&timestamp=' + sendId;
                sendAjax(url, data, function (success) {
                    if (success)
                        alert('Logging sent successfully!');
                    else
                        $('body').html('<h2>Send content of this page to support@langmaster.com</h2>' + data.replace(/\r\n/g, '<br/>'));
                    delFiles(res.files);
                    completed();
                });
            });
        }
    }
    function sendAjax(url, data, completed) {
        $.ajax({
            url: url,
            type: 'POST',
            data: data,
            contentType: 'text/plain',
            dataType: 'text',
        }).done(function () { return completed(true); }).fail(function () { return completed(false); });
    }
    function getLogData(status) {
        if (!lmConsole.active)
            return;
        var res = sendLogLogDataLow();
        delFiles(res.files);
        return res.msg;
    }
    function sendLogLogDataLow() {
        var res = { files: getLogFiles(), msg: null };
        if (res.files.length == 0)
            return res;
        var data = _.map(res.files, function (idx) { return localStorage.getItem(name(idx)); });
        res.msg = data.join('');
        return res;
        //sendCallback(msg, doDel => { if (!doDel) return; _.each(idxs, idx => localStorage.removeItem(name(idx))); refreshNames(); });
    }
    function delFiles(idxs) {
        _.each(idxs, function (idx) { return localStorage.removeItem(name(idx)); });
        refreshNames();
    }
    lmConsole.active = false;
    lmConsole.signature = null;
    var names = [];
    var lastName = 0;
    var fileLenLimit = 1000;
    var fileCountLimit = 1000;
    console['log'] = log;
    function signComputer() {
        lmConsole.signature = localStorage.getItem('log/signature');
        if (lmConsole.signature == null) {
            lmConsole.signature = new Date().getTime().toString();
            localStorage.setItem('log/signature', lmConsole.signature);
        }
    }
    function createCookie(name, value, days) {
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            var expires = "; expires=" + date.toUTCString();
        }
        else
            var expires = "";
        document.cookie = name + "=" + value + expires + "; path=/";
    }
    var cookieId = 'LoggerLogId'.toLowerCase();
    createCookie(cookieId, '', -1);
    function init() {
        if (lmConsole.active)
            return;
        if (!(lmConsole.active = storageExists()))
            return;
        signComputer();
        createCookie(cookieId, lmConsole.signature, 1);
        refreshNames();
    }
    function logError(msg) {
        init();
        log(msg);
    }
    function log(msg) {
        console.info(msg);
        if (!lmConsole.active)
            return;
        var actName = name(lastName);
        var val = (localStorage.getItem(actName));
        if (val && val.length > fileLenLimit) {
            if (names.length > fileCountLimit) {
                localStorage.removeItem(name(names[0]));
                names = names.slice(1);
            }
            lastName++;
            actName = name(lastName);
            names.push(lastName);
            val = null;
        }
        val = val ? val + msg : msg;
        try {
            localStorage.setItem(actName, val + '\r\n');
        }
        catch (msg) {
            localStorage.clear();
        }
    }
    function refreshNames() {
        names = getLogFiles();
        lastName = names.length == 0 ? 0 : _.max(names) + 1;
    }
    function getLogFiles() {
        var res = [];
        for (var i = 0; i < localStorage.length; i++) {
            var key = localStorage.key(i);
            var mtch = /^log\/(\d+)$/gi.exec(key);
            if (mtch == null)
                continue;
            res.push(parseInt(mtch[1]));
        }
        res = _.sortBy(res);
        return res;
    }
    function name(idx) { return 'log/' + idx.toString(); }
    function storageExists() {
        var test = 'test';
        try {
            localStorage.setItem(test, test);
            localStorage.removeItem(test);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    function test() {
        for (var i = 0; i < 20; i++)
            console.log(i.toString() + " xxxxxxx");
    }
    lmConsole.test = test;
    if (!isLogging) {
        isLogging = location.hash && location.hash == '#log';
        if (isLogging)
            location.hash == '';
    }
    if (isLogging)
        init();
    //localStorage.clear();
    $(window).on('error', function (ev) {
        var orig = ev.originalEvent;
        var msg = orig && orig.filename ? orig.filename + '.' + orig.lineno + '.' + orig.message : '';
        logError('*** ERROR (window.onerror): ' + msg);
    });
    $(window).bind('hashchange', function () {
        if (!isLogging) {
            isLogging = location.hash && location.hash == '#log';
            if (isLogging) {
                location.hash == '';
                init();
            }
        }
    });
})(lmConsole || (lmConsole = {}));
var isLogging = true;
var OAuthDefaultClient = {
    '2': {
        'default': '125816694160413',
        'sdefault': '',
    },
    '3': {
        'default': '',
        'sdefault': '',
    },
    '8': {
        'default': '',
        'sdefault': '',
    },
};
//Facebook: https://www.facebook.com/dialog/oauth ### https://graph.facebook.com/me
//    https://developers.facebook.com/docs/reference/dialogs/oauth/ ### comma delimited scope: email ostatni automaticky
//Google: https://accounts.google.com/o/oauth2/auth ### https://www.googleapis.com/oauth2/v1/userinfo 
//    https://developers.google.com/accounts/docs/OAuth2Login ### space delimited scope: https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile
//Microsoft: https://login.live.com/oauth20_authorize.srf ### ??? mozna vrati automaticky ??? 
//    http://msdn.microsoft.com/en-us/library/live/hh826532.aspx ### space delimited scope: wl.signin wl.basic wl.email
//LinkedIn: https://api.linkedin.com/uas/oauth/requestToken ### http://api.linkedin.com/v1/people/~:(id,first-name,last-name,email-address)  viz http://developer.linkedin.com/documents/field-selectors
//    https://developer.linkedin.com/documents/authentication ### space delimited scope: r_basicprofile r_emailaddress (r_contactinfo)
//Yandex: https://oauth.yandex.com/authorize ### http://api-fotki.yandex.ru/api/me/ (viz http://api.yandex.com/oauth/doc/dg/reference/accessing-protected-resource.xml)
//    http://api.yandex.com/oauth/doc/dg/tasks/register-client.xml, http://api.yandex.com/oauth/doc/dg/yandex-oauth-dg.pdf, http://api.yandex.com/oauth/doc/dg/reference/obtain-access-token.xml
//Yahoo: neumi
//if ((<any>window).XDomainRequest) {
//  (<any>jQuery).ajaxTransport('+', function (s) { 
//    if (s.crossDomain && s.async) {
//      if (s.timeout) {
//        s.xdrTimeout = s.timeout;
//        delete s.timeout;
//      }
//      var xdr;
//      return {
//        send: function (_, complete) {
//          function callback(status, statusText, responses=null, responseHeaders=null) {
//            xdr.onload = xdr.onerror = xdr.ontimeout = jQuery.noop;
//            xdr = undefined;
//            complete(status, statusText, responses, responseHeaders);
//          }
//          xdr = new XDomainRequest();
//          xdr.onload = function () {
//            callback(200, "OK", { text: xdr.responseText }, "Content-Type: " + xdr.contentType);
//          };
//          xdr.onerror = function () {
//            callback(404, "Not Found");
//          };
//          xdr.onprogress = jQuery.noop;
//          xdr.ontimeout = function () {
//            callback(0, "timeout");
//          };
//          xdr.timeout = s.xdrTimeout || Number.MAX_VALUE;
//          xdr.open(s.type, s.url);
//          xdr.send((s.hasContent && s.data) || null);
//        },
//        abort: function () {
//          if (xdr) {
//            xdr.onerror = jQuery.noop;
//            xdr.abort();
//          }
//        }
//      };
//    }
//  });
//}
//declare var OAuthDefaultClient: 
var OAuth;
(function (OAuth) {
    var client_type;
    switch (location.host.toLowerCase()) {
        case "www.langmaster.com":
            client_type = location.protocol == "http:" ? "www_lm" : "s_www_lm";
            break;
        case "test.langmaster.com":
            client_type = location.protocol == "http:" ? "test_lm" : "s_test_lm";
            break;
        case "www.eduland.vn":
            client_type = location.protocol == "http:" ? "eduland" : "s_eduland";
            break;
        case "langmaster.jjlearning.com.mx":
            client_type = location.protocol == "http:" ? "alan" : "s_alan";
            break;
        case "www.onlinetesty.skrivanek.cz":
        case "onlinetesty.skrivanek.cz":
            client_type = location.protocol == "http:" ? "skrivanek" : "s_skrivanek";
            break;
        //case "localhost": client_type = "localhost"; break;
        default:
            client_type = location.protocol == "http:" ? 'default' : 'hdefault';
            break; //app keys musi byt ulozeny v OAuthDefaultClient (v JsLib\JS\lmconsoleinit.js)
    }
    ;
    var cfg = [];
    function addCfg(providerid, client_id, authorizationUrl, ajaxUrl, scopes, logoutUrl, ajaxUrlJsonp, parseProfile, isCode, client_secret) {
        if (isCode === void 0) { isCode = false; }
        if (client_secret === void 0) { client_secret = null; }
        var c = {
            providerid: providerid, client_id: client_id, authorizationUrl: authorizationUrl, ajaxUrl: ajaxUrl, scopes: scopes,
            parseProfile: parseProfile, isCode: isCode, client_secret: client_secret, logoutUrl: logoutUrl, ajaxUrlJsonp: ajaxUrlJsonp
        };
        cfg[c.providerid.toString()] = c;
    }
    /********************* FACEBOOK *****************************/
    //https://developers.facebook.com/docs/reference/dialogs/oauth/ 
    //pavel.zika@langmaster.com / edurom
    addCfg(LMComLib.OtherType.Facebook, {
        www_lm: '217099001634050',
        test_lm: '202002813170094',
        s_www_lm: '600606046618350',
        s_test_lm: '615996988429168',
        eduland: '491123084355646',
        s_eduland: '491123084355646',
        alan: '266038006937055',
        s_alan: '266038006937055',
        skrivanek: '849519431765938',
        s_skrivanek: '849519431765938',
    }, 
    //{ www_lm: "600606046618350", test_lm: "600606046618350" },
    //logout http://forums.asp.net/t/1768815.aspx/1
    "https://www.facebook.com/dialog/oauth", "https://graph.facebook.com/me", "email", "https://www.facebook.com", null, function (obj, providerid) { var res = { id: obj.id, email: obj.email, firstName: obj.first_name, lastName: obj.last_name ? obj.last_name : obj.name, providerid: providerid }; return res; });
    /********************* GOOGLE *****************************/
    //https://developers.google.com/accounts/docs/OAuth2UserAgent
    //https://code.google.com/apis/console/#project:475616334704:access, langmaster.com@gmail.com / asdfghjkl123_
    addCfg(LMComLib.OtherType.Google, {
        www_lm: '475616334704.apps.googleusercontent.com',
        test_lm: '475616334704-7caok7nqami8aio7aircs52rd1qag254.apps.googleusercontent.com',
        s_www_lm: '475616334704.apps.googleusercontent.com',
        s_test_lm: '475616334704-7caok7nqami8aio7aircs52rd1qag254.apps.googleusercontent.com',
        eduland: '475616334704-g6b9to8r245jh1mrf1k233b99lttv1ed.apps.googleusercontent.com',
        s_eduland: '475616334704-g6b9to8r245jh1mrf1k233b99lttv1ed.apps.googleusercontent.com',
        alan: '475616334704-0le99lu79aomar2rnaa1upp3ajop361g.apps.googleusercontent.com',
        s_alan: '475616334704-0le99lu79aomar2rnaa1upp3ajop361g.apps.googleusercontent.com',
        skrivanek: '475616334704-4f78jgp3s5hqum8tnb9b37lpp93vkogv.apps.googleusercontent.com',
        s_skrivanek: '475616334704-4f78jgp3s5hqum8tnb9b37lpp93vkogv.apps.googleusercontent.com',
    }, 
    //https://github.com/valenting/ffos-google-contact-importer/blob/master/index.html
    "https://accounts.google.com/o/oauth2/auth", "https://www.googleapis.com/oauth2/v1/userinfo", "https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile", "http://accounts.google.com/Logout", "https://www.googleapis.com/oauth2/v1/tokeninfo", 
    //"https://accounts.google.com/o/oauth2/auth", "https://www.googleapis.com/oauth2/v1/userinfo", "https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile", "http://google.com/",
    function (obj, providerid) {
        //debugger;
        //var res: profile = { id: obj.id, email: obj.email, firstName: obj.given_name, lastName: obj.family_name, providerid: providerid }; return res;
        var res = { id: wrongMSIE ? obj.user_id : obj.id, email: obj.email, firstName: obj.given_name, lastName: obj.family_name, providerid: providerid };
        return res;
    });
    /********************* MICROSOFT *****************************/
    //http://msdn.microsoft.com/en-us/library/live/hh826532.aspx
    //https://manage.dev.live.com/Applications/Index, pjanecek@langmaster.cz / cz.langmaster
    addCfg(LMComLib.OtherType.Microsoft, {
        www_lm: '00000000400DF001',
        test_lm: '00000000440EEFCD',
        s_www_lm: '00000000400DF001',
        s_test_lm: '00000000440EEFCD',
        eduland: '000000004011E10D',
        s_eduland: '000000004011E10D',
        alan: '000000004412613C',
        s_alan: '000000004412613C',
        skrivanek: '0000000048135E31',
        s_skrivanek: '0000000048135E31',
    }, "https://login.live.com/oauth20_authorize.srf", 
    //"https://apis.live.net/v5.0/me", 
    "https://apis.live.net/v5.0/me", "wl.signin wl.basic wl.emails", "https://login.live.com/", null, //"https://apis.live.net/v5.0/me?method=GET&interface_method=undefined&pretty=false&return_ssl_resources=false&x_http_live_library=Web%2Fie10_5.3&suppress_redirects=true",
    function (obj, providerid) { var res = { id: obj.id, email: _.compact(_.values(obj.emails))[0], firstName: obj.first_name, lastName: obj.last_name, providerid: providerid }; return res; });
    /********************* LM *****************************/
    addCfg(LMComLib.OtherType.LANGMaster, null, null, null, null, null, null, null);
    addCfg(LMComLib.OtherType.LANGMasterNoEMail, null, null, null, null, null, null, null);
    if (OAuthDefaultClient) {
        for (var p in OAuthDefaultClient) {
            var clients = OAuthDefaultClient[p];
            for (var pp in clients) {
                cfg[p].client_id[pp] = clients[pp];
            }
        }
    }
    //https://developer.linkedin.com/documents/authentication
    //addCfg(LMComLib.OtherType.LinkedIn, "bbeqjmfcikpm", "https://www.linkedin.com/uas/oauth2/authorization", "http://api.linkedin.com/v1/people/~:(id,first-name,last-name,email-address)", "r_basicprofile,r_emailaddress",
    //  (obj: any) => { var res: profile = { id: obj.id, email: obj.email, firstName: obj.first_name, lastName: obj.last_name }; return res; },
    //  true, "uh6OBJA1uY5reZgh");
    OAuth.validProviders = _.pluck(_.values(cfg), "providerid");
    function logoutUrl(type) { return cfg[type].logoutUrl; }
    OAuth.logoutUrl = logoutUrl;
    //Start externi authorizace, do cookie dej sessionState
    function authrequest(providerid) {
        var co = cfg[providerid.toString()];
        Logger.trace_oauth("authrequest, config: " + JSON.stringify(co));
        //cookie content
        var sessState = { providerid: providerid, state: Utils.guid() };
        //remove hash
        var ru = window.location.href, idx = window.location.href.indexOf("#");
        if (idx >= 0)
            ru = ru.substring(0, idx);
        var request = {
            response_type: "token",
            state: sessState.state,
            redirect_uri: ru,
            client_id: co.client_id[client_type],
            scope: co.scopes
        };
        var authurl = Utils.encodeURL(co.authorizationUrl, request);
        Logger.trace_oauth("authrequest, request: " + JSON.stringify(request));
        Cook.write(LMComLib.CookieIds.oauth, JSON.stringify(sessState), false);
        window.location.href = authurl;
    }
    OAuth.authrequest = authrequest;
    ;
    function checkForToken(completed) {
        checkfortoken(function (provider, token, isError, error) {
            if (isError)
                completed(null);
            OAuth.getData(provider, token, completed);
        });
    }
    OAuth.checkForToken = checkForToken;
    function parseQueryString(qs) {
        var e, a = /\+/g, // Regex for replacing addition symbol with a space
        r = /([^&;=]+)=?([^&;]*)/g, d = function (s) { return decodeURIComponent(s.replace(a, " ")); }, q = qs, urlParams = {};
        while (e = r.exec(q))
            urlParams[d(e[1])] = d(e[2]);
        return urlParams;
    }
    //Navrat z externi authorizace, vyuzij sessionState z cookie
    /*
     * Check if the hash contains an access token.
     * And if it do, extract the state
     */
    function checkfortoken(callback) {
        //cookie info
        var ck = Cook.read(LMComLib.CookieIds.oauth, null);
        Logger.trace_oauth("checkfortoken, cookie: " + ck);
        Cook.remove(LMComLib.CookieIds.oauth);
        if (ck == null || ck == "") {
            callback(null, null, true, "missing session cookie");
            return;
        }
        var sessState = JSON.parse(ck);
        var provider = cfg[sessState.providerid.toString()];
        //check and normalize hash
        var h = window.location.hash;
        Logger.trace_oauth("checkfortoken, hash: " + h);
        if (h == null) {
            callback(null, null, true, "missing hash");
            return;
        }
        while (h.indexOf('#') >= 0)
            h = h.substring(h.indexOf('#') + 1);
        if (h.indexOf('/') >= 0)
            h = h.substring(1);
        if (h.indexOf("access_token") === -1) {
            callback(null, null, true, "missing access token");
            return;
        }
        //parse hash
        var atoken = parseQueryString(h);
        //check State
        if (atoken.state && atoken.state != sessState.state) {
            callback(null, null, true, "wrong state");
            return;
        }
        Logger.trace_oauth("checkfortoken, token: " + atoken.access_token);
        //return access token
        callback(provider, atoken.access_token, false, null);
    }
    OAuth.checkfortoken = checkfortoken;
    var wrongMSIE = $.browser.msie && parseInt($.browser.version, 10) <= 9; //neumi CORS, musi byt JSONP
    function getData(provider, token, completed) {
        Logger.trace_oauth("getData, token: " + token);
        var url = wrongMSIE ? provider.ajaxUrlJsonp : provider.ajaxUrl;
        if (url == null)
            url = provider.ajaxUrl;
        $.support.cors = true;
        $.ajax({
            type: "GET",
            crossDomain: true,
            url: url,
            //dataType: 'json',
            dataType: wrongMSIE ? 'jsonp' : 'json',
            success: function (data) {
                Logger.trace_oauth("getData, token" + JSON.stringify(data));
                completed(provider.parseProfile(data, provider.providerid));
            },
            data: provider.providerid == LMComLib.OtherType.Facebook ? { access_token: token, fields: 'email,first_name,last_name' } : { access_token: token },
            error: function (jqXHR, textStatus, errorThrown) {
                Logger.trace_oauth('*** error: ' + textStatus + ", " + errorThrown + ', ' + url);
                if (jqXHR.status === 401)
                    Logger.trace_oauth("Token expired. About to delete this token");
            }
        });
    }
    OAuth.getData = getData;
})(OAuth || (OAuth = {}));
//xx/#DEBUG
var Logger;
(function (Logger) {
    function trace_oauth(msg) {
        Logger.trace("OAuth", msg);
    }
    Logger.trace_oauth = trace_oauth;
})(Logger || (Logger = {}));
//xx/#ENDDEBUG
//var noop = null;
var scorm;
(function (scorm) {
    var runtimeApi = (function () {
        function runtimeApi(api) {
            this.api = api;
        }
        runtimeApi.prototype.LMSInitialize = function (st) { Logger.trace_scorm("==> LMSInitialize"); return this.api ? this.api.LMSInitialize(st) : "true"; };
        runtimeApi.prototype.LMSGetValue = function (name) { Logger.trace_scorm("LMSGetValue " + name); return this.api ? this.api.LMSGetValue(name) : ""; };
        runtimeApi.prototype.LMSSetValue = function (name, value) { Logger.trace_scorm("LMSSetValue " + name); if (this.api)
            this.api.LMSSetValue(name, value); };
        runtimeApi.prototype.LMSCommit = function (newStatus) { Logger.trace_scorm("LMSCommit"); return this.api ? this.api.LMSCommit(newStatus) : "true"; };
        runtimeApi.prototype.LMSGetDiagnostic = function (code) { Logger.trace_scorm("LMSGetDiagnostic"); if (this.api)
            this.api.LMSGetDiagnostic(code); };
        runtimeApi.prototype.LMSGetErrorString = function (code) { Logger.trace_scorm("LMSGetErrorString"); return this.api ? this.api.LMSGetErrorString(code) : "true"; };
        runtimeApi.prototype.LMSGetLastError = function () { Logger.trace_scorm("LMSGetLastError"); return this.api ? this.api.LMSGetLastError() : 0; };
        runtimeApi.prototype.LMSFinish = function (par) { if (this.api)
            Logger.trace_scorm("==> LMSFinish"); this.api.LMSFinish(par); };
        return runtimeApi;
    })();
    scorm.runtimeApi = runtimeApi;
    var lmsDriver = (function () {
        function lmsDriver() {
        }
        lmsDriver.prototype.getPreviewMode = function () {
            return scorm.status == cStatusPassed || this.isPreviewWhenFailed() || scorm.status == cStatusCompleted || scorm.status == cStatusBrowsed || mode == cModeBrowse || mode == cModeReview;
        };
        lmsDriver.prototype.adjustFirstEnter = function () {
            var doCommit = false;
            if (scorm.status == cStatusNotAttempted || scorm.status == '') {
                doCommit = true;
                scorm.status = cStatusIncomplete;
                scorm.API.LMSSetValue(cStatus, scorm.status);
            }
            //v suspend data je ulozena identifikace Attempt Id (vyuziva se v persistScormEx.attemptId k identifikaci DB zaznamu)
            //Novy course Attempt pak tedy vyuziva nova data.
            var isNotAttempted = false;
            if (_.isEmpty(scorm.attemptId)) {
                scorm.attemptId = this.createAttemptIdQueryPar();
                isNotAttempted = true;
                doCommit = true;
                scorm.API.LMSSetValue(cSuspendData, scorm.attemptId);
            }
            if (doCommit)
                scorm.API.LMSCommit('');
            return isNotAttempted;
        };
        //virtuals
        lmsDriver.prototype.isPreviewWhenFailed = function () { return scorm.status == cStatusFailed; };
        lmsDriver.prototype.createAttemptIdQueryPar = function () { return 'attemptidstr=' + cfg.rootProductId + '|' + new Date().getTime().toString(); };
        return lmsDriver;
    })();
    var edoceoDriver = (function (_super) {
        __extends(edoceoDriver, _super);
        function edoceoDriver() {
            _super.apply(this, arguments);
        }
        //virtuals
        edoceoDriver.prototype.isPreviewWhenFailed = function () { return false; };
        edoceoDriver.prototype.createAttemptIdQueryPar = function () { return 'attemptid=' + Utils.Hash(cfg.rootProductId); };
        return edoceoDriver;
    })(lmsDriver);
    scorm.apiWin = window; //okno s API
    scorm.API = new runtimeApi(null);
    //var sessionStart: Date;
    var mode;
    var finished = true;
    var driver;
    switch (cfg.scorm_driver) {
        case schools.scormDriver.edoceo:
            driver = new edoceoDriver();
            break;
        case schools.scormDriver.no:
            driver = new lmsDriver();
            break;
    }
    //export function initDummy() {
    //  //API = new dummyApi();
    //  apiWin = window;
    //}
    $(window).on('unload', function () { if (!scorm.API || finished)
        return; scorm.API.LMSCommit(''); finish(); });
    function init(completed) {
        if (!finished)
            return;
        finished = false;
        if (!scorm.API.api)
            findApi();
        Logger.trace_scorm("API OK: moodle=" + (scorm.isMoodle ? "true" : "false") + ", isPopup=" +
            (scorm.inPopup ? "true" : "false") + ", url=" + scorm.apiUrl);
        if (isError(scorm.API.LMSInitialize(''))) {
            scorm.API.LMSFinish('');
            if (!checkError(scorm.API.LMSInitialize('')))
                return false;
        }
        scorm.status = scorm.API.LMSGetValue(cStatus);
        var stName = scorm.API.LMSGetValue(cStudentName);
        var stId = scorm.API.LMSGetValue(cStudentId);
        var compHost = scorm.apiWin.location.host;
        mode = scorm.API.LMSGetValue(cMode);
        if (_.isEmpty(mode))
            mode = scorm.API.LMSGetValue(cLessMode);
        scorm.attemptId = scorm.API.LMSGetValue(cSuspendData);
        Logger.trace_scorm("Status=" + scorm.status + ", compHost=" + compHost + ", id=" + stId + ", firstName=" + stFirstName + ", lastName=" + stLastName + ", mode=" + mode + ', suspendData=' + scorm.attemptId);
        CourseMeta.previewMode = driver.getPreviewMode();
        if (CourseMeta.previewMode) {
            completed(compHost, stId, stFirstName, stLastName, false);
            return;
        }
        var isFirstEnter = driver.adjustFirstEnter();
        var parts = stName ? stName.split(",") : [""];
        var stLastName = parts[0];
        var stFirstName = parts.length > 1 ? parts[1] : "";
        if (completed)
            completed(compHost, stId, stFirstName, stLastName, isFirstEnter);
    }
    scorm.init = init;
    function reportProgress(timeSec, complScore) {
        if (finished || scorm.API == null || driver.getPreviewMode())
            return;
        //cmi.core.session_time pridava cas k cmi.core.total_time, => TotalTime = TotalTime + (LMTotalTime - TotalTime)
        var total = scorm.API.LMSGetValue(cTotalTime);
        if (!total)
            total = "00:00:00";
        var parts = total.split(":");
        if (parts.length != 3)
            parts = ["0", "0", "0"];
        var elapsedSec = parseInt(parts[0]) * 3600 + parseInt(parts[1]) * 60 + parseInt(parts[2]);
        if (elapsedSec < timeSec) {
            var time = secToScormTime(timeSec - elapsedSec);
            scorm.API.LMSSetValue(cSessionTime, time);
        }
        if (complScore != null) {
            //LMS neumi samo nastavovat passed x failed:
            var mastery = scorm.API.LMSGetValue(cMasteryScore);
            var sc = _.isEmpty(mastery) ? 75 : parseInt(mastery);
            scorm.status = complScore >= sc ? cStatusPassed : cStatusFailed;
            //LMS umi nastavovat passed x failed:
            //status = cStatusCompleted;
            CourseMeta.previewMode = driver.getPreviewMode();
            scorm.API.LMSSetValue(cStatus, scorm.status);
            scorm.API.LMSSetValue(cScoreRaw, complScore.toString());
            Logger.trace_scorm("progress: completed, score=" + complScore.toString());
        }
        Logger.trace_scorm("progress: elapsed=" + time);
        checkError(scorm.API.LMSCommit(''));
        if (CourseMeta.previewMode)
            finish();
        //if (cfg.scorm_AlowFinish) {
        //  checkError(API.LMSFinish(""));
        //  checkError(API.LMSInitialize(''));
        //}
    }
    scorm.reportProgress = reportProgress;
    function finish() {
        if (finished || scorm.API == null)
            return;
        checkError(scorm.API.LMSFinish(""));
        finished = true;
    }
    scorm.finish = finish;
    //export class dummyApi implements API {
    //  LMSInitialize(st: string): string { return "true"; }
    //  LMSGetValue(name: string): string { return ""; }
    //  LMSSetValue(name: string, value: string): void { }
    //  LMSCommit(newStatus: string): string { return "true"; }
    //  LMSGetDiagnostic(code) { }
    //  LMSGetErrorString(code): string { return "true"; }
    //  LMSGetLastError(): number { return 0; }
    //  LMSFinish(par) { }
    //}
    var SCORM_TRUE = "true";
    var SCORM_FALSE = "false";
    //http://www.scormcourse.com/scorm12_course/resources/coreLesson_Status.html
    //http://www.vsscorm.net/2009/07/24/step-22-progress-and-completion-cmi-core-lesson_status/
    //http://scorm.com/scorm-explained/technical-scorm/run-time/
    var cStatus = 'cmi.core.lesson_status';
    var cStatusNotAttempted = "not attempted";
    var cStatusIncomplete = "incomplete";
    var cStatusPassed = "passed";
    var cStatusFailed = "failed";
    var cStatusCompleted = "completed";
    var cStatusBrowsed = "browsed";
    var cSuspendData = 'cmi.suspend_data';
    var cLessMode = 'cmi.core.lesson_mode';
    var cMode = 'cmi.mode';
    var cModeBrowse = 'browse';
    var cModeReview = 'review';
    //http://www.scormcourse.com/scorm12_course/resources/coreStudent_Name.html
    var cStudentName = "cmi.core.student_name";
    //http://www.scormcourse.com/scorm12_course/resources/coreStudent_id.html
    var cStudentId = "cmi.core.student_id";
    //http://www.scormcourse.com/scorm12_course/resources/coreSession_Time.html
    var cSessionTime = "cmi.core.session_time";
    var cTotalTime = "cmi.core.total_time";
    //http://www.scormcourse.com/scorm12_course/resources/coreExit.html
    var cExit = "cmi.core.exit";
    //http://www.scormcourse.com/scorm_2004_beginner/Run%20Time/Optional%20Items%20Reference/CMI_STUDENT_DATA.htm
    var cMasteryScore = "cmi.student_data.mastery_score";
    //http://www.scormcourse.com/scorm12_course/resources/coreScoreRaw.html
    var cScoreRaw = "cmi.core.score.raw";
    function isError(res) {
        return !res || (res.toString() != SCORM_FALSE) ? false : true;
    }
    function checkError(res) {
        if (!isError(res))
            return true;
        var errorNumber = scorm.API.LMSGetLastError();
        var errorString = scorm.API.LMSGetErrorString(errorNumber);
        var diagnostic = scorm.API.LMSGetDiagnostic(errorNumber);
        var errorDescription = "Number: " + errorNumber + "\nDescription: " + errorString + "\nDiagnostic: " + diagnostic;
        Logger.trace_scorm("**** ERROR:  - Could not initialize communication with the LMS.\n\nYour results may not be recorded.\n\n" + errorDescription);
        return false;
    }
    function findApi() {
        findAPILow(window);
        if (scorm.API.api != null)
            return;
        var opener = findOpener(window);
        if ((opener == null) || (typeof (opener) == "undefined"))
            return;
        findAPILow(opener);
        scorm.inPopup = scorm.API.api != null;
    }
    ;
    function findAPILow(win) {
        var findAPITries = 0;
        while ((win.API == null || typeof (win.API) == 'undefined') && (win.parent != null) && (win.parent != win)) {
            findAPITries++;
            if (findAPITries > 7)
                return;
            win = win.parent;
        }
        if (typeof (win.API) == 'undefined')
            return;
        scorm.apiWin = win;
        scorm.apiUrl = scorm.apiWin.location.href.toLowerCase();
        scorm.apiSignature = (scorm.apiWin.location.hostname + scorm.apiWin.location.pathname).toLowerCase();
        scorm.isMoodle = scorm.apiUrl.indexOf(moodlePath) >= 0;
        scorm.API = new runtimeApi(win.API);
    }
    function findOpener(win) {
        var findAPITries = 0;
        while ((win.opener == null) && (win.parent != null) && (win.parent != win)) {
            findAPITries++;
            if (findAPITries > 7)
                return null;
            win = win.parent;
        }
        return win.opener;
    }
    var moodlePath = '/mod/scorm/player.php';
    function updateSessionTime(startDate, endDate, elapsed) {
        var sessSec = (endDate.getTime() - startDate.getTime()) / 1000;
        var parts = elapsed.split(':');
        var elapsedSec = parseInt(parts[0]) * 3600 + parseInt(parts[1]) * 60 + parseInt(parts[2]);
        var newSec = elapsedSec + sessSec;
        return secToScormTime(newSec);
    }
    function secToScormTime(ts) {
        var sec = (ts % 60);
        ts -= sec;
        var tmp = (ts % 3600); //# of seconds in the total # of minutes
        ts -= tmp; //# of seconds in the total # of hours
        // convert seconds to conform to CMITimespan type (e.g. SS.00)
        sec = Math.round(sec * 100) / 100;
        var strSec = new String(sec);
        var strWholeSec = strSec;
        var strFractionSec = "";
        if (strSec.indexOf(".") != -1) {
            strWholeSec = strSec.substring(0, strSec.indexOf("."));
            strFractionSec = strSec.substring(strSec.indexOf(".") + 1, strSec.length);
        }
        if (strWholeSec.length < 2) {
            strWholeSec = "0" + strWholeSec;
        }
        strSec = strWholeSec;
        if (strFractionSec.length) {
            strSec = strSec + "." + strFractionSec;
        }
        var hour, min;
        if ((ts % 3600) != 0)
            hour = 0;
        else
            hour = (ts / 3600);
        if ((tmp % 60) != 0)
            min = 0;
        else
            min = (tmp / 60);
        var h = hour.toString();
        if (h.length < 2)
            h = "0" + h;
        var m = min.toString();
        if (m.length < 2)
            m = "0" + m;
        var rtnVal = h + ":" + m + ":" + strSec;
        return rtnVal;
    }
})(scorm || (scorm = {}));
//xx/#DEBUG
var Logger;
(function (Logger) {
    function trace_scorm(msg) {
        Logger.trace("scorm", msg);
    }
    Logger.trace_scorm = trace_scorm;
})(Logger || (Logger = {}));
//xx/#ENDDEBUG
//var noopScorm = null;
//http://www.html5rocks.com/en/tutorials/getusermedia/intro/
//http://typedarray.org/from-microphone-to-wav-with-getusermedia-and-web-audio/
//http://webaudiodemos.appspot.com/
var html5Recorder;
(function (html5Recorder) {
    //export var bufferLength = 4096;
    html5Recorder.bufferLength = 16384;
    html5Recorder.wavUrl = null; //URL pro prime prehrani nahraneho zvuku
    var audioCaptureTested = false; //priznak otestovani, zdali prohlizec umi HTML5 Audio capture 
    var audioContextError; //vysledek testu. NULL => ok
    //nodes a context, vznikle pri prvnim recording
    var audioContext = null;
    var copyToBufferNode;
    var microphoneNode;
    html5Recorder.audioNodesConnected = false;
    var recBuffers = []; //buffer s nahranumi WAV samples
    var RecHandler = (function () {
        function RecHandler() {
        }
        RecHandler.prototype.recordEnd = function () { stopRecording(); };
        RecHandler.prototype.isRecording = function () { return html5Recorder.audioNodesConnected; };
        return RecHandler;
    })();
    html5Recorder.RecHandler = RecHandler;
    function checkHTML5AudioCapture() {
        if (audioCaptureTested)
            return audioContextError == null;
        audioCaptureTested = true;
        var errors = [];
        var nav = navigator;
        navigator.getUserMedia = nav.getUserMedia || nav.webkitGetUserMedia || nav.mozGetUserMedia || nav.msGetUserMedia;
        if (!navigator.getUserMedia)
            errors.push("Browser does not support navigator.getUserMedia.");
        URL = window.URL || window.webkitURL;
        if (!URL)
            errors.push("Browser does not support window.URL.");
        if (URL && (!URL.revokeObjectURL || !URL.createObjectURL))
            errors.push("Browser does not support URL.revokeObjectURL or URL.createObjectURL.");
        AudioContext = window.AudioContext || window.webkitAudioContext;
        if (!AudioContext)
            errors.push("Browser does not support window.AudioContext.");
        var audioContextError = errors.join("\r\n");
        if (audioContextError == '')
            audioContextError = null;
        return audioContextError == null;
    }
    html5Recorder.checkHTML5AudioCapture = checkHTML5AudioCapture;
    function startRecording(onProcess) {
        if (html5Recorder.audioNodesConnected)
            return; //jiz ze nahrava
        if (!checkHTML5AudioCapture()) {
            debugger;
            throw '!checkHTML5AudioCapture';
        } //nemelo by nastat, checkHTML5AudioCapture() musi projit pri testu na HTML5 nahravani
        recBuffers = []; //vyprazdni buffers
        if (!audioContext) {
            //BT 2247
            //var alowMicrophoneTimer: number;
            //if (!bowser.agent.firefox)
            //  alowMicrophoneTimer = setTimeout(() => { alert('Allow the microphone, please!\r\n(using the button rigth above the content of the page)'); alowMicrophoneTimer = 0; }, 3000);
            navigator.getUserMedia({ audio: true, video: false }, //napoj se na user media
            function (stream) {
                //BT 2247 if (alowMicrophoneTimer) clearTimeout(alowMicrophoneTimer); //mikrofon povolen => zrus upozorneni
                audioContext = new AudioContext();
                microphoneNode = audioContext.createMediaStreamSource(stream);
                copyToBufferNode = audioContext.createScriptProcessor(html5Recorder.bufferLength, 1, 1); //AudioNode na zaznamenani do bufferu
                connectAudioNodes(function (ev) { if (html5Recorder.audioNodesConnected)
                    onProcess(ev); }); //napojeni audio nodes
            }, function (err) { return alert('navigator.getUserMedia: ' + err.message); });
        }
        else {
            connectAudioNodes(function (ev) { if (html5Recorder.audioNodesConnected)
                onProcess(ev); });
        }
    }
    html5Recorder.startRecording = startRecording;
    function connectAudioNodes(onProcess) {
        if (onProcess === void 0) { onProcess = null; }
        if (!!onProcess && !html5Recorder.audioNodesConnected) {
            copyToBufferNode.onaudioprocess = onProcess;
            microphoneNode.connect(copyToBufferNode);
            copyToBufferNode.connect(audioContext.destination);
            html5Recorder.audioNodesConnected = true;
            Logger.trace_lmsnd('connectAudioNodes, audioNodesConnected = true');
        }
        else if (!onProcess && html5Recorder.audioNodesConnected) {
            microphoneNode.disconnect();
            copyToBufferNode.disconnect();
            html5Recorder.audioNodesConnected = false;
            Logger.trace_lmsnd('connectAudioNodes, audioNodesConnected = false');
        }
    }
    function clearRecording() { if (html5Recorder.wavUrl) {
        URL.revokeObjectURL(html5Recorder.wavUrl);
        html5Recorder.wavUrl = null;
    } }
    function stopRecording() {
        if (!html5Recorder.audioNodesConnected)
            return;
        connectAudioNodes(null); //odvaz mikrofon z grafu
        //if (recBuffers.length == 0) { debugger; throw 'recBuffers.length == 0'; }
        ////linearize recording
        //var samples = mergeBuffers(recBuffers); recBuffers = [];
        //Logger.trace_lmsnd('HTML5rec.stopRecording len=' + samples.length.toString());
        ////preved do blob a url
        //var dataview = encodeWAV(samples, 44100);
        //var blob = new Blob([dataview], { type: "audio/wav" });
        //wavUrl = URL.createObjectURL(blob);
        //Logger.trace_lmsnd('HTML5rec.stopRecording wavUrl=' + wavUrl);
        //if (completed) completed(wavUrl);
    }
    html5Recorder.stopRecording = stopRecording;
    function mergeBuffers(recBuffers) {
        var len = 0;
        _.each(recBuffers, function (b) { return len += b.length; }); //zjisti delku vysledku
        var result = new Float32Array(len); //alokuj pamet
        var offset = 0;
        _.each(recBuffers, function (b) { result.set(b, offset); offset += b.length; }); //zkopiruj bufery do jednoho
        return result;
    }
    function encodeWAV(recBuffers, sampleRate) {
        var floats = mergeBuffers(recBuffers);
        var buffer = new ArrayBuffer(44 + floats.length * 2);
        var view = new DataView(buffer);
        writeString(view, 0, 'RIFF'); // RIFF identifier 
        view.setUint32(4, 32 + floats.length * 2, true); // file length
        writeString(view, 8, 'WAVE'); // RIFF type
        writeString(view, 12, 'fmt '); // format chunk identifier
        view.setUint32(16, 16, true); // format chunk length
        view.setUint16(20, 1, true); // sample format (raw)
        view.setUint16(22, 1, true); // channel count, view.setUint16(22, 2, true) pro stereo
        view.setUint32(24, sampleRate, true); // sample rate
        view.setUint32(28, sampleRate * 2, true); // byte rate (sample rate * block align), view.setUint32(28, sampleRate * 4, true);  pro stereo
        view.setUint16(32, 2, true); //block align (channel count * bytes per sample), view.setUint16(32, 4, true) pro stereo
        view.setUint16(34, 16, true); // bits per sample
        writeString(view, 36, 'data'); // data chunk identifier
        view.setUint32(40, floats.length * 2, true); // data chunk length
        floatTo16BitPCM(view, 44, floats);
        return view;
    }
    html5Recorder.encodeWAV = encodeWAV;
    function floatTo16BitPCM(view, offset, samples) {
        for (var i = 0; i < samples.length; i++, offset += 2) {
            var s = Math.max(-1, Math.min(1, samples[i]));
            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
        }
    }
    function writeString(view, offset, str) {
        for (var i = 0; i < str.length; i++)
            view.setUint8(offset + i, str.charCodeAt(i));
    }
})(html5Recorder || (html5Recorder = {}));
var mp3WorkerLib;
(function (mp3WorkerLib) {
    mp3WorkerLib.isOldBrowser = typeof ArrayBuffer == 'undefined' || typeof Worker == 'undefined';
    function getWorkerRecordStartPar(par) {
        return {
            actHtml5SampleRate: par.actHtml5SampleRate,
            toDisc: par.toDisc,
            toDiscFileUrl: par.toDiscFileUrl,
        };
    }
    mp3WorkerLib.getWorkerRecordStartPar = getWorkerRecordStartPar;
    function postMessage(worker, msg) {
        if (mp3WorkerLib.isOldBrowser)
            mp3Worker.onMessageLow(msg);
        else {
            if (!worker) {
                mp3WorkerLib.log('postMessage, !worker');
                return;
            }
            worker.postMessage(msg);
        }
    }
    function postInitSLMessage(worker, data) {
        cnt++;
        mp3WorkerLib.log('postInitSLMessage ' + cnt.toString() + ': ' + (data.firstData ? data.firstData.length : 0));
        postMessage(worker, { cmd: 'sl_init', data: data, id: cnt, loggerId: Logger.logId() });
    }
    mp3WorkerLib.postInitSLMessage = postInitSLMessage;
    function postEncodeSLMessage(worker, data) {
        cnt++;
        mp3WorkerLib.log('postEncodeSLMessage ' + cnt.toString() + ': ' + data.length);
        postMessage(worker, { cmd: 'sl_encode', data: data, id: cnt, loggerId: Logger.logId() });
    }
    mp3WorkerLib.postEncodeSLMessage = postEncodeSLMessage;
    function postFinishSLMessage(worker) {
        cnt++;
        mp3WorkerLib.log('postFinishSLMessage ' + cnt.toString());
        postMessage(worker, { cmd: 'sl_finish', data: null, id: cnt, loggerId: Logger.logId() });
    }
    mp3WorkerLib.postFinishSLMessage = postFinishSLMessage;
    function postInitHTML5Message(worker, data) {
        cnt++;
        mp3WorkerLib.log('postInitHTML5Message ' + cnt.toString() + ': ' + (data.firstData ? data.firstData.length : 0));
        postMessage(worker, { cmd: 'html5_init', data: data, id: cnt, loggerId: Logger.logId() });
    }
    mp3WorkerLib.postInitHTML5Message = postInitHTML5Message;
    function postEncodeHTML5Message(worker, data) {
        cnt++;
        mp3WorkerLib.log('postEncodeHTML5Message ' + cnt.toString() + ': ' + data.length);
        postMessage(worker, { cmd: 'html5_encode', data: data, id: cnt, loggerId: Logger.logId() });
    }
    mp3WorkerLib.postEncodeHTML5Message = postEncodeHTML5Message;
    function postFinishHTML5Message(worker) {
        cnt++;
        mp3WorkerLib.log('postFinishHTML5Message ' + cnt.toString());
        postMessage(worker, { cmd: 'html5_finish', data: null, id: cnt, loggerId: Logger.logId() });
    }
    mp3WorkerLib.postFinishHTML5Message = postFinishHTML5Message;
    var cnt = 0;
    (function (mode) {
        mode[mode["no"] = -1] = "no";
        mode[mode["STEREO"] = 0] = "STEREO";
        mode[mode["JOINT_STEREO"] = 1] = "JOINT_STEREO";
        mode[mode["MONO"] = 3] = "MONO";
    })(mp3WorkerLib.mode || (mp3WorkerLib.mode = {}));
    var mode = mp3WorkerLib.mode;
    (function (vbr_mode) {
        vbr_mode[vbr_mode["vbr_off"] = 0] = "vbr_off";
        vbr_mode[vbr_mode["vbr_rh"] = 2] = "vbr_rh";
        vbr_mode[vbr_mode["vbr_abr"] = 3] = "vbr_abr";
        vbr_mode[vbr_mode["vbr_mtrh"] = 4] = "vbr_mtrh";
    })(mp3WorkerLib.vbr_mode || (mp3WorkerLib.vbr_mode = {}));
    var vbr_mode = mp3WorkerLib.vbr_mode;
    function log(msg) {
        console.info(msg);
    }
    mp3WorkerLib.log = log;
})(mp3WorkerLib || (mp3WorkerLib = {}));
var mp3Worker;
(function (mp3Worker) {
    var cfg;
    var toUploadChunks;
    var toUploadChunksLen;
    var isFirstUpload;
    function slAjax(base64, phase, loggerId) {
        var xmlDoc = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
        var url = cfg.pagerBasicUrl + 'mp3Uploader.ashx?fileUrl=' + cfg.recordStartPar.toDiscFileUrl + '&phase=' + phase + (loggerId ? '&LoggerLogId=' + loggerId : '');
        //if (phase == 'sl_finish')
        //  url += '&SamplesPerSecond=' + cfg.in_samplerate.toString() + '&BitsPerSample=16&Channels=1';
        xmlDoc.open('POST', url, false);
        xmlDoc.setRequestHeader("Content-type", 'text/plain');
        xmlDoc.onerror = function (ev) { return console.log('slAjax error: message=' + ev.message); };
        mp3WorkerLib.log('slAjax, base64.length=' + base64.length);
        xmlDoc.send(base64);
    }
    function uploadChunks(raw, isEnd) {
        if (raw) {
            toUploadChunks.push(raw);
            toUploadChunksLen += raw.length;
        }
        if (!isEnd && toUploadChunksLen < 50000)
            return;
        var phase = isFirstUpload ? (isEnd ? 'html_init_finish' : 'html_init') : (isEnd ? 'html_finish' : 'html_encode');
        isFirstUpload = false;
        var toUploadData = new Uint16Array(toUploadChunksLen);
        var pos = 0;
        for (var i = 0; i < toUploadChunks.length; i++) {
            var act = toUploadChunks[i];
            toUploadData.set(act, pos);
            pos += act.length;
        }
        var xmlDoc = XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
        var url = cfg.pagerBasicUrl + 'mp3Uploader.ashx?fileUrl=' + cfg.recordStartPar.toDiscFileUrl + '&phase=' + phase;
        //if (phase == 'html_init_finish' || phase == 'html_finish')
        //  url += '&SamplesPerSecond=' + cfg.in_samplerate.toString() + '&BitsPerSample=16&Channels=1';
        xmlDoc.open('POST', url, false);
        xmlDoc.setRequestHeader("Content-type", 'text/plain');
        xmlDoc.onerror = function (ev) { return console.log('slAjax error: message=' + ev.message); };
        mp3WorkerLib.log('uploadChunks ajax ' + toUploadData.length.toString());
        xmlDoc.send(toUploadData.buffer);
        toUploadChunks = [];
        toUploadChunksLen = 0;
    }
    function onMessage(ev) {
        onMessageLow(ev.data);
    }
    mp3Worker.onMessage = onMessage;
    function onMessageLow(msg) {
        switch (msg.cmd) {
            case 'sl_init':
                cfg = msg.data;
                var strData = (cfg.firstData);
                mp3WorkerLib.log('worker sl_init, samples=' + strData.length.toString());
                slAjax(strData, 'sl_init', msg.loggerId);
                break;
            case 'sl_encode':
                var strData = (msg.data);
                mp3WorkerLib.log('worker sl_encode, samples=' + strData.length.toString());
                slAjax(strData, 'sl_encode', msg.loggerId);
                break;
            case 'sl_finish':
                mp3WorkerLib.log('worker sl_finish, url=' + cfg.recordStartPar.toDiscFileUrl);
                slAjax('', 'sl_finish', msg.loggerId);
                var res = { cmd: 'end', data: null, id: 0, loggerId: msg.loggerId };
                mp3Worker.worker.postMessage(res);
                break;
            case 'html5_init':
                //debugger;
                cfg = msg.data;
                toUploadChunks = [];
                toUploadChunksLen = 0;
                isFirstUpload = true;
                mp3WorkerLib.log('worker html5_init');
                uploadChunks(cfg.firstData, false);
                break;
            case 'html5_encode':
                var channel = msg.data;
                mp3WorkerLib.log('worker html5_encode, samples=' + channel.length.toString());
                uploadChunks(channel, false);
                break;
            case 'html5_finish':
                mp3WorkerLib.log('worker html5_finish, url=' + cfg.recordStartPar.toDiscFileUrl);
                uploadChunks(null, true);
                var res = { cmd: 'end', data: null, id: 0, loggerId: msg.loggerId };
                mp3Worker.worker.postMessage(res);
                break;
            //case 'gzip_init':
            //  cfg = <mp3WorkerLib.config>msg.data;
            //  toUploadChunks = []; toUploadChunksLen = 0; finishDiscCompleted = null; isFirstUpload = true;
            //  gzip = new pako.Deflate({ level: 9, gzip: true });
            //  gzip.onData = buf => {
            //    uploadChunks({ data: buf, id: 0 });
            //  };
            //  gzip.onEnd = ok => {
            //    finishDiscCompleted = () => {
            //      var res: mp3WorkerLib.message = { cmd: 'end', data: null, id: 0 };
            //      worker.postMessage(res);
            //    };
            //    uploadChunks(null);
            //  };
            //  mp3WorkerLib.log('gzip_init, samples=' + cfg.firstData.length.toString());
            //  gzip.push(new Uint8Array(cfg.firstData.buffer), false);
            //  break;
            //case 'gzip_encode':
            //  var channel = <Int16Array>msg.data;
            //  mp3WorkerLib.log('gzip_encode, samples=' + channel.length.toString());
            //  gzip.push(new Uint8Array(channel.buffer), false);
            //  break;
            //case 'gzip_finish':
            //  mp3WorkerLib.log('gzip_finish');
            //  gzip.push(new Uint8Array([]), true);
            //  break;
            //case 'init_ieee_float':
            //case 'init':
            //  cfg = <mp3WorkerLib.config>msg.data;
            //  mp3codec = Lame.init();
            //  Lame.set_in_samplerate(mp3codec, cfg.in_samplerate);
            //  Lame.set_num_channels(mp3codec, 1);
            //  Lame.set_mode(mp3codec, mp3WorkerLib.mode.MONO);
            //  if (cfg.isAbr) {
            //    if (cfg.VBR_mean_bitrate_kbps < 8) cfg.VBR_mean_bitrate_kbps = 8; else if (cfg.VBR_mean_bitrate_kbps > 320) cfg.VBR_mean_bitrate_kbps = 320;
            //    Lame.set_VBR(mp3codec, mp3WorkerLib.vbr_mode.vbr_mtrh);
            //    Lame.set_VBR_mean_bitrate_kbps(mp3codec, cfg.VBR_mean_bitrate_kbps);
            //  } else {
            //    if (cfg.VBR_quality < 0) cfg.VBR_quality = 0; else if (cfg.VBR_quality > 9) cfg.VBR_quality = 9;
            //    Lame.set_VBR(mp3codec, mp3WorkerLib.vbr_mode.vbr_mtrh);
            //    Lame.set_VBR_quality(mp3codec, cfg.VBR_quality);
            //  }
            //  Lame.init_params(mp3codec);
            //  mp3WorkerLib.log('Lame.init_params: in_samplerate=' + cfg.in_samplerate.toString());
            //  var mp3data: Lame.encodedMp3Buf;
            //  if (ev.data.cmd == 'init_ieee_float') {
            //    mp3data = Lame.do_encode_buffer_ieee_float(mp3codec, cfg.firstData_ieee_float.left, cfg.firstData_ieee_float.right);
            //    mp3WorkerLib.log('Lame.do_encode_buffer_ieee_float ' + msg.id.toString() + ', bytes=' + mp3data.data.length.toString());
            //  } else {
            //    mp3data = Lame.do_encode_buffer(mp3codec, cfg.firstData);
            //    mp3WorkerLib.log('Lame.do_encode_buffer ' + msg.id.toString() + ', bytes=' + mp3data.data.length.toString());
            //  }
            //  if (cfg.recordStartPar.toDisc) {
            //    toUploadChunks = []; toUploadChunksLen = 0; finishDiscCompleted = null; isFirstUpload = true;
            //    //debugger;
            //    uploadChunks({ data: mp3data.data, id: msg.id });
            //  } else {
            //    var res: mp3WorkerLib.message = { cmd: 'data', data: mp3data.data, id: msg.id };
            //    worker.postMessage(res);
            //  }
            //  break;
            //case 'encode_ieee_float':
            //  var channels = <mp3WorkerLib.channels>msg.data;
            //  var mp3data = Lame.do_encode_buffer_ieee_float(mp3codec, channels.left, channels.right);
            //  mp3WorkerLib.log('Lame.do_encode_buffer_ieee_float ' + msg.id.toString() + ', bytes=' + mp3data.data.length.toString());
            //  if (cfg.recordStartPar.toDisc) {
            //    uploadChunks({ data: mp3data.data, id: msg.id });
            //  } else {
            //    var res: mp3WorkerLib.message = { cmd: 'data', data: mp3data.data, id: msg.id };
            //    worker.postMessage(res);
            //  }
            //  break;
            //case 'encode':
            //  var channel = <Int16Array>msg.data;
            //  var mp3data = Lame.do_encode_buffer(mp3codec, channel);
            //  mp3WorkerLib.log('Lame.do_encode_buffer ' + msg.id.toString() + ', bytes=' + mp3data.data.length.toString());
            //  if (cfg.recordStartPar.toDisc) {
            //    uploadChunks({ data: mp3data.data, id: msg.id });
            //  } else {
            //    var res: mp3WorkerLib.message = { cmd: 'data', data: mp3data.data, id: msg.id };
            //    worker.postMessage(res);
            //  }
            //  break;
            //case 'finish':
            //  var mp3data = Lame.encode_flush(mp3codec);
            //  mp3WorkerLib.log('Lame.encode_flush ' + msg.id.toString());
            //  Lame.close(mp3codec);
            //  mp3WorkerLib.log('Lame.close');
            //  mp3codec = null;
            //  if (cfg.recordStartPar.toDisc) {
            //    finishDiscCompleted = () => {
            //      var res: mp3WorkerLib.message = { cmd: 'end', data: null, id: msg.id };
            //      console.log('finishDiscCompleted: ' + typeof worker);
            //      worker.postMessage(res);
            //    };
            //    uploadChunks({ data: mp3data.data, id: msg.id });
            //  } else {
            //    var res: mp3WorkerLib.message = { cmd: 'end', data: mp3data.data, id: msg.id };
            //    worker.postMessage(res);
            //  }
            //  break;
            default:
                debugger;
                break;
        }
    }
    mp3Worker.onMessageLow = onMessageLow;
})(mp3Worker || (mp3Worker = {}));
var SndLow;
(function (SndLow) {
    var globalMedia = (function () {
        function globalMedia() {
            //slInstalled = false;
            this.slInstalled = Silverlight.isInstalled(slVersion);
            this.needInstall = ko.observable(false);
            _globalMedia = this;
            try {
                console.log('soundnew.ts: Player.selectDriver start');
                //init result
                playerType = LMComLib.SoundPlayerType.no;
                SndLow.recordingType = LMComLib.SoundPlayerType.no;
                //get static info
                var isHtmlAudioVideo = html5_CanPlay(media.audio_mp3) && (html5_CanPlay(media.video_mp4) || html5_CanPlay(media.video_webm));
                var isHtmlCapture = html5Recorder.checkHTML5AudioCapture() && html5_CanPlay(media.audio_wave);
                //compute audio a recording type
                if (isHtmlCapture && isHtmlAudioVideo) {
                    playerType = SndLow.recordingType = LMComLib.SoundPlayerType.HTML5;
                }
                else if (this.slInstalled) {
                    playerType = SndLow.recordingType = LMComLib.SoundPlayerType.SL;
                }
                else if (isHtmlAudioVideo) {
                    playerType = LMComLib.SoundPlayerType.HTML5;
                    SndLow.recordingType = LMComLib.SoundPlayerType.SL;
                    this.renderSLInstallHTML = true;
                }
                else {
                    playerType = SndLow.recordingType = LMComLib.SoundPlayerType.SL;
                    this.renderSLInstallHTML = true;
                }
                if (this.renderSLInstallHTML)
                    Pager.renderTemplateEx('global-media', 'install_sl', this);
                console.log('soundnew.ts: Player.selectDriver end');
            }
            catch (msg) {
                console.log('Error: Player.selectDriver', msg);
                debugger;
                throw msg;
            }
        }
        globalMedia.prototype.adjustGlobalDriver = function (isRecorder, completed) {
            var _this = this;
            var doCompleted = function (dr) {
                var disbl = dr == _dummyDriver;
                _this.needInstall(disbl);
                completed(dr, disbl);
            };
            //hotovo
            if (!isRecorder && SndLow.globalAudioPlayer) {
                doCompleted(SndLow.globalAudioPlayer);
                return;
            }
            if (isRecorder && SndLow.globaRecorder) {
                doCompleted(SndLow.globaRecorder);
                return;
            }
            if (!isRecorder) {
                SndLow.createDriver(false, 'slplayer', null, 'cls-audio-unvisible', false, function (dr) {
                    SndLow.globalAudioPlayer = dr;
                    if (dr.type == SndLow.recordingType)
                        SndLow.globaRecorder = dr;
                    doCompleted(dr);
                });
            }
            else {
                if (SndLow.globalAudioPlayer)
                    SndLow.globalAudioPlayer.htmlClearing();
                SndLow.createDriver(false, 'slplayer', null, 'cls-audio-unvisible', true, function (dr) {
                    SndLow.globaRecorder = SndLow.globalAudioPlayer = dr;
                    doCompleted(dr);
                });
            }
        };
        return globalMedia;
    })();
    SndLow.globalMedia = globalMedia;
    function getGlobalMedia() { if (!_globalMedia)
        new globalMedia(); return _globalMedia; }
    SndLow.getGlobalMedia = getGlobalMedia;
    var _globalMedia;
    function dummyDriver() {
        if (!_dummyDriver)
            _dummyDriver = new MediaDriver(false, null, null);
        return _dummyDriver;
    }
    SndLow.dummyDriver = dummyDriver;
    var _dummyDriver;
    function needInstallFalse() {
        if (!_globalMedia)
            return;
        _globalMedia.needInstall(false);
    }
    SndLow.needInstallFalse = needInstallFalse;
    //export var globalAudioPlayer: MediaDriver;
    //export var globaRecorder: MediaDriver;
    //export function adjustGlobalDriver(isRecorder: boolean, completed: (driver: MediaDriver) => void) {
    //  //hotovo
    //  if (!isRecorder && globalAudioPlayer) { completed(globalAudioPlayer); return; }
    //  if (isRecorder && globaRecorder) { completed(globaRecorder); return; }
    //  //
    //  selectDriver();
    //  if (!isRecorder) {
    //    SndLow.createDriver(false, 'slplayer', null, 'cls-audio-unvisible', false, dr => {
    //      globalAudioPlayer = dr;
    //      if (dr.type == recordingType) globaRecorder = dr;
    //      completed(dr);
    //    });
    //  } else {
    //    SndLow.createDriver(false, 'slplayer', null, 'cls-audio-unvisible', true, dr => {
    //      globaRecorder = globalAudioPlayer = dr;
    //      completed(dr);
    //    });
    //  }
    //}
    function guiBlocker(isStart) {
        if (isStart) {
            if (guiBlockerTimer) {
                debugger;
                throw 'guiBlockerTimer';
            }
            guiBlockerTimer = setTimeout(function () { guiBlockerTimer = 0; guiBlockerLow(true); }, 300);
        }
        else {
            if (guiBlockerTimer) {
                clearTimeout(guiBlockerTimer);
                guiBlockerTimer = 0;
            }
            guiBlockerLow(false);
        }
    }
    SndLow.guiBlocker = guiBlocker;
    ;
    var guiBlockerTimer;
    function guiBlockerLow(isStart) {
        var bg = $('.block-gui');
        if (bg.length == 0)
            return;
        if (isStart)
            bg.removeClass('hide');
        else
            bg.addClass('hide');
    }
    ;
    //http://www.htmlgoodies.com/html5/client/how-to-embed-video-using-html5.html#fbid=XRsS9osNoHa
    function createDriver(isVideo, id, parentId, htmltagClass, isRecording, completed) {
        //selectDriver();
        if (allDrivers[id]) {
            completed(allDrivers[id]);
            return;
        }
        var gm = getGlobalMedia();
        var $parent = _.isEmpty(parentId) ? null : $(parentId);
        var parent = $parent && $parent.length == 1 ? $parent[0] : null;
        var driverType = isRecording ? SndLow.recordingType : (cfg.forceDriver ? cfg.forceDriver : playerType);
        switch (driverType) {
            case LMComLib.SoundPlayerType.HTML5:
                allDrivers[id] = new MediaDriver_Html5(isVideo, id, parent, htmltagClass);
                completed(allDrivers[id]);
                break;
            case LMComLib.SoundPlayerType.SL:
                if (!gm.slInstalled) {
                    //gm.needInstall(true);
                    completed(dummyDriver());
                }
                else {
                    allDrivers[id] = new MediaDriver_SL(isVideo, id, parent, htmltagClass, function (driver) { return completed(driver); });
                    break;
                }
        }
    }
    SndLow.createDriver = createDriver;
    var allDrivers = {}; //evidence vsech driveru.
    var playerType; //v selectDriver(): staticky zjisteny SoundPlayerType
    //var slInstalled: boolean; //staticky SLInstalled test
    function htmlClearing(id) {
        guiBlocker(false);
        var dr = allDrivers[id];
        if (!dr)
            return;
        dr.htmlClearing();
        delete allDrivers[id];
    }
    SndLow.htmlClearing = htmlClearing;
    function Stop(actDriver) {
        if (actDriver === void 0) { actDriver = null; }
        Logger.trace_lmsnd('soundnew.ts: SndLow.stop');
        for (var id in allDrivers)
            if (allDrivers[id].handler && allDrivers[id] != actDriver) {
                allDrivers[id].stop();
                if (allDrivers[id].recHandler)
                    allDrivers[id].recordEnd(false);
            }
    }
    SndLow.Stop = Stop;
    (function (media) {
        media[media["video_mp4"] = 1] = "video_mp4";
        media[media["video_webm"] = 2] = "video_webm";
        media[media["audio_mp3"] = 4] = "audio_mp3";
        media[media["audio_wave"] = 8] = "audio_wave";
    })(SndLow.media || (SndLow.media = {}));
    var media = SndLow.media;
    var canPlayRes = -1;
    function html5_CanPlay(m) {
        if (canPlayRes == -1) {
            canPlayRes = 0;
            var elem = document.createElement('audio');
            if (elem.canPlayType) {
                if (elem.canPlayType('audio/mpeg;').replace(/^no$/, '') != '')
                    canPlayRes |= media.audio_mp3;
                if (elem.canPlayType('audio/wav').replace(/^no$/, '') != '')
                    canPlayRes |= media.audio_wave;
            }
            elem = document.createElement('video');
            if (elem.canPlayType) {
                if (elem.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/, '') != '')
                    canPlayRes |= media.video_mp4;
                if (elem.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/, '') != '')
                    canPlayRes |= media.video_webm;
            }
        }
        return (canPlayRes & m) != 0;
    }
    SndLow.html5_CanPlay = html5_CanPlay;
    function compareBrowserVersion(a, b) { return compVerRec(a.split("."), b.split(".")); }
    function compVerRec(a, b) {
        if (a.length == 0)
            a = ['0'];
        if (b.length == 0)
            b = ['0'];
        if (a[0] != b[0] || (a.length == 1 && b.length == 1))
            return parseInt(a[0]) - parseInt(b[0]);
        return compVerRec(a.slice(1), b.slice(1));
    }
    //zvuk v pameti (pro html5 i SL)
    var recordedSound = (function () {
        function recordedSound(driver, data) {
            this.driver = driver;
            if (typeof data === 'string') {
                this.url = data;
            }
            else {
                this.isMemory = true;
                this.url = driver.createObjectURL(data);
            }
        }
        recordedSound.prototype.close = function () { if (this.isMemory)
            this.driver.revokeObjectURL(this.url); };
        return recordedSound;
    })();
    SndLow.recordedSound = recordedSound;
    var MediaDriver = (function () {
        //alowTitle(): string { return ''; }
        function MediaDriver(isVideo, id, parent) {
            this.isVideo = isVideo;
            this.id = id;
            this.parent = parent;
            this.timerId = 0;
        }
        //Playing
        MediaDriver.prototype.openFile = function (url) { debugger; };
        //Recording
        MediaDriver.prototype.recordStart = function (par) { debugger; };
        MediaDriver.prototype.recordEnd = function (finishAudioFile) { debugger; };
        MediaDriver.prototype.createObjectURL = function (data) { debugger; return null; };
        MediaDriver.prototype.revokeObjectURL = function (url) { debugger; };
        MediaDriver.prototype.htmlClearing = function () { try {
            this.stop(); /*this.setTimer(null);*/
            delete allDrivers[this.id];
            if (!this.htmlElement)
                return;
            this.htmlElement.remove();
            this.htmlElement = null;
        }
        catch (msg) { } };
        //begMsec<0 => pouze open. endMsec<0 => hraje se do konce
        MediaDriver.prototype.openPlay = function (url, begMsec, endMsec /*, onBlockGui: (isStart: boolean) => void = null*/) {
            SndLow.Stop(this);
            var th = this;
            th.onCanplaythrough = th.onPaused = th.timeupdate = null;
            if (th.actPlayer)
                th.actPlayer.reject();
            var def = th.actPlayer = $.Deferred();
            th.onPaused = function () { if (th.onCanplaythrough)
                return; th.onPaused = null; th.timeupdate = null; def.resolve(); };
            th.timeupdate = function (msec) {
                if (endMsec > 0 && msec > endMsec) {
                    Logger.trace_lmsnd('soundnew.ts timeupdate pause');
                    th.handler.pause();
                }
                else {
                    //Logger.trace_lmsnd('soundnew.ts timeupdate: ' + msec.toString());
                    def.notify(msec);
                }
            };
            th.onCanplaythrough = function () {
                th.onCanplaythrough = null;
                if (begMsec < 0)
                    def.resolve(); //pouze open
                else {
                    th.handler.currentTime = begMsec / 1000;
                    th.handler.play();
                }
            };
            th.openFile(url);
            return def.promise();
        };
        MediaDriver.prototype.doTimeupdate = function () { if (!this.timeupdate)
            return; try {
            this.timeupdate(Math.round(this.handler.currentTime * 1000));
        }
        catch (msg) { } };
        MediaDriver.prototype.doPaused = function () { if (!this.onPaused)
            return; try {
            this.onPaused();
        }
        catch (msg) { } };
        MediaDriver.prototype.doCanplaythrough = function () { guiBlocker(false); /*Logger.trace_lmsnd('soundnew.ts: MediaDriver.doCanplaythrough');*/ if (!this.onCanplaythrough)
            return; try {
            this.onCanplaythrough();
        }
        catch (msg) { } };
        MediaDriver.prototype.doLoading = function (isStart) { Logger.trace_lmsnd('soundnew.ts: MediaDriver.doLoading'); if (!this.loading)
            return; try {
            this.loading(isStart);
        }
        catch (msg) { } };
        MediaDriver.prototype.onError = function (err) {
            this.errorFlag = true;
            setTimeout(function () { this.errorFlag = false; }, 100); //nastav na chvili errorFlag, aby byla sance na ukonceni timeru.
            Logger.error_snd('Audio error', err); //LMSnd.options.onError("HTML5 Error code: " + err);
            try {
                this.stop();
            }
            catch (e) { }
        };
        MediaDriver.prototype.stop = function () {
            Logger.trace_lmsnd('soundnew.ts: MediaDriver.stop start');
            try {
                //if (this.actPlayer) { this.actPlayer.reject(); this.actPlayer = null; }
                if (this.handler)
                    this.handler.pause();
                this.recordingChanged(false);
                Logger.trace_lmsnd('soundnew.ts: MediaDriver.stop end');
            }
            catch (msg) {
                Logger.error_snd('MediaDriver.stop', msg);
                debugger;
                throw msg;
            }
        };
        MediaDriver.prototype.doRecordingCompleted = function () {
            Logger.trace_lmsnd('soundnew.ts: doRecordingCompleted beg');
            delete this.recordWorker;
            if (!this.recordStartPar || !this.recordStartPar.toMemoryCompleted)
                return;
            this.recordStartPar.toMemoryCompleted(this.recordStartPar.toMemoryCompletedData);
            delete this.recordStartPar;
            Logger.trace_lmsnd('soundnew.ts: doRecordingCompleted end');
        };
        MediaDriver.prototype.recordingChanged = function (isRec) {
            if (!this.recordStartPar || !this.recordStartPar.isRecording)
                return;
            this.recordStartPar.isRecording(isRec);
            //if (!isRec) { this.recordStartPar.isRecording = null; this.recordStartPar.miliseconds = null; }
        };
        MediaDriver.prototype.play = function (url, msecPos, playProgress) {
            var th = this;
            this.openPlay(url, msecPos, -1).
                done(function () { if (playProgress)
                playProgress(-1); }).
                progress(function (msec) { if (playProgress)
                playProgress(msec + 50); });
        };
        return MediaDriver;
    })();
    SndLow.MediaDriver = MediaDriver;
    function createMP3Worker(driver) {
        var par = driver.recordStartPar;
        if (mp3WorkerLib.isOldBrowser) {
            return mp3Worker.worker = {
                postMessage: function (msg) {
                    switch (msg.cmd) {
                        case 'end':
                            Logger.trace_lmsnd('createMP3Worker end');
                            Pager.blockGui(false);
                            driver.doRecordingCompleted();
                            break;
                    }
                }
            };
        }
        else {
            var workerJs = 'wavWorker';
            var worker = new Worker('../jslib/js/sound/' + workerJs + '.js');
            var res = [];
            worker.onmessage = function (ev) {
                switch (ev.data.cmd) {
                    case 'data':
                    case 'end':
                        if (par.toDisc) {
                            if (ev.data.cmd == 'end') {
                                worker.terminate();
                                worker = null;
                                Logger.trace_lmsnd('createMP3Worker end');
                                Pager.blockGui(false);
                                driver.doRecordingCompleted();
                            }
                        }
                        else {
                            var data = ev.data.data;
                            mp3WorkerLib.log('push ' + ev.data.cmd + ' ' + ev.data.id + ': ' + data.byteLength.toString());
                            res.push(data);
                            if (ev.data.cmd == 'end') {
                                worker.terminate();
                                worker = null;
                                Logger.trace_lmsnd('createMP3Worker end');
                                //concatenate chunks to one array
                                var len = 0;
                                _.each(res, function (r) { return len += r.length; });
                                var mp3 = new Uint8Array(len);
                                var pos = 0;
                                _.each(res, function (r) { mp3.set(r, pos); pos += r.length; });
                                Pager.blockGui(false);
                                par.toMemoryCompletedData = mp3.buffer;
                                driver.doRecordingCompleted();
                            }
                        }
                        break;
                }
            };
            return worker;
        }
    }
    SndLow.createMP3Worker = createMP3Worker;
    //http://code.tutsplus.com/tutorials/html5-audio-and-video-what-you-must-know--net-15545
    //https://developer.mozilla.org/en-US/Apps/Build/Audio_and_video_delivery/buffering_seeking_time_ranges
    var MediaDriver_Html5 = (function (_super) {
        __extends(MediaDriver_Html5, _super);
        function MediaDriver_Html5(isVideo, id, parent, htmltagClass) {
            _super.call(this, isVideo, id, parent);
            this.type = LMComLib.SoundPlayerType.HTML5;
            try {
                var th = this;
                Logger.trace_lmsnd('soundnew.ts: MediaDriver_Html5.init start');
                th.htmlElement = $(isVideo ? '<video id="driver-' + id + '" class="cls-video embed-responsive-item' + (htmltagClass ? htmltagClass : '') + '"></video>' : '<audio id="driver-' + id + '" class="cls-audio ' + (htmltagClass ? htmltagClass : '') + '"></audio>');
                th.html5Handler = (th.htmlElement[0]);
                th.handler = th.html5Handler;
                th.recHandler = new html5Recorder.RecHandler();
                var $par = parent ? $(parent) : $('body');
                if (isVideo) {
                    var parClasses = $par.attr('class').split(/\s+/);
                    _.each(parClasses, function (cls) { if (cls.indexOf('video-') != 0)
                        return; th.htmlElement.addClass(cls); });
                }
                $par.prepend(th.htmlElement[0]);
                if (!th.html5Handler.load) {
                    debugger;
                    throw 'MediaDriver_Html5.init: cannot find load method of audio/video tag';
                } //kontrola audio objektu
                $(th.html5Handler).
                    on('error', function () { return th.onError(th.html5Handler.error.code.toString()); }).
                    on('loadeddata', function () { return th.doCanplaythrough(); }).
                    on('ended', function () { return th.doPaused(); }).
                    on('pause', function () { return th.doPaused(); }).
                    on('timeupdate', function () { return th.doTimeupdate(); });
                Logger.trace_lmsnd('soundnew.ts: HTML5.init end');
            }
            catch (msg) {
                Logger.error_snd('MediaDriver_Html5.init', msg);
                debugger;
                throw msg;
            }
        }
        MediaDriver_Html5.prototype.recordStart = function (par) {
            var _this = this;
            this.recordStartPar = par;
            this.recordedMilisecs = 0;
            if (!par.toDisc)
                this.memorySound = [];
            if (par.toDisc) {
                this.recordWorkerInitialized = false;
                this.recordWorker = createMP3Worker(this);
            }
            var cfg = null;
            html5Recorder.startRecording(function (ev) {
                var sampleRate = 8000;
                if (!_this.recordWorkerInitialized && par.recordStarting)
                    par.recordStarting();
                if (!cfg)
                    cfg = WavePCM.getConfig(ev.inputBuffer.sampleRate, html5Recorder.bufferLength, sampleRate);
                var floatBuf = new Float32Array(ev.inputBuffer.getChannelData(0));
                var buf = WavePCM.toPCM(cfg, floatBuf);
                if (par.toDisc) {
                    if (!_this.recordWorkerInitialized) {
                        _this.recordWorkerInitialized = true;
                        _this.recordingChanged(true);
                        var hdr = new Uint16Array(3);
                        hdr[0] = sampleRate;
                        hdr[1] = 16;
                        hdr[2] = 1;
                        mp3WorkerLib.postInitHTML5Message(_this.recordWorker, {
                            recordStartPar: mp3WorkerLib.getWorkerRecordStartPar(_this.recordStartPar),
                            pagerBasicUrl: Pager.basicUrl, firstData: hdr //, in_samplerate: sampleRate, isAbr: null, VBR_mean_bitrate_kbps: null, firstData: hdr, firstData_ieee_float: null, VBR_quality: 0
                        });
                        mp3WorkerLib.postEncodeHTML5Message(_this.recordWorker, buf);
                    }
                    else {
                        mp3WorkerLib.postEncodeHTML5Message(_this.recordWorker, buf);
                    }
                }
                else {
                    _this.recordStartPar.actHtml5SampleRate = ev.inputBuffer.sampleRate;
                    _this.memorySound.push(floatBuf);
                }
                _this.recordedMilisecs += floatBuf.length / ev.inputBuffer.sampleRate * 1000;
                if (_this.recordStartPar.miliseconds) {
                    _this.recordStartPar.miliseconds(_this.recordedMilisecs); //this.recordedMilisecs / ev.inputBuffer.sampleRate * 1000);
                }
            });
        };
        MediaDriver_Html5.prototype.recordEnd = function (finishAudioFile) {
            this.recordingChanged(false);
            html5Recorder.stopRecording();
            if (!this.recordStartPar || !finishAudioFile)
                return;
            if (this.recordStartPar.toDisc) {
                Pager.blockGui(true);
                mp3WorkerLib.postFinishHTML5Message(this.recordWorker);
            }
            else {
                var view = html5Recorder.encodeWAV(this.memorySound, this.recordStartPar.actHtml5SampleRate);
                this.recordStartPar.toMemoryCompletedData = view.buffer;
                this.doRecordingCompleted();
            }
            //this.recordWorker = null; this.recordStartPar = null; this.memorySound = null;
        };
        MediaDriver_Html5.prototype.createObjectURL = function (data) {
            var blob = new Blob([new DataView(data)], { type: "audio/wav" });
            return URL.createObjectURL(blob);
        };
        MediaDriver_Html5.prototype.revokeObjectURL = function (url) { URL.revokeObjectURL(url); };
        MediaDriver_Html5.prototype.isRecording = function () { return html5Recorder.audioNodesConnected; };
        MediaDriver_Html5.prototype.formatCommandline = function (url) {
            var th = this;
            if (typeof url === 'string') {
                var s = url.toLowerCase();
                th.url = url;
            }
            else
                delete th.url;
        };
        MediaDriver_Html5.prototype.openFile = function (url) {
            var th = this;
            if (!url) {
                th.url = '';
                return;
            }
            Logger.trace_lmsnd('soundnew.ts: MediaDriver_Html5.openFile start: url=' + url);
            try {
                var urlLow = url.toLowerCase();
                if (!th.url || th.url.indexOf(urlLow) < 0) {
                    Logger.trace_lmsnd('soundnew.ts: MediaDriver_Html5.openFile jine URL');
                    th.html5Handler.src = url;
                    th.url = urlLow;
                    th.html5Handler.load();
                }
                else {
                    Logger.trace_lmsnd('soundnew.ts: MediaDriver_Html5.openFile stejne URL');
                    if (th.onCanplaythrough)
                        th.onCanplaythrough();
                }
            }
            catch (msg) {
                th.html5Handler.src = null;
                Logger.error_snd('MediaDriver_Html5.openFile', msg);
                debugger;
                throw msg;
            }
        };
        return MediaDriver_Html5;
    })(MediaDriver);
    SndLow.MediaDriver_Html5 = MediaDriver_Html5;
    //export interface IPCMEventArgument {
    //  Value: string;
    //  BitsPerSample: number; SamplesPerSecond: number;
    //}
    var slWarning;
    //var slVersion = "5.0.61118.0";
    var slVersion = "5.1.20913.0";
    SndLow.slInstallUrl = 'http://www.microsoft.com/getsilverlight';
    var MediaDriver_SL = (function (_super) {
        __extends(MediaDriver_SL, _super);
        function MediaDriver_SL(isVideo, id, parentEl, htmltagClass, completed) {
            var _this = this;
            _super.call(this, isVideo, id, parentEl);
            this.type = LMComLib.SoundPlayerType.SL;
            try {
                Logger.trace_lmsnd('soundnew.ts: MediaDriver_SL.constructor: init start');
                var self = this;
                var src = Silverlight.createObject(Pager.basicUrl + 'schools/slextension.xap', null, 'driver-' + id, 
                //var src = Silverlight.createObject(cfg.baseTagUrl ? cfg.baseTagUrl + '/schools/slextension.xap' : '../schools/slextension.xap', null, 'driver-' + id,
                //var src = Silverlight.createObject('slextension.xap', null, 'driver-' + id,
                { autoUpgrade: 'true', background: 'white', minRuntimeVersion: slVersion, alt: 'LANGMaster', enablehtmlaccess: 'true' }, {
                    onError: function (msg) { return _this.onError(msg); },
                    onLoad: function (sender) {
                        try {
                            Logger.trace_lmsnd('soundnew.ts: MediaDriver_SL.constructor: onLoad start');
                            var video = sender.getHost().content.HTML5Like;
                            var slObj = $('#' + id);
                            self.handler = self.recHandler = self.slHandler = video;
                            self.isVideo = isVideo;
                            video.alowTitle = CSLocalize('f9726cae800748ef83e29f8d3c2cbb98', 'Alow microphone');
                            video.addEventListener("onCanplaythrough", function () { return self.doCanplaythrough(); });
                            video.addEventListener("onPaused", function () { return self.doPaused(); });
                            video.addEventListener("timeupdate", function () { return self.doTimeupdate(); });
                            video.addEventListener("OnPCMData", function (sender, ev) { try {
                                self.slOnPCMData(ev.Value);
                            }
                            catch (exp) {
                                exp = null;
                            } });
                            video.addEventListener("OnRecordedMilisecs", function (sender, ev) {
                                try {
                                    if (self.recordStartPar.miliseconds)
                                        _this.recordStartPar.miliseconds(ev.Value);
                                }
                                catch (exp) { }
                            });
                            completed(self);
                            Logger.trace_lmsnd('soundnew.ts: MediaDriver_SL.constructor: onLoad end');
                        }
                        catch (msg) {
                            Logger.error_snd('soundnew.ts: MediaDriver_SL.constructor: onLoad', msg);
                            debugger;
                            throw msg;
                        }
                    }
                }, "");
                src = src.replace('<object ', '<object class="cls-' + (isVideo ? 'video ' : 'audio ') + (htmltagClass ? htmltagClass : '') + '" ');
                var $parent = parentEl ? $(parentEl) : $('body');
                this.htmlElement = $(src);
                if (isVideo) {
                    var parClasses = $parent.attr('class').split(/\s+/);
                    _.each(parClasses, function (cls) { if (cls.indexOf('video-') != 0)
                        return; _this.htmlElement.addClass(cls); });
                }
                $parent.prepend(this.htmlElement[0]);
                this.parent = $parent[0];
                Logger.trace_lmsnd('soundnew.ts: MediaDriver_SL.constructor: init end');
            }
            catch (msg) {
                Logger.error_snd('soundnew.ts: MediaDriver_SL.constructor: init', msg);
                debugger;
                throw msg;
            }
        }
        MediaDriver_SL.prototype.isRecording = function () { return this.slHandler.isRecording(); };
        MediaDriver_SL.prototype.recordStart = function (par) {
            var _this = this;
            this.recordStartPar = par;
            this.recordedMilisecs = 0;
            this.recordWorkerInitialized = false;
            this.recordAlowMicrophone(function () {
                _this.slHandler.recordStart(par);
                if (!_this.recordWorkerInitialized && _this.recordStartPar.recordStarting)
                    _this.recordStartPar.recordStarting();
                _this.recordingChanged(true);
                if (par.toDisc) {
                    _this.recordWorker = createMP3Worker(_this);
                }
            });
        };
        MediaDriver_SL.prototype.recordAlowMicrophone = function (completed) {
            var _this = this;
            if (!this.slHandler.alowMicrophone()) {
                this.htmlElement.css('top', '0px');
                this.htmlElement.css('position', 'inherit');
                $(window).scrollTop(0);
                var testMicrophoneTimer = setInterval(function () {
                    if (!_this.slHandler.alowMicrophone())
                        return;
                    clearInterval(testMicrophoneTimer);
                    _this.htmlElement.css('top', '-50px');
                    _this.htmlElement.css('position', 'absolute');
                    completed();
                }, 100);
            }
            else
                completed();
        };
        MediaDriver_SL.prototype.recordEnd = function (finishAudioFile) {
            this.recordingChanged(false);
            this.slHandler.recordEnd();
            Logger.trace_lmsnd('MediaDriver_SL: after this.slHandler.recordEnd()');
            if (!finishAudioFile)
                return;
            if (this.recordStartPar.toDisc) {
                Pager.blockGui(true);
                mp3WorkerLib.postFinishSLMessage(this.recordWorker);
            }
            else {
                this.doRecordingCompleted();
            }
        };
        MediaDriver_SL.prototype.createObjectURL = function (data) { return this.slHandler.createObjectURL(); };
        MediaDriver_SL.prototype.revokeObjectURL = function (url) { this.slHandler.revokeObjectURL(url); };
        MediaDriver_SL.prototype.slOnPCMData = function (rawBase64) {
            if (!this.recordStartPar)
                return; //asi jiz volano recordEnd, dalsi PCM buffery jsou ignorovany
            if (!this.recordWorkerInitialized) {
                this.recordWorkerInitialized = true;
                mp3WorkerLib.postInitSLMessage(this.recordWorker, {
                    recordStartPar: mp3WorkerLib.getWorkerRecordStartPar(this.recordStartPar),
                    pagerBasicUrl: Pager.basicUrl, firstData: rawBase64,
                });
            }
            else {
                mp3WorkerLib.postEncodeSLMessage(this.recordWorker, rawBase64);
            }
            //this.recordedMilisecs += 1000 * ev.Value.length / (ev.BitsPerSample / 8) / ev.SamplesPerSecond;
            //if (this.recordStartPar.miliseconds) {
            //  this.recordStartPar.miliseconds(this.recordedMilisecs); //this.recordedMilisecs / ev.SamplesPerSecond * 1000);
            //}
        };
        MediaDriver_SL.prototype.openFile = function (urlOrBuffer) {
            Logger.trace_lmsnd('soundnew.ts: MediaDriver_SL.openFile start: url=' + urlOrBuffer);
            this.url = urlOrBuffer;
            this.slHandler.openFile(urlOrBuffer);
        };
        return MediaDriver_SL;
    })(MediaDriver);
    SndLow.MediaDriver_SL = MediaDriver_SL;
})(SndLow || (SndLow = {}));
//******************* Player pro EA
var LMSnd;
(function (LMSnd) {
    var Player = (function () {
        function Player() {
        }
        Player.init = function (_onStoped) {
            SndLow.getGlobalMedia().adjustGlobalDriver(false, function (dr, disabled) {
                onStoped = _onStoped;
            });
        };
        Player.playFile = function (url, sec) {
            try {
                Logger.trace_lmsnd('soundnew.ts: LMSnd.Player.playFile start');
                if (!onStoped) {
                    debugger;
                    throw '!onStoped';
                }
                url = url.toLowerCase().replace('.wma', '.mp3');
                Logger.trace_lmsnd('soundnew.ts: LMSnd.Player.playFile sec=' + sec.toString() + ', url=' + url);
                SndLow.globalAudioPlayer.play(url, sec * 1000, function (msec) {
                    if (msec < 0) {
                        onStoped();
                        Logger.trace_lmsnd('soundnew.ts: LMSnd.Player.playFile stoped');
                    }
                    else {
                        //Logger.trace_lmsnd('****** ' + msec.toString());
                        if (file)
                            file.onPlaying(msec);
                    }
                });
                Logger.trace_lmsnd('soundnew.ts: LMSnd.Player.playFile end');
            }
            catch (msg) {
                Logger.error_snd('soundnew.ts: LMSnd.Player.playFile', msg);
                debugger;
                throw msg;
            }
        };
        Player.play = function (_file, msec) {
            try {
                Logger.trace_lmsnd('soundnew.ts: LMSnd.Player.play start');
                file = _file;
                var url = _file.getFileUrl().toLowerCase();
                Player.playFile(url, msec / 1000);
                Logger.trace_lmsnd('soundnew.ts: LMSnd.Player.play end');
            }
            catch (msg) {
                Logger.error_snd('soundnew.ts: LMSnd.Player.playFile', msg);
                debugger;
                throw msg;
            }
        };
        Player.stop = function () {
            if (!SndLow.globalAudioPlayer || !SndLow.globalAudioPlayer.handler)
                return;
            try {
                SndLow.globalAudioPlayer.stop();
            }
            catch (err) { }
        };
        return Player;
    })();
    LMSnd.Player = Player;
    var onStoped;
    //export var driver: SndLow.MediaDriver;
    var file = null;
})(LMSnd || (LMSnd = {}));
//xx/#DEBUG
var Logger;
(function (Logger) {
    function trace_lmsnd(msg) {
        Logger.trace("Sound", msg);
    }
    Logger.trace_lmsnd = trace_lmsnd;
    function error_snd(where, msg) {
        Logger.error("Sound", msg, where);
    }
    Logger.error_snd = error_snd;
    ;
})(Logger || (Logger = {}));
//xx/#ENDDEBUG
//var SoundNoop = null; 
var WavePCM;
(function (WavePCM) {
    function toPCM(cfg, buffer) {
        return bitReduce(cfg, resampleAndInterleave(cfg, buffer));
    }
    WavePCM.toPCM = toPCM;
    function getConfig(inputSampleRate, bufferLength, outputSampleRate) {
        var resampledBufferLength = Math.round(bufferLength * outputSampleRate / inputSampleRate);
        return {
            inputSampleRate: inputSampleRate,
            bufferLength: bufferLength,
            outputBytesPerSample: 2,
            outputSampleRate: outputSampleRate,
            resampleRatio: (bufferLength - 1) / (resampledBufferLength - 1),
            resampledBufferLength: resampledBufferLength,
            bufResampleAndInterleave: new Float32Array(resampledBufferLength),
            bufBitReduce: new Uint8Array(resampledBufferLength * 2),
        };
    }
    WavePCM.getConfig = getConfig;
    function bitReduce(cfg, floatData) {
        var outputData = cfg.bufBitReduce; //new Uint8Array(floatData.length * cfg.outputBytesPerSample);
        var outputIndex = 0;
        for (var i = 0; i < floatData.length; i++) {
            var sample = floatData[i];
            if (sample > 1)
                sample = 1;
            else if (sample < -1)
                sample = -1;
            switch (cfg.outputBytesPerSample) {
                case 4:
                    sample = sample * 2147483648;
                    outputData[outputIndex++] = sample;
                    outputData[outputIndex++] = sample >> 8;
                    outputData[outputIndex++] = sample >> 16;
                    outputData[outputIndex++] = sample >> 24;
                    break;
                case 3:
                    sample = sample * 8388608;
                    outputData[outputIndex++] = sample;
                    outputData[outputIndex++] = sample >> 8;
                    outputData[outputIndex++] = sample >> 16;
                    break;
                case 2:
                    sample = sample * 32768;
                    outputData[outputIndex++] = sample;
                    outputData[outputIndex++] = sample >> 8;
                    break;
                case 1:
                    outputData[outputIndex++] = (sample + 1) * 128;
                    break;
                default:
                    throw "Only 8, 16, 24 and 32 bits per sample are supported";
            }
        }
        return new Uint16Array(outputData.buffer);
    }
    function resampleAndInterleave(cfg, buffer) {
        if (cfg.outputSampleRate === cfg.inputSampleRate)
            return buffer;
        var outputData = cfg.bufResampleAndInterleave; //.new Float32Array(cfg.resampledBufferLength);
        outputData[cfg.resampledBufferLength - 1] = buffer[cfg.bufferLength - 1];
        for (var i = 0; i < cfg.resampledBufferLength - 1; i++) {
            var ir = i * cfg.resampleRatio;
            var op = Math.floor(ir);
            var channelData = buffer;
            outputData[i] = channelData[op] + (channelData[op + 1] - channelData[op]) * (ir - op);
        }
        return outputData;
    }
})(WavePCM || (WavePCM = {}));
importScripts('mp3WorkerLib.js');
mp3Worker.worker = this;
mp3Worker.worker.onmessage = mp3Worker.onMessage;
importScripts('mp3WorkerLib.js');
importScripts('pako_deflate.js');
mp3Worker.worker = this;
mp3Worker.worker.onmessage = mp3Worker.onMessage;
importScripts('mp3WorkerLib.js');
importScripts('libmp3lame.js');
mp3Worker.worker = this;
mp3Worker.worker.onmessage = mp3Worker.onMessage;
//http://xregexp.com/plugins/, d:\Instalace\JavascriptUnicode\
var Unicode;
(function (Unicode) {
    var a = new RegExp("\\w{4}", "g");
    //unicode - properties.js
    var White_Space = "0009-000D0020008500A01680180E2000-200A20282029202F205F3000".replace(a, "\\u$&");
    var cWhite_Space = new RegExp("[" + White_Space + "\']");
    //unicode-base.js
    var Letter = "0041-005A0061-007A00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D03860388-038A038C038E-03A103A3-03F503F7-0481048A-05270531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A008A2-08AC0904-0939093D09500958-09610971-09770979-097F0985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C330C35-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA1700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191C1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A697A6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A793A7A0-A7AAA7F8-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA80-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC".replace(a, "\\u$&");
    var cLetter = new RegExp("[" + Letter + "]");
    //unicode-categories.js
    var Number = "0030-003900B200B300B900BC-00BE0660-066906F0-06F907C0-07C90966-096F09E6-09EF09F4-09F90A66-0A6F0AE6-0AEF0B66-0B6F0B72-0B770BE6-0BF20C66-0C6F0C78-0C7E0CE6-0CEF0D66-0D750E50-0E590ED0-0ED90F20-0F331040-10491090-10991369-137C16EE-16F017E0-17E917F0-17F91810-18191946-194F19D0-19DA1A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C5920702074-20792080-20892150-21822185-21892460-249B24EA-24FF2776-27932CFD30073021-30293038-303A3192-31953220-32293248-324F3251-325F3280-328932B1-32BFA620-A629A6E6-A6EFA830-A835A8D0-A8D9A900-A909A9D0-A9D9AA50-AA59ABF0-ABF9FF10-FF19".replace(a, "\\u$&");
    var cNumber = new RegExp("[" + Number + "]");
    function isLetter(ch) {
        return cLetter.test(ch);
    }
    Unicode.isLetter = isLetter;
    function isWhiteSpace(ch) {
        return cWhite_Space.test(ch);
    }
    Unicode.isWhiteSpace = isWhiteSpace;
    function isNumber(ch) {
        return cNumber.test(ch);
    }
    Unicode.isNumber = isNumber;
    function isLeterOrDigit(ch) {
        return isNumber(ch) || isLetter(ch);
    }
    Unicode.isLeterOrDigit = isLeterOrDigit;
})(Unicode || (Unicode = {}));
var ViewBase;
(function (ViewBase) {
    function viewLocator(modelName) {
        modelIdToScriptIdInit();
        var res = modelIdToScriptId[modelName];
        if (!res)
            throw "ViewBase.ts ModelBase.viewLocator: Missing view " + modelName + " in Rewise\DefaultMobile.aspx.cs";
        return res;
    }
    ViewBase.viewLocator = viewLocator;
    function modelIdToScriptIdInit() {
        if (modelIdToScriptId != null)
            return;
        modelIdToScriptId = [];
        $('script[data-for]').each(function (idx, el) {
            var th = $(el);
            var fors = th.attr('data-for').toLowerCase().split(",");
            _.each(fors, function (f) { return modelIdToScriptId[f + "Model".toLowerCase()] = th.attr('id'); });
        });
    }
    var modelIdToScriptId;
    ViewBase.init = function () {
        Logger.traceMsg('ViewBase.initBootStrapApp');
        //if (!cfg.noAngularjsApp) return;
        return;
        if (!location.hash || location.hash.length < 3)
            location.hash = '/old/school/schoolmymodel/-1///';
        $(window).hashchange(function () { return Pager.loadPageHash(location.hash); });
        $(window).hashchange();
    };
})(ViewBase || (ViewBase = {}));
var lm_remote;
(function (lm_remote) {
    $.validator.addMethod('lm_remote', function (value, element, param) {
        if (this.optional(element)) {
            return "dependency-mismatch";
        }
        var previous = this.previousValue(element), validator;
        if (!this.settings.messages[element.name])
            this.settings.messages[element.name] = {};
        previous.originalMessage = this.settings.messages[element.name].lm_remote;
        this.settings.messages[element.name].lm_remote = previous.message;
        if (previous.old === value)
            return previous.valid;
        previous.old = value;
        validator = this;
        this.startRequest(element);
        param.remoteAction(function (res) {
            var valid = res == 0;
            validator.settings.messages[element.name].lm_remote = previous.originalMessage;
            if (valid) {
                var submitted = validator.formSubmitted;
                validator.prepareElement(element);
                validator.formSubmitted = submitted;
                validator.successList.push(element);
                delete validator.invalid[element.name];
                validator.showErrors();
            }
            else {
                var errors = {};
                errors[element.name] = previous.message = param.message(res, value);
                validator.invalid[element.name] = true;
                validator.showErrors(errors);
            }
            previous.valid = valid;
            validator.stopRequest(element, valid);
        });
        return "pending";
    });
})(lm_remote || (lm_remote = {}));
var chinh;
(function (chinh) {
    var defaultDesign = (function () {
        function defaultDesign() {
            this.domain = 'www.edusoft.com.vn';
            this.from = "etestme@edusoft.com.vn";
        }
        defaultDesign.prototype.wishSuccess = function () { return 'Chúng tôi chúc bạn thành công với các sản phẩm giáo dục của Edusoft.'; };
        defaultDesign.prototype.LMTeam = function () { return 'Edusoft team'; };
        defaultDesign.prototype.contact = function () { return 'Edusoft.com.vn, address, Vietnam, <a href="mailto:etestme@edusoft.com.vn">etestme@edusoft.com.vn</a>, <a href="http://www.edusoft.com.vn">www.edusoft.com.vn</a>.'; };
        defaultDesign.prototype.rights = function () { return '© Edusoft 2015'; };
        return defaultDesign;
    })();
    chinh.defaultDesign = defaultDesign;
    EMailer.actEmailDesign = new defaultDesign();
})(chinh || (chinh = {}));
var grafia;
(function (grafia) {
    grafia.home = "grafia_homeModel".toLowerCase();
    var skin = (function (_super) {
        __extends(skin, _super);
        function skin() {
            _super.apply(this, arguments);
        }
        skin.prototype.bodyClass = function () { return $(document).width() <= 960 ? 'screen-width-small' : ''; };
        skin.prototype.getHome = function () { return oldPrefix + [grafia.appId, grafia.home].join(hashDelim); };
        return skin;
    })(Gui2.skin);
    grafia.skin = skin;
    var homeModel = (function (_super) {
        __extends(homeModel, _super);
        function homeModel() {
            _super.call(this, grafia.appId, grafia.home, null);
            this.tb = new schools.TopBarModel(this);
        }
        return homeModel;
    })(Pager.Page);
    grafia.homeModel = homeModel;
    Gui2.skin.instance = new skin();
    //Pager.registerAppLocator(appId, home, (urlParts, completed) => completed(new homeModel()));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, grafia.home, grafia.appId, grafia.home, 0, function (urlParts) { return new homeModel(); }); });
})(grafia || (grafia = {}));
var skrivanek;
(function (skrivanek) {
    var defaultDesign = (function () {
        function defaultDesign() {
            this.domain = 'onlinetesty.skrivanek.cz';
            this.from = "onlinetesty@skrivanek.cz";
        }
        defaultDesign.prototype.wishSuccess = function () { return 'Přejeme vám hodně úspěchů se vzdělávacími produkty Skřivánek'; };
        defaultDesign.prototype.LMTeam = function () { return 'Skřivánek team'; };
        defaultDesign.prototype.contact = function () { return 'Skřivánek s.r.o., Na dolinách 153/22, 147 00 Praha 4 - Podolí, Česká republika, <a href="mailto:onlinetesty@skrivanek.cz">onlinetesty@skrivanek.cz</a>, <a href="http://onlinetesty.skrivanek.cz">onlinetesty.skrivanek.cz</a>.'; };
        defaultDesign.prototype.rights = function () { return ''; };
        return defaultDesign;
    })();
    skrivanek.defaultDesign = defaultDesign;
    EMailer.actEmailDesign = new defaultDesign();
})(skrivanek || (skrivanek = {}));
/// <reference path="../JsLib/jsd/jquery.d.ts" />
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/OAuth.ts" />
/// <reference path="../JsLib/js/Validate.ts" />
/// <reference path="Model.ts" />
var Login;
(function (Login) {
    var ChangePassworModel = (function (_super) {
        __extends(ChangePassworModel, _super);
        function ChangePassworModel(type) {
            _super.call(this, type);
            this.oldPassword = ko.observable("");
            this.password = ko.observable("");
            this.confirmPsw = ko.observable("");
            this.button = ko.observable(Pager.ButtonType.okCancel);
            this.viewModel = [
                validate.password(this.oldPassword, 1, "oldPassword", Login.c_oldPassword()),
                validate.password(this.password, 1, "password", Login.c_newPassword()),
                validate.confirmPsw(this.confirmPsw, this.password)];
        }
        ChangePassworModel.prototype.update = function (completed) {
            completed();
        };
        ChangePassworModel.prototype.doOK = function () {
            var _this = this;
            if (this.button() == Pager.ButtonType.ok)
                this.cancel();
            else {
                LMStatus.getCookie();
                Pager.ajaxGet(Pager.pathType.restServices, Login.CmdChangePassword_Type, LMStatus.createCmd(function (r) { r.oldPassword = _this.oldPassword(); r.newPassword = _this.password(); r.lmcomId = LMStatus.Cookie.id; }), 
                //CmdChangePassword_Create(this.oldPassword(), this.password(), LMStatus.Cookie.id),
                function () {
                    _this.success(CSLocalize('4ec7f9623a684f708844bce43ad51d26', 'Password changed successfully'));
                    _this.button(Pager.ButtonType.ok);
                }, function (errId, errMsg) {
                    switch (errId) {
                        case Login.CmdLmLoginError.passwordNotExists:
                            _this.error(CSLocalize('150a40688a494a72a11b26081b46e515', 'The e-mail address was not found in the database.'));
                            break;
                        default:
                            Logger.error('ChangePasswor.ChangePassworModel.doOK', '', errMsg);
                            _this.error(errMsg);
                            break;
                    }
                });
            }
        };
        ChangePassworModel.prototype.cancel = function () { location.href = "#" + Login.pageProfile; };
        return ChangePassworModel;
    })(Login.loginMode);
    Login.ChangePassworModel = ChangePassworModel;
})(Login || (Login = {}));
/// <reference path="../JsLib/jsd/jquery.d.ts" />
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/OAuth.ts" />
/// <reference path="../JsLib/js/Validate.ts" />
/// <reference path="Model.ts" />
var Login;
(function (Login) {
    var ConfirmRegistrationModel = (function (_super) {
        __extends(ConfirmRegistrationModel, _super);
        function ConfirmRegistrationModel() {
            _super.apply(this, arguments);
        }
        ConfirmRegistrationModel.prototype.update = function (completed) {
            var _this = this;
            var key = LowUtils.parseQuery(location.search)["key"];
            try {
                if (Utils.Empty(key))
                    throw "Missing Key query par";
                var userId = Utils.byteArrayToLong(LowUtils.DecryptString(key));
                if (Utils.Empty(userId) || userId <= 0)
                    throw "Wrong User id format";
                Pager.ajaxGet(Pager.pathType.restServices, Login.CmdConfirmRegistration_Type, LMStatus.createCmd(function (r) { r.lmcomId = userId; }), 
                //CmdConfirmRegistration_Create(userId),
                function () {
                    _this.success(CSLocalize('b28146649ad7498cb4109b6b1276fcef', 'Account') + ' ' + CSLocalize('c0b339ea24054072999d990c2e7b8db9', 'was activated.'));
                    completed();
                }, function (errId, errMsg) {
                    _this.error(CSLocalize('0262a5d780784acd842bc31bd2800579', 'The e-mail address was not found in the database.') + ' ' + errMsg);
                    completed();
                });
            }
            catch (err) {
                this.error(CSLocalize('0cc1324eadf741c4b25f04ad1c8b1917', 'Wrong confirmation page url:') + ' ' + err);
                completed();
                return;
            }
        };
        return ConfirmRegistrationModel;
    })(Login.loginMode);
    Login.ConfirmRegistrationModel = ConfirmRegistrationModel;
})(Login || (Login = {}));
/// <reference path="../JsLib/jsd/jquery.d.ts" />
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/OAuth.ts" />
/// <reference path="../JsLib/js/Validate.ts" />
/// <reference path="Model.ts" />
var Login;
(function (Login) {
    var ForgotPasswordModel = (function (_super) {
        __extends(ForgotPasswordModel, _super);
        function ForgotPasswordModel() {
            _super.apply(this, arguments);
            this.email = ko.observable("");
        }
        ForgotPasswordModel.prototype.update = function (completed) {
            this.viewModel = [validate.email(this.email, true)];
            completed();
        };
        ForgotPasswordModel.prototype.doOK = function () {
            var _this = this;
            var email = {
                From: null,
                To: this.email(),
                Cc: null,
                Subject: CSLocalize('3c2e4788779446b5ac07319284964624', 'Sending of the forgotten password'),
                emailId: "TEmailForgotPassword",
                name: this.email(),
                isForgotPassword: true,
                Html: null,
                isAtt: false,
                attFile: null,
                attContent: null,
                attContentType: null,
            };
            EMailer.sendEMail(email, function () {
                _this.success(CSLocalize('5ccd166083844fd49a180596afdfb330', 'The password has been sent to your e-mail address.'));
            }, function (errId, errMsg) {
                switch (errId) {
                    case Login.CmdLmLoginError.cannotFindUser:
                        _this.error("The e-mail address was not found in the database.");
                        break;
                    default:
                        break;
                        alert(errMsg);
                }
            });
        };
        ForgotPasswordModel.prototype.cancel = function () { Pager.navigateToHash(Login.getHash(Login.pageLmLogin)); };
        return ForgotPasswordModel;
    })(Login.loginMode);
    Login.ForgotPasswordModel = ForgotPasswordModel;
})(Login || (Login = {}));
var Login;
(function (Login) {
    var LMLoginModel = (function (_super) {
        __extends(LMLoginModel, _super);
        function LMLoginModel(type, isEMail) {
            _super.call(this, type);
            this.isEMail = isEMail;
            this.login = ko.observable("");
            this.email = ko.observable("");
            this.password = ko.observable("");
            this.viewModel = [isEMail ? validate.email(this.email, true) : validate.minLen(this.login, 3, "login", "Login"), validate.password(this.password, 1)];
        }
        LMLoginModel.prototype.gotoRegister = function () { Pager.navigateToHash(Login.getHash(this.isEMail ? Login.pageRegister : Login.pageRegisterNoEMail)); };
        LMLoginModel.prototype.doOK = function () {
            var _this = this;
            this.error(null);
            login(this.isEMail, this.email().trim(), this.login().trim(), this.password(), null, function (cookie) { return LMStatus.logged(cookie, false); }, function (errId, errMsg) {
                switch (errId) {
                    case Login.CmdLmLoginError.cannotFindUser:
                        _this.error(CSLocalize('f14d4f45b2184ec2b114ae702e34b8d0', 'Wrong password or login name was not found in the database.'));
                        break;
                    default:
                        Logger.error('LMLogin.LMLoginModel.doOK', '', errMsg);
                        _this.error(errMsg);
                        break;
                }
            });
        };
        LMLoginModel.prototype.cancel = function () { Pager.navigateToHash(Login.getHash(Login.pageLogin)); };
        return LMLoginModel;
    })(Login.loginMode);
    Login.LMLoginModel = LMLoginModel;
    function login(isEMail, email, login, password, ticket, completed, onError) {
        password = _.isEmpty(password) ? null : Utils.encryptStr(password);
        Pager.ajaxGet(Pager.pathType.restServices, Login.CmdLmLogin_Type, Login.CmdLmLogin_Create(isEMail ? null : login, isEMail ? email : null, password, null, ticket), function (res) { return completed(res.Cookie); }, //dej usera do cookie a proved redirekt
        onError);
    }
    Login.login = login;
})(Login || (Login = {}));
var Login;
(function (Login) {
    var LoginModel = (function (_super) {
        __extends(LoginModel, _super);
        function LoginModel() {
            _super.apply(this, arguments);
            this.button = Pager.ButtonType.cancel;
        }
        LoginModel.prototype.update = function (completed) {
            this.viewModel = _.map(Login.cfg.logins, function (pr) { return (createProvider(pr)); });
            //kontrola lowercase pro google etc login
            var path = location.href.split('?')[0].split('#')[0];
            if (Utils.endsWith(path, '.html') && path != path.toLowerCase()) {
                location.href = location.href.toLowerCase();
                location.href = path.toLowerCase() + location.hash;
                return;
            }
            completed();
        };
        LoginModel.prototype.call_provider = function (sender, par) {
            if (par == LMComLib.OtherType.LANGMaster)
                Pager.navigateToHash(Login.getHash(Login.pageLmLogin));
            else if (par == LMComLib.OtherType.LANGMasterNoEMail)
                Pager.navigateToHash(Login.getHash(Login.pageLmLoginNoEMail));
            else
                OAuth.authrequest(par);
        };
        LoginModel.prototype.cancel = function () {
            LMStatus.gotoReturnUrl();
        };
        return LoginModel;
    })(Login.loginMode);
    Login.LoginModel = LoginModel;
    function createProvider(id) {
        //return { id: id, name: LowUtils.EnumToString(LMComLib.OtherType, id).toLowerCase() };
        return { id: id, name: LowUtils.EnumToString(LMComLib.OtherType, id).toLowerCase() };
    }
})(Login || (Login = {}));
var Login;
(function (Login) {
    var RegisterModel = (function (_super) {
        __extends(RegisterModel, _super);
        function RegisterModel(type, isEMail) {
            _super.call(this, type);
            this.isEMail = isEMail;
            this.email = ko.observable("");
            this.login = ko.observable("");
            this.loginEmail = ko.observable("");
            this.password = ko.observable("");
            this.firstName = ko.observable("");
            this.lastName = ko.observable("");
            this.confirmPsw = ko.observable("");
            this.viewModel = isEMail ? [
                validate.email(this.email, true),
                validate.password(this.password, 1),
                validate.confirmPsw(this.confirmPsw, this.password),
                validate.empty(this.firstName, "firstName", Login.c_firstName()),
                validate.minLen(this.lastName, 3, "lastName", Login.c_lastName())
            ] : [
                validate.minLen(this.login, 3, "login", "Login"),
                validate.password(this.password, 1),
                validate.confirmPsw(this.confirmPsw, this.password),
                validate.empty(this.firstName, "firstName", Login.c_firstName()),
                validate.minLen(this.lastName, 3, "lastName", Login.c_lastName()),
                validate.email(this.loginEmail, false),
            ];
            this.viewModel.push();
        }
        RegisterModel.prototype.doOK = function () {
            var _this = this;
            this.error(null);
            this.success(null);
            var cook = LMComLib.LMCookieJS_Create(0, 0, this.isEMail ? this.email() : null, this.isEMail ? null : this.login(), this.isEMail ? null : this.loginEmail(), this.isEMail ? LMComLib.OtherType.LANGMaster : LMComLib.OtherType.LANGMasterNoEMail, null, this.firstName(), this.lastName(), '', 0, 0, null);
            Pager.ajaxGet(Pager.pathType.restServices, Login.CmdRegister_Type, LMStatus.createCmd(function (r) { r.password = Utils.encryptStr(_this.password()); r.Cookie = cook, r.subSite = LMComLib.SubDomains.com; }), 
            //CmdRegister_Create(Utils.encryptStr(this.password()), LMComLib.SubDomains.com, cook, 0),
            function (res) {
                if (_this.isEMail) {
                    var key = LowUtils.EncryptString(Utils.longToByteArray(res));
                    var url = location.href.split('#')[0];
                    url += url.indexOf('?') < 0 ? "?" : "&";
                    url += "key=" + key + "#" + Login.getHash(Login.pageConfirmRegistration);
                    var email = {
                        From: null,
                        To: _this.email(),
                        Cc: null,
                        Subject: CSLocalize('d809fff52b9f4f5391ab889a0a1afe80', 'Creating of an account - confirmation'),
                        emailId: "TEmailConfirmation",
                        //url: Pager.path(Pager.pathType.login, "?key=" + key + "#" + new Url(pageConfirmRegistration).toString()),// "http://www.langmaster.com/lmcom/rew/Login/default.aspx#confirmRegistrationModel",
                        isForgotPassword: false,
                        Html: null,
                        isAtt: false,
                        attFile: null,
                        attContent: null,
                        attContentType: null,
                        url: url,
                        name: _this.email(),
                        password: _this.password(),
                    };
                    EMailer.sendEMail(email, function () {
                        _this.success(CSLocalize('dd97d1b2919d451cbb43ee63091a147c', 'A confirmation e-mail has been sent to your e-mail address.'));
                        Login.testConfirmUrl = url;
                    }, function (errId, errMsg) { return alert(errMsg); });
                }
                else {
                    cook.id = res;
                    LMStatus.logged(cook, false);
                }
            }, function (errId, errMsg) {
                switch (errId) {
                    case Login.CmdLmLoginError.userExist:
                        _this.error(CSLocalize('d60caf13057c46c2ba63f5cd361271e5', 'User name already exists'));
                        break;
                    default:
                        Logger.error('Register.RegisterModel.doOK', '', errMsg);
                        _this.error(errMsg);
                        break;
                }
            });
        };
        RegisterModel.prototype.cancel = function () { Pager.navigateToHash(Login.getHash(Login.pageLmLogin)); };
        return RegisterModel;
    })(Login.loginMode);
    Login.RegisterModel = RegisterModel;
})(Login || (Login = {}));
/// <reference path="../JsLib/jsd/jquery.d.ts" />
/// <reference path="../JsLib/jsd/knockout.d.ts" />
/// <reference path="../JsLib/jsd/jsrender.d.ts" />
/// <reference path="../JsLib/js/ModelBase.ts" />
/// <reference path="../JsLib/js/OAuth.ts" />
/// <reference path="../JsLib/js/Validate.ts" />
/// <reference path="Model.ts" />
/// <reference path="Register.ts" />
var Login;
(function (Login) {
    var ProfileModel = (function (_super) {
        __extends(ProfileModel, _super);
        function ProfileModel(type) {
            _super.call(this, type);
            this.email = ko.observable(null);
            this.firstName = ko.observable("");
            this.lastName = ko.observable("");
            this.button = ko.observable(Pager.ButtonType.okCancel);
            LMStatus.getCookie();
            if (LMStatus.isLMComCookie()) {
                this.viewModel = [
                    validate.empty(this.firstName, "firstName", Login.c_firstName()),
                    validate.minLen(this.lastName, 3, "lastName", Login.c_lastName()),
                ];
                this.firstName(LMStatus.Cookie.FirstName);
                this.lastName(LMStatus.Cookie.LastName);
                if (LMStatus.Cookie.Type == LMComLib.OtherType.LANGMasterNoEMail) {
                    this.viewModel.push(validate.email(this.email, false));
                    this.email(LMStatus.Cookie.LoginEMail);
                }
            }
            else
                this.viewModel = [];
        }
        ProfileModel.prototype.update = function (completed) {
            completed();
        };
        ProfileModel.prototype.doOK = function () {
            var _this = this;
            if (this.button() == Pager.ButtonType.ok)
                this.cancel();
            else {
                LMStatus.getCookie();
                LMStatus.Cookie.FirstName = this.firstName();
                LMStatus.Cookie.LastName = this.lastName();
                LMStatus.Cookie.LoginEMail = this.email();
                LMStatus.setCookie(LMStatus.Cookie);
                Pager.ajaxGet(Pager.pathType.restServices, Login.CmdProfile_Type, LMStatus.createCmd(function (r) { r.Cookie = LMStatus.Cookie, r.lmcomId = LMStatus.Cookie.id; }), 
                //CmdProfile_Create(LMStatus.Cookie, LMStatus.Cookie.id),
                function () {
                    _this.success(CSLocalize('e56e6bad75e54dea9191cab418eda74d', 'Success'));
                    _this.button(Pager.ButtonType.ok);
                }, function () { return _this.error(CSLocalize('bb6463807fdf453191f0315f034f01e0', 'Wrong old password')); });
            }
        };
        ProfileModel.prototype.cancel = function () {
            //throw "My.schoolMy.Model.licKeyOK";
            LMStatus.gotoReturnUrl();
        };
        return ProfileModel;
    })(Login.loginMode);
    Login.ProfileModel = ProfileModel;
})(Login || (Login = {}));
var CourseMeta;
(function (CourseMeta) {
    function navBar() { return cfg.themeDefauleNavbar ? 'default' : 'inverse'; }
    CourseMeta.navBar = navBar;
    //export var navBar = 'default';
    //Dynamicke properties stranky, menene i pri vyhodnoceni cviceni
    CourseMeta.greenTitle = ko.observable(); //titulek buttonu
    CourseMeta.greenIcon = ko.observable(); //ikona buttonu
    CourseMeta.greenCss = ko.observable(); //barva buttonu
    CourseMeta.greenDisabled = ko.observable(); //vse hotovo => disabled
    function doGreenClick() { CourseMeta.lib.keepGreen = CourseMeta.greenCss() == 'success'; CourseMeta.greenClick(); return false; }
    CourseMeta.doGreenClick = doGreenClick; //pres klik na sipku se drzi zelena barva sipky
    function btnClick(url) {
        var nd = _.isEmpty(url) ? CourseMeta.actCourseRoot : (CourseMeta.actProduct.getNode(url));
        if (nd.isSkiped)
            return;
        Pager.navigateToHash(nd.href());
    }
    CourseMeta.btnClick = btnClick;
    //##GOTO
    function gotoData(url) {
        if (_.isEmpty(url)) {
            Pager.gotoHomeUrl();
            return;
        }
        //skok na hash nebo sitemap url, kvuli breadcrumb v testMe result apod.
        Pager.navigateToHash(Utils.startsWith(url, '/old/') ? encodeUrlHash(url) : CourseMeta.actProduct.getNode(url).href());
        return false;
    }
    CourseMeta.gotoData = gotoData;
    var gui;
    (function (gui) {
        function alert(type, isConfirm) {
            if (isConfirm)
                return confirm(CSLocalize('d348b1d49cc9424a8c1c3a840ad9d4dd', 'Your answers are not all correct. Do you really want to evaluate the exercise?'));
            else
                window.alert('alert');
        }
        gui.alert = alert;
        //##GOTO
        function gotoData(node) {
            if (!node)
                Pager.gotoHomeUrl();
            Pager.navigateToHash(node.href());
        }
        gui.gotoData = gotoData;
        function onReload() {
            Pager.reloadPage();
        }
        gui.onReload = onReload;
        function init() { gui.exerciseHtml = $.noop; gui.exerciseCls = $.noop; }
        gui.init = init;
    })(gui = CourseMeta.gui || (CourseMeta.gui = {}));
    gui.init();
    //sluzby, ktere CourseMeta poskytuje persistent layer
    CourseMeta.persist = null; //persistNewEA.persistCourse;
    var MetaModel = (function (_super) {
        __extends(MetaModel, _super);
        function MetaModel() {
            _super.apply(this, arguments);
        }
        MetaModel.prototype.title = function () { return CourseMeta.actNode.title; };
        MetaModel.prototype.iconId = function () { return CourseMeta.actNode.iconId(); };
        MetaModel.prototype.breadcrumbs = function () {
            if (this.br)
                return this.br;
            var res = [];
            var self = CourseMeta.actNode;
            while (true) {
                res.push(self);
                if (self == CourseMeta.actCourseRoot || self == CourseMeta.actGrammar)
                    break;
                self = self.parent;
            }
            if (!CourseMeta.isType(CourseMeta.actNode, CourseMeta.runtimeType.grammar) && cfg.target == LMComLib.Targets.web)
                res.push({ title: schools.homeTitle(), iconId: function () { return 'home'; }, url: '' });
            if (res.length == 1)
                return this.br = [];
            res.reverse();
            return this.br = res;
        };
        MetaModel.prototype.hasBreadcrumb = function () { return CourseMeta.actNode != CourseMeta.actGrammar && this.breadcrumbs().length > 1; };
        MetaModel.prototype.normalDisplay = function () { return cfg.displayMode == schools.displayModes.normal; };
        MetaModel.prototype.previewExDisplay = function () { return cfg.displayMode == schools.displayModes.previewEx; };
        MetaModel.prototype.doUpdate = function (completed) {
            CourseMeta.lib.onChangeUrl(this.productUrl, this.persistence, this.url, function (ex) {
                return CourseMeta.lib.doRefresh(completed);
            });
        };
        return MetaModel;
    })(schools.Model);
    CourseMeta.MetaModel = MetaModel;
    var ModelPretest = (function (_super) {
        __extends(ModelPretest, _super);
        function ModelPretest(urlParts) {
            _super.call(this, schools.tCoursePretest, urlParts);
            this.bodyTmpl = "TCoursePretestBody";
        }
        ModelPretest.prototype.title = function () { return 'Pretest'; };
        ModelPretest.prototype.iconId = function () { return 'puzzle-piece'; };
        ModelPretest.prototype.doUpdate = function (completed) {
            //var u: schools.Url = <any>this.url;
            CourseMeta.lib.onChangeUrl(this.productUrl, this.persistence, this.url, function (ex) {
                return CourseMeta.lib.doRefresh(function () {
                    if (!CourseMeta.isType(CourseMeta.actNode, CourseMeta.runtimeType.taskPretest))
                        throw '!isType(actNode, runtimeType.taskPretest)';
                    var pretest = CourseMeta.actNode;
                    var init = pretest.initModel();
                    CourseMeta.lib.fillArrowInfo(init.info);
                    CourseMeta.lib.adjustEx(init.grEx, function () {
                        return CourseMeta.lib.displayEx(init.grEx, null, null);
                    });
                });
            });
        };
        return ModelPretest;
    })(MetaModel);
    CourseMeta.ModelPretest = ModelPretest;
    var Model = (function (_super) {
        __extends(Model, _super);
        function Model(urlParts) {
            _super.call(this, schools.tCourseMeta, urlParts);
            this.bodyTmpl = "TCourseMeta_Folder";
        }
        return Model;
    })(MetaModel);
    CourseMeta.Model = Model;
    $.views.helpers({
        makeTuples: function (buttons) {
            var res = [];
            var isLeft = true;
            _.each(buttons, function (b) {
                if (isLeft)
                    res.push({ left: b, right: null });
                else {
                    var t = res[res.length - 1];
                    t.right = b;
                }
                isLeft = !isLeft;
            });
            return res;
        },
        CourseMeta: CourseMeta,
        Utils: Utils,
        cfg: cfg,
        SndLow: SndLow,
    });
    $(window).bind("resize", function () {
        $(".cbtn").each(function () {
            var btn = $(this);
            var url = btn.data("node-url");
            if (!url)
                return;
            var nd = (CourseMeta.actProduct.getNode(url));
            if (!nd)
                return;
            var w = btn.outerWidth(true);
            var sum = nd.exCount;
            var skiped = nd.isSkiped ? w : w * nd.skipedCount / sum;
            var completed = nd.isSkiped ? 0 : w * (nd.complNotPassiveCnt + nd.complPassiveCnt) / sum;
            btn.find('.c1').css('width', Math.round(skiped).toString() + 'px');
            btn.find('.c2').css('left', Math.round(skiped).toString() + 'px').css('width', Math.round(completed).toString() + 'px');
            btn.find('.c3').css('left', Math.round(skiped + completed).toString() + 'px');
        });
    });
    function saveAndReload() { CourseMeta.lib.saveProduct(function () { CourseMeta.actNode = null; Pager.reloadPage(CourseMeta.actExModel); }); }
    CourseMeta.saveAndReload = saveAndReload;
    //vypocet odvozenych udaju
    function refreshExerciseBar(dt) {
        CourseMeta.actExModel.tb.exercisePassive(CourseMeta.actEx.page.isPassivePage());
        if (dt.done) {
            CourseMeta.actExModel.tb.exerciseEvaluated(true);
            CourseMeta.actExModel.tb.score(CourseMeta.actEx.page.isPassivePage() ? null : Math.round(100 * dt.s / dt.ms).toString() + "%");
        }
        else
            CourseMeta.actExModel.tb.exerciseEvaluated(false);
    }
    CourseMeta.refreshExerciseBar = refreshExerciseBar;
    //stav zelene sipky
    var greenArrowInfo = (function () {
        function greenArrowInfo(title, disable, css, iconId, greenClick) {
            this.title = title;
            this.disable = disable;
            this.css = css;
            this.iconId = iconId;
            this.greenClick = greenClick;
        }
        return greenArrowInfo;
    })();
    CourseMeta.greenArrowInfo = greenArrowInfo;
    //vsechny mozne alerty
    (function (alerts) {
        alerts[alerts["exTooManyErrors"] = 0] = "exTooManyErrors";
    })(CourseMeta.alerts || (CourseMeta.alerts = {}));
    var alerts = CourseMeta.alerts;
    //seznam vsech dostupnych button akci 
    (function (nodeAction) {
        nodeAction[nodeAction["no"] = 0] = "no";
        nodeAction[nodeAction["browse"] = 1] = "browse";
        nodeAction[nodeAction["skip"] = 2] = "skip";
        nodeAction[nodeAction["run"] = 3] = "run";
        //archive = 3,
        nodeAction[nodeAction["unskip"] = 4] = "unskip";
        //nop = 5,
        //pro kurz
        nodeAction[nodeAction["reset"] = 5] = "reset";
        //pro test
        nodeAction[nodeAction["runTestAgain"] = 6] = "runTestAgain";
        nodeAction[nodeAction["cancelTestSkip"] = 7] = "cancelTestSkip";
    })(CourseMeta.nodeAction || (CourseMeta.nodeAction = {}));
    var nodeAction = CourseMeta.nodeAction;
    function onNodeAction(url, type) {
        var nd = CourseMeta.actProduct.getNode(url);
        nd.onAction(type);
    }
    CourseMeta.onNodeAction = onNodeAction;
    //popis akce nad buttonem
    var NodeAction = (function () {
        function NodeAction(type, node) {
            this.type = type;
            this.node = node;
        }
        NodeAction.prototype.info = function () { return CourseMeta.allActions[this.type]; };
        NodeAction.createActions = function (node) {
            var actions = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                actions[_i - 1] = arguments[_i];
            }
            return _.map(_.filter(actions, function (a) { return a != nodeAction.no; }), function (act) { return new NodeAction(act, node); });
        };
        return NodeAction;
    })();
    CourseMeta.NodeAction = NodeAction;
    CourseMeta.allActions = {};
    CourseMeta.allActions[nodeAction.browse] = { icon: 'folder-open', title: function () { return CSLocalize('af026337fdf44d3287ade389c8d925f9', 'Browse'); } };
    CourseMeta.allActions[nodeAction.skip] = { icon: 'times-circle', title: function () { return CSLocalize('2c9b18c8e2a8449b891a3639691e1999', 'Skip'); } };
    CourseMeta.allActions[nodeAction.run] = { icon: 'play', title: function () { return CSLocalize('ba8042332a3c4520bc758e9bc851ae2b', 'Run'); } };
    CourseMeta.allActions[nodeAction.unskip] = { icon: 'plus-circle', title: function () { return CSLocalize('7f9d15221d9f471f934a944b1a949dca', 'Undo Skip'); } };
    CourseMeta.allActions[nodeAction.reset] = { icon: 'refresh', title: function () { return CSLocalize('27f1cba5240643fc9d0993cb6b5931b7', 'Reset'); } };
    CourseMeta.allActions[nodeAction.runTestAgain] = { icon: 'refresh', title: function () { return CSLocalize('9f77df2b307e48ad91291b0907fcbf4a', 'Run a new test'); } };
    CourseMeta.allActions[nodeAction.cancelTestSkip] = { icon: 'plus-circle', title: function () { return CSLocalize('f48f9615e3374fd2b6e1c377d1b8b0d3', 'Cancel and skip the test'); } };
    //Pager.registerAppLocator(schools.appId, schools.tCourseMeta, (urlParts, completed) => { completed(new Model(urlParts)); });
    //Pager.registerAppLocator(schools.appId, schools.tCoursePretest, (urlParts, completed) => completed(new ModelPretest(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schools.tCourseMeta, schools.appId, schools.tCourseMeta, 4, function (urlParts) { return new Model(urlParts); }); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schools.tCoursePretest, schools.appId, schools.tCoursePretest, 4, function (urlParts) { return new ModelPretest(urlParts); }); });
})(CourseMeta || (CourseMeta = {}));
var schoolCpv;
(function (schoolCpv) {
    //https://typescript.codeplex.com/workitem/1065 
    //d:\ProgramFiles\Common7\IDE\VWDExpressExtensions\TypeScript\
    var allCpvs = [];
    (function (PlayStatus) {
        PlayStatus[PlayStatus["initializing"] = 0] = "initializing";
        PlayStatus[PlayStatus["toPlay"] = 1] = "toPlay";
        PlayStatus[PlayStatus["playFile"] = 2] = "playFile";
        PlayStatus[PlayStatus["toRecord"] = 3] = "toRecord";
        PlayStatus[PlayStatus["recording"] = 4] = "recording";
        PlayStatus[PlayStatus["toPlayMemory"] = 5] = "toPlayMemory";
        PlayStatus[PlayStatus["playMemory"] = 6] = "playMemory";
    })(schoolCpv.PlayStatus || (schoolCpv.PlayStatus = {}));
    var PlayStatus = schoolCpv.PlayStatus;
    var model = (function () {
        function model(id, xap) {
            var _this = this;
            this.id = id;
            this.xap = xap;
            this.play = new btn("play");
            this.record = new btn("record");
            this.replay = new btn("replay");
            //installSlUrl(): string { return SndLow.slInstallUrl; }
            this.allDisabled = false; //je potreba instalace SL => buttony jsou disabled
            //showAlowMicrophoneBtn = ko.observable<boolean>(false);
            //needInstall = ko.observable<boolean>(true);
            //slvisible = ko.observable<boolean>(false);
            this.title = ko.observable('');
            this.destroy = function () {
                if (_this.driver) {
                    _this.driver.stop();
                    if (_this.driver.recHandler)
                        _this.driver.recordEnd(false);
                }
                if (_this.timerId != 0)
                    clearTimeout(_this.timerId);
                _this.timerId = 0;
            };
            this.timerId = 0;
            var self = this;
            allCpvs[id] = this;
            this.play.owner = this.record.owner = this.replay.owner = this;
            //this.destroy = () => {
            //  if (self.driver) {
            //    self.driver.stop();
            //    if (self.driver.recHandler) self.driver.recHandler.recordEnd();
            //  }
            //  if (self.timerId != 0) clearTimeout(self.timerId); self.timerId = 0;
            //}
        }
        model.prototype.setRecorderSound = function (recorderSound) {
            if (this.recorderSound)
                this.recorderSound.close();
            this.recorderSound = recorderSound;
        };
        model.prototype.init = function (completed) {
            var _this = this;
            if (this.driver) {
                completed();
                return;
            }
            SndLow.getGlobalMedia().adjustGlobalDriver(true, function (dr, disabled) {
                _this.driver = dr;
                _this.allDisabled = disabled;
                completed();
            });
        };
        model.prototype.htmlClearing = function () {
            this.setRecorderSound(null);
            SndLow.htmlClearing(this.id);
        };
        model.prototype.setBtn = function (btn, disabled, active, playing) {
            btn.disabled(disabled);
            btn.active(active);
            btn.playing(playing);
        };
        model.prototype.setButtonsStatus = function () {
            this.setBtn(this.play, this.allDisabled || this.playStatus == PlayStatus.recording, this.playStatus == PlayStatus.toPlay || this.playStatus == PlayStatus.playFile, this.playStatus == PlayStatus.playFile);
            this.setBtn(this.record, this.allDisabled, this.playStatus == PlayStatus.toRecord || this.playStatus == PlayStatus.recording, this.playStatus == PlayStatus.recording);
            //this.setBtn(this.replay, !this.driver || !this.driver.recHandler.recordingExists(), this.playStatus == PlayStatus.toPlayMemory/* || this.playStatus == PlayStatus.playMemory*/, this.playStatus == PlayStatus.playMemory);
            this.setBtn(this.replay, this.allDisabled || this.playStatus == PlayStatus.recording || !this.driver || !this.recorderSound, this.playStatus == PlayStatus.toPlayMemory || this.playStatus == PlayStatus.playMemory, this.playStatus == PlayStatus.playMemory);
        };
        model.prototype.hide = function (s, ev) {
            this.setRecorderSound(null);
            this.destroy();
            anim.collapseExpandedSlow();
            //this.slvisible(false);
            if (ev) {
                ev.cancelBubble = true;
                ev.stopPropagation();
            }
            return false;
        };
        model.prototype.playSound = function (isUrl) {
            var self = this;
            self.driver.url = null;
            self.driver.play(isUrl ? self.url : self.recorderSound.url, isUrl ? self.begPos * 1000 : 0, null);
        };
        model.prototype.show = function (url, title, begPos, endPos) {
            var _this = this;
            //this.stopStatus = { play: false, record: false, replay: false };
            this.playStatus = PlayStatus.initializing;
            this.url = url.toLowerCase(); /*this.computeUrl(url);*/
            this.title(title);
            this.begPos = begPos ? begPos / 1000 : 0;
            this.endPos = endPos ? endPos / 1000 : 1000000;
            var self = this;
            //Inicializace SL
            this.init(function () {
                self.playStatus = PlayStatus.toPlay;
                //self.slvisible(true);
                anim.show($('#' + self.id));
                //if (self.driver) self.driver.recHandler.clearRecording();
            });
            //Timer
            this.timerId = setInterval(function () {
                if (self.driver && self.driver.recHandler) {
                    //if (!self.driver.recHandler.alowMicrophone()) {//neni dovolen mikrofon
                    //  self.showAlowMicrophoneBtn(true); return;
                    //}
                    //self.showAlowMicrophoneBtn(false);
                    //stavy, nastavene klikem na button
                    if (!self.driver.handler.paused)
                        if (self.isRecordedSound())
                            self.playStatus = PlayStatus.playMemory;
                        else
                            self.playStatus = PlayStatus.playFile;
                    else if (self.driver.recHandler.isRecording())
                        self.playStatus = PlayStatus.recording;
                    //kontrola, zdali jeste bezi prehravani
                    switch (self.playStatus) {
                        case PlayStatus.playFile:
                            if (self.driver.handler.paused)
                                self.playStatus = PlayStatus.toRecord; //prestalo se prehravat vzor
                            else if (!self.isRecordedSound() && self.endPos && self.endPos <= self.driver.handler.currentTime)
                                self.driver.stop(); //dosazeno konce prehrani vzoru
                            break;
                        case PlayStatus.recording:
                            if (!self.driver.recHandler.isRecording())
                                self.playStatus = PlayStatus.toPlayMemory; //prestalo se nahravat
                            break;
                        case PlayStatus.playMemory:
                            if (self.driver.handler.paused)
                                self.playStatus = PlayStatus.toPlay; //prestalo se prehravat nahravka studenta
                            break;
                    }
                }
                //aktualizace stavu butonu
                _this.setButtonsStatus();
            }, 50);
        };
        model.prototype.isRecordedSound = function () {
            //return !this.driver.url || Utils.startsWith(this.driver.url, 'blob');
            return this.recorderSound && this.driver.url.toLowerCase() == this.recorderSound.url.toLowerCase();
        };
        return model;
    })();
    schoolCpv.model = model;
    function show(id, url, title, begPos, endPos) {
        allCpvs[id].show(url, title, begPos, endPos);
    }
    schoolCpv.show = show;
    function hide(id) {
        allCpvs[id].hide();
    }
    schoolCpv.hide = hide;
    var btn = (function () {
        function btn(id) {
            var _this = this;
            this.id = id;
            this.active = ko.observable(false);
            this.playing = ko.observable(false);
            this.disabled = ko.observable(false);
            this.iconClass = ko.computed(function () {
                var cls = "";
                switch (_this.id) {
                    case "replay":
                    case "play":
                        cls = _this.playing() ? "stop" : "play";
                        break;
                    case "record":
                        cls = _this.playing() ? "stop" : "circle";
                        break;
                }
                return "fa-" + cls;
            });
        }
        btn.prototype.text = function () {
            switch (this.id) {
                case "play": return CSLocalize('4bbab8260cf44783ade8f733a142866d', 'Listen to the original');
                case "record": return CSLocalize('e409b368170645e58cfd835473cb9561', 'Record');
                case "replay": return CSLocalize('0590834dbf264906ae88c717f81170cf', 'Check your recording');
            }
        };
        btn.prototype.click = function (s, ev) {
            var _this = this;
            if (this.disabled())
                return;
            //rec.alowTitle = CSLocalize('7da1fdbb748447bb83e9bbe135e543cc', 'Allow microphone');
            switch (this.id) {
                case "play":
                case "replay":
                    if (this.playing())
                        this.owner.driver.stop();
                    else
                        this.owner.playSound(this.id == "play");
                    break;
                case "record":
                    if (this.playing())
                        setTimeout(function () { return _this.owner.driver.recordEnd(true); }, 500);
                    else
                        this.owner.driver.recordStart({
                            toDisc: false,
                            toDiscFileUrl: null,
                            toMemoryCompleted: function (mp3Data) { return _this.owner.setRecorderSound(new SndLow.recordedSound(_this.owner.driver, mp3Data)); },
                            actHtml5SampleRate: 0,
                            isRecording: null,
                            miliseconds: null,
                            recordStarting: null,
                            toMemoryCompletedData: null,
                        });
                    break;
            }
            ev.cancelBubble = true;
            ev.stopPropagation();
            return false;
        };
        return btn;
    })();
    schoolCpv.btn = btn;
})(schoolCpv || (schoolCpv = {}));
var Pager;
(function (Pager) {
    //klik na mikrofon ve cviceni
    function callCPV(ev, url, title, begPos, endPos) {
        schoolCpv.show(schools.tExCpv, url, title, begPos, endPos);
    }
    Pager.callCPV = callCPV;
})(Pager || (Pager = {}));
//module dictLingea {
//  var tLNG = LMComLib.Langs;
// // var tRS = Admin.OKCrsReason;
//  var crsLangs: Array<LMComLib.Langs> = [tLNG.en_gb, tLNG.de_de, tLNG.fr_fr, tLNG.it_it, tLNG.sp_sp, tLNG.ru_ru];
//  export class model {
//    constructor() {
//      root = this;
//      //var rss: Array<Admin.OKCrsReason> = [tRS.no, tRS.wordsGoogle, tRS.google, tRS.wordsOK, tRS.charsOK];
//      //_.each(rss, r => this.allReasons.push({ okCrsReason: r, title: tRS[r] }))
//      dicts(entries => {
//        this.allDicts = _.map(entries, en => { return { crsLang: en.crsLang, natLang: en.natLang, title: tLNG[en.crsLang].substr(0, 2) + '-' + tLNG[en.natLang].substr(0, 2) } });
//        ko.applyBindings(this, $('body')[0]);
//      });
//    }
//    allDicts: Array<{ crsLang: LMComLib.Langs; natLang: LMComLib.Langs; title: string; }> = [];
//    //allReasons: Array<{ okCrsReason: Admin.OKCrsReason; title: string; }> = [];
//    selectedDict = ko.observable<{ crsLang: LMComLib.Langs; natLang: LMComLib.Langs; }>();
//    //selectedReason = ko.observable<{ okCrsReason: Admin.OKCrsReason }>();
//    entries = ko.observableArray<DictEntry>();
//    loadDict() {
//      if (!this.selectedDict()) { alert('Choose dict!'); return; }
//      this.entries(null);
//      Pager.ajaxGet(Pager.pathType.restServices, Admin.DictEntryCmd_Type,
//        { type: Admin.DictEntryCmdType.loadDict, crsLang: this.selectedDict().crsLang, natLang: this.selectedDict().natLang },
//        (dt: DictEntries) => {
//          _.each(dt.entries, de => {
//            de.handOkCrs = ko.observable(de.okCrs);
//            de.hands = [new handModel(de, true), new handModel(de, false)];
//            de.play = () => LMSnd.Player.playFile(Pager.basicUrl + 'RwDicts/LingeaSound/' + de.soundMaster + '.mp3', 0);
//          })
//          this.entries(dt.entries);
//        });
//    }
//    statistics() {
//      dicts(entries => {
//        this.dicts(_.map(entries, de => {
//          if (de.todoCount < 0) de.todoCount = 0;
//            return {
//            dict: '<b>' + tLNG[de.crsLang].substr(0, 2) + '-' + tLNG[de.natLang].substr(0, 2) + '</b>',
//            title: (de.allCount - de.todoCount).toString() + ' / ' + de.todoCount.toString() + ' / ' + de.allCount.toString(),
//            css: de.todoCount == 0 ? 'label-success' : (de.todoCount < de.allCount ? 'label-warning' : 'label-danger')
//          }
//          }));
//        var all = 0, todo = 0;
//        _.each(entries, de => { all += de.allCount; todo += de.todoCount; });
//        this.all(all); this.todo(todo); this.ok(all - todo);
//      });
//    }
//    dicts = ko.observableArray();
//    all = ko.observable(0);
//    ok = ko.observable(0);
//    todo = ko.observable(0);
//  }
//  function dicts(completed: (res: Array<DictEntry>) => void): void {
//    Pager.ajaxGet(Pager.pathType.restServices, Admin.DictEntryCmd_Type,
//      { type: Admin.DictEntryCmdType.statistics },
//      (dt: DictEntries) => completed(dt.entries));
//  }
//  var root: model;
//  export interface DictEntries extends Admin.DictEntryRes {
//    entries: Array<DictEntry>;
//  }
//  export interface DictEntry extends Admin.DictEntryCmd {
//    handOkCrs: KnockoutObservable<LMComLib.Langs>;
//    hands: Array<handModel>;
//    play: () => void;
//  }
//  export class handModel {
//    constructor(public de: DictEntry, public isCrs: boolean) { }
//    myLang = () => this.isCrs ? root.selectedDict().crsLang : root.selectedDict().natLang;
//    title = () => tLNG[this.myLang()].substr(0, 2).toUpperCase();
//    css = ko.computed(() => {
//      if (this.de.handOkCrs() == tLNG.no) return "btn-danger";
//      return this.de.handOkCrs() == this.myLang() ? "btn-success" : "btn-default";
//    });
//    click: (model: handModel) => void = model => {
//      Pager.ajaxGet(Pager.pathType.restServices, Admin.DictEntryCmd_Type,
//        { type: Admin.DictEntryCmdType.saveEntry, crsLang: root.selectedDict().crsLang, natLang: root.selectedDict().natLang, okCrs: this.myLang(), entryId: this.de.entryId },
//        () => this.de.handOkCrs(this.myLang()));
//    };
//    //icon = ko.computed(() => {
//    //  if (this.de.okCrsMaybe == tLNG.no || this.de.handOkCrs() != tLNG.no || this.de.okCrsMaybe != this.myLang()) return '';
//    //  return 'fa fa-check';
//    //});
//  }
//  export function init() {
//    LMSnd.Player.init($.noop);
//    new model();
//  }
//}  
//module extractWords {
//  function readFile(name: string, completed: (data: string) => void): void {
//    Pager.ajaxGet(
//      Pager.pathType.restServices,
//      Admin.CmdDsgnReadFile_Type,
//      Admin.CmdDsgnReadFile_Create(name),
//      completed)
//  }
//  function readFiles(names: Array<string>, completed: (datas: Admin.CmdDsgnResult) => void): void {
//    Pager.ajaxPost(
//      Pager.pathType.restServices,
//      Admin.CmdDsgnReadFiles_Type,
//      Admin.CmdDsgnReadFiles_Create(_.map(names, nm => basicPath + nm)),
//      completed)
//  }
//  function readFileLow(fileName: string, finish: (data: string) => void): JQueryPromise<void> {
//    var defered = $.Deferred(function () {
//      var self = this;
//      readFile(basicPath + fileName, (data: string) => { finish(data); self.resolve(); });
//    });
//    return defered.promise();
//  }
//  function writeDictWords(name: string, data: string, completed: () => void): void {
//    Pager.ajaxPost(
//      Pager.pathType.restServices,
//      Admin.CmdDsgnWriteDictWords_Type,
//      Admin.CmdDsgnWriteDictWords_Create(name, data),
//      completed)
//  }
//  var basicDir = "rew\\Web4\\";
//  var basicPath = basicDir + "Schools\\";
//  //Helper functions
//  function evalLoc(val: string): string { return "#B#E#G#" + val + "#E#N#D#"; }
//  function finishEvalLoc(val: string): string { return val.replace(/"#B#E#G#/g, "Trados.loc(\"").replace(/#E#N#D#"/g, "\")"); }
//  Logger.noLocalStorageLog = true;
//  //********************************** extractWords from courses
//  export function RunCourses(completed: () => void) {
//    Run(langCourses, completed);
//  }
//  export function RunGrafia(completed: () => void) {
//    Run(grafiaCourses, completed);
//  }
//  var delBlanksTrans = /([\n\r ]{1,}|{{.*?}})/g;
//  interface exWorking extends schools.exStatic {
//    //words: string[];
//    //blocks: string[];
//    normalized: string;
//    modId: string;
//  }
//  interface crsWorking extends schools.DictCrsWords {
//    root?: schools.root; //napr. obsah d:\LMCom\rew\Web4\Schools\EACourses\English_0_10.json
//    modIds?: string[]; //jsonId's vsech modulu z root, napr. english1_xl01_sa_shome_dhtm
//    exsWorking?: exWorking[];
//  }
//  interface extractWordsPar {
//    courses: crsWorking[];
//    resultName: string;
//  }
//  function ReadGrammarContent(par: extractWordsPar, completed: () => void) {
//  }
//  function ReadCourseContents(par: extractWordsPar, completed: () => void) {
//    var files = _.map(par.courses, crs => "eacourses\\" + crs.fileName + ".json");
//    readFiles(files, datas => {
//      for (var i = 0; i < par.courses.length; i++) par.courses[i].root = JSON.parse(datas.Data[i]);
//      completed();
//    });
//    //nacti vsechny obsahy kurzu
//    //var promises = _.compact(_.map(par.courses, crs => readFileLow("eacourses\\" + crs.fileName + ".json", data => crs.root = JSON.parse(data))));
//    //$.whenall(promises).done(completed);
//  }
//  interface modInfo { modId: string; idx1: number; fileName: string; data: string/*idx2: number;*/ }
//  var grammSpace = "grammar/";
//  function modFileName(mi: string, lang: LMComLib.Langs): string {
//    if (mi.indexOf(grammSpace) == 0) {
//      mi = mi.substr(grammSpace.length);
//      //return ["EAGrammar\\" + mi + ".json", "EAGrammar\\" + LMComLib.Langs[lang].replace("_", "-") + "\\" + mi + ".json"];
//      return "EAGrammar\\" + mi + ".json";
//    } else
//      //return ["eadata\\" + mi + ".json", "eadata\\" + LMComLib.Langs[lang].replace("_", "-") + "\\" + mi + ".json"];
//      return "eadata\\" + mi + ".json";
//  }
//  function ReadModules(courses: Array<crsWorking>, completed: () => void) {
//    var crsModIds: { crs: crsWorking; mods: modInfo[] }[] =
//      _.map(courses, crs => {
//        return { crs: crs, mods: _.map(crs.modIds, modId => { return { modId: modId, idx1: 0, data: null, fileName: modFileName(modId, crs.lang) }; }) }
//      });
//    var files = [];
//    _.each(crsModIds, cm => _.each(cm.mods, m => { files.push(m.fileName); m.idx1 = files.length - 1; }));
//    readFiles(files, datas => {
//      _.each(crsModIds, cm => {
//        cm.crs.exsWorking = []; cm.crs.exs = [];
//        _.each(cm.mods, m => {
//          var modData = datas.Data[m.idx1]; //var loc = datas.Data[m.idx2];
//          if (_.isEmpty(modData)) return;
//          var exs: exWorking[] = <any>(schools.parseAndLocalize(modData, null/*loc*/));
//          _.each(exs, e => e.modId = m.modId); //obohat cviceni o identifikaci modulu
//          cm.crs.exsWorking.pushArray(exs);
//        });
//      });
//      completed();
//    });
//  }
//  function processLang(crss: Array<crsWorking>, resultName: string, completed: () => void) {
//    ReadModules(crss, () => {
//      //obsah vsech cviceni do DIVu
//      _.each<crsWorking>(crss, crs => {
//        _.each<exWorking>(crs.exsWorking, ex => {
//          var html: string = null;
//          switch (ex.format) {
//            case schools.ExFormat.ea:
//              html = ex.html;
//              break;
//            case schools.ExFormat.rew:
//              var page: CourseModel.Page = JSON.parse(ex.html);
//              var pg = new Course.Page(page, <any>{ result: {} });
//              //exerciseInfo = page.info;
//              //exerciseInfo.url = ex.url;
//              try {
//                pg.finishLoading(() => {
//                  html = JsRenderTemplateEngine.render("c_gen", page);
//                });
//              } catch (e) {
//                html = '<h1>Error</h1>';
//              }
//              break;
//          }
//          html = '<h1>' + ex.title + '</h1>' + html;
//          html = html.replace(script, '');
//          $('#exercise').html(html);
//          ex.html = null;
//          //var crsWords: Array<string> = [];
//          ex.normalized = blocks(crs.lang, $('#exercise'));
//          //ex.blocks = _.map(blocks($('#exercise')), b => {
//          //  var ws = sentenceToWords(b, crs.lang);
//          //  crsWords.pushArray(ws);
//          //  return b + '#' + ws.join('*');
//          //});
//          //ex.words = _.uniq(crsWords);
//          crs.exs.push({ modId: ex.modId, exId: ex.url, words: null/*ex.words*/, normalized: ex.normalized });
//        });
//        delete crs.root; delete crs.modIds; delete crs.exsWorking;
//      });
//      var res: schools.DictWords = { courses: crss };
//      var data = JSON.stringify(res);
//      writeDictWords(resultName, data, completed);
//    });
//  }
//  var script = /<script(.|[\r\n])*?<\/script>/mg;
//  function Run(par: extractWordsPar, completed: () => void) {
//    ReadCourseContents(par, () => {
//      _.each<crsWorking>(par.courses, crs => crs.modIds =
//        _.flatten(_.map(crs.root.courses, (c: schools.course) => _.map(c.lessons, (l: schools.lesson) => _.map(l.modules, (m: schools.mod) => m.url))), false));
//      _.each<crsWorking>(par.courses, crs => {
//        if (!crs.root.grammar) return;
//        //pridej stranky s gramatikou, napr. <modId>grammar/english_0</modId>,<exId>english1/grammar/sec02/g04.htm</exId>
//        var gramm = _.uniq(_.map(crs.root.grammar.items, nd => grammSpace + nd.url));
//        crs.modIds.pushArray(gramm);
//      });
//      //Pro kazdy jazyk:
//      var langs = _.values(_.groupBy(par.courses, 'lang'));
//      var processSingle: () => void;
//      processSingle = () => {
//        if (langs.length == 0) completed();
//        processLang(langs.pop(), par.resultName, processSingle);
//      };
//      processSingle();
//    });
//  }
//  function blocks(crsLang: LMComLib.Langs, el: JQuery): string {
//    var res: string[] = [];
//    el.find('*:not("script")').contents().filter(function () {
//      return this.nodeType == 3;
//    }).each(function (i) {
//        var txt = $(this).text();
//        DictConnector.wordsForDesignTime(txt, crsLang, res);
//      });
//    return _.sortBy(_.uniq(res), w => w).join(' ');
//  }
//  //function sentenceToWords(sent: string, lng: LMComLib.Langs): string[] {
//  //  var words = DictConnector.sentenceToWords(sent);
//  //  words = _.map(words, word=> DictConnector.normalize(word, lng));
//  //  words = _.filter(words, s => !_.isEmpty(s));
//  //  return words;
//  //}
//  //function sentencesToWords(textNodesText: string[], lng: LMComLib.Langs): string[] {
//  //  return
//  //  _.filter( //filter: not empty words
//  //    _.flatten( //array of words
//  //      _.map(textNodesText, sent => //array of sentences
//  //        _.map(DictConnector.sentenceToWords(sent), word => //array of array of words
//  //          DictConnector.normalize(word, lng))), true), //nromalize (russian akcent), blanks etc., 
//  //    s => s != null && s != '');
//  //}
//  var langCourses: extractWordsPar = {
//    courses: [
//      //{ lang: LMComLib.Langs.en_gb, fileName: 'English_0_1', exs: [] }, 
//      { lang: LMComLib.Langs.en_gb, fileName: 'English_0_10', exs: [] },
//      { lang: LMComLib.Langs.en_gb, fileName: 'EnglishE_0_10', exs: [] },
//      { lang: LMComLib.Langs.de_de, fileName: 'German_0_5', exs: [] },
//      { lang: LMComLib.Langs.sp_sp, fileName: 'Spanish_0_6', exs: [] },
//      { lang: LMComLib.Langs.fr_fr, fileName: 'French_0_6', exs: [] },
//      { lang: LMComLib.Langs.it_it, fileName: 'Italian_0_6', exs: [] },
//      { lang: LMComLib.Langs.ru_ru, fileName: 'Russian_0_4', exs: [] },
//    ], resultName: 'CourseWords'
//  };
//  var grafiaCourses: extractWordsPar = {
//    courses: [
//      { lang: LMComLib.Langs.de_de, fileName: 'grafiadeod1_administrativ', exs: [] },
//      { lang: LMComLib.Langs.de_de, fileName: 'grafiadeod2_geschaftsverhandlungen', exs: [] },
//      { lang: LMComLib.Langs.de_de, fileName: 'grafiadeod3_hotel', exs: [] },
//      { lang: LMComLib.Langs.de_de, fileName: 'grafiadeod4_seniorenpflege', exs: [] },
//      { lang: LMComLib.Langs.de_de, fileName: 'grafiadeod5_logistik', exs: [] },
//      { lang: LMComLib.Langs.de_de, fileName: 'grafiadeod6_autoteile', exs: [] },
//      { lang: LMComLib.Langs.de_de, fileName: 'grafiadeod7_elektrotechnik', exs: [] },
//      { lang: LMComLib.Langs.de_de, fileName: 'grafiadeod8_maschinenbau', exs: [] },
//    ], resultName: 'Grafia'
//  };
//}
var schools;
(function (schools) {
    (function (persistTypes) {
        persistTypes[persistTypes["no"] = 0] = "no";
        persistTypes[persistTypes["persistNewEA"] = 1] = "persistNewEA";
        persistTypes[persistTypes["persistScormEx"] = 2] = "persistScormEx";
        persistTypes[persistTypes["persistScormLocal"] = 3] = "persistScormLocal";
        persistTypes[persistTypes["persistMemory"] = 4] = "persistMemory";
    })(schools.persistTypes || (schools.persistTypes = {}));
    var persistTypes = schools.persistTypes;
    (function (ExFormat) {
        ExFormat[ExFormat["ea"] = 0] = "ea";
        ExFormat[ExFormat["rew"] = 1] = "rew";
    })(schools.ExFormat || (schools.ExFormat = {}));
    var ExFormat = schools.ExFormat;
    (function (seeAlsoType) {
        seeAlsoType[seeAlsoType["grammar"] = 0] = "grammar";
        seeAlsoType[seeAlsoType["ex"] = 1] = "ex";
    })(schools.seeAlsoType || (schools.seeAlsoType = {}));
    var seeAlsoType = schools.seeAlsoType;
    (function (licenceResult) {
        licenceResult[licenceResult["ok"] = 0] = "ok";
        licenceResult[licenceResult["wrongDomain"] = 1] = "wrongDomain";
        licenceResult[licenceResult["demoExpired"] = 2] = "demoExpired";
        licenceResult[licenceResult["userMonthExpired"] = 3] = "userMonthExpired";
        licenceResult[licenceResult["JSCramblerError"] = 4] = "JSCramblerError";
    })(schools.licenceResult || (schools.licenceResult = {}));
    var licenceResult = schools.licenceResult;
    (function (versions) {
        versions[versions["no"] = 0] = "no";
        versions[versions["debug"] = 1] = "debug";
        versions[versions["not_minified"] = 2] = "not_minified";
        versions[versions["minified"] = 3] = "minified";
    })(schools.versions || (schools.versions = {}));
    var versions = schools.versions;
    (function (DictEntryType) {
        DictEntryType[DictEntryType["lingeaOld"] = 0] = "lingeaOld";
        DictEntryType[DictEntryType["rj"] = 1] = "rj";
        DictEntryType[DictEntryType["Wiktionary"] = 2] = "Wiktionary";
    })(schools.DictEntryType || (schools.DictEntryType = {}));
    var DictEntryType = schools.DictEntryType;
    (function (scormDriver) {
        scormDriver[scormDriver["no"] = 0] = "no";
        scormDriver[scormDriver["moodle"] = 1] = "moodle";
        scormDriver[scormDriver["edoceo"] = 2] = "edoceo";
    })(schools.scormDriver || (schools.scormDriver = {}));
    var scormDriver = schools.scormDriver;
    (function (displayModes) {
        displayModes[displayModes["normal"] = 0] = "normal";
        displayModes[displayModes["previewEx"] = 1] = "previewEx";
    })(schools.displayModes || (schools.displayModes = {}));
    var displayModes = schools.displayModes;
})(schools || (schools = {}));
/// <reference path="../jslib/js/GenLMComLib.ts" />
/// <reference path="../schools/GenSchools.ts" />
var CourseModel;
(function (CourseModel) {
    (function (IconIds) {
        IconIds[IconIds["no"] = 0] = "no";
        IconIds[IconIds["a"] = 1] = "a";
        IconIds[IconIds["b"] = 2] = "b";
        IconIds[IconIds["c"] = 3] = "c";
        IconIds[IconIds["d"] = 4] = "d";
        IconIds[IconIds["e"] = 5] = "e";
        IconIds[IconIds["f"] = 6] = "f";
    })(CourseModel.IconIds || (CourseModel.IconIds = {}));
    var IconIds = CourseModel.IconIds;
    (function (CheckItemTexts) {
        CheckItemTexts[CheckItemTexts["yesNo"] = 0] = "yesNo";
        CheckItemTexts[CheckItemTexts["trueFalse"] = 1] = "trueFalse";
        CheckItemTexts[CheckItemTexts["no"] = 2] = "no";
    })(CourseModel.CheckItemTexts || (CourseModel.CheckItemTexts = {}));
    var CheckItemTexts = CourseModel.CheckItemTexts;
    (function (inlineControlTypes) {
        inlineControlTypes[inlineControlTypes["no"] = 0] = "no";
        inlineControlTypes[inlineControlTypes["GapFill"] = 1] = "GapFill";
        inlineControlTypes[inlineControlTypes["GapFill_Correction"] = 2] = "GapFill_Correction";
        inlineControlTypes[inlineControlTypes["WordSelection"] = 3] = "WordSelection";
        inlineControlTypes[inlineControlTypes["DragTarget"] = 4] = "DragTarget";
        inlineControlTypes[inlineControlTypes["img"] = 5] = "img";
        inlineControlTypes[inlineControlTypes["TtsSound"] = 6] = "TtsSound";
    })(CourseModel.inlineControlTypes || (CourseModel.inlineControlTypes = {}));
    var inlineControlTypes = CourseModel.inlineControlTypes;
    (function (JSStatus) {
        JSStatus[JSStatus["no"] = 0] = "no";
        JSStatus[JSStatus["genericHtml"] = 1] = "genericHtml";
        JSStatus[JSStatus["ctrl"] = 2] = "ctrl";
    })(CourseModel.JSStatus || (CourseModel.JSStatus = {}));
    var JSStatus = CourseModel.JSStatus;
    (function (CourseDataFlag) {
        CourseDataFlag[CourseDataFlag["needsEval"] = 1] = "needsEval";
        CourseDataFlag[CourseDataFlag["pcCannotEvaluate"] = 2] = "pcCannotEvaluate";
        CourseDataFlag[CourseDataFlag["hasExternalAttachments"] = 4] = "hasExternalAttachments";
        CourseDataFlag[CourseDataFlag["done"] = 8] = "done";
        CourseDataFlag[CourseDataFlag["passive"] = 16] = "passive";
        CourseDataFlag[CourseDataFlag["testImpl_result"] = 32] = "testImpl_result";
        CourseDataFlag[CourseDataFlag["testImpl"] = 64] = "testImpl";
        CourseDataFlag[CourseDataFlag["testSkillImpl"] = 128] = "testSkillImpl";
        CourseDataFlag[CourseDataFlag["ex"] = 256] = "ex";
        CourseDataFlag[CourseDataFlag["skipAbleRoot"] = 512] = "skipAbleRoot";
        CourseDataFlag[CourseDataFlag["modImpl"] = 1024] = "modImpl";
        CourseDataFlag[CourseDataFlag["pretestImp"] = 2048] = "pretestImp";
        CourseDataFlag[CourseDataFlag["multiTestImpl"] = 4096] = "multiTestImpl";
        CourseDataFlag[CourseDataFlag["testEx"] = 8192] = "testEx";
        CourseDataFlag[CourseDataFlag["all"] = 16127] = "all";
        CourseDataFlag[CourseDataFlag["blPretestItem"] = 16384] = "blPretestItem";
        CourseDataFlag[CourseDataFlag["blLesson"] = 32768] = "blLesson";
        CourseDataFlag[CourseDataFlag["blTest"] = 65536] = "blTest";
        CourseDataFlag[CourseDataFlag["blPretest"] = 131072] = "blPretest";
        CourseDataFlag[CourseDataFlag["blProductHome"] = 262144] = "blProductHome";
        CourseDataFlag[CourseDataFlag["blPretestEx"] = 524288] = "blPretestEx";
    })(CourseModel.CourseDataFlag || (CourseModel.CourseDataFlag = {}));
    var CourseDataFlag = CourseModel.CourseDataFlag;
    (function (modalSize) {
        modalSize[modalSize["normal"] = 0] = "normal";
        modalSize[modalSize["small"] = 1] = "small";
        modalSize[modalSize["large"] = 2] = "large";
    })(CourseModel.modalSize || (CourseModel.modalSize = {}));
    var modalSize = CourseModel.modalSize;
    (function (tgSt) {
        tgSt[tgSt["jsCtrl"] = 1] = "jsCtrl";
        tgSt[tgSt["cdata"] = 2] = "cdata";
        tgSt[tgSt["csControl"] = 4] = "csControl";
        tgSt[tgSt["isEval"] = 8] = "isEval";
        tgSt[tgSt["isArray"] = 32] = "isArray";
        tgSt[tgSt["noJSONQuote"] = 64] = "noJSONQuote";
        tgSt[tgSt["docIgnore"] = 128] = "docIgnore";
        tgSt[tgSt["xsdIgnore"] = 256] = "xsdIgnore";
        tgSt[tgSt["xmlIgnore"] = 512] = "xmlIgnore";
        tgSt[tgSt["jsonIgnore"] = 1024] = "jsonIgnore";
        tgSt[tgSt["obsolete"] = 2048] = "obsolete";
        tgSt[tgSt["xsdHtmlEl"] = 4096] = "xsdHtmlEl";
        tgSt[tgSt["xsdNoMixed"] = 8192] = "xsdNoMixed";
        tgSt[tgSt["xsdString"] = 16384] = "xsdString";
        tgSt[tgSt["xsdNoGlobal"] = 32768] = "xsdNoGlobal";
        tgSt[tgSt["xsdIgnoreTagAttrs"] = 65536] = "xsdIgnoreTagAttrs";
        tgSt[tgSt["xsdMixed"] = 131072] = "xsdMixed";
        tgSt[tgSt["xsdRequiredAttr"] = 262144] = "xsdRequiredAttr";
        tgSt[tgSt["metaJS_browse"] = 524288] = "metaJS_browse";
    })(CourseModel.tgSt || (CourseModel.tgSt = {}));
    var tgSt = CourseModel.tgSt;
    (function (offeringDropDownMode) {
        offeringDropDownMode[offeringDropDownMode["dropDownDiscard"] = 0] = "dropDownDiscard";
        offeringDropDownMode[offeringDropDownMode["dropDownKeep"] = 1] = "dropDownKeep";
        offeringDropDownMode[offeringDropDownMode["gapFillIgnore"] = 2] = "gapFillIgnore";
    })(CourseModel.offeringDropDownMode || (CourseModel.offeringDropDownMode = {}));
    var offeringDropDownMode = CourseModel.offeringDropDownMode;
    (function (smartOfferingMode) {
        smartOfferingMode[smartOfferingMode["gapFill"] = 0] = "gapFill";
        smartOfferingMode[smartOfferingMode["dropDownDiscard"] = 1] = "dropDownDiscard";
        smartOfferingMode[smartOfferingMode["dropDownKeep"] = 2] = "dropDownKeep";
        smartOfferingMode[smartOfferingMode["gapFillPassive"] = 3] = "gapFillPassive";
    })(CourseModel.smartOfferingMode || (CourseModel.smartOfferingMode = {}));
    var smartOfferingMode = CourseModel.smartOfferingMode;
    (function (inlineElementTypes) {
        inlineElementTypes[inlineElementTypes["no"] = 0] = "no";
        inlineElementTypes[inlineElementTypes["gapFill"] = 1] = "gapFill";
        inlineElementTypes[inlineElementTypes["gapFillCorrection"] = 2] = "gapFillCorrection";
        inlineElementTypes[inlineElementTypes["wordSelection"] = 3] = "wordSelection";
        inlineElementTypes[inlineElementTypes["dropDown"] = 4] = "dropDown";
        inlineElementTypes[inlineElementTypes["img"] = 5] = "img";
        inlineElementTypes[inlineElementTypes["ttsSound"] = 6] = "ttsSound";
    })(CourseModel.inlineElementTypes || (CourseModel.inlineElementTypes = {}));
    var inlineElementTypes = CourseModel.inlineElementTypes;
    (function (smartElementTypes) {
        smartElementTypes[smartElementTypes["no"] = 0] = "no";
        smartElementTypes[smartElementTypes["gapFill"] = 1] = "gapFill";
        smartElementTypes[smartElementTypes["dropDown"] = 2] = "dropDown";
        smartElementTypes[smartElementTypes["offering"] = 3] = "offering";
        smartElementTypes[smartElementTypes["img"] = 4] = "img";
        smartElementTypes[smartElementTypes["wordSelection"] = 5] = "wordSelection";
    })(CourseModel.smartElementTypes || (CourseModel.smartElementTypes = {}));
    var smartElementTypes = CourseModel.smartElementTypes;
    (function (colors) {
        colors[colors["black"] = 0] = "black";
        colors[colors["white"] = 1] = "white";
        colors[colors["primary"] = 2] = "primary";
        colors[colors["success"] = 3] = "success";
        colors[colors["info"] = 4] = "info";
        colors[colors["warning"] = 5] = "warning";
        colors[colors["danger"] = 6] = "danger";
    })(CourseModel.colors || (CourseModel.colors = {}));
    var colors = CourseModel.colors;
    (function (listIcon) {
        listIcon[listIcon["number"] = 0] = "number";
        listIcon[listIcon["letter"] = 1] = "letter";
        listIcon[listIcon["upperLetter"] = 2] = "upperLetter";
        listIcon[listIcon["angleDoubleRight"] = 3] = "angleDoubleRight";
        listIcon[listIcon["angleRight"] = 4] = "angleRight";
        listIcon[listIcon["arrowCircleORight"] = 5] = "arrowCircleORight";
        listIcon[listIcon["arrowCircleRight"] = 6] = "arrowCircleRight";
        listIcon[listIcon["arrowRight"] = 7] = "arrowRight";
        listIcon[listIcon["caretRight"] = 8] = "caretRight";
        listIcon[listIcon["caretSquareORight"] = 9] = "caretSquareORight";
        listIcon[listIcon["chevronCircleRight"] = 10] = "chevronCircleRight";
        listIcon[listIcon["chevronRight"] = 11] = "chevronRight";
        listIcon[listIcon["handORight"] = 12] = "handORight";
        listIcon[listIcon["longArrowRight"] = 13] = "longArrowRight";
        listIcon[listIcon["play"] = 14] = "play";
        listIcon[listIcon["playCircle"] = 15] = "playCircle";
        listIcon[listIcon["playCircleO"] = 16] = "playCircleO";
        listIcon[listIcon["circleONotch"] = 17] = "circleONotch";
        listIcon[listIcon["cog"] = 18] = "cog";
        listIcon[listIcon["refresh"] = 19] = "refresh";
        listIcon[listIcon["spinner"] = 20] = "spinner";
        listIcon[listIcon["squareO"] = 21] = "squareO";
        listIcon[listIcon["bullseye"] = 22] = "bullseye";
        listIcon[listIcon["asterisk"] = 23] = "asterisk";
        listIcon[listIcon["circle"] = 24] = "circle";
        listIcon[listIcon["circleO"] = 25] = "circleO";
        listIcon[listIcon["circleThin"] = 26] = "circleThin";
        listIcon[listIcon["dotCircleO"] = 27] = "dotCircleO";
    })(CourseModel.listIcon || (CourseModel.listIcon = {}));
    var listIcon = CourseModel.listIcon;
    (function (pairingLeftWidth) {
        pairingLeftWidth[pairingLeftWidth["normal"] = 0] = "normal";
        pairingLeftWidth[pairingLeftWidth["small"] = 1] = "small";
        pairingLeftWidth[pairingLeftWidth["xsmall"] = 2] = "xsmall";
        pairingLeftWidth[pairingLeftWidth["large"] = 3] = "large";
    })(CourseModel.pairingLeftWidth || (CourseModel.pairingLeftWidth = {}));
    var pairingLeftWidth = CourseModel.pairingLeftWidth;
    (function (threeStateBool) {
        threeStateBool[threeStateBool["no"] = 0] = "no";
        threeStateBool[threeStateBool["true"] = 1] = "true";
        threeStateBool[threeStateBool["false"] = 2] = "false";
    })(CourseModel.threeStateBool || (CourseModel.threeStateBool = {}));
    var threeStateBool = CourseModel.threeStateBool;
    CourseModel.meta = { "rootTagName": "tag", "types": { "smart-pairing": { "st": 6, "anc": "smart-element-low", "props": { "random": { "st": 64 }, "left-width": { "enumType": CourseModel.pairingLeftWidth } } }, "smart-offering": { "st": 6, "anc": "smart-element-low", "props": { "words": {}, "mode": { "enumType": CourseModel.smartOfferingMode } } }, "smart-element": { "st": 6, "anc": "smart-element-low", "props": { "inline-type": { "enumType": CourseModel.smartElementTypes } } }, "smart-element-low": { "anc": "macro-template", "props": {} }, "macro-article": { "st": 6, "anc": "macro-template", "props": {} }, "macro-vocabulary": { "st": 6, "anc": "macro-template", "props": {} }, "macro-video": { "st": 6, "anc": "macro-template", "props": { "cut-url": {}, "media-url": {}, "display-style": {} } }, "macro-true-false": { "st": 6, "anc": "macro-template", "props": { "text-id": { "enumType": CourseModel.CheckItemTexts } } }, "macro-single-choices": { "st": 6, "anc": "macro-template", "props": {} }, "macro-list-word-ordering": { "st": 6, "anc": "macro-template", "props": {} }, "macro-pairing": { "st": 6, "anc": "macro-template", "props": {} }, "macro-table": { "st": 6, "anc": "macro-template", "props": { "inline-type": { "enumType": CourseModel.inlineControlTypes } } }, "macro-list": { "st": 6, "anc": "macro-template", "props": { "inline-type": { "enumType": CourseModel.inlineControlTypes } } }, "macro-icon-list": { "st": 6, "anc": "macro-template", "props": { "delim": {}, "is-striped": { "st": 64 }, "icon": { "enumType": CourseModel.listIcon }, "color": { "enumType": CourseModel.colors } } }, "tag": { "st": 384, "props": { "id": { "st": 524288 }, "style-sheet": { "st": 1024 }, "srcpos": { "st": 384 }, "items": { "st": 640 }, "temporary-macro-item": { "st": 1600 }, "class": { "st": 160 }, "class-setter": { "st": 1664 } } }, "smart-tag": { "st": 2180, "anc": "tag", "props": { "correct": { "st": 64 }, "default-inline-type": { "st": 128, "enumType": CourseModel.inlineControlTypes }, "smart-text": { "st": 1536 } } }, "node": { "st": 4228, "anc": "tag", "props": {} }, "text": { "st": 384, "anc": "tag", "props": { "title": {} } }, "error": { "st": 16512, "anc": "tag", "props": { "msg": {} } }, "header-prop": { "st": 36992, "anc": "tag", "props": {} }, "eval-control": { "st": 392, "anc": "tag", "props": { "eval-group": { "st": 524288 }, "score-weight": { "st": 524352 }, "eval-button-id": { "st": 524288 } } }, "body": { "st": 131333, "anc": "tag", "props": { "snd-page": { "st": 640, "childPropTypes": "_snd-page" }, "eval-page": { "st": 640, "childPropTypes": "_eval-page" }, "url": { "st": 384 }, "order": { "st": 64 }, "instr-title": {}, "externals": { "st": 128 }, "see-also-links": {}, "old-ea-is-passive": { "st": 192 }, "is-old-ea": { "st": 192 }, "see-also": { "st": 1664 }, "title": { "st": 1536 }, "body-style": { "st": 1536 }, "instr-body": {}, "see-also-str": { "st": 128 }, "instrs": { "st": 1536 } } }, "eval-button": { "st": 13, "anc": "eval-control", "props": { "score-as-ratio": { "st": 64 } } }, "check-low": { "st": 8, "anc": "eval-control", "props": { "correct-value": { "st": 64 }, "text-type": { "enumType": CourseModel.CheckItemTexts }, "init-value": { "enumType": CourseModel.threeStateBool }, "read-only": { "st": 64 }, "skip-evaluation": { "st": 64 } } }, "check-box": { "st": 13, "anc": "check-low", "props": {} }, "check-item": { "st": 4109, "anc": "check-low", "props": {} }, "offering": { "st": 5, "anc": "tag", "props": { "words": {}, "mode": { "st": 524288, "enumType": CourseModel.offeringDropDownMode }, "hidden": { "st": 524352 } } }, "radio-button": { "st": 4109, "anc": "eval-control", "props": { "correct-value": { "st": 64 }, "init-value": { "st": 64 }, "read-only": { "st": 64 }, "skip-evaluation": { "st": 64 } } }, "single-choice": { "st": 4, "xsdChildElements": "c0_:['radio-button']", "anc": "tag", "props": { "read-only": { "st": 64 }, "skip-evaluation": { "st": 64 }, "score-weight": { "st": 64 }, "eval-button-id": {} } }, "word-selection": { "st": 13, "anc": "eval-control", "props": { "words": {} } }, "word-multi-selection": { "st": 13, "anc": "eval-control", "props": { "words": {} } }, "word-ordering": { "st": 13, "anc": "eval-control", "props": { "correct-order": {} } }, "sentence-ordering": { "st": 13, "xsdChildElements": "c0_:['sentence-ordering-item']", "anc": "eval-control", "props": {} }, "sentence-ordering-item": { "st": 4101, "anc": "tag", "props": {} }, "edit": { "st": 392, "anc": "eval-control", "props": { "correct-value": {}, "width-group": { "st": 524288 }, "width": { "st": 524352 }, "offering-id": { "st": 524288 }, "case-sensitive": { "st": 524352 } } }, "gap-fill": { "st": 13, "anc": "edit", "props": { "hint": { "st": 524288 }, "init-value": {}, "read-only": { "st": 524352 }, "skip-evaluation": { "st": 524352 } } }, "drop-down": { "st": 13, "anc": "edit", "props": { "gap-fill-like": { "st": 524736 } } }, "pairing": { "st": 13, "xsdChildElements": "c0_:['pairing-item']", "anc": "eval-control", "props": { "left-random": { "st": 64 }, "left-width": { "enumType": CourseModel.pairingLeftWidth } } }, "pairing-item": { "st": 4101, "anc": "tag", "props": { "right": {} } }, "human-eval": { "st": 392, "anc": "eval-control", "props": { "is-passive": { "st": 64 } } }, "writing": { "st": 4109, "anc": "human-eval", "props": { "limit-recommend": { "st": 64 }, "limit-min": { "st": 64 }, "limit-max": { "st": 64 }, "number-of-rows": { "st": 64 } } }, "recording": { "st": 4109, "anc": "human-eval", "props": { "limit-recommend": { "st": 64 }, "limit-min": { "st": 64 }, "limit-max": { "st": 64 }, "record-in-dialog": { "st": 64 }, "dialog-header-id": {}, "dialog-size": { "enumType": CourseModel.modalSize }, "single-attempt": { "st": 64 } } }, "macro": { "st": 384, "anc": "tag", "props": {} }, "list": { "st": 4, "xsdChildElements": "c0_:['li']", "anc": "macro", "props": { "delim": {}, "is-striped": { "st": 64 }, "icon": { "enumType": CourseModel.listIcon }, "color": { "enumType": CourseModel.colors } } }, "list-group": { "st": 12293, "anc": "macro", "props": { "is-striped": { "st": 64 } } }, "two-column": { "st": 4101, "anc": "macro", "props": {} }, "panel": { "st": 131077, "xsdChildElements": "s:[{c01: ['header-prop']},{c0_: ['@flowContent']}]", "anc": "macro", "props": { "header": { "st": 640, "childPropTypes": "header-prop" } } }, "_eval-page": { "st": 384, "anc": "tag", "props": { "max-score": { "st": 64 }, "radio-groups-obj": { "st": 1536 }, "radio-groups": {} } }, "_eval-btn": { "st": 384, "anc": "tag", "props": { "btn-id": {} } }, "_eval-group": { "st": 384, "anc": "tag", "props": { "is-and": { "st": 64 }, "is-exchangeable": { "st": 64 }, "eval-control-ids": { "st": 32 }, "max-score": { "st": 1600 } } }, "_snd-page": { "st": 385, "anc": "tag", "props": {} }, "_snd-file-group": { "st": 385, "anc": "url-tag", "props": {} }, "_snd-group": { "st": 385, "anc": "tag", "props": { "intervals": { "st": 1536 }, "sf": { "st": 1536 }, "is-passive": { "st": 1600 } } }, "_snd-interval": { "st": 384, "anc": "tag", "props": {} }, "_snd-sent": { "st": 384, "anc": "tag", "props": { "idx": { "st": 64 }, "beg-pos": { "st": 64 }, "end-pos": { "st": 64 }, "text": {}, "actor": {} } }, "media-text": { "st": 5, "xsdChildElements": "c01: ['include-text','include-dialog','cut-text','cut-dialog']", "anc": "media-tag", "props": { "continue-media-id": { "st": 1024 }, "passive": { "st": 64 }, "is-old-to-new": { "st": 192 }, "hidden": { "st": 64 } } }, "_media-replica": { "st": 389, "anc": "tag", "props": { "icon-id": { "enumType": CourseModel.IconIds }, "dlg-left": { "st": 64 }, "actor": {} } }, "_media-sent": { "st": 131461, "anc": "tag", "props": { "idx": { "st": 64 } } }, "include": { "st": 384, "anc": "tag", "props": { "cut-url": { "st": 262144 } } }, "include-text": { "st": 98304, "xsdChildElements": "c0_:['phrase-replace']", "anc": "include", "props": {} }, "include-dialog": { "st": 98304, "xsdChildElements": "c0_:['phrase-replace']", "anc": "include", "props": {} }, "phrase-replace": { "st": 102400, "anc": "tag", "props": { "phrase-idx": { "st": 64 }, "replica-phrase-idx": {} } }, "_snd-file": { "st": 384, "anc": "url-tag", "props": { "file": { "st": 640, "childPropTypes": "include-text|include-dialog" }, "temp-replicas": { "st": 1536 } } }, "cut-dialog": { "st": 98308, "xsdChildElements": "s:[{c01:['include-text']},{c0_:['replica']}]", "anc": "_snd-file", "props": {} }, "cut-text": { "st": 98308, "xsdChildElements": "c01:[{c01:['include-dialog']},{c0_:['phrase']}]", "anc": "_snd-file", "props": {} }, "phrase": { "st": 102405, "anc": "tag", "props": { "beg-pos": { "st": 64 }, "end-pos": { "st": 64 }, "idx": { "st": 1600 }, "text": { "st": 1536 }, "actor": { "st": 1536 } } }, "replica": { "st": 98309, "xsdChildElements": "c0_:['phrase']", "anc": "tag", "props": { "actor-id": { "enumType": CourseModel.IconIds }, "actor-name": {}, "number-of-phrases": { "st": 64 } } }, "url-tag": { "anc": "tag", "props": { "media-url": { "st": 1024 }, "any-url": { "st": 1536 }, "is-video": { "st": 1600 } } }, "media-tag": { "st": 384, "anc": "url-tag", "props": { "cut-url": { "st": 1024 }, "subset": { "st": 1024 }, "share-media-id": { "st": 1024 }, "_sent-group-id": { "st": 384 }, "file": { "st": 1664, "childPropTypes": "cut-dialog|cut-text|include-text|include-dialog" } } }, "media-big-mark": { "st": 5, "xsdChildElements": "c01: ['include-text','include-dialog','cut-text','cut-dialog']", "anc": "media-tag", "props": {} }, "media-player": { "st": 5, "xsdChildElements": "c01: ['include-text','include-dialog','cut-text','cut-dialog']", "anc": "media-tag", "props": {} }, "media-video": { "st": 5, "xsdChildElements": "c01: ['include-text','include-dialog','cut-text','cut-dialog']", "anc": "media-tag", "props": {} }, "tts-sound": { "st": 133, "anc": "media-tag", "props": { "text": {} } }, "macro-template": { "st": 384, "anc": "macro", "props": { "name": {}, "cdata": {} } }, "inline-tag": { "st": 16388, "anc": "macro-template", "props": { "inline-type": { "enumType": CourseModel.inlineElementTypes } } }, "html-tag": { "st": 384, "anc": "tag", "props": { "tag-name": {}, "attrs": { "st": 384 } } }, "script": { "st": 386, "anc": "tag", "props": { "cdata": {} } }, "img": { "st": 384, "anc": "tag", "props": { "src": {} } }, "extension": { "st": 143, "anc": "eval-control", "props": { "data": {}, "cdata": {} } }, "doc-example": { "st": 133, "xsdChildElements": "s:[{c01: ['header-prop']},{c01: ['doc-descr']},{c0_: ['@flowContent']}]", "anc": "tag", "props": { "todo": { "st": 64 }, "code-listing": {}, "code-post-listing": {}, "header": { "st": 512, "childPropTypes": "header-prop" }, "descr": { "st": 512, "childPropTypes": "doc-descr" }, "eval-btn": { "st": 512, "childPropTypes": "eval-btn" } } }, "drag-target": { "st": 8, "anc": "edit", "props": {} }, "doc-named": { "st": 384, "anc": "tag", "props": { "name": {}, "summary": {}, "cdata": {} } }, "doc-type": { "st": 386, "anc": "doc-named", "props": { "is-html": { "st": 64 }, "is-ign": { "st": 64 }, "descendants-and-self": { "st": 32 }, "my-props": { "st": 32 }, "xref": {} } }, "doc-enum": { "st": 386, "anc": "doc-named", "props": { "xref": {}, "enums": { "st": 544, "childPropTypes": "doc-enum-item" } } }, "doc-enum-item": { "st": 386, "anc": "doc-named", "props": { "xref": {} } }, "doc-prop": { "st": 386, "anc": "doc-named", "props": { "owner-type": {}, "data-type": {}, "xref": {}, "is-html": { "st": 64 } } }, "doc-descr": { "st": 36992, "anc": "tag", "props": {} }, "doc-tags-meta": { "st": 384, "anc": "tag", "props": { "types": { "st": 544, "childPropTypes": "doc-type" }, "props": { "st": 544, "childPropTypes": "doc-prop" }, "enums": { "st": 544, "childPropTypes": "doc-enum" } } } } };
    CourseModel.tsmartPairing = 'smart-pairing';
    CourseModel.tsmartOffering = 'smart-offering';
    CourseModel.tsmartElement = 'smart-element';
    CourseModel.tsmartElementLow = 'smart-element-low';
    CourseModel.tmacroArticle = 'macro-article';
    CourseModel.tmacroVocabulary = 'macro-vocabulary';
    CourseModel.tmacroVideo = 'macro-video';
    CourseModel.tmacroTrueFalse = 'macro-true-false';
    CourseModel.tmacroSingleChoices = 'macro-single-choices';
    CourseModel.tmacroListWordOrdering = 'macro-list-word-ordering';
    CourseModel.tmacroPairing = 'macro-pairing';
    CourseModel.tmacroTable = 'macro-table';
    CourseModel.tmacroList = 'macro-list';
    CourseModel.tmacroIconList = 'macro-icon-list';
    CourseModel.ttag = 'tag';
    CourseModel.tsmartTag = 'smart-tag';
    CourseModel.tnode = 'node';
    CourseModel.ttext = 'text';
    CourseModel.terror = 'error';
    CourseModel.theaderProp = 'header-prop';
    CourseModel.tevalControl = 'eval-control';
    CourseModel.tbody = 'body';
    CourseModel.tevalButton = 'eval-button';
    CourseModel.tcheckLow = 'check-low';
    CourseModel.tcheckBox = 'check-box';
    CourseModel.tcheckItem = 'check-item';
    CourseModel.toffering = 'offering';
    CourseModel.tradioButton = 'radio-button';
    CourseModel.tsingleChoice = 'single-choice';
    CourseModel.twordSelection = 'word-selection';
    CourseModel.twordMultiSelection = 'word-multi-selection';
    CourseModel.twordOrdering = 'word-ordering';
    CourseModel.tsentenceOrdering = 'sentence-ordering';
    CourseModel.tsentenceOrderingItem = 'sentence-ordering-item';
    CourseModel.tedit = 'edit';
    CourseModel.tgapFill = 'gap-fill';
    CourseModel.tdropDown = 'drop-down';
    CourseModel.tpairing = 'pairing';
    CourseModel.tpairingItem = 'pairing-item';
    CourseModel.thumanEval = 'human-eval';
    CourseModel.twriting = 'writing';
    CourseModel.trecording = 'recording';
    CourseModel.tmacro = 'macro';
    CourseModel.tlist = 'list';
    CourseModel.tlistGroup = 'list-group';
    CourseModel.ttwoColumn = 'two-column';
    CourseModel.tpanel = 'panel';
    CourseModel.t_evalPage = '_eval-page';
    CourseModel.t_evalBtn = '_eval-btn';
    CourseModel.t_evalGroup = '_eval-group';
    CourseModel.t_sndPage = '_snd-page';
    CourseModel.t_sndFileGroup = '_snd-file-group';
    CourseModel.t_sndGroup = '_snd-group';
    CourseModel.t_sndInterval = '_snd-interval';
    CourseModel.t_sndSent = '_snd-sent';
    CourseModel.tmediaText = 'media-text';
    CourseModel.t_mediaReplica = '_media-replica';
    CourseModel.t_mediaSent = '_media-sent';
    CourseModel.tinclude = 'include';
    CourseModel.tincludeText = 'include-text';
    CourseModel.tincludeDialog = 'include-dialog';
    CourseModel.tphraseReplace = 'phrase-replace';
    CourseModel.t_sndFile = '_snd-file';
    CourseModel.tcutDialog = 'cut-dialog';
    CourseModel.tcutText = 'cut-text';
    CourseModel.tphrase = 'phrase';
    CourseModel.treplica = 'replica';
    CourseModel.turlTag = 'url-tag';
    CourseModel.tmediaTag = 'media-tag';
    CourseModel.tmediaBigMark = 'media-big-mark';
    CourseModel.tmediaPlayer = 'media-player';
    CourseModel.tmediaVideo = 'media-video';
    CourseModel.tttsSound = 'tts-sound';
    CourseModel.tmacroTemplate = 'macro-template';
    CourseModel.tinlineTag = 'inline-tag';
    CourseModel.thtmlTag = 'html-tag';
    CourseModel.tscript = 'script';
    CourseModel.timg = 'img';
    CourseModel.textension = 'extension';
    CourseModel.tdocExample = 'doc-example';
    CourseModel.tdragTarget = 'drag-target';
    CourseModel.tdocNamed = 'doc-named';
    CourseModel.tdocType = 'doc-type';
    CourseModel.tdocEnum = 'doc-enum';
    CourseModel.tdocEnumItem = 'doc-enum-item';
    CourseModel.tdocProp = 'doc-prop';
    CourseModel.tdocDescr = 'doc-descr';
    CourseModel.tdocTagsMeta = 'doc-tags-meta';
    CourseModel.gaffFill_normTable = {
        1040: 'A', 1072: 'a', 1042: 'B', 1074: 'b', 1045: 'E', 1077: 'e', 1050: 'K', 1082: 'k', 1052: 'M', 1084: 'm', 1053: 'H', 1085: 'h', 1054: 'O', 1086: 'o', 1056: 'P', 1088: 'p', 1057: 'C', 1089: 'c', 1058: 'T', 1090: 't', 1059: 'Y', 1091: 'y', 1061: 'X', 1093: 'x', 1105: '?', 161: '!', 160: ' ', 191: '?', 241: '?', 39: '?', 96: '?', 180: '?', 733: '"', 8216: '?', 8219: '?', 8220: '"', 8221: '"', 8222: '"', 8242: '?', 8243: '"'
    };
})(CourseModel || (CourseModel = {}));
var Course;
(function (Course) {
    var pairing = (function (_super) {
        __extends(pairing, _super);
        function pairing() {
            _super.apply(this, arguments);
            this.leftSelected = ko.observable(false);
        }
        pairing.prototype.pageCreated = function () {
            var _this = this;
            _.each(this.Items, function (it) { return it.doRegisterControl(it); });
            var cnt = 0;
            var rnd = Utils.randomizeArray(_.range(this.Items.length));
            this.randomItems = _.map(rnd, function (i) { return (_this.Items[i]); });
            _super.prototype.pageCreated.call(this);
        };
        pairing.prototype.leftWidthCls = function () { return 'left-' + CourseModel.pairingLeftWidth[this.leftWidth]; };
        pairing.prototype.actItems = function () { return this.leftRandom ? this.randomItems : this.Items; };
        pairing.prototype.initProc = function (phase, getTypeOnly, completed) {
            switch (phase) {
                case Course.initPhase.afterRender2:
                    if (!getTypeOnly) {
                        //Nastaveni sirky prave strany jako rozdilu mezi MIN sirkou pairingu a sirkou prave strany (minus 145)
                        var strings = _.map(this.Items, function (it) { return it.right; });
                        var styleHolder = this.selfElement().find('.oli-edit .teacher').first();
                        var maxWidth = Gui2.maxTextWidth(strings, styleHolder);
                        this.selfElement().find('.pairing-item .left-content').width(maxWidth + 10); //145px je sirka pomocnych casti pairingu, bez leveho a praveho obsahu: 
                    }
                    return Course.initPhaseType.sync;
            }
            return _super.prototype.initProc.call(this, phase, getTypeOnly, completed);
        };
        pairing.prototype.createResult = function (forceEval) {
            return {
                ms: 0, s: 0,
                tg: this._tg,
                flag: 0,
                Value: forceEval ? _.range(this.Items.length) : _.map(this.randomItems, function (it) { return it.selfIdx; })
            };
        };
        pairing.prototype.setScore = function () {
            var v = this.result.Value;
            var cnt = 0;
            for (var i = 0; i < v.length; i++)
                if (i == v[i])
                    cnt++;
            var sw = this.scoreWeight ? this.scoreWeight : 100 * v.length;
            this.result.ms = sw;
            this.result.s = Math.round(sw / v.length * cnt);
        };
        pairing.prototype.acceptData = function (done) {
            var _this = this;
            _super.prototype.acceptData.call(this, done);
            _.each(this.Items, function (it) {
                it.ok(_this.done());
                it.result = { ms: 0, s: 0, tg: _this._tg, flag: 0, Value: _this.result.Value[it.selfIdx].toString() };
                it.acceptData(_this.done());
            });
        };
        pairing.prototype.provideData = function () {
            if (this.done())
                return;
            this.result.Value = _.map(this.Items, function (it) { return parseInt(it.user()); });
        };
        pairing.prototype.select_left = function (it) {
            if (this.pageDone())
                return;
            this.leftSelected(true);
            _.each(this.Items, function (it) { return it.leftSelected(false); });
            it.leftSelected(true);
        };
        pairing.prototype.select_right = function (it) {
            if (this.pageDone() || !this.leftSelected())
                return;
            var leftSel = _.find(this.Items, function (it) { return it.leftSelected(); }); //levy vybrany na nastaveno leftSelected
            var itu = parseInt(it.user()); //co je nastaveno v pravem vybranem
            var rightSel = _.find(this.Items, function (it) { return it.selfIdx == itu; }); //najdi zdroj pro pravy vybrany
            //Vymena indexu
            var leftUser = leftSel.user();
            leftSel.user(rightSel.selfIdx.toString());
            it.user(leftUser);
            //spojnice
            it.ok(false);
            leftSel.ok(true);
            //pokud chybi pouze jedna spojnice, dopln ji.
            var notOk = null;
            var notOks = 0;
            _.each(this.Items, function (it) { if (it.ok())
                return; notOks++; notOk = it; });
            if (notOks == 1)
                notOk.ok(true);
            //globalni leftSelected stav
            this.leftSelected(false);
            _.each(this.Items, function (it) { return it.leftSelected(false); });
        };
        return pairing;
    })(Course.evalControlImpl);
    Course.pairing = pairing;
    var pairingItem = (function (_super) {
        __extends(pairingItem, _super);
        function pairingItem() {
            _super.apply(this, arguments);
            this.userText = ko.observable('');
            this.leftSelected = ko.observable(false);
            this.ok = ko.observable(false);
        }
        pairingItem.prototype.doRegisterControl = function (data) {
            var _this = this;
            this.selfIdx = _.indexOf(this._owner.Items, this);
            this.user.subscribe(function (val) { return _this.userText(_this._owner.Items[parseInt(val)].right); });
            this.teacherTxt = this.right;
            this.corrects = [this.selfIdx.toString()];
        };
        pairingItem.prototype.pageCreated = function () { };
        pairingItem.prototype.select_left = function () { this._owner.select_left(this); };
        pairingItem.prototype.select_right = function () { this._owner.select_right(this); };
        return pairingItem;
    })(Course.edit);
    Course.pairingItem = pairingItem;
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tpairing, pairing);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tpairingItem, pairingItem);
})(Course || (Course = {}));
var Course;
(function (Course) {
    var radioEvalImpl = (function (_super) {
        __extends(radioEvalImpl, _super);
        function radioEvalImpl(staticData) {
            _super.call(this, staticData);
        }
        return radioEvalImpl;
    })(Course.evalControlImpl);
    Course.radioEvalImpl = radioEvalImpl;
    var radioButton = (function (_super) {
        __extends(radioButton, _super);
        function radioButton(staticData) {
            _super.call(this, staticData);
            this.selected = ko.observable(false);
            this.myCss = ko.observable('');
            if (this.readOnly || this.skipEvaluation) {
                this.correctValue = this.initValue;
                this.result = this.createResult(false);
            }
        }
        radioButton.prototype.createResult = function (forceEval) { return { ms: 0, s: 0, tg: this._tg, flag: 0, isSelected: forceEval ? this.correctValue : this.initValue }; }; //inicializace objektu s vysledkem kontrolky
        radioButton.prototype.acceptData = function (done) {
            _super.prototype.acceptData.call(this, done);
            if (!done) {
                this.selected(this.result.isSelected);
                this.myCss('');
                return;
            }
            if (!!this.result.isSelected == !!this.correctValue)
                this.myCss(this.result.isSelected ? "black" : "no");
            else
                this.myCss(this.correctValue ? "red" : "strike");
        };
        radioButton.prototype.provideData = function () {
            if (this.done())
                return;
            this.result.isSelected = this.selected();
            if (this.skipEvaluation)
                this.correctValue = this.result.isSelected; //pro isSkipEvaluation je vse co se vyplni spravne
        };
        radioButton.prototype.isCorrect = function () {
            return !!this.correctValue == !!this.result.isSelected;
        };
        radioButton.prototype.click = function () {
            var _this = this;
            if (this.pageDone())
                return;
            _.each(this.myEvalGroup, function (it) { return it.selected(_this == it); });
        };
        radioButton.prototype.isReadOnly = function () { return this.readOnly; };
        radioButton.prototype.isSkipEvaluation = function () { return this.skipEvaluation; };
        return radioButton;
    })(radioEvalImpl);
    Course.radioButton = radioButton;
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tradioButton, radioButton);
    var wordSelectionLow = (function (_super) {
        __extends(wordSelectionLow, _super);
        function wordSelectionLow() {
            _super.apply(this, arguments);
        }
        wordSelectionLow.prototype.click_item = function (it) { };
        return wordSelectionLow;
    })(radioEvalImpl);
    Course.wordSelectionLow = wordSelectionLow;
    var wordSelection = (function (_super) {
        __extends(wordSelection, _super);
        function wordSelection(data) {
            var _this = this;
            _super.call(this, data);
            var words = this.words.split('|');
            this.correctValue = -1;
            for (var i = 0; i < words.length; i++)
                if (words[i].charAt(0) == '#') {
                    this.correctValue = i;
                    break;
                }
            var cnt = 0;
            //###jsonML
            this.items = _.map(words, 
            //w=> new choiceItem(<CourseModel.text>{ title: "<span class='c-nowrap'>" + w.replace(/^#/, '') + "</span>", _tg: CourseModel.ttext }, this, cnt++));
            function (w) { return new choiceItem(w.replace(/^#/, ''), _this, cnt++); });
        }
        wordSelection.prototype.createResult = function (forceEval) { return { ms: 0, s: 0, tg: this._tg, flag: 0, Value: forceEval ? this.correctValue : -1 }; }; //inicializace objektu s vysledkem kontrolky
        wordSelection.prototype.provideData = function () {
            if (this.done())
                return;
            var actItem = _.find(this.items, function (it) { return it.selected(); });
            this.result.Value = actItem == null ? -1 : actItem.selfIdx;
        };
        wordSelection.prototype.acceptData = function (done) {
            var _this = this;
            _super.prototype.acceptData.call(this, done);
            var corr = this.correctValue;
            _.each(this.items, function (it) { return it.acceptItemData(_this.done(), corr, _this.result.Value); });
        };
        wordSelection.prototype.isCorrect = function () {
            var actItem = _.find(this.items, function (it) { return it.selected(); });
            if (this.correctValue == -1)
                return !actItem;
            else
                return actItem != null && actItem.selfIdx == this.correctValue;
        };
        wordSelection.prototype.click_item = function (it) {
            if (this.pageDone())
                return;
            _.each(this.myEvalGroup || [this], function (grp) { return _.each(grp.items, function (t) {
                if (t == it)
                    t.selected(!t.selected());
                else
                    t.selected(false);
            }); });
        };
        return wordSelection;
    })(wordSelectionLow);
    Course.wordSelection = wordSelection;
    var wordMultiSelection = (function (_super) {
        __extends(wordMultiSelection, _super);
        function wordMultiSelection(data) {
            var _this = this;
            _super.call(this, data);
            var words = this.words.split('|');
            this.correctValues = [];
            for (var i = 0; i < words.length; i++)
                if (words[i].charAt(0) == '#')
                    this.correctValues.push(i);
            var cnt = 0;
            //###jsonML
            this.items = _.map(words, 
            //w=> new choiceItem(<CourseModel.text>{ title: "<span class='c-nowrap'>" + w.replace(/^#/, '') + "</span>", _tg: CourseModel.ttext }, this, cnt++));
            function (w) { return new choiceItem(w.replace(/^#/, ''), _this, cnt++); });
        }
        wordMultiSelection.prototype.createResult = function (forceEval) { return { ms: 0, s: 0, tg: this._tg, flag: 0, Values: forceEval ? this.correctValues : [] }; }; //inicializace objektu s vysledkem kontrolky
        wordMultiSelection.prototype.provideData = function () {
            var _this = this;
            if (this.done())
                return;
            this.result.Values = [];
            _.each(this.items, function (it) { if (!it.selected())
                return; _this.result.Values.push(it.selfIdx); });
        };
        wordMultiSelection.prototype.acceptData = function (done) {
            var _this = this;
            _super.prototype.acceptData.call(this, done);
            _.each(this.items, function (it) {
                var corr = _.contains(_this.correctValues, it.selfIdx) ? it.selfIdx : -1;
                var res = _.contains(_this.result.Values, it.selfIdx) ? it.selfIdx : -1;
                it.acceptItemData(_this.done(), corr, res);
            });
        };
        wordMultiSelection.prototype.isCorrect = function () {
            var union = _.union(this.correctValues, this.result.Values);
            return union.length == this.correctValues.length && union.length == this.result.Values.length;
        };
        wordMultiSelection.prototype.click_item = function (it) {
            if (this.pageDone())
                return;
            it.selected(!it.selected());
        };
        return wordMultiSelection;
    })(wordSelectionLow);
    Course.wordMultiSelection = wordMultiSelection;
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.twordSelection, wordSelection);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.twordMultiSelection, wordMultiSelection);
    var choiceItem = (function () {
        function choiceItem(content, _owner, selfIdx) {
            this.content = content;
            this._owner = _owner;
            this.selfIdx = selfIdx;
            this.selected = ko.observable(false);
            this.myCss = ko.observable('');
        }
        choiceItem.prototype.acceptItemData = function (done, correctIdx, userSelectedIdx) {
            if (!done) {
                this.selected(userSelectedIdx == this.selfIdx);
                this.myCss('');
                return;
            }
            this.selected(this.selfIdx == userSelectedIdx);
            if (correctIdx == userSelectedIdx)
                this.myCss(this.selfIdx == correctIdx ? "black" : "no");
            else
                this.myCss(this.selfIdx == correctIdx ? "red" : (this.selfIdx == userSelectedIdx ? "strike" : "no"));
        };
        choiceItem.prototype.click = function () { this._owner.click_item(this); };
        return choiceItem;
    })();
    Course.choiceItem = choiceItem;
})(Course || (Course = {}));
var Course;
(function (Course) {
    var checkItem = (function (_super) {
        __extends(checkItem, _super);
        function checkItem(data) {
            var _this = this;
            _super.call(this, data);
            this.yesClick = function () { return _this.clickLow(true); };
            this.noClick = function () { return _this.clickLow(false); };
            this.click = function () { return _this.clickLow(); };
            this.clickLow = function (isYes) {
                if (_this.yes() || _this.no()) {
                    _this.yes(!_this.yes());
                    _this.no(!_this.no());
                }
                else if (isYes === true) {
                    _this.yes(true);
                    _this.no(false);
                }
                else if (isYes === false) {
                    _this.yes(false);
                    _this.no(true);
                }
                else {
                    _this.yes(true);
                    _this.no(false);
                }
            };
            this.yes = ko.observable(false);
            this.no = ko.observable(false);
            this.yesEval = ko.observable('');
            this.noEval = ko.observable('');
            if (this.readOnly || this.skipEvaluation) {
                this.result = this.createResult(false);
            }
            if (!this.textType)
                data.textType = this.textType = CourseModel.CheckItemTexts.yesNo;
            var txt;
            switch (data.textType) {
                case CourseModel.CheckItemTexts.yesNo:
                    txt = CSLocalize('88d6dd9f77994a68a8035f5809c24703', 'Yes|No');
                    break;
                case CourseModel.CheckItemTexts.trueFalse:
                    txt = CSLocalize('7f51a49e0ad14a848362eb7282d62116', 'True|False');
                    break;
                default:
                    txt = null;
                    break;
            }
            if (txt) {
                this.textTypeAsStr = CourseModel.CheckItemTexts[data.textType].toLowerCase();
                var txts = txt.split('|');
                this.trueText = txts[0];
                this.falseText = txts[1];
            }
        }
        checkItem.prototype.createResult = function (forceEval) {
            this.done(false);
            return { ms: 0, s: 0, tg: this._tg, flag: 0, Value: forceEval ? (this.correctValue ? true : false) : undefined };
        };
        checkItem.prototype.provideData = function () {
            if (this.done())
                return;
            if (this.yes())
                this.result.Value = true;
            else if (this.no())
                this.result.Value = false;
            else
                this.result.Value = undefined;
        };
        checkItem.prototype.acceptData = function (done) {
            _super.prototype.acceptData.call(this, done);
            //this.isSkipEvaluation sdili s readonly modem stav done
            if (this.readOnly || (done && this.skipEvaluation)) {
                var val = this.readOnly ? this.initValue : this.boolTothreeState(this.result.Value);
                this.yes(val == CourseModel.threeStateBool.true);
                this.no(val == CourseModel.threeStateBool.false);
                this.yesEval(val == CourseModel.threeStateBool.true ? "black" : "no");
                this.noEval(val == CourseModel.threeStateBool.false ? "black" : "no");
                return;
            }
            if (this.done()) {
                var corrv = this.correctValue ? true : false;
                this.yesEval(this.evalStyle(true, this.result.Value === true, corrv));
                this.noEval(this.evalStyle(false, this.result.Value === false, corrv));
                this.yes(corrv);
                this.no(!corrv);
            }
            else {
                //this.isSkipEvaluation sdili s normalnim modem stav !done
                if (this.result.Value != undefined) {
                    this.yes(this.result.Value);
                    this.no(!this.result.Value);
                }
                else {
                    this.yes(this.initValue == CourseModel.threeStateBool.true);
                    this.no(this.initValue == CourseModel.threeStateBool.false);
                }
            }
        };
        checkItem.prototype.boolTothreeState = function (bool) {
            if (bool === undefined)
                return CourseModel.threeStateBool.no;
            else if (bool === true)
                return CourseModel.threeStateBool.true;
            else
                return CourseModel.threeStateBool.false;
        };
        checkItem.prototype.isCorrect = function () {
            var corrv = this.correctValue === true;
            return this.result.Value === corrv;
        };
        checkItem.prototype.isReadOnly = function () { return this.readOnly; };
        checkItem.prototype.isSkipEvaluation = function () { return this.skipEvaluation; };
        checkItem.prototype.evalStyle = function (isYesPart, partIsChecked, correctValue) {
            if (isYesPart) {
                if (partIsChecked)
                    return correctValue ? "black" : "strike";
                else
                    return correctValue ? "red" : "no";
            }
            else {
                if (partIsChecked)
                    return correctValue ? "strike" : "black";
                else
                    return correctValue ? "no" : "red";
            }
        };
        checkItem.prototype.yesNoEval = function (val) { return this.yesEval() == val || this.noEval() == val; };
        return checkItem;
    })(Course.evalControlImpl);
    Course.checkItem = checkItem;
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tcheckItem, checkItem);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tcheckBox, checkItem);
})(Course || (Course = {}));
var Course;
(function (Course) {
    //********************************************* MEDIA controls GUI
    var mediaActivable = (function (_super) {
        __extends(mediaActivable, _super);
        function mediaActivable() {
            _super.apply(this, arguments);
            this.active = ko.observable(false);
        }
        return mediaActivable;
    })(Course.tagImpl);
    Course.mediaActivable = mediaActivable;
    var mediaTagImpl = (function (_super) {
        __extends(mediaTagImpl, _super);
        function mediaTagImpl() {
            _super.apply(this, arguments);
            this.loading = ko.observable(true);
            this.playing = ko.observable(false);
        }
        mediaTagImpl.prototype.myGrp = function () { return this._myPage.sndPage.grps[this._sentGroupId]; };
        return mediaTagImpl;
    })(mediaActivable);
    Course.mediaTagImpl = mediaTagImpl;
    var mediaBigMark = (function (_super) {
        __extends(mediaBigMark, _super);
        function mediaBigMark() {
            _super.apply(this, arguments);
        }
        mediaBigMark.prototype.play = function () { if (this.loading())
            return; this._myPage.sndPage.play(this._sentGroupId, -1); };
        return mediaBigMark;
    })(mediaTagImpl);
    Course.mediaBigMark = mediaBigMark;
    //ozvuceny text nebo dialog
    var mediaText = (function (_super) {
        __extends(mediaText, _super);
        function mediaText(data) {
            if (!data.passive)
                data.passive = false;
            if (!data.hidden)
                data.hidden = false;
            //if (!data.inline) data.inline = false;
            _super.call(this, data);
            if (this.passive)
                this.loading(false);
        }
        return mediaText;
    })(mediaTagImpl);
    Course.mediaText = mediaText;
    //video, vytvari driver na prehravani
    var mediaVideo = (function (_super) {
        __extends(mediaVideo, _super);
        function mediaVideo() {
            _super.apply(this, arguments);
            this.ratioClass = ko.observable('');
        }
        return mediaVideo;
    })(mediaTagImpl);
    Course.mediaVideo = mediaVideo;
    var mediaReplica = (function (_super) {
        __extends(mediaReplica, _super);
        function mediaReplica() {
            _super.apply(this, arguments);
        }
        mediaReplica.prototype.css = function () { return (_.isString(this.iconId) ? (this.iconId) : CourseModel.IconIds[this.iconId]) + " " + (this.dlgLeft ? "dlg-left" : "dlg-right"); };
        return mediaReplica;
    })(mediaActivable);
    Course.mediaReplica = mediaReplica;
    var mediaSent = (function (_super) {
        __extends(mediaSent, _super);
        function mediaSent() {
            _super.apply(this, arguments);
        }
        mediaSent.prototype.myText = function () { return (this._owner._tg == CourseModel.t_mediaReplica ? this._owner._owner : this._owner); };
        mediaSent.prototype.pageCreated = function () {
            _super.prototype.pageCreated.call(this);
            this.mySent = this._myPage.sndPage.sents[this.idx];
            if (!this.mySent)
                return; //pro passivni mediaText
            this.mySent.myMediaSents.push(this); //provazani media - snd sentence
            if (!this.Items || this.Items.length == 0)
                this.Items = [(this.mySent.text)]; //naplneni obsahu mediaSent
        };
        mediaSent.prototype.play = function () { if (this.myText().loading() || this.myText().passive)
            return; var grp = this.mySent._owner._owner; grp._owner._owner.play(grp.id, this.mySent.begPos); }; //play
        return mediaSent;
    })(mediaActivable);
    Course.mediaSent = mediaSent;
    //********************************************* SND HELPER OBJECTS
    var sndFileGroupImpl = (function (_super) {
        __extends(sndFileGroupImpl, _super);
        function sndFileGroupImpl(data) {
            _super.call(this, data);
            this.medieUrlAdjusted = false;
            if (!this.mediaUrl)
                return;
            var parts = this.mediaUrl.split('@');
            this.mediaUrl = parts[0];
            if (parts.length > 1)
                this.videoFormat = parts[1];
        }
        //allUrl() { return this.mediaUrl; }// this.audioUrl ? this.audioUrl : this.videoUrl; }
        sndFileGroupImpl.prototype.isVideo = function () { return this.videoFormat; };
        //vytvoreni html5 nebo SL driveru a naladovani media souboru
        sndFileGroupImpl.prototype.initProc = function (phase, getTypeOnly, completed) {
            var _this = this;
            switch (phase) {
                case Course.initPhase.afterRender:
                    if (!getTypeOnly) {
                        if (this.isVideo()) {
                            var allVids = (_.map(this.Items, function (gr) { return _.find(gr.myMediaTags, function (t) { return t._tg == CourseModel.tmediaVideo; }); }));
                            var vid = allVids[0];
                            SndLow.createDriver(true, vid.id, '#' + vid.id, null, false, function (dr) {
                                var grp = vid.myGrp();
                                grp._player = dr;
                                _this.adjustMediaUrl(dr); //spocti mediaUrl, videoRatio
                                _.each(allVids, function (v) { return v.ratioClass('embed-responsive-' + _this.videoRatio); }); //nastav velikost videa na strance
                                _this.driverLoaded(dr, function () {
                                    _.each(_.rest(allVids), function (subVid) { return SndLow.createDriver(true, subVid.id, '#' + subVid.id, null, false, function (subDr) {
                                        var subGrp = subVid.myGrp();
                                        subGrp._player = subDr;
                                        subDr.openPlay(_this.mediaUrl, -1, 0);
                                    }); });
                                });
                                completed();
                            });
                        }
                        else
                            SndLow.createDriver(false, this.Items[0].id, null, 'cls-audio-unvisible', false, function (dr) { _this.player = dr; completed(); _this.adjustMediaUrl(dr); _this.driverLoaded(dr); });
                    }
                    return Course.initPhaseType.async;
            }
            return _super.prototype.initProc.call(this, phase, getTypeOnly, completed);
        };
        sndFileGroupImpl.prototype.driverLoaded = function (dr, completed) {
            var _this = this;
            if (completed === void 0) { completed = null; }
            //return; //ladeni loading
            dr.openPlay(this.mediaUrl, -1, 0).done(function () {
                _this.duration = dr.handler.duration;
                _.each(_this.Items, function (grp) {
                    //dosad duration do single sentence grupy (majici endPos=-1)
                    if (grp.withoutCut)
                        grp.Items[0].endPos = grp.Items[0].Items[0].endPos = _this.duration * 1000;
                    grp.loading = false;
                    _.each(grp.myMediaTags, function (t) { return t.loading(false); });
                });
                if (completed)
                    completed();
            });
        };
        sndFileGroupImpl.prototype.adjustMediaUrl = function (dr) {
            if (this.medieUrlAdjusted)
                return;
            this.medieUrlAdjusted = true;
            var start = ((cfg.baseTagUrl ? cfg.baseTagUrl : Pager.basicDir) + this.mediaUrl).toLowerCase();
            //*** audio url
            if (!this.isVideo()) {
                this.mediaUrl = start;
                return;
            }
            //*** video url
            //potrebna extension
            var neededEx;
            switch (dr.type) {
                case LMComLib.SoundPlayerType.SL:
                    neededEx = 'mp4';
                    break;
                case LMComLib.SoundPlayerType.HTML5:
                    if (SndLow.html5_CanPlay(SndLow.media.video_mp4))
                        neededEx = 'mp4';
                    break;
                    if (SndLow.html5_CanPlay(SndLow.media.video_webm))
                        neededEx = 'webm';
                    break;
                    debugger;
                    throw 'Can play neither mp4 nor webm';
                default:
                    debugger;
                    throw 'missing driver';
            }
            //dostupne extensions x size
            var parts = this.videoFormat.split(':');
            this.videoRatio = parts[0];
            parts = parts[1].split('|');
            var sizeExt = [];
            _.each(parts, function (p) {
                var pparts = p.split('-');
                var availableExts = pparts[1].split(',');
                var ext = _.find(availableExts, function (e) { return Utils.endsWith(e, neededEx); });
                if (!ext)
                    return;
                sizeExt.push({ ext: ext, limit: pparts[0] == '*' ? 100000 : parseInt(pparts[0]) });
                return true;
            });
            if (sizeExt.length == 0) {
                debugger;
                throw 'cannot find extension for ext=' + neededEx;
            }
            //najdi optimalni extension dle limitu
            var docWidth = Math.min(10000, $(document).width());
            sizeExt = _.sortBy(sizeExt, function (s) { return s.limit; });
            var res = _.find(sizeExt, function (se) { return docWidth <= se.limit; });
            if (!res)
                res = sizeExt[sizeExt.length - 1];
            this.mediaUrl = start + '.' + res.ext;
        };
        return sndFileGroupImpl;
    })(Course.tagImpl);
    Course.sndFileGroupImpl = sndFileGroupImpl;
    var sndGroupImpl = (function (_super) {
        __extends(sndGroupImpl, _super);
        function sndGroupImpl() {
            _super.apply(this, arguments);
            this.loading = true;
            //notifikace o zmene pozice nebo aktualni sentence
            this.playProgress = ko.observable(0);
            this.actSent = ko.observable(null);
        }
        sndGroupImpl.prototype.player = function () { return this._player ? this._player : this._owner.player; };
        sndGroupImpl.prototype.jsonMLParsed = function () {
            _super.prototype.jsonMLParsed.call(this);
            //jedna grupa, interval i sentence s endPos==-1. Dosazeno v ObjectModel\Model\CourseSchemaDOM.cs, mediaTag.Generate
            this.withoutCut = this.Items.length == 1 && this.Items[0].Items.length == 1 && this.Items[0].Items[0].endPos == -1;
        };
        sndGroupImpl.prototype.pageCreated = function () {
            var _this = this;
            _super.prototype.pageCreated.call(this);
            this.myMediaTags = _.filter(this._owner._owner.allMediaTags, function (m) { return m._sentGroupId == _this.id; });
        };
        return sndGroupImpl;
    })(Course.tagImpl);
    Course.sndGroupImpl = sndGroupImpl;
    var sndIntervalImpl = (function (_super) {
        __extends(sndIntervalImpl, _super);
        function sndIntervalImpl() {
            _super.apply(this, arguments);
        }
        sndIntervalImpl.prototype.jsonMLParsed = function () {
            _super.prototype.jsonMLParsed.call(this);
            this.begPos = this.Items[0].begPos;
            this.endPos = this.Items[this.Items.length - 1].endPos;
        };
        return sndIntervalImpl;
    })(Course.tagImpl);
    Course.sndIntervalImpl = sndIntervalImpl;
    var sndSentImpl = (function (_super) {
        __extends(sndSentImpl, _super);
        function sndSentImpl() {
            _super.apply(this, arguments);
            this.myMediaSents = [];
        }
        return sndSentImpl;
    })(Course.tagImpl);
    Course.sndSentImpl = sndSentImpl;
    var writingImpl = (function (_super) {
        __extends(writingImpl, _super);
        function writingImpl(staticData) {
            _super.call(this, staticData);
            this.textInput = ko.observable();
            //setScore(): void {
            //  if ((this.result.flag & CourseModel.CourseDataFlag.needsEval) == 0 && (this.result.flag & CourseModel.CourseDataFlag.pcCannotEvaluate) != 0) {
            //    this.result.ms = this.scoreWeight;
            //    this.result.s = Math.round(this.result.hPercent);
            //    return;
            //  }
            //  var c = this.limitMin && (this.result.words >= this.limitMin);
            //  //Oprava 9.9.2015 kvuli Blended. 
            //  //this.result.ms = this.scoreWeight;
            //  //this.result.s = c ? this.scoreWeight : 0;
            //  if (c) {
            //    this.result.flag |= CourseModel.CourseDataFlag.needsEval | CourseModel.CourseDataFlag.pcCannotEvaluate;
            //    this.result.ms = this.result.s = 0;
            //  } else {
            //    this.result.flag &= ~(CourseModel.CourseDataFlag.needsEval | CourseModel.CourseDataFlag.pcCannotEvaluate) & CourseModel.CourseDataFlag.all;
            //    this.result.ms = this.scoreWeight; this.result.s = 0;
            //  }
            //  //this.result.flag = !c ? 0 : CourseModel.CourseDataFlag.pcCannotEvaluate | CourseModel.CourseDataFlag.needsEval;
            //}
            this.progressBarValue = ko.observable(0);
            this.progressBarFrom = ko.observable(0);
            this.progressText = ko.observable('');
            this.progressBarLimetExceeded = ko.observable(false);
            this.isDone = ko.observable(false);
            if (!this.limitMin)
                this.limitMin = 0;
            if (!this.limitMax)
                this.limitMax = 0;
            if (!this.limitRecommend)
                this.limitRecommend = 0;
            if (!this.numberOfRows)
                this.numberOfRows = 5;
            if (this.limitRecommend < this.limitMin)
                this.limitRecommend = this.limitMin;
            this.progressBarFrom(!this.limitRecommend ? 0 : (!this.limitMax ? 100 : this.limitRecommend * 100 / this.limitMax));
            var self = this;
            this.textInput.subscribe(function (value) {
                var actMWords = _.filter(DictConnector.startSplitWord(value), function (w) { return !_.isEmpty(w.trim()); }).length;
                var words = Math.max(self.limitMin, self.limitMax);
                if (!words)
                    words = 100;
                var txt = CSLocalize('b8c48a0294c149fabcf83d3098d0b7bd', 'written') + ' ' + Math.round(actMWords) + ' ' + CSLocalize('0ed651b15e15485bb16b9a8f6eba61eb', 'words');
                if (self.limitRecommend > 0 && self.limitMax > 0)
                    txt += ' (' + CSLocalize('816063b2c5e248e98d782e6c72ccb0a7', 'minimum') + ' ' + self.limitRecommend.toString() + ', ' + CSLocalize('c33d47b0e8714300b2a0bbebb5dcc0c5', 'maximum') + ' ' + self.limitMax.toString() + ' ' + CSLocalize('876f5ad503044c2a988f59852eedbe03', 'words') + ')';
                else if (self.limitRecommend > 0)
                    txt += ' (' + CSLocalize('6cfd3dde69134155b12a5613a2bd5e90', 'minimum') + ' ' + self.limitRecommend.toString() + ' ' + CSLocalize('1eec4e5b539348bca19de5d8849b8356', 'words') + ')';
                else if (self.limitMax > 0)
                    txt += ' (' + CSLocalize('00c41ba93408472792afc9af724256eb', 'maximum') + ' ' + self.limitMax.toString() + ' ' + CSLocalize('acc174b843a1481b8a0dea1acee2f35f', 'words') + ')';
                self.progressText(txt);
                self.progressBarLimetExceeded(self.limitMax && actMWords > self.limitMax);
                if (!self.progressBarLimetExceeded() && actMWords > words)
                    self.progressBarFrom(0);
                self.progressBarValue((actMWords > words ? actMWords % words : actMWords) / words * 100);
                self.result.text = value;
                self.result.words = actMWords;
            });
        }
        writingImpl.prototype.createResult = function (forceEval) { this.done(false); return { ms: 0, s: 0, tg: this._tg, flag: CourseModel.CourseDataFlag.needsEval | CourseModel.CourseDataFlag.pcCannotEvaluate, text: null, words: forceEval ? (this.limitMin ? this.limitMin : 0) : 0, hPercent: -1, hEmail: null, hDate: 0, hLmcomId: 0, hLevel: this.acTestLevel(), hRecommendMin: this.limitRecommend, hMax: this.limitMax, hMin: this.limitMin }; };
        writingImpl.prototype.provideData = function () {
            //this.result.text = this.textInput();
            //this.result.humanPercent = this.human();
            //this.result.words = 
        };
        writingImpl.prototype.acceptData = function (done) {
            _super.prototype.acceptData.call(this, done);
            this.textInput(this.result.text ? this.result.text : '');
            this.human(this.result.hPercent < 0 ? '' : this.result.hPercent.toString());
            var tostr = this.limitMax ? ' - ' + this.limitMax.toString() : '';
            this.humanHelpTxt(this.limitRecommend ? this.limitRecommend.toString() + tostr + ' / ' + this.result.words.toString() : '');
            this.humanLevel(this.result.hLevel);
            this.isDone(this.done());
        };
        writingImpl.prototype.isKBeforeHumanEval = function () { return this.limitMin && (this.result.words >= this.limitMin); };
        writingImpl.prototype.initProc = function (phase, getTypeOnly, completed) {
            switch (phase) {
                case Course.initPhase.afterRender:
                    if (!getTypeOnly) {
                        var txt = $('#' + this.id).find('textarea');
                        txt.autosize();
                        this.adjustEvalForm();
                    }
                    return Course.initPhaseType.sync;
            }
            return _super.prototype.initProc.call(this, phase, getTypeOnly, completed);
        };
        return writingImpl;
    })(Course.humanEvalControlImpl);
    Course.writingImpl = writingImpl;
    var audioCaptureImpl = (function (_super) {
        __extends(audioCaptureImpl, _super);
        function audioCaptureImpl(staticData) {
            var _this = this;
            _super.call(this, staticData);
            //modal dialog
            this.modalDialogSizeCss = function () { switch (_this.dialogSize) {
                case CourseModel.modalSize.large: return 'modal-lg';
                case CourseModel.modalSize.small: return 'modal-sm';
                default: return '';
            } };
            this.progressBarFrom = ko.observable(0); //hodnota minimalniho casu
            this.progressText = ko.observable(''); //text v baru
            this.progressBarLimetExceeded = ko.observable(false); //pro audioCapture nenastane - zobrazeni cervene pri prekroceni hodnoty
            this.allDisabled = ko.observable(true);
            //stavove info
            this.saveRecordingDisabled = ko.observable(false);
            this.recording = ko.observable(false);
            this.miliseconds = ko.observable(0);
            this.playing = ko.observable(false);
            this.isRecorded = ko.observable(false);
            this.isDone = ko.observable(false);
            this.blendedCallbackMax = 0;
            if (!this.singleAttempt)
                this.singleAttempt = false;
            if (!this.limitMin)
                this.limitMin = 0;
            if (!this.limitMax)
                this.limitMax = 0;
            if (this.limitMax && this.limitMax < this.limitMin)
                this.limitMax = this.limitMin;
            if (!this.limitRecommend)
                this.limitRecommend = 0;
            if (this.limitMin && this.limitRecommend < this.limitMin)
                this.limitRecommend = this.limitMin;
            //DEBUG
            //this.speakSecondsFrom = 10;
            //this.speakSecondsTo = 15;
            this.iconClass = ko.computed(function () { return "fa-" + (_this.recording() ? 'stop' : 'circle'); });
            this.progressBarFrom(!this.limitRecommend ? 0 : (!this.limitMax ? 100 : this.limitRecommend * 100 / this.limitMax));
            this.progressBarValue = ko.computed(function () {
                if (!_this.recording())
                    return 0; //po this.driver.recordEnd(true) nize muze jeste prijit progressBarValue, coz vadi.
                var actMsecs = _this.miliseconds();
                //vyprseni casu eTestMe sekce behem nahravani -> uloz vysledky a uzavri dialog
                if ((!_this.limitMin || actMsecs >= _this.limitMin * 1000) && testMe.notify && testMe.notify.active() && testMe.notify.remaindSeconds <= 3) {
                    if (_this.modalDialog)
                        _this.modalDialog.modal('hide');
                    _this.driver.recordEnd(true);
                    return 100;
                }
                _this.saveRecordingDisabled(_this.limitMin && actMsecs < _this.limitMin * 1000); //neni dosaeno speakSecondsFrom => disabled Save recording button
                if (_this.limitMax && actMsecs >= _this.limitMax * 1000) {
                    if (_this.modalDialog)
                        _this.modalDialog.modal('hide');
                    _this.driver.recordEnd(true);
                    anim.alert().show(CSLocalize('9259ce32c3a14bb29b657b9430be2f83', 'Maximum time limit reached. Your recording was finished and saved.'), $.noop, function () { return anim.alert().isCancelVisible(false); });
                    return 100;
                }
                var msecs = Math.max(_this.limitMin, _this.limitMax) * 1000;
                if (!msecs)
                    msecs = 60000;
                var txt = CSLocalize('94708246af584ffdacf8dd4c8c4521c8', 'recorded') + ' ' + Utils.formatTimeSpan(actMsecs / 1000);
                if (_this.limitRecommend > 0 && _this.limitMax > 0)
                    txt += ' (' + CSLocalize('23aacf6c308d4ffa95fa6f9cad88285d', 'recommended') + ' ' + Utils.formatTimeSpan(_this.limitRecommend) + ' - ' + Utils.formatTimeSpan(_this.limitMax) + ')';
                else if (_this.limitRecommend > 0)
                    txt += ' (min ' + Utils.formatTimeSpan(_this.limitRecommend) + ')';
                else if (_this.limitMax > 0)
                    txt += ' (max ' + Utils.formatTimeSpan(_this.limitMax) + ')';
                _this.progressText(txt);
                if (actMsecs > msecs)
                    _this.progressBarFrom(0);
                return (actMsecs > msecs ? actMsecs % msecs : actMsecs) / msecs * 100;
            });
        }
        audioCaptureImpl.prototype.initProc = function (phase, getTypeOnly, completed) {
            var _this = this;
            switch (phase) {
                case Course.initPhase.afterRender:
                    if (!getTypeOnly) {
                        if (this.recordInDialog) {
                            this.modalDialog = $('#modal-' + this.id);
                            this.modalContent = this.modalDialog.find('.modal-header');
                            this.modalDialog.on('hide.bs.modal', function () {
                                console.log('audioCaptureImpl: hide.bs.modal');
                                anim.onModalHide(_this.modalDialog);
                                SndLow.Stop(null);
                                delete audioCaptureImpl.activeAudioCapture;
                            }).on('show.bs.modal', function () {
                                console.log('audioCaptureImpl: show.bs.modal');
                                anim.onModalShow(_this.modalDialog);
                                audioCaptureImpl.activeAudioCapture = _this;
                            });
                        }
                        if (this.driver) {
                            completed();
                            return;
                        }
                        SndLow.getGlobalMedia().adjustGlobalDriver(true, function (dr, disabled) {
                            _this.driver = dr;
                            _this.allDisabled(disabled);
                            completed();
                        });
                        this.adjustEvalForm();
                    }
                    return Course.initPhaseType.async;
            }
            return _super.prototype.initProc.call(this, phase, getTypeOnly, completed);
        };
        audioCaptureImpl.saveAudioAndHideModal = function (completed) {
            var act = audioCaptureImpl.activeAudioCapture;
            if (!act) {
                completed();
                return;
            }
            act.driver.recordEnd(true);
            console.log('audioCaptureImpl: modalAudioDriver.recordEnd');
            setTimeout(completed, 500);
        };
        //Eval control
        audioCaptureImpl.prototype.createResult = function (forceEval) {
            this.done(false);
            return {
                ms: 0, s: 0, tg: this._tg, flag: 0,
                audioUrl: createMediaUrl(this.id),
                recordedMilisecs: forceEval ? (this.limitMin ? this.limitMin * 1000 : 0) : 0,
                hPercent: -1, hEmail: null, hDate: 0, hLevel: this.acTestLevel(), hLmcomId: 0, hFrom: this.limitMin, hTo: this.limitMax, hRecommendFrom: this.limitRecommend
            };
        };
        audioCaptureImpl.prototype.provideData = function () {
        };
        audioCaptureImpl.prototype.acceptData = function (done) {
            _super.prototype.acceptData.call(this, done);
            this.isRecorded(this.isRecordLengthCorrect());
            //Aktivni nahravatko:
            var done = this.done();
            if (this.blended) {
                this.isDone(this.blended.lectorMode || (this.blended.isTest && done)); //pro blended je stale mozne nahravat jen pro lekci nebo nehotovy test
            }
            else
                this.isDone(done && !this.isPassive); //stale je mozne nahravat pro pasivni RECORD kontrolku
            this.human(this.result.hPercent < 0 ? '' : this.result.hPercent.toString());
            var tostr = this.limitMax ? ' - ' + Utils.formatTimeSpan(this.limitMax) : '';
            this.humanHelpTxt(this.limitRecommend ? Utils.formatTimeSpan(this.limitRecommend) + tostr + ' / ' + Utils.formatTimeSpan(Math.round(this.result.recordedMilisecs / 1000)) : '');
            this.humanLevel(this.result.hLevel);
            //CourseModel.CourseDataFlag.needsEval | CourseModel.CourseDataFlag.pcCannotEvaluate
        };
        audioCaptureImpl.prototype.isKBeforeHumanEval = function () { return this.isRecordLengthCorrect(); };
        //setScore(): void {
        //  if ((this.result.flag & CourseModel.CourseDataFlag.needsEval) == 0 && (this.result.flag & CourseModel.CourseDataFlag.pcCannotEvaluate) != 0) {
        //    this.result.ms = this.scoreWeight;
        //    this.result.s = Math.round(this.result.hPercent);
        //    return;
        //  }
        //  var c = this.isRecordLengthCorrect();
        //  //Oprava 9.9.2015 kvuli Blended. 
        //  //this.result.ms = this.scoreWeight;
        //  //this.result.s = c ? this.scoreWeight : 0;
        //  if (c) {
        //    this.result.flag |= CourseModel.CourseDataFlag.needsEval | CourseModel.CourseDataFlag.pcCannotEvaluate | CourseModel.CourseDataFlag.hasExternalAttachments;
        //    this.result.ms = this.result.s = 0;
        //  } else {
        //    this.result.flag &= ~(CourseModel.CourseDataFlag.needsEval | CourseModel.CourseDataFlag.pcCannotEvaluate | CourseModel.CourseDataFlag.hasExternalAttachments) & CourseModel.CourseDataFlag.all;
        //    this.result.ms = this.scoreWeight; this.result.s = 0;
        //  }
        //}
        audioCaptureImpl.prototype.isRecordLengthCorrect = function () { return this.result.recordedMilisecs > 0 && (!this.limitMin || (this.result.recordedMilisecs >= this.limitMin * 1000)); }; //pro 0 x 1 score
        //isHumanEvalMode(): boolean {
        //  if (!this._myPage.blendedPageCallback) return super.isHumanEvalMode();
        //  return this._myPage.blendedPageCallback.isHumanEvalMode();
        //}
        audioCaptureImpl.prototype.setRecorderSound = function (recorderSound) {
            this.driver.openFile(null); //reset driveru
            if (this.recorderSound)
                this.recorderSound.close();
            this.recorderSound = recorderSound;
            //uspesne ukonceni nahravani
            this.result.recordedMilisecs = this.recorderSound ? this.miliseconds() : 0;
            var c = this.isRecordLengthCorrect();
            if (!c)
                this.result.recordedMilisecs = 0;
            this.isRecorded(c);
            //vyjimka pro tuto kontrolku: save stavu cviceni
            //if (!cfg.noAngularjsApp) return;
            //this.doProvideData();
            //this._myPage.result.userPending = true;
            //CourseMeta.lib.saveProduct($.noop);
            //angularJS
            if (this.blended)
                this.blended.recorder.onRecorder(this._myPage, this.result.recordedMilisecs);
            //var us = <blended.IPersistNodeItem<blended.IExShort>>(this._myPage.result.userData['']);
            //us.modified = true;
            //if (!us.short.sumRecord) us.short.sumRecord = 0;
            //if (this.result.recordedMilisecs) us.short.sumRecord += Math.round(this.result.recordedMilisecs / 1000);
        };
        audioCaptureImpl.prototype.play = function () {
            var _this = this;
            var wasPaused = this.driver.handler.paused;
            SndLow.Stop(null);
            this.playing(false);
            if (!wasPaused)
                return;
            var url = this.recorderSound ? this.recorderSound.url : ((cfg.baseTagUrl ? cfg.baseTagUrl : Pager.basicDir) + this.result.audioUrl).toLowerCase();
            this.blendedCallbackMax = 0;
            this.driver.play(url + '?stamp=' + (audioCaptureImpl.playCnt++).toString(), 0, function (msec) {
                if (msec > 0) {
                    //console.log(msec.toString());
                    _this.blendedCallbackMax = Math.max(_this.blendedCallbackMax, msec);
                }
                else {
                    if (_this.blended)
                        _this.blended.recorder.onPlayRecorder(_this._myPage, _this.blendedCallbackMax);
                }
                _this.playing(msec >= 0);
            });
        };
        audioCaptureImpl.prototype.stopRecording = function () {
            var _this = this;
            setTimeout(function () { return _this.driver.recordEnd(true); }, 500);
        };
        audioCaptureImpl.prototype.record = function () {
            var _this = this;
            var toDiscUrl = this.result.audioUrl;
            if (this.recording())
                this.driver.recordEnd(true);
            else {
                this.miliseconds(0);
                SndLow.Stop(null);
                this.driver.recordStart({
                    toDisc: true,
                    toDiscFileUrl: this.result.audioUrl,
                    toMemoryCompleted: function (mp3Data) {
                        if (_this.modalDialog)
                            _this.modalDialog.modal('hide');
                        _this.setRecorderSound(new SndLow.recordedSound(_this.driver, !toDiscUrl ? mp3Data : Pager.basicDir + toDiscUrl));
                    },
                    actHtml5SampleRate: 0,
                    isRecording: this.recording,
                    miliseconds: this.miliseconds,
                    recordStarting: function () {
                        if (!_this.recordInDialog)
                            return;
                        _this.saveRecordingDisabled(_this.limitMin > 0);
                        if (_this.dialogHeaderId) {
                            _this.modalContent.empty();
                            _this.modalContent.append($('#' + _this.dialogHeaderId).clone());
                        }
                        //this.modalDialog.modal({ backdrop: 'static', keyboard: true });
                        _this.modalDialog.modal('show');
                    },
                    toMemoryCompletedData: null,
                });
            }
        };
        audioCaptureImpl.playCnt = 0;
        return audioCaptureImpl;
    })(Course.humanEvalControlImpl);
    Course.audioCaptureImpl = audioCaptureImpl;
    function createMediaUrl(id) {
        var fn = LMStatus.sessionId.toString() + '-' + new Date().getTime() + '-' + id;
        var hash = Utils.Hash(fn) & 0x0000ffff;
        var part1 = hash >> 8;
        var part2 = hash & 0x000000ff;
        var res = urlBasicPath + part1.toString() + '/' + part2.toString() + '/' + fn + '.mp3';
        return res;
    }
    Course.createMediaUrl = createMediaUrl;
    var urlBasicPath = '/media/';
    //********************************************* SND PAGE
    (function (progressType) {
        progressType[progressType["progress"] = 0] = "progress";
        progressType[progressType["done"] = 1] = "done";
        progressType[progressType["always"] = 2] = "always";
    })(Course.progressType || (Course.progressType = {}));
    var progressType = Course.progressType;
    //sound informace pro jednu stranku
    var sndPageImpl = (function (_super) {
        __extends(sndPageImpl, _super);
        function sndPageImpl() {
            _super.apply(this, arguments);
            this.blendedCallbackMax = 0;
            //***** ACTIVE management
            this.actSent = null; //aktualni veta
        }
        //constructor(data: CourseModel.tag) { super(data); bindClick(); }
        sndPageImpl.prototype.jsonMLParsed = function () {
            var _this = this;
            _super.prototype.jsonMLParsed.call(this);
            this.grps = {};
            this.sents = {};
            if (!self)
                return;
            _.each(this.Items, function (fgrp) { return _.each(fgrp.Items, function (grp) {
                _this.grps[grp.id] = grp;
                _.each(grp.Items, function (interv) { return _.each(interv.Items, function (sent) { return _this.sents[sent.idx] = sent; }); });
            }); });
        };
        sndPageImpl.prototype.pageCreated = function () {
            _super.prototype.pageCreated.call(this);
            bindClick();
        };
        sndPageImpl.prototype.leave = function () {
            unbindClick();
        };
        //***** PLAY management
        sndPageImpl.prototype.play = function (grpId, begPos) {
            this.onPlay();
            var grp = this.grps[grpId];
            if (grp.loading)
                return;
            if (begPos < 0)
                begPos = grp.Items[0].begPos; //begpos<0 => zacni hrat od zacatku
            var interv = _.find(grp.Items, function (i) { return begPos >= i.begPos && begPos < i.endPos; }); //najdi aktualni interval
            if (interv == null) {
                debugger;
                throw 'interv == null';
            }
            this.playInt(interv, begPos); //hraj prvni interval
        };
        sndPageImpl.prototype.onPlaying = function (interv, msec, context) {
            var _this = this;
            switch (context) {
                case progressType.progress:
                    interv._owner.playProgress(msec);
                    var s = _.find(interv.Items, function (s) { return msec < s.endPos; });
                    this.setActiveSentence(interv._owner, s);
                    break;
                case progressType.done:
                    var intIdx = _.indexOf(interv._owner.Items, interv);
                    if (intIdx < interv._owner.Items.length - 1) {
                        var interv = interv._owner.Items[intIdx + 1];
                        setTimeout(function () { return _this.playInt(interv, interv.begPos); });
                    }
                    break;
                case progressType.always:
                    //SndLow.guiBlocker(false);
                    interv._owner.playProgress(-1);
                    this.setActiveSentence(interv._owner, null);
                    break;
            }
        };
        sndPageImpl.prototype.playInt = function (interv, begPos) {
            var _this = this;
            var self = this; //var intVar = interv; var bp = begPos;
            this.blendedCallbackMax = 0;
            interv._owner.player().openPlay(interv._owner._owner.mediaUrl, begPos, interv.endPos).
                progress(function (msec) {
                if (msec > 0) {
                    _this.blendedCallbackMax = Math.max(_this.blendedCallbackMax, msec);
                }
                self.onPlaying(interv, msec < begPos ? begPos : msec /*pri zacatku hrani muze byt notifikovana pozice kousek pred zacatkem*/, progressType.progress);
            }).
                done(function () {
                if (_this.blended)
                    _this.blended.recorder.onPlayed(_this._myPage, _this.blendedCallbackMax - begPos);
                //var us = <blended.IPersistNodeItem<blended.IExShort>>(this._myPage.result.userData['']);
                //us.modified = true;
                //if (!us.short.sumPlay) us.short.sumPlay = 0;
                //us.short.sumPlay += Math.round((this.maxPlayProgress - begPos) / 1000);
                self.onPlaying(interv, -1, progressType.done);
            }).
                always(function () { return self.onPlaying(interv, -1, progressType.always); }); //uplny konec
        };
        //vstupni procedura do active managmentu
        sndPageImpl.prototype.setActiveSentence = function (grp, s) {
            if (this.actSent == s)
                return;
            Logger.trace_lmsnd('media.ts: sndPageImpl.setActiveSentence, idx=' + (s ? s.idx.toString() : '-1'));
            this.actSent = s;
            grp.actSent(s);
            if (s == null) {
                this.setAllActive(null);
                return;
            }
            var newActive = [];
            _.each(s.myMediaSents, function (ms) {
                newActive.push(ms);
                if (ms._owner._tg == CourseModel.t_mediaReplica)
                    newActive.push((ms._owner));
            });
            newActive.pushArray(s._owner._owner.myMediaTags); //mediaTags
            this.setAllActive(newActive);
        };
        sndPageImpl.prototype.setAllActive = function (newActive) {
            if (!newActive && !this.allActive)
                return; //both null
            if (!newActive) {
                _.each(this.allActive, function (a) { return a.active(false); });
                delete this.allActive;
                return;
            } //newActive null => deactivate allActive
            if (!this.allActive) {
                _.each(newActive, function (a) { return a.active(true); });
                this.allActive = newActive;
                return;
            } //allActive null => activate newActive
            //merge
            var newAllActive = [];
            _.each(this.allActive, function (a) { return delete a['fl']; });
            _.each(this.allActive, function (a) {
                if (_.indexOf(newActive, a) < 0)
                    a.active(false); //deaktivuj 
                else
                    a['fl'] = true; //oznac jako jiz aktivni
            });
            _.each(newActive, function (a) { if (a['fl'])
                delete a['fl'];
            else
                a.active(true); }); //aktivuj zbyle
            this.allActive = newActive;
        };
        sndPageImpl.prototype.htmlClearing = function () {
            Logger.trace_lmsnd('media.ts: htmlClearing');
            unbindClick();
            _.each(this.Items, function (fg) { if (fg.player)
                SndLow.htmlClearing(fg.player.id);
            else
                _.each(fg.Items, function (g) { if (g.player())
                    SndLow.htmlClearing(g.player().id); }); });
        };
        //stop play
        sndPageImpl.prototype.onPlay = function () {
            cancelSoundStop();
            //if (pageSound.inOnPlayTimer != 0) { clearTimeout(pageSound.inOnPlayTimer); pageSound.inOnPlayTimer = 0; }
            inOnPlay = true;
            var self = this;
            setTimeout(function () { inOnPlay = false; }, 10);
        };
        return sndPageImpl;
    })(Course.tagImpl);
    Course.sndPageImpl = sndPageImpl;
    //********************************************* MEDIA PLAYER
    //ovladaci panel (videa apod.)
    var mediaPlayer = (function (_super) {
        __extends(mediaPlayer, _super);
        function mediaPlayer() {
            var _this = this;
            _super.apply(this, arguments);
            this.withoutCut = function () { return _this.myGrp().withoutCut; };
            this.actor = ko.observable('');
            this.speech = ko.observable('');
            this.textVisible = ko.observable(true);
            this.playStop = function () { if (_this.loading())
                return; var driver = _this.myGrp().player(); if (!driver.handler.paused) {
                driver.stop();
            }
            else
                _this.playFromSlider(); };
            this.nextSent = function () { if (_this.loading())
                return; _this.prevNext(false); };
            this.prevSent = function () { if (_this.loading())
                return; _this.prevNext(true); };
            this.toogleText = function () { if (_this.loading())
                return; _this.textVisible(!_this.textVisible()); };
        }
        mediaPlayer.prototype.initProc = function (phase, getTypeOnly, completed) {
            var _this = this;
            switch (phase) {
                case Course.initPhase.afterRender2:
                    if (!getTypeOnly) {
                        var self = this;
                        var grp = self.myGrp();
                        if (grp.Items.length != 1) {
                            debugger;
                            throw 'Only single sound interval is alowed for media-player';
                        }
                        self.slider = $('#' + this.id + '-slider');
                        //http://api.jqueryui.com/slider
                        self.slider.slider({
                            start: function (event, ui) { return grp.player().stop(); },
                            "max": 100000,
                            disabled: true,
                        });
                        grp.playProgress.subscribe(function (msec) {
                            if (msec < 0) {
                                self.playing(false);
                                return;
                            }
                            self.playing(true);
                            self.sliderFromMsec(msec);
                        });
                        grp.actSent.subscribe(function (sent) {
                            if (!sent)
                                return;
                            _this.actSent = sent;
                            _this.speech(sent.text);
                            _this.actor(!sent.actor ? '' : sent.actor + ': ');
                        });
                        self.sliderStart = grp.Items[0].begPos; //???
                        this.loading.subscribe(function (l) { if (!l)
                            self.slider.slider("option", 'disabled', false); });
                        if (completed)
                            completed();
                    }
                    return Course.initPhaseType.async;
            }
            return _super.prototype.initProc.call(this, phase, getTypeOnly, completed);
        };
        mediaPlayer.prototype.playFromSlider = function () {
            this._myPage.sndPage.play(this._sentGroupId, this.msecFromSlider());
        };
        mediaPlayer.prototype.sliderFromMsec = function (msec) { this.slider.slider("option", "value", 100000 * (msec - this.sliderStart) / this.sliderLen()); };
        mediaPlayer.prototype.msecFromSlider = function () { return this.slider.slider("option", "value") * this.sliderLen() / 100000 + this.sliderStart; };
        mediaPlayer.prototype.sliderLen = function () {
            return this.myGrp().Items[0].endPos - this.sliderStart;
        };
        //initProc(phase: initPhase, getTypeOnly: boolean, completed: () => void): initPhaseType {
        //  switch (phase) {
        //    case initPhase.afterRender:
        //      if (!getTypeOnly) {
        //        super.initProc(initPhase.afterRender, false, null);
        //        var self = this;
        //        var grp = this.myGrp();
        //        grp.actSent.subscribe(sent => {
        //          if (!sent) return;
        //          this.actSent = sent;
        //          this.speech(sent.text);
        //          this.actor(!sent.actor ? '' : sent.actor + ': ');
        //        });
        //        completed();
        //      }
        //      return initPhaseType.async;
        //  }
        //  return super.initProc(phase, getTypeOnly, completed);
        //}
        mediaPlayer.prototype.prevNext = function (isPrev) {
            var grp = this.myGrp();
            var newSent;
            if (isPrev && this.actSent && grp.playProgress() - this.actSent.begPos > 500) {
                newSent = this.actSent;
            }
            else {
                var sents = grp.Items[0].Items;
                var actSentIdx = this.actSent ? _.indexOf(sents, this.actSent) : (isPrev ? sents.length - 1 : 0);
                if (isPrev) {
                    if (actSentIdx == 0)
                        return;
                    newSent = sents[actSentIdx - 1];
                }
                else {
                    if (actSentIdx >= sents.length - 1)
                        return;
                    newSent = sents[actSentIdx + 1];
                }
            }
            grp.player().stop();
            this.sliderFromMsec(newSent.begPos);
            grp.actSent(newSent);
        };
        return mediaPlayer;
    })(mediaTagImpl);
    Course.mediaPlayer = mediaPlayer;
    // ******** STATIC
    var inOnPlay = false;
    var inOnPlayTimer = 0;
    function cancelSoundStop() {
        if (inOnPlayTimer != 0) {
            clearTimeout(inOnPlayTimer);
            inOnPlayTimer = 0;
        }
    }
    function bindClick() {
        $('body').bind('click.stopSound', function (ev) {
            if ($(ev.target).closest('.oli-cancel-stop-sound').length > 0)
                return;
            if (inOnPlay)
                return;
            inOnPlayTimer = setTimeout(function () {
                inOnPlayTimer = 0;
                Logger.trace_lmsnd('media.ts: body.click stop');
                SndLow.Stop();
            }, 1);
        });
    }
    function unbindClick() {
        $('body').unbind('click.stopSound');
    }
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.t_sndPage, sndPageImpl);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.t_sndFileGroup, sndFileGroupImpl);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.t_sndGroup, sndGroupImpl);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.t_sndInterval, sndIntervalImpl);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.t_sndSent, sndSentImpl);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tmediaBigMark, mediaBigMark);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tmediaPlayer, mediaPlayer);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tmediaText, mediaText);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tmediaVideo, mediaVideo);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.t_mediaReplica, mediaReplica);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.t_mediaSent, mediaSent);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.trecording, audioCaptureImpl);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.twriting, writingImpl);
})(Course || (Course = {}));
/// <reference path="GenCourseModel.ts" />
/// <reference path="GapFill.ts" />
/// <reference path="Pairing.ts" />
/// <reference path="SingleChoice.ts" />
/// <reference path="CheckItem.ts" />
/// <reference path="Media.ts" />
/***** nemazat reference, nejde pak prelozit *****/
var Course;
(function (Course) {
    (function (initPhase) {
        initPhase[initPhase["beforeRender"] = 0] = "beforeRender";
        initPhase[initPhase["afterRender"] = 1] = "afterRender";
        initPhase[initPhase["afterRender2"] = 2] = "afterRender2";
    })(Course.initPhase || (Course.initPhase = {}));
    var initPhase = Course.initPhase;
    ;
    (function (initPhaseType) {
        initPhaseType[initPhaseType["no"] = 0] = "no";
        initPhaseType[initPhaseType["sync"] = 1] = "sync";
        initPhaseType[initPhaseType["async"] = 2] = "async";
    })(Course.initPhaseType || (Course.initPhaseType = {}));
    var initPhaseType = Course.initPhaseType;
    ;
    function scorePercent(sc) { return sc.ms == 0 ? -1 : Math.round(sc.s / sc.ms * 100); }
    Course.scorePercent = scorePercent;
    function needsHumanEval(flag) { return (flag & CourseModel.CourseDataFlag.needsEval) != 0; }
    Course.needsHumanEval = needsHumanEval;
    Course.dummyTag = { _tg: CourseModel.tspan, 'class': null, id: null, Items: null, _owner: null, srcpos: '' };
    //function getEvalData(ev: control) { return <evalControlImpl>ev; }
    var tagImpl = (function () {
        function tagImpl(data) {
            if (data)
                for (var p in data)
                    if (data.hasOwnProperty(p))
                        this[p] = data[p];
        }
        tagImpl.prototype.jsonMLParsed = function () {
            this._myPage = (_.find(this.parents(true), function (t) { return t._tg == CourseModel.tbody; }));
        };
        tagImpl.prototype.pageCreated = function () {
            this.blended = this._myPage.blendedExtension;
        };
        tagImpl.prototype.parents = function (incSelf) { var res = []; var t = incSelf ? this : this._owner; while (t) {
            res.push(t);
            t = t._owner;
        } return res; };
        tagImpl.prototype.isEval = function () { return CourseModel.hasStatus(this, CourseModel.tgSt.isEval); };
        tagImpl.prototype.isCtrl = function () { return CourseModel.hasStatus(this, CourseModel.tgSt.jsCtrl); };
        tagImpl.prototype.isMedia = function () { return _.any(CourseModel.ancestorsAndSelf(this._tg), function (anc) { return anc == CourseModel.tmediaTag; }); };
        tagImpl.prototype.initProc = function (phase, getTypeOnly, completed) { return initPhaseType.no; };
        tagImpl.prototype.getItem = function (id) { return this._myPage.tags[id]; };
        tagImpl.prototype.srcPosition = function () { return _.isEmpty(this.srcpos) ? '' : ' srcpos="' + this.srcpos + '"'; };
        return tagImpl;
    })();
    Course.tagImpl = tagImpl;
    var imgImpl = (function (_super) {
        __extends(imgImpl, _super);
        function imgImpl() {
            _super.apply(this, arguments);
        }
        imgImpl.prototype.jsonMLParsed = function () {
            _super.prototype.jsonMLParsed.call(this);
            if (_.isEmpty(this.src))
                return;
            this.src = Utils.fullUrl(this.src) ? this.src : (cfg.baseTagUrl ? cfg.baseTagUrl : Pager.basicDir) + Utils.combineUrl(this._myPage.url, this.src);
        };
        return imgImpl;
    })(tagImpl);
    Course.imgImpl = imgImpl;
    var aImpl = (function (_super) {
        __extends(aImpl, _super);
        function aImpl() {
            _super.apply(this, arguments);
        }
        aImpl.prototype.jsonMLParsed = function () {
            _super.prototype.jsonMLParsed.call(this);
            if (!this.href)
                return;
            this.href = this.href.toLowerCase();
            if (this.href.match(/^(\/?\w)+$/)) {
                this['-href'] = this.href;
                this.href = '#';
            }
        };
        return aImpl;
    })(tagImpl);
    Course.aImpl = aImpl;
    $(document).on('click', 'a[-href]', function (ev) {
        var href = $(ev.target).attr('-href');
        if (_.isEmpty(href))
            return;
        alert('TODO: ' + href);
        //gotoHref(null, href);
    });
    var evalControlImpl = (function (_super) {
        __extends(evalControlImpl, _super);
        function evalControlImpl(data) {
            _super.call(this, data);
            this.done = ko.observable(false); //priznak kontrolky ve stavu Done
            if (!this.id)
                this.id = "_id_" + (evalControlImpl.idCnt++).toString();
        }
        evalControlImpl.prototype.jsonMLParsed = function () {
            _super.prototype.jsonMLParsed.call(this);
            if (!this.scoreWeight) {
                if (this._tg != CourseModel.tpairingItem && this._tg != CourseModel.tpairing)
                    this.scoreWeight = 100;
            }
        };
        evalControlImpl.prototype.pageDone = function () { return this._myPage.result.done; };
        //getTagProps(): Array<CourseModel.tag> { //tagy, ulozene v property
        //  var res: Array<CourseModel.tag> = [];
        //  _.each(CourseModel.getPropInfos(this.tg), prop => {
        //    //if (!CourseModel.hasStatusLow(prop.meta.st, CourseModel.tgSt.inItems)) return;
        //    if (_.isEmpty(prop.meta.childPropTypes)) return;
        //    var val = this[Utils.toCammelCase(prop.name)]; if (!val) return;
        //    if (CourseModel.hasStatusLow(prop.meta.st, CourseModel.tgSt.isArray)) res.pushArray(val); else res.push(val);
        //  });
        //  return res;
        //}
        evalControlImpl.prototype.isReadOnly = function () { return false; };
        evalControlImpl.prototype.isSkipEvaluation = function () { return false; };
        evalControlImpl.prototype.createResult = function (forceEval) { throw "not overwrited"; }; //inicializace objektu s vysledkem kontrolky
        evalControlImpl.prototype.provideData = function () { throw "not overwrited"; }; //predani dat z kontrolky do persistence
        evalControlImpl.prototype.acceptData = function (done) { this.done(done || (this.myEvalBtn && this.myEvalBtn.doneResult)); }; //zmena stavu kontrolky na zaklade persistentnich dat
        evalControlImpl.prototype.resetData = function (allData) { this.result = allData[this.id] = this.doCreateResult(false); this.acceptData(false); };
        //**** jedna z nasledujicich 2 metod musi byt v kontrolce prepsana. Pouziva se 1. result (zjisteny pomoci provideData z HTML), 2. source (xml) data 
        evalControlImpl.prototype.setScore = function () { var c = this.isCorrect(); this.result.ms = this.scoreWeight; this.result.s = c ? this.scoreWeight : 0; };
        evalControlImpl.prototype.isCorrect = function () { throw "not overwrited"; };
        //getResultScore(): CourseModel.Score { return { ms: this.result.ms, s: this.result.s }; }
        evalControlImpl.prototype.doProvideData = function () { this.provideData(); this.setScore(); };
        evalControlImpl.prototype.doCreateResult = function (forceEval) { this.result = this.createResult(forceEval); this.setScore(); return this.result; };
        evalControlImpl.prototype.selfElement = function () { return idToElement(this.id); };
        evalControlImpl.prototype.pageCreated = function () {
            _super.prototype.pageCreated.call(this);
            if (!this.id)
                throw 'eval control mush have id';
            var pgRes = this._myPage.result;
            if (!pgRes.result) {
                pgRes.result = {};
                this._myPage.result.userPending = true;
            }
            var ress = pgRes.result;
            if (pgRes.designForceEval || !ress[this.id]) {
                ress[this.id] = this.doCreateResult(pgRes.designForceEval);
                this._myPage.result.userPending = true;
            }
        };
        evalControlImpl.idCnt = 0;
        return evalControlImpl;
    })(tagImpl);
    Course.evalControlImpl = evalControlImpl;
    var humanEvalControlImpl = (function (_super) {
        __extends(humanEvalControlImpl, _super);
        function humanEvalControlImpl() {
            _super.apply(this, arguments);
            this.human = ko.observable('');
            this.humanLevel = ko.observable('');
            this.humanHelpTxt = ko.observable('');
        }
        humanEvalControlImpl.prototype.isHumanEvalMode = function () { return cfg.humanEvalMode || this._myPage.humanEvalMode; };
        humanEvalControlImpl.prototype.adjustEvalForm = function () {
            if (!this.isHumanEvalMode())
                return;
            this.form = $('#form-' + this.id);
            var par = { onsubmit: false, rules: {} };
            par.rules['human-ed-' + this.id] = { required: true, range: [0, 100], number: true };
            this.form.validate(par);
        };
        humanEvalControlImpl.prototype.acTestLevel = function () {
            var ex;
            var test;
            if (!this._myPage || !(ex = this._myPage.result) || !ex.parent || !(test = ex.parent.parent))
                return null;
            if (!CourseMeta.isType(test, CourseMeta.runtimeType.test))
                return null;
            return test.level;
        };
        humanEvalControlImpl.useEvalForms = function (ex) {
            if (!cfg.humanEvalMode && !ex.page.humanEvalMode)
                return undefined;
            //var toEvals: Array<{ hc: humanEvalControlImpl; visible: boolean; }> = [];
            var toEvals = [];
            for (var p in ex.page.tags) {
                var hc = (ex.page.tags[p]);
                if (CourseModel.isDescendantOf(hc._tg, CourseModel.thumanEval))
                    //toEvals.push({ hc: hc, visible: hc.form.css('display') != 'none' });
                    if (hc.form.css('display') != 'none')
                        toEvals.push(hc);
            }
            //if (!_.all(toEvals, f => !f.visible || f.hc.form.valid())) return false;
            if (!_.all(toEvals, function (f) { return f.form.valid(); }))
                return false;
            _.each(toEvals, function (ev) {
                ev.result.hPercent = parseInt(ev.human()) / 100 * ev.scoreWeight;
                ev.result.hEmail = LMStatus.Cookie.EMail;
                ev.result.hLmcomId = LMStatus.Cookie.id;
                ev.result.hDate = Utils.nowToNum();
                ev.result.flag = ev.result.flag & ~CourseModel.CourseDataFlag.needsEval;
                ev.setScore();
            });
            ex.userPending = true;
            var score = ex.evaluator.getScore();
            ex.s = score.s;
            ex.flag = score.flag;
            CourseMeta.actCourseRoot.refreshNumbers();
            return true;
        };
        humanEvalControlImpl.prototype.isKBeforeHumanEval = function () { throw 'notimplemented'; };
        humanEvalControlImpl.prototype.setScore = function () {
            this.result.ms = this.scoreWeight;
            if ((this.result.flag & CourseModel.CourseDataFlag.needsEval) == 0 && (this.result.flag & CourseModel.CourseDataFlag.pcCannotEvaluate) != 0) {
                this.result.s = Math.round(this.result.hPercent);
                return;
            }
            var c = this.isKBeforeHumanEval();
            this.result.s = 0;
            //Oprava 9.9.2015 kvuli Blended. 
            //this.result.s = c ? this.scoreWeight : 0;
            if (c) {
                this.result.flag |= CourseModel.CourseDataFlag.needsEval | CourseModel.CourseDataFlag.pcCannotEvaluate;
            }
            else {
                this.result.flag &= ~(CourseModel.CourseDataFlag.needsEval | CourseModel.CourseDataFlag.pcCannotEvaluate) & CourseModel.CourseDataFlag.all;
            }
            //this.result.flag = !c ? 0 : CourseModel.CourseDataFlag.pcCannotEvaluate | CourseModel.CourseDataFlag.needsEval;
        };
        return humanEvalControlImpl;
    })(evalControlImpl);
    Course.humanEvalControlImpl = humanEvalControlImpl;
    function idToElement(id) { return $('#' + id).first(); }
    Course.idToElement = idToElement;
    function finishCreatePage(exImpl) { var page = exImpl.page; page.finishCreatePage(exImpl); return page; }
    Course.finishCreatePage = finishCreatePage;
    var Page = (function (_super) {
        __extends(Page, _super);
        function Page() {
            _super.apply(this, arguments);
            this.tags = {}; //all named tags
        }
        Page.prototype.isPassivePage = function () { return this.isOldEa ? this.oldEaIsPassive : !this.evalPage || this.evalPage.maxScore == 0; };
        Page.prototype.finishCreatePage = function (userData) {
            var _this = this;
            //finishCreatePage(userData: CourseMeta.IExUser) {
            _super.prototype.pageCreated.call(this);
            this.result = userData;
            //nalezni vsechny controls
            var res = [];
            scan(this, res);
            _.each(this.propertyTags, function (t) { return scan(t, res); });
            this.items = _.filter(res, function (t) { return t.isCtrl && t.isCtrl(); });
            this.sndPage.allMediaTags = _.filter(res, function (t) { return t.isMedia && t.isMedia(); });
            _.each(res, function (t) { if (t.id)
                _this.tags[t.id] = t; });
            //dokonci vytvoreni kontrolek
            _.each(res, function (c) { if (c.pageCreated)
                c.pageCreated(); });
        };
        Page.prototype.callInitProcs = function (phase, completed) {
            var _this = this;
            //synchronni init akce
            _.each(_.filter(this.items, function (ctrl) { return ctrl.initProc(phase, true, null) == initPhaseType.sync; }), function (ctrl) { return ctrl.initProc(phase, false, null); });
            //asynchronni init akce
            var promises = _.compact(_.map(_.filter(this.items, function (ctrl) { return ctrl.initProc(phase, true, null) == initPhaseType.async; }), function (ctrl) {
                var defered = $.Deferred();
                ctrl.initProc(phase, false, defered.resolve);
                return defered.promise();
            }));
            $.whenall(promises).done(function () {
                if (phase == initPhase.afterRender2)
                    Course.edit.adjustSmartWidths(_this);
                completed();
            });
        };
        /*** IScoreProvider ***/
        Page.prototype.provideData = function (allData) {
            //_.each(this.evalItems, ctrl => ctrl.provideData(allData[ctrl.id]));
            this.evalPage.provideData();
        };
        Page.prototype.acceptData = function (done, allData) {
            this.evalPage.acceptData(done);
            //readonly a skip-eval kontrolky
            this.processReadOnlyEtc(done, false);
        };
        Page.prototype.resetData = function (allData) {
            this.evalPage.resetData();
        };
        Page.prototype.getScore = function () { return this.evalPage.getScore(); }; // getORScore(this.evalItems); }
        Page.prototype.processReadOnlyEtc = function (done, provideData) {
            _.each(_.filter(this.items, function (it) { return it.isEval(); }), function (ev) {
                if (!ev.isReadOnly() && !ev.isSkipEvaluation())
                    return;
                if (provideData && ev.isSkipEvaluation())
                    ev.provideData();
                ev.acceptData(ev.isReadOnly() || done);
            });
        };
        return Page;
    })(tagImpl);
    Course.Page = Page;
    function finishTag(data) {
        switch (data._tg) {
            //case CourseModel.ta: var a = <CourseModel.a>data; if (a.href) a.href = a.href.toLowerCase(); break;
            case CourseModel.tp:
                var p = data;
                p._tg = CourseModel.tdiv;
                if (!p['class'])
                    p['class'] = [];
                else if (_.any(p['class'], function (c) { return c.indexOf('oli-par') == 0; }))
                    break;
                p['class'].push('oli-par');
                break; //knockout error, viz http://stackoverflow.com/questions/18869466/knockout-bug-cannot-match-comment-end
        }
    }
    ;
    var tag_helper = (function () {
        function tag_helper() {
        }
        tag_helper.prototype.c_unescape = function (data) {
            //if (data.indexOf('<') > 0 || data.indexOf('>') > 0)
            //  return data.replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
            //else
            return data;
        };
        tag_helper.prototype.c_isCtrl = function (data) {
            if (_.isString(data))
                return false;
            return data.isCtrl && data.isCtrl();
        };
        tag_helper.prototype.c_tagstart = function (data) {
            try {
                if (data._tg == CourseModel.tnode)
                    return '';
                var sb = [];
                finishTag(data);
                sb.push("<" + data._tg);
                for (var p in data) {
                    if (p == 'Items' || p.charAt(0) == '_')
                        continue;
                    //Muze atribut zacinat velkym pismenem? Dej exception.
                    var firstCh = p.charAt(0);
                    if (firstCh != firstCh.toLowerCase())
                        throw 'something wrong'; //continue;
                    var val = data[p];
                    if (_.isFunction(val))
                        continue;
                    sb.push(' ' + p + '="' + (p == 'class' ? val.join(' ') : val) + '"');
                }
                sb.push(openCloseTags[data._tg] ? "/>" : ">");
                return sb.join('');
            }
            catch (msg) {
                debugger;
                throw msg;
            }
        };
        tag_helper.prototype.cT = function (data) {
            try {
                if (_.isString(data))
                    return JsRenderTemplateEngine.tmpl('c_textnew');
                //var st = CourseModel.meta.types[data.tg].st; 
                var tmpl;
                if (CourseModel.hasStatus(data, CourseModel.tgSt.jsCtrl))
                    tmpl = "c_" + Utils.toCammelCase(data._tg);
                else
                    tmpl = 'c_tag';
                return JsRenderTemplateEngine.tmpl(tmpl);
            }
            catch (msg) {
                debugger;
                throw msg;
            }
        };
        tag_helper.prototype.classes = function (data) {
            var clss = "oli-" + Utils.toCammelCase(data._tg);
            //_.each(CourseModel.ancestorsAndSelf(data.tg).reverse(), (t: string) => clss += "c-" + Utils.toCammelCase(t) + " ");
            clss += data['class'] ? " " + data['class'].join(' ') : "";
            return clss.toLowerCase();
        };
        tag_helper.prototype.c_tagend = function (data) {
            if (data._tg == CourseModel.tnode)
                return '';
            return openCloseTags[data._tg] ? '' : "</" + data._tg + ">";
        };
        return tag_helper;
    })();
    var openCloseTags = {};
    _.each([CourseModel.thr, CourseModel.tbr, CourseModel.timg], function (t) { return openCloseTags[t] = true; });
    //export function scan(dt: CourseModel.tag, action: (dt: CourseModel.tag) => void, cond: (dt: CourseModel.tag) => boolean = null): void {
    //  if (dt.Items) _.each(dt.Items, it => scan(it, action, cond));
    //  if (!cond || cond(dt)) action(dt);
    //}
    function scan(dt, res) {
        res.push(dt);
        _.each(dt.Items, function (it) { return scan(it, res); });
    }
    Course.scan = scan;
    function scanEx(dt, action) {
        if (!dt.Items)
            return;
        for (var i = 0; i < dt.Items.length; i++) {
            scanEx(dt.Items[i], action);
            action(dt, i);
        }
    }
    Course.scanEx = scanEx;
    function localize(pg, locProc) {
        pg.title = locProc(pg.title);
        pg.instrTitle = locProc(pg.instrTitle);
        scanEx(pg, function (parent, idx) {
            if (!parent.Items)
                return;
            var item = parent.Items[idx];
            //localize string
            if (_.isString(item)) {
                parent.Items[idx] = (locProc(item));
                return;
            }
            //localize pairing-item.right
            var pairItem = (item);
            if (pairItem._tg != CourseModel.tpairingItem)
                return;
            if (pairItem.right)
                pairItem.right = locProc(pairItem.right);
        });
    }
    Course.localize = localize;
    function getCourseAbsoluteUrl(rootUrl, url) {
        var parts = rootUrl.toLowerCase().split('/');
        parts[parts.length - 1] = url.toLowerCase();
        return Pager.basicUrl + "rwcourses/" + parts.join('/');
    }
    Course.getCourseAbsoluteUrl = getCourseAbsoluteUrl;
    $.views.helpers(new tag_helper());
    var writing = (function (_super) {
        __extends(writing, _super);
        function writing() {
            _super.apply(this, arguments);
        }
        return writing;
    })(evalControlImpl);
    Course.writing = writing;
    var speaking = (function (_super) {
        __extends(speaking, _super);
        function speaking() {
            _super.apply(this, arguments);
        }
        return speaking;
    })(evalControlImpl);
    Course.speaking = speaking;
    //var gf_normTable: { [charCode: number]: string; };
    //function normalizeChars(s: string) {
    //  if (_.isEmpty(s)) return s;
    //  if (gf_normTable == null) {
    //    gf_normTable = [];
    //    for (var i = 1; i < gf_nt.length; i += 2)
    //      gf_normTable[parseInt(gf_nt[i - 1])] = gf_nt[i];
    //  }
    //  for (var i = 0; i < s.length; i++) {
    //    var nw = gf_normTable[s.charCodeAt(i)];
    //    if (typeof (nw) != 'undefined') s = s.substring(0, i) + nw + s.substring(i + 1);
    //  }
    //  return s;
    //};
    function relevantChars(ch) {
        var nw = CourseModel.gaffFill_normTable[ch.charCodeAt(0)];
        if (nw)
            ch = nw;
        return Unicode.isLetter(ch) || Unicode.isNumber(ch);
    }
    //**** normalize GapFill string
    //algoritmus musi byt stejny s d:\LMCom\rew\ObjectModel\Model\CourseSchemaDOM.cs, public static string normalize(
    function normalize(value, caseSensitive) {
        if (caseSensitive === void 0) { caseSensitive = false; }
        if (_.isEmpty(value))
            return value;
        if (!caseSensitive)
            value = value.toLowerCase();
        var chars = value.split('');
        var res = [];
        var st = 0; //0..zacatek, 1..no space, 2..space 
        var charsNum = 0;
        var otherNum = 0;
        for (var i = 0; i < chars.length; i++) {
            var ch = chars[i];
            switch (st) {
                //case 0: if (!relevantChars(ch)) continue; st = 1; res.push(ch); break; //mezery na zacatku
                //case 1: if (relevantChars(ch)) { res.push(ch); continue; } st = 2; break; //nemezery 
                //case 2: if (!relevantChars(ch)) continue; st = 1; res.push(' '); res.push(ch); break; //mezery uprostred
                case 0:
                    if (!relevantChars(ch)) {
                        otherNum++;
                        continue;
                    }
                    st = 1;
                    charsNum++;
                    res.push(ch);
                    break; //mezery na zacatku
                case 1:
                    if (relevantChars(ch)) {
                        charsNum++;
                        res.push(ch);
                        continue;
                    }
                    otherNum++;
                    st = 2;
                    break; //nemezery 
                case 2:
                    if (!relevantChars(ch)) {
                        otherNum++;
                        continue;
                    }
                    st = 1;
                    res.push(' ');
                    res.push(ch);
                    break; //mezery uprostred
            }
        }
        if (charsNum <= 2 && otherNum >= charsNum)
            return value;
        return res.join('');
    }
    Course.normalize = normalize;
    var evalBtn = (function (_super) {
        __extends(evalBtn, _super);
        function evalBtn() {
            var _this = this;
            _super.apply(this, arguments);
            this.st = ko.observable('');
            this.click = function () {
                if (_this.pageDone())
                    return;
                _this.doneResult = !_this.doneResult;
                var btn = _this._myPage.evalPage.findBtn(_this);
                if (!btn)
                    return; //BT 2176
                var score = btn.click(_this.doneResult);
                if (_this.doneResult)
                    _this.scoreText(_this.scoreAsRatio ? score.s.toString() + '/' + score.ms.toString() : Math.round(100 * score.s / score.ms).toString() + '%');
                //var allData = this.myPage.result.result;
                //var myCtrls = _.filter(this.myPage.evalItems, c => (<evalControlImpl>c).evalBtnId == this.id);
                //_.each(myCtrls, ctrl => { //vsechny kontrolku z self eval grupy
                //  if (!this.doneResult) { //cilovy stav je Normal => reset
                //    ctrl.resetData(allData); // allData[ctrl.data.id] = ctrl.createResult(); ctrl.acceptData(false, ctrl.result);
                //  } else { //cilovy stav je doneResult => prevezmi data a zobraz vyhodnocenou kontrolku
                //    ctrl.provideData(ctrl.result);
                //    ctrl.acceptData(true, ctrl.result);
                //  }
                //});
                //if (this.doneResult) {
                //  var sc = getORScore(myCtrls);
                //  this.scoreText(Math.round(100 * sc.s / sc.ms).toString() + '%');
                //}
                _this.st(_this.doneResult ? 'evaluated' : 'no');
            };
            this.scoreText = ko.observable();
        }
        evalBtn.prototype.createResult = function (forceEval) { return { ms: 0, s: 0, tg: this._tg, flag: 0, Value: false }; };
        evalBtn.prototype.provideData = function () {
            if (this.pageDone())
                return;
            if (!this.result)
                this.result = this.createResult(false);
            this.result.Value = this.doneResult;
        };
        evalBtn.prototype.acceptData = function (pageDone) {
            this.doneResult = this.result && this.result.Value;
            if (pageDone)
                this.st('disabled');
            else
                this.st(this.doneResult ? 'evaluated' : 'no');
        };
        evalBtn.prototype.setScore = function () { this.result.ms = 0; this.result.s = 0; };
        return evalBtn;
    })(evalControlImpl);
    Course.evalBtn = evalBtn;
    var extensionImpl = (function (_super) {
        __extends(extensionImpl, _super);
        function extensionImpl() {
            _super.apply(this, arguments);
        }
        extensionImpl.prototype.jsonMLParsed = function () {
            _super.prototype.jsonMLParsed.call(this);
            switch (this.data) {
                case 'chinh-speaking':
                    this.myExtension = new Course.chinhSpeaking(this);
                    break;
                case 'doc-reference':
                    this.myExtension = new docreference.ext(this);
                    break;
                default: throw this.data;
            }
            if (this.myExtension && this.myExtension.jsonMLParsed)
                this.myExtension.jsonMLParsed(this);
        };
        extensionImpl.prototype.createResult = function (forceEval) { return this.myExtension && this.myExtension.createResult ? this.myExtension.createResult(this, forceEval) : { ms: 0, s: 0, tg: this._tg, flag: 0, Value: null }; };
        extensionImpl.prototype.provideData = function () {
            if (this.myExtension && this.myExtension.provideData)
                this.myExtension.provideData(this);
        };
        extensionImpl.prototype.acceptData = function (pageDone) {
            if (this.myExtension && this.myExtension.acceptData)
                this.myExtension.acceptData(this, pageDone);
        };
        extensionImpl.prototype.setScore = function () { if (this.myExtension && this.myExtension.setScore)
            this.myExtension.setScore(this);
        else {
            this.result.ms = 0;
            this.result.s = 0;
        } ; };
        extensionImpl.prototype.pageCreated = function () { if (this.myExtension && this.myExtension.pageCreated)
            this.myExtension.pageCreated(this);
        else
            _super.prototype.pageCreated.call(this); };
        extensionImpl.prototype.initProc = function (phase, getTypeOnly, completed) {
            if (this.myExtension && this.myExtension.initProc)
                return this.myExtension.initProc(phase, getTypeOnly, completed);
            else
                return initPhaseType.no;
        };
        return extensionImpl;
    })(evalControlImpl);
    Course.extensionImpl = extensionImpl;
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.ta, aImpl);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.timg, imgImpl);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tbody, Page);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.tevalButton, evalBtn);
    CourseModel.registerClassToInterface(CourseModel.meta, CourseModel.textension, extensionImpl);
})(Course || (Course = {}));
//xx/#DEBUG
var Logger;
(function (Logger) {
    function trace_course(msg) {
        Logger.trace("Course", msg);
    }
    Logger.trace_course = trace_course;
    function error_course(where, msg) {
        Logger.error("Sound", msg, where);
    }
    Logger.error_course = error_course;
    ;
})(Logger || (Logger = {}));
//xx/#ENDDEBUG
//var SoundNoop = null;
/// <reference path="../courses/Course.ts" />
var CourseMeta;
(function (CourseMeta) {
    CourseMeta.instructions = null;
    //export function hasCtxGramm(): bool { return actEx.page.seeAlso && actEx.page.seeAlso.length > 0; }
    var ModelEx = (function (_super) {
        __extends(ModelEx, _super);
        function ModelEx(urlParts) {
            _super.call(this, schools.tEx, urlParts);
            this.instrTitle = ko.observable("");
            this.instrBody = ko.observable("");
            this.seeAlsoTemplateSmall = ko.observable("Dummy");
            this.seeAlsoTemplate = ko.observable("Dummy");
            CourseMeta.actExModel = this;
        }
        //seeAlsoClick(idx: number) { gui.gotoData(this.seeAlso[idx]); }
        ModelEx.prototype.leave = function () {
            if (CourseMeta.actEx && CourseMeta.actEx.page && CourseMeta.actEx.page.sndPage)
                CourseMeta.actEx.page.sndPage.leave();
        };
        ModelEx.prototype.doUpdate = function (completed) {
            var _this = this;
            var th = this; //var u: schools.Url = <any>this.url;
            //lib.adjustInstr(() => //nacteni a lokalizace Schools\EAData\instructions.json
            CourseMeta.lib.onChangeUrl(th.productUrl, this.persistence, th.url, function (ex) {
                return CourseMeta.lib.doRefresh(function () {
                    return CourseMeta.lib.displayEx(ex, function (loadedEx) {
                        _this.cpv = new schoolCpv.model(schools.tExCpv, null);
                        DictConnector.initDict(CourseMeta.actModule.dict);
                    }, function (loadedEx) {
                        th.instrTitle(CourseMeta.actEx.page.instrTitle);
                        th.instrBody(_.map(CourseMeta.actEx.page.instrs, function (s) { var res = CourseMeta.instructions[s.toLowerCase()]; return res ? res : (_.isEmpty(s) ? "" : "Missing [" + s + "] instruction"); }).join());
                        if (CourseMeta.actEx.page.seeAlso)
                            th.seeAlso = _.filter(_.map(CourseMeta.actEx.page.seeAlso, function (lnk) { return CourseMeta.actProduct.getNode(lnk.url); }), function (n) { return !!n; });
                        if (th.seeAlso && th.seeAlso.length == 0)
                            th.seeAlso = null;
                        if (th.seeAlso) {
                            th.seeAlsoTemplateSmall("TSeeAlsoTemplateSmall");
                            th.seeAlsoTemplate("TSeeAlsoTemplate");
                        }
                        th.tb.suplCtxtGrammar(th.seeAlso != null);
                        th.tb.suplGrammarIcon(th.seeAlso == null);
                        CourseMeta.refreshExerciseBar(loadedEx);
                    });
                });
            });
        };
        ModelEx.prototype.htmlClearing = function () {
            if (this.cpv)
                this.cpv.htmlClearing();
            if (CourseMeta.actExPageControl && CourseMeta.actExPageControl.sndPage)
                CourseMeta.actExPageControl.sndPage.htmlClearing();
        };
        return ModelEx;
    })(CourseMeta.MetaModel);
    CourseMeta.ModelEx = ModelEx;
    //Pager.registerAppLocator(schools.appId, schools.tEx, (urlParts, completed) => completed(new ModelEx(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schools.tEx, schools.appId, schools.tEx, 4, function (urlParts) { return new ModelEx(urlParts); }); });
})(CourseMeta || (CourseMeta = {}));
//xx/#DEBUG
var Logger;
(function (Logger) {
    function trace_exrc(msg) {
        Logger.trace("Exercise", msg);
    }
    Logger.trace_exrc = trace_exrc;
})(Logger || (Logger = {}));
//xx/#ENDDEBUG
//var exrc_dict = null;
/// <reference path="../jslib/js/GenLMComLib.ts" />
var proxies;
(function (proxies) {
    function invoke(url, type, queryPars, body, completed) {
        var ajaxOption = { type: type, contentType: "application/json" };
        ajaxOption.url = Pager.basicUrl + url;
        if (queryPars != null)
            ajaxOption.url += "?" + $.param(queryPars);
        if (body)
            ajaxOption.data = body;
        $.ajax(ajaxOption).done(function (data) { return completed(data); }).fail(function () { debugger; Logger.error('proxies.ajax', url, ''); });
    }
    var admincompany = (function () {
        function admincompany() {
        }
        admincompany.getCompanyUserRoles = function (compid, completed) {
            invoke('admincompany/getcompanyuserroles', 'get', { compid: compid }, null, completed);
        };
        admincompany.setCompanyUserRoles = function (compid, email, role, completed) {
            invoke('admincompany/setcompanyuserroles', 'get', { compid: compid, email: email, role: role }, null, completed);
        };
        admincompany.setHumanEvaluator = function (compid, email, lines, completed) {
            invoke('admincompany/sethumanevaluator', 'post', { compid: compid, email: email }, JSON.stringify(lines), completed);
        };
        return admincompany;
    })();
    proxies.admincompany = admincompany;
    ;
    var adminglobal = (function () {
        function adminglobal() {
        }
        adminglobal.createSystemAdmin = function (systemadminemail, isadd, completed) {
            invoke('adminglobal/createsystemadmin', 'get', { systemadminemail: systemadminemail, isadd: isadd }, null, completed);
        };
        adminglobal.getSystemAdmins = function (completed) {
            invoke('adminglobal/getsystemadmins', 'get', null, null, completed);
        };
        adminglobal.createNewCompany = function (compid, email, isadd, completed) {
            invoke('adminglobal/createnewcompany', 'get', { compid: compid, email: email, isadd: isadd }, null, completed);
        };
        adminglobal.getCompaniesAndTheirAdmins = function (completed) {
            invoke('adminglobal/getcompaniesandtheiradmins', 'get', null, null, completed);
        };
        return adminglobal;
    })();
    proxies.adminglobal = adminglobal;
    ;
    var adminlicence = (function () {
        function adminlicence() {
        }
        adminlicence.createNewProduct = function (compid, prodid, istest, days, isadd, completed) {
            invoke('adminlicence/createnewproduct', 'get', { compid: compid, prodid: prodid, istest: istest, days: days, isadd: isadd }, null, completed);
        };
        adminlicence.getAllProductsLicInfo = function (compid, completed) {
            invoke('adminlicence/getallproductslicinfo', 'get', { compid: compid }, null, completed);
        };
        adminlicence.generateLicenceKeys = function (compid, prodid, days, numofkeys, completed) {
            invoke('adminlicence/generatelicencekeys', 'get', { compid: compid, prodid: prodid, days: days, numofkeys: numofkeys }, null, completed);
        };
        adminlicence.enterLicenceKey = function (email, comphash, licid, keyid, completed) {
            invoke('adminlicence/enterlicencekey', 'get', { email: email, comphash: comphash, licid: licid, keyid: keyid }, null, completed);
        };
        adminlicence.getHomePageData = function (email, completed) {
            invoke('adminlicence/gethomepagedata', 'get', { email: email }, null, completed);
        };
        return adminlicence;
    })();
    proxies.adminlicence = adminlicence;
    ;
    var course = (function () {
        function course() {
        }
        course.deleteDataKeys = function (email, compid, productid, testkeyid, keys, completed) {
            invoke('course/deletedatakeys', 'post', { email: email, compid: compid, productid: productid, testkeyid: testkeyid }, JSON.stringify(keys), completed);
        };
        course.getShortProductDatas = function (email, compid, productid, testkeyid, completed) {
            invoke('course/getshortproductdatas', 'get', { email: email, compid: compid, productid: productid, testkeyid: testkeyid }, null, completed);
        };
        course.getLongData = function (email, compid, productid, testkeyid, key, completed) {
            invoke('course/getlongdata', 'get', { email: email, compid: compid, productid: productid, testkeyid: testkeyid, key: key }, null, completed);
        };
        course.saveData = function (email, compid, productid, testkeyid, line, datas, completed) {
            invoke('course/savedata', 'post', { email: email, compid: compid, productid: productid, testkeyid: testkeyid, line: line }, JSON.stringify(datas), completed);
        };
        return course;
    })();
    proxies.course = course;
    ;
    var dbcompany = (function () {
        function dbcompany() {
        }
        dbcompany.doRead_user = function (compid, completed) {
            invoke('dbcompany/doread/user', 'get', { compid: compid }, null, completed);
        };
        dbcompany.doRead_meta = function (compid, completed) {
            invoke('dbcompany/doread/meta', 'get', { compid: compid }, null, completed);
        };
        dbcompany.doRead_licence = function (compid, completed) {
            invoke('dbcompany/doread/licence', 'get', { compid: compid }, null, completed);
        };
        dbcompany.doRead_department = function (compid, completed) {
            invoke('dbcompany/doread/department', 'get', { compid: compid }, null, completed);
        };
        dbcompany.doRead_departmentUsage = function (compid, completed) {
            invoke('dbcompany/doread/departmentusage', 'get', { compid: compid }, null, completed);
        };
        return dbcompany;
    })();
    proxies.dbcompany = dbcompany;
    ;
    var dbuser = (function () {
        function dbuser() {
        }
        dbuser.doRead_data = function (email, completed) {
            invoke('dbuser/doread/data', 'get', { email: email }, null, completed);
        };
        dbuser.doRead_companies = function (email, completed) {
            invoke('dbuser/doread/companies', 'get', { email: email }, null, completed);
        };
        return dbuser;
    })();
    proxies.dbuser = dbuser;
    ;
    var hmaneval = (function () {
        function hmaneval() {
        }
        hmaneval.linesToEval = function (compid, completed) {
            invoke('humaneval/getlines', 'get', { compid: compid }, null, completed);
        };
        hmaneval.getTestsToAssign = function (compid, line, completed) {
            invoke('humaneval/getteststoassign', 'get', { compid: compid, line: line }, null, completed);
        };
        hmaneval.setTestsToAssign = function (compid, line, newtodo, completed) {
            invoke('humaneval/setteststoassign', 'post', { compid: compid, line: line }, JSON.stringify(newtodo), completed);
        };
        hmaneval.getEvaluatorTests = function (compid, evalemail, completed) {
            invoke('humaneval/getevaluatortests', 'get', { compid: compid, evalemail: evalemail }, null, completed);
        };
        hmaneval.getExerciseFromTest = function (email, compid, line, productid, testkeyid, completed) {
            invoke('humaneval/getexercisefromtest', 'get', { email: email, compid: compid, line: line, productid: productid, testkeyid: testkeyid }, null, completed);
        };
        return hmaneval;
    })();
    proxies.hmaneval = hmaneval;
    ;
    var login = (function () {
        function login() {
        }
        login.CreateLmUserStart = function (password, cook, completed) {
            invoke('login/createlmuserstart', 'post', { password: password }, JSON.stringify(cook), completed);
        };
        login.OnOtherLogin = function (othertype, otherid, email, firstname, lastname, completed) {
            invoke('login/onotherlogin', 'get', { othertype: othertype, otherid: otherid, email: email, firstname: firstname, lastname: lastname }, null, completed);
        };
        login.CreateLmUserEnd = function (email, completed) {
            invoke('login/createlmuserend', 'get', { email: email }, null, completed);
        };
        login.ChangePassword = function (email, oldpsw, newpsw, completed) {
            invoke('login/changepassword', 'get', { email: email, oldpsw: oldpsw, newpsw: newpsw }, null, completed);
        };
        login.GetPassword = function (email, completed) {
            invoke('login/getpassword', 'get', { email: email }, null, completed);
        };
        login.OnLMLogin = function (email, password, completed) {
            invoke('login/onlmlogin', 'get', { email: email, password: password }, null, completed);
        };
        login.SaveProfile = function (cook, completed) {
            invoke('login/saveprofile', 'post', null, JSON.stringify(cook), completed);
        };
        return login;
    })();
    proxies.login = login;
    ;
    var test = (function () {
        function test() {
        }
        test.testDeleteAll = function (completed) {
            invoke('test/testdeleteall', 'get', null, null, completed);
        };
        return test;
    })();
    proxies.test = test;
    ;
    var testme = (function () {
        function testme() {
        }
        testme.toEvalLangs = function (compid, completed) {
            invoke('testme/toevallangs', 'post', { compid: compid }, null, completed);
        };
        return testme;
    })();
    proxies.testme = testme;
    ;
    var vyzva57services = (function () {
        function vyzva57services() {
        }
        vyzva57services.lmAdminSendOrder = function (jsonorder, completed) {
            invoke('vyzva57services/lmadminsendorder', 'post', null, JSON.stringify(jsonorder), completed);
        };
        vyzva57services.lmLectorExportInfoToXml = function (completed) {
            invoke('vyzva57services/lmlectorexportinfotoxml', 'get', null, null, completed);
        };
        vyzva57services.lmAdminCreateCompany = function (companyid, companydata, completed) {
            invoke('vyzva57services/lmadmincreatecompany', 'post', { companyid: companyid }, JSON.stringify(companydata), completed);
        };
        vyzva57services.lmAdminCreateLicenceKeys = function (companyid, requestedkeys, completed) {
            invoke('vyzva57services/lmadmincreatelicencekeys', 'post', { companyid: companyid }, JSON.stringify(requestedkeys), completed);
        };
        vyzva57services.lmAdminCreateSingleLicenceKey = function (companyid, prodid, completed) {
            invoke('vyzva57services/lmadmincreatesinglelicencekey', 'post', { companyid: companyid, prodid: prodid }, null, completed);
        };
        vyzva57services.loadCompanyData = function (companyid, completed) {
            invoke('vyzva57services/loadcompanydata', 'get', { companyid: companyid }, null, completed);
        };
        vyzva57services.writeCompanyData = function (companyid, data, completed) {
            invoke('vyzva57services/writecompanydata', 'post', { companyid: companyid }, JSON.stringify(data), completed);
        };
        vyzva57services.reports = function (reportpar, completed) {
            invoke('vyzva57services/reports', 'get', { reportpar: reportpar }, null, completed);
        };
        vyzva57services.writeUs = function (jsondata, completed) {
            invoke('vyzva57services/writeus', 'post', null, JSON.stringify(jsondata), completed);
        };
        vyzva57services.createEmptyCompany = function (companytitle, completed) {
            invoke('vyzva57services/createemptycompany', 'get', { companytitle: companytitle }, null, completed);
        };
        vyzva57services.createDemoCompanyStart = function (companytitle, id, completed) {
            invoke('vyzva57services/createdemocompanystart', 'get', { companytitle: companytitle, id: id }, null, completed);
        };
        vyzva57services.createDemoCompanyEnd = function (data, completed) {
            invoke('vyzva57services/createdemocompanyend', 'post', null, JSON.stringify(data), completed);
        };
        vyzva57services.keysFromCompanyTitle = function (companytitle, completed) {
            invoke('vyzva57services/keysfromcompanytitle', 'get', { companytitle: companytitle }, null, completed);
        };
        vyzva57services.runDemoInformation = function (companylicenceid, counter, completed) {
            invoke('vyzva57services/rundemoinformation', 'get', { companylicenceid: companylicenceid, counter: counter }, null, completed);
        };
        vyzva57services.deleteProduct = function (companyid, lmcomid, producturl, taskid, completed) {
            invoke('vyzva57services/deleteproduct', 'post', { companyid: companyid, lmcomid: lmcomid, producturl: producturl, taskid: taskid }, null, completed);
        };
        vyzva57services.getShortProductDatas = function (companyid, lmcomid, producturl, completed) {
            invoke('vyzva57services/getshortproductdatas', 'get', { companyid: companyid, lmcomid: lmcomid, producturl: producturl }, null, completed);
        };
        vyzva57services.getLongData = function (companyid, lmcomid, producturl, taskid, key, completed) {
            invoke('vyzva57services/getlongdata', 'get', { companyid: companyid, lmcomid: lmcomid, producturl: producturl, taskid: taskid, key: key }, null, completed);
        };
        vyzva57services.debugClearProduct = function (companyid, lmcomid, producturl, completed) {
            invoke('vyzva57services/debugclearproduct', 'get', { companyid: companyid, lmcomid: lmcomid, producturl: producturl }, null, completed);
        };
        vyzva57services.saveUserData = function (companyid, lmcomid, producturl, data, completed) {
            invoke('vyzva57services/saveuserdata', 'post', { companyid: companyid, lmcomid: lmcomid, producturl: producturl }, JSON.stringify(data), completed);
        };
        return vyzva57services;
    })();
    proxies.vyzva57services = vyzva57services;
    ;
})(proxies || (proxies = {}));
var proxies;
(function (proxies) {
    function test_all() {
        var log = [];
        test_login_all(log, function () {
            return test_adminGlobal(log, function () {
                return test_adminCompany(log, function () {
                    return test_ProductsAndLicences(log, function () {
                        return $('#testAll').html(log.join('<br/>'));
                    });
                });
            });
        });
    }
    proxies.test_all = test_all;
    //********** ADMIN GLOBAL
    function test_adminGlobal(log, completed) {
        log.push('');
        log.push('******************************');
        log.push('ADMIN GLOBAL');
        proxies.test.testDeleteAll(function () {
            return test_adminGlobal_createSystemAdmin_notExist(log, function () {
                return test_adminGlobal_createSystemAdmin_exist(log, function () {
                    return test_adminGlobal_createSystemAdmin_remove(log, function () {
                        log.push('');
                        proxies.test.testDeleteAll(function () {
                            return test_adminGlobal_createNewCompany_add(log, function () {
                                return test_adminGlobal_createNewCompany_remove(log, function () {
                                    return test_adminGlobal_createNewCompany_add_add(log, function () {
                                        return test_adminGlobal_getCompaniesAndTheirAdmins(log, function () {
                                            return test_adminGlobal_createNewCompany_add_remove(log, function () {
                                                return completed();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }
    proxies.test_adminGlobal = test_adminGlobal;
    function test_adminGlobal_createSystemAdmin_notExist(log, completed) {
        proxies.adminglobal.createSystemAdmin("p@p.p", true, function (email) {
            return proxies.dbuser.doRead_data(email, function (user) {
                log.push("***** systemAdmin, add, not exist");
                log.push(JSON.stringify(user));
                test_login_createUser(email, function (email) {
                    return proxies.dbuser.doRead_data(email, function (user) {
                        return proxies.adminglobal.getSystemAdmins(function (emails) {
                            log.push(JSON.stringify(user));
                            log.push(emails.join(','));
                            completed();
                        });
                    });
                });
            });
        });
    }
    proxies.test_adminGlobal_createSystemAdmin_notExist = test_adminGlobal_createSystemAdmin_notExist;
    function test_adminGlobal_createSystemAdmin_exist(log, completed) {
        test_login_createUser("p2@p.p", function (email) {
            return proxies.dbuser.doRead_data(email, function (user) {
                log.push("***** systemAdmin, add, not exist");
                log.push(JSON.stringify(user));
                proxies.adminglobal.createSystemAdmin("p2@p.p", true, function (email) {
                    return proxies.dbuser.doRead_data(email, function (user) {
                        return proxies.adminglobal.getSystemAdmins(function (emails) {
                            log.push(JSON.stringify(user));
                            log.push(emails.join(','));
                            completed();
                        });
                    });
                });
            });
        });
    }
    proxies.test_adminGlobal_createSystemAdmin_exist = test_adminGlobal_createSystemAdmin_exist;
    function test_adminGlobal_createSystemAdmin_remove(log, completed) {
        proxies.adminglobal.createSystemAdmin("p2@p.p", false, function (email) {
            return proxies.dbuser.doRead_data(email, function (user) {
                return proxies.adminglobal.getSystemAdmins(function (emails) {
                    log.push("***** systemAdmin, remove, exist");
                    log.push(JSON.stringify(user));
                    log.push(emails.join(','));
                    completed();
                });
            });
        });
    }
    proxies.test_adminGlobal_createSystemAdmin_remove = test_adminGlobal_createSystemAdmin_remove;
    function test_adminGlobal_createNewCompany_add(log, completed) {
        proxies.adminglobal.createNewCompany("comp1", "p@p.p", true, function () {
            return proxies.dbcompany.doRead_user("comp1", function (comp) {
                return proxies.dbuser.doRead_companies("p@p.p", function (user) {
                    log.push("***** mainCompanyAdmin, add");
                    log.push("comp1 " + JSON.stringify(comp.usersObj));
                    log.push("p@p.p " + JSON.stringify(user.companiesObj));
                    completed();
                });
            });
        });
    }
    proxies.test_adminGlobal_createNewCompany_add = test_adminGlobal_createNewCompany_add;
    function test_adminGlobal_createNewCompany_remove(log, completed) {
        proxies.adminglobal.createNewCompany("comp1", "p@p.p", false, function () {
            return proxies.dbcompany.doRead_user("comp1", function (comp) {
                return proxies.dbuser.doRead_companies("p@p.p", function (user) {
                    log.push("***** mainCompanyAdmin, remove");
                    log.push("comp1 " + JSON.stringify(comp.usersObj));
                    log.push("p@p.p " + JSON.stringify(user.companiesObj));
                    completed();
                });
            });
        });
    }
    proxies.test_adminGlobal_createNewCompany_remove = test_adminGlobal_createNewCompany_remove;
    function test_adminGlobal_createNewCompany_add_add(log, completed) {
        proxies.adminglobal.createNewCompany("comp1", "p@p.p", true, function () {
            return proxies.adminglobal.createNewCompany("comp1", "p2@p.p", true, function () {
                return proxies.dbcompany.doRead_user("comp1", function (comp) {
                    return proxies.dbuser.doRead_companies("p@p.p", function (user1) {
                        return proxies.dbuser.doRead_companies("p2@p.p", function (user2) {
                            log.push("***** mainCompanyAdmin, add, add");
                            log.push("comp1 " + JSON.stringify(comp.usersObj));
                            log.push("p@p.p " + JSON.stringify(user1.companiesObj));
                            log.push("p2@p.p " + JSON.stringify(user2.companiesObj));
                            completed();
                        });
                    });
                });
            });
        });
    }
    proxies.test_adminGlobal_createNewCompany_add_add = test_adminGlobal_createNewCompany_add_add;
    function test_adminGlobal_createNewCompany_add_remove(log, completed) {
        proxies.adminglobal.createNewCompany("comp1", "p@p.p", true, function () {
            return proxies.adminglobal.createNewCompany("comp1", "p2@p.p", false, function () {
                return proxies.dbcompany.doRead_user("comp1", function (comp) {
                    return proxies.dbuser.doRead_companies("p@p.p", function (user1) {
                        return proxies.dbuser.doRead_companies("p2@p.p", function (user2) {
                            log.push("***** mainCompanyAdmin, add, remove");
                            log.push("comp1 " + JSON.stringify(comp.usersObj));
                            log.push("p@p.p " + JSON.stringify(user1.companiesObj));
                            log.push("p2@p.p " + JSON.stringify(user2.companiesObj));
                            completed();
                        });
                    });
                });
            });
        });
    }
    proxies.test_adminGlobal_createNewCompany_add_remove = test_adminGlobal_createNewCompany_add_remove;
    function test_adminGlobal_getCompaniesAndTheirAdmins(log, completed) {
        proxies.adminglobal.getCompaniesAndTheirAdmins(function (res) {
            log.push("***** mainCompanyAdmin, getMainCompanyAdmins");
            log.push(JSON.stringify(res));
            completed();
        });
    }
    proxies.test_adminGlobal_getCompaniesAndTheirAdmins = test_adminGlobal_getCompaniesAndTheirAdmins;
    //********** ADMIN COMPANY
    function test_adminCompany(log, completed) {
        log.push('');
        log.push('******************************');
        log.push('ADMIN COMPANY');
        proxies.test.testDeleteAll(function () {
            return test_adminCompany_createNewCompany_add_remove(log, function () {
                return proxies.test.testDeleteAll(function () {
                    return test_adminCompany_createNewCompany_add_company_system_admin(log, function () {
                        return test_adminCompany_createNewCompany_remove_company_admin(log, function () {
                            log.push('');
                            proxies.test.testDeleteAll(function () {
                                return test_adminCompany_evaluator_add_remove(log, function () {
                                    completed();
                                });
                            });
                        });
                    });
                });
            });
        });
    }
    proxies.test_adminCompany = test_adminCompany;
    function test_adminCompany_createNewCompany_add_remove(log, completed) {
        proxies.admincompany.setCompanyUserRoles("comp1", "p@p.p", LMComLib.CompRole.Department | LMComLib.CompRole.Admin, function () {
            return proxies.admincompany.setCompanyUserRoles("comp1", "p2@p.p", LMComLib.CompRole.HumanEvalManager, function () {
                return proxies.admincompany.getCompanyUserRoles("comp1", function (res1) {
                    return proxies.admincompany.setCompanyUserRoles("comp1", "p2@p.p", 0, function () {
                        return proxies.admincompany.getCompanyUserRoles("comp1", function (res2) {
                            log.push("***** otherCompanyAdmins, add, remove");
                            log.push(JSON.stringify(res1));
                            log.push(JSON.stringify(res2));
                            completed();
                        });
                    });
                });
            });
        });
    }
    proxies.test_adminCompany_createNewCompany_add_remove = test_adminCompany_createNewCompany_add_remove;
    function test_adminCompany_createNewCompany_add_company_system_admin(log, completed) {
        proxies.adminglobal.createNewCompany("comp1", "p@p.p", true, function () {
            return proxies.admincompany.setCompanyUserRoles("comp1", "p@p.p", LMComLib.CompRole.Department, function () {
                return proxies.admincompany.getCompanyUserRoles("comp1", function (res1) {
                    log.push("***** otherCompanyAdmins, add company and system admin");
                    log.push(JSON.stringify(res1));
                    completed();
                });
            });
        });
    }
    proxies.test_adminCompany_createNewCompany_add_company_system_admin = test_adminCompany_createNewCompany_add_company_system_admin;
    function test_adminCompany_createNewCompany_remove_company_admin(log, completed) {
        proxies.admincompany.setCompanyUserRoles("comp1", "p@p.p", 0, function () {
            return proxies.admincompany.getCompanyUserRoles("comp1", function (res1) {
                return proxies.adminglobal.getCompaniesAndTheirAdmins(function (res2) {
                    log.push("***** otherCompanyAdmins, remove company admin");
                    log.push(JSON.stringify(res1));
                    log.push(JSON.stringify(res2));
                    completed();
                });
            });
        });
    }
    proxies.test_adminCompany_createNewCompany_remove_company_admin = test_adminCompany_createNewCompany_remove_company_admin;
    function test_adminCompany_evaluator_add_remove(log, completed) {
        proxies.admincompany.setHumanEvaluator("comp1", "p@p.p", [LMComLib.LineIds.English, LMComLib.LineIds.German], function () {
            return proxies.admincompany.getCompanyUserRoles("comp1", function (res1) {
                return proxies.admincompany.setHumanEvaluator("comp1", "p@p.p", [LMComLib.LineIds.English], function () {
                    return proxies.admincompany.getCompanyUserRoles("comp1", function (res2) {
                        return proxies.admincompany.setHumanEvaluator("comp1", "p@p.p", [], function () {
                            return proxies.admincompany.getCompanyUserRoles("comp1", function (res3) {
                                log.push("***** evaluator: add, remove");
                                log.push("ADD: " + JSON.stringify(res1));
                                log.push("EDIT: " + JSON.stringify(res2));
                                log.push("REMOVE: " + JSON.stringify(res3));
                                completed();
                            });
                        });
                    });
                });
            });
        });
    }
    proxies.test_adminCompany_evaluator_add_remove = test_adminCompany_evaluator_add_remove;
    //********** ADMIN PRODUCTS AND LICENCES
    function test_ProductsAndLicences(log, completed) {
        log.push('');
        log.push('******************************');
        log.push('ADMIN PRODUCTS AND LICENCES');
        proxies.test.testDeleteAll(function () {
            return test_prodLic_add_products(log, function () {
                return test_prodLic_del_products(log, function () {
                    return proxies.test.testDeleteAll(function () {
                        return test_prodLic_lic(log, completed);
                    });
                });
            });
        });
    }
    proxies.test_ProductsAndLicences = test_ProductsAndLicences;
    function test_prodLic_add_products(log, completed) {
        proxies.adminglobal.createNewCompany("comp1", "p@p.p", true, function () {
            return proxies.adminlicence.createNewProduct("comp1", "/a/b/c/", false, 10, true, function () {
                return proxies.adminlicence.createNewProduct("comp1", "/a/b/c/", false, 15, true, function () {
                    return proxies.adminlicence.createNewProduct("comp1", "/a/b/c/d/", false, 10, true, function () {
                        return proxies.adminlicence.getAllProductsLicInfo("comp1", function (res1) {
                            return proxies.dbcompany.doRead_licence("comp1", function (comp) {
                                log.push("***** evaluator: add products");
                                log.push(JSON.stringify(res1));
                                log.push("comp1: " + JSON.stringify(comp));
                                completed();
                            });
                        });
                    });
                });
            });
        });
    }
    proxies.test_prodLic_add_products = test_prodLic_add_products;
    function test_prodLic_del_products(log, completed) {
        proxies.adminlicence.createNewProduct("comp1", "/a/b/c/", null, 10, false, function () {
            return proxies.adminlicence.createNewProduct("comp1", "/a/b/c/", null, 15, false, function () {
                return proxies.adminlicence.getAllProductsLicInfo("comp1", function (res1) {
                    return proxies.dbcompany.doRead_licence("comp1", function (comp) {
                        log.push("***** evaluator: delete products");
                        log.push(JSON.stringify(res1));
                        completed();
                    });
                });
            });
        });
    }
    proxies.test_prodLic_del_products = test_prodLic_del_products;
    function test_prodLic_lic(log, completed) {
        proxies.adminglobal.createNewCompany("comp1", "p@p.p", true, function () {
            return proxies.adminlicence.createNewProduct("comp1", "/a/b/c/", false, 10, true, function () {
                return test_login_createUser("p@p.p", function (email) {
                    return test_login_createUser("p2@p.p", function (email) {
                        return proxies.adminlicence.generateLicenceKeys("comp1", "/a/b/c/", 10, 5, function (keys1) {
                            return proxies.dbcompany.doRead_licence("comp1", function (comp) {
                                log.push('');
                                log.push("***** Admin/keyGen.ts, schools/my.ts");
                                log.push("***** generateLicenceKeys");
                                log.push("comp1.licenceObj=" + JSON.stringify(comp.licenceObj));
                                log.push("keys=" + JSON.stringify(keys1));
                                proxies.adminlicence.enterLicenceKey("p@p.p", keys1[0].CompShortId, keys1[0].LicId, keys1[0].LicKeyId, function (res /*0..ok, 1..entered, 2..used*/) {
                                    return proxies.dbcompany.doRead_licence("comp1", function (comp1) {
                                        return proxies.dbuser.doRead_data("p@p.p", function (user) {
                                            return proxies.adminlicence.enterLicenceKey("p@p.p", keys1[0].CompShortId, keys1[0].LicId, keys1[0].LicKeyId, function (res2) {
                                                return proxies.adminlicence.enterLicenceKey("p2@p.p", keys1[1].CompShortId, keys1[1].LicId, keys1[1].LicKeyId, function (res3) {
                                                    return proxies.dbcompany.doRead_licence("comp1", function (comp2) {
                                                        return proxies.adminlicence.enterLicenceKey("p@p.p", keys1[1].CompShortId, keys1[1].LicId, keys1[1].LicKeyId, function (res4) {
                                                            log.push("***** enterLicenceKey");
                                                            log.push("comp1.licenceObj=" + JSON.stringify(comp1.licenceObj));
                                                            log.push("p@p.p.companiesObj=" + JSON.stringify(user.companiesObj));
                                                            log.push("The same user: " + res2.toString());
                                                            log.push("comp1.licenceObj=" + JSON.stringify(comp2.licenceObj));
                                                            log.push("Other user: " + res4.toString());
                                                            completed();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }
    proxies.test_prodLic_lic = test_prodLic_lic;
    //********** LOGIN 
    function test_login_all(log, completed) {
        log.push('');
        log.push('******************************');
        log.push('LOGIN');
        proxies.test.testDeleteAll(function () {
            return test_login_CreateLmUserStart(log, function () {
                return test_login_OnOtherLogin(log, function () {
                    return test_login_lm_to_google_login(log, function () {
                        return test_SaveProfile(log, function () {
                            return test_OnLMLogin(log, function () {
                                return test_GetPassword(log, function () {
                                    return test_ChangePassword(log, function () {
                                        return completed();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }
    proxies.test_login_all = test_login_all;
    var encryptedPsw = Utils.encryptStr("psw");
    function test_login_createUser(email, completed) {
        proxies.login.CreateLmUserStart(encryptedPsw, { EMail: email }, function (email) { return proxies.login.CreateLmUserEnd(email, function () { return completed(email); }); });
    }
    function test_login_CreateLmUserStart(log, completed) {
        test_login_createUser("p@p.p", function (email) {
            return proxies.dbuser.doRead_data(email, function (user) {
                log.push('***** CreateLmUserStart');
                log.push(JSON.stringify(user));
                completed();
            });
        });
    }
    proxies.test_login_CreateLmUserStart = test_login_CreateLmUserStart;
    function test_login_OnOtherLogin(log, completed) {
        proxies.login.OnOtherLogin(LMComLib.OtherType.Google, 'asd asd fas fasd', "p2@p.p", "fm", "lm", function (cook) {
            return proxies.dbuser.doRead_data(cook.EMail, function (user) {
                log.push('***** OnOtherLogin');
                log.push(JSON.stringify(user));
                completed();
            });
        });
    }
    proxies.test_login_OnOtherLogin = test_login_OnOtherLogin;
    function test_login_lm_to_google_login(log, completed) {
        test_login_createUser("p3@p.p", function (email) {
            return proxies.dbuser.doRead_data(email, function (user) {
                log.push('***** lm => google login');
                log.push(JSON.stringify(user));
                proxies.login.OnOtherLogin(LMComLib.OtherType.Google, 'asd asd fas fasd', "p3@p.p", "fm\"'<>?&\\/.", "lm", function (cook) {
                    return proxies.dbuser.doRead_data(email, function (user) {
                        log.push(JSON.stringify(user));
                        completed();
                    });
                });
            });
        });
    }
    proxies.test_login_lm_to_google_login = test_login_lm_to_google_login;
    function test_SaveProfile(log, completed) {
        test_login_createUser("p4@p.p", function (email) {
            return proxies.dbuser.doRead_data(email, function (user) {
                var cook = user.dataObj;
                cook.FirstName = 'Modified FirstName';
                proxies.login.SaveProfile(cook, function () {
                    proxies.dbuser.doRead_data(email, function (user) {
                        log.push('***** SaveProfile');
                        log.push(JSON.stringify(user));
                        completed();
                    });
                });
            });
        });
    }
    proxies.test_SaveProfile = test_SaveProfile;
    function test_OnLMLogin(log, completed) {
        test_login_createUser("p5@p.p", function (email) {
            return proxies.login.OnLMLogin(email, encryptedPsw, function (cook) {
                log.push('***** OnLMLogin');
                log.push(JSON.stringify(cook));
                completed();
            });
        });
    }
    proxies.test_OnLMLogin = test_OnLMLogin;
    function test_GetPassword(log, completed) {
        test_login_createUser("p6@p.p", function (email) {
            return proxies.login.GetPassword("p6@p.p", function (psw) {
                log.push('***** GetPassword');
                log.push(JSON.stringify(Utils.decryptStr(psw)));
                completed();
            });
        });
    }
    proxies.test_GetPassword = test_GetPassword;
    function test_ChangePassword(log, completed) {
        test_login_createUser("p7@p.p", function (email) {
            return proxies.login.ChangePassword("p7@p.p", encryptedPsw, Utils.encryptStr("psw2"), function (ok) {
                return proxies.login.GetPassword("p7@p.p", function (psw) {
                    log.push('***** ChangePassword');
                    log.push(JSON.stringify(Utils.decryptStr(psw)));
                    completed();
                });
            });
        });
    }
    proxies.test_ChangePassword = test_ChangePassword;
})(proxies || (proxies = {}));
var scorm;
(function (scorm) {
    scorm.Cmd_Logger_Type = 'scorm.Cmd_Logger';
    function Cmd_Logger_Create(id, data, companyId, productId, scormId, lmcomId, sessionId) {
        return { id: id, data: data, companyId: companyId, productId: productId, scormId: scormId, date: Utils.nowToInt(), lmcomId: lmcomId, sessionId: sessionId };
    }
    scorm.Cmd_Logger_Create = Cmd_Logger_Create;
    scorm.Cmd_resetModules_Type = 'scorm.Cmd_resetModules';
    function Cmd_resetModules_Create(modIds, companyId, productId, scormId, lmcomId, sessionId) {
        return { modIds: modIds, companyId: companyId, productId: productId, scormId: scormId, date: Utils.nowToInt(), lmcomId: lmcomId, sessionId: sessionId };
    }
    scorm.Cmd_resetModules_Create = Cmd_resetModules_Create;
    scorm.Cmd_readCrsResults_Type = 'scorm.Cmd_readCrsResults';
    function Cmd_readCrsResults_Create(companyId, productId, scormId, lmcomId, sessionId) {
        return { companyId: companyId, productId: productId, scormId: scormId, date: Utils.nowToInt(), lmcomId: lmcomId, sessionId: sessionId };
    }
    scorm.Cmd_readCrsResults_Create = Cmd_readCrsResults_Create;
    scorm.Cmd_readModuleResults_Type = 'scorm.Cmd_readModuleResults';
    function Cmd_readModuleResults_Create(key, companyId, productId, scormId, lmcomId, sessionId) {
        return { key: key, companyId: companyId, productId: productId, scormId: scormId, date: Utils.nowToInt(), lmcomId: lmcomId, sessionId: sessionId };
    }
    scorm.Cmd_readModuleResults_Create = Cmd_readModuleResults_Create;
    scorm.Cmd_saveUserData_Type = 'scorm.Cmd_saveUserData';
    function Cmd_saveUserData_Create(data, companyId, productId, scormId, lmcomId, sessionId) {
        return { data: data, companyId: companyId, productId: productId, scormId: scormId, date: Utils.nowToInt(), lmcomId: lmcomId, sessionId: sessionId };
    }
    scorm.Cmd_saveUserData_Create = Cmd_saveUserData_Create;
    scorm.Cmd_createArchive_Type = 'scorm.Cmd_createArchive';
    function Cmd_createArchive_Create(companyId, productId, scormId, lmcomId, sessionId) {
        return { companyId: companyId, productId: productId, scormId: scormId, date: Utils.nowToInt(), lmcomId: lmcomId, sessionId: sessionId };
    }
    scorm.Cmd_createArchive_Create = Cmd_createArchive_Create;
    scorm.Cmd_testResults_Type = 'scorm.Cmd_testResults';
    function Cmd_testResults_Create(companyId, productId, scormId, lmcomId, sessionId) {
        return { companyId: companyId, productId: productId, scormId: scormId, date: Utils.nowToInt(), lmcomId: lmcomId, sessionId: sessionId };
    }
    scorm.Cmd_testResults_Create = Cmd_testResults_Create;
    scorm.Cmd_testCert_Type = 'scorm.Cmd_testCert';
    function Cmd_testCert_Create(loc, companyId, productId, scormId, lmcomId, sessionId) {
        return { loc: loc, companyId: companyId, productId: productId, scormId: scormId, date: Utils.nowToInt(), lmcomId: lmcomId, sessionId: sessionId };
    }
    scorm.Cmd_testCert_Create = Cmd_testCert_Create;
})(scorm || (scorm = {}));
var CourseMeta;
(function (CourseMeta) {
    var DictInfoModel = (function (_super) {
        __extends(DictInfoModel, _super);
        function DictInfoModel(urlParts) {
            _super.call(this, schools.tDictInfo, urlParts);
            this.bodyTmpl = "TSchoolDictInfoBody";
        }
        DictInfoModel.prototype.doUpdate = function (completed) { completed(); };
        DictInfoModel.prototype.title = function () { return CSLocalize('0f6df5cdf72342198616971c1c7c8419', 'Bilingual Dictionary'); };
        return DictInfoModel;
    })(schools.Model);
    CourseMeta.DictInfoModel = DictInfoModel;
    var GrModel = (function (_super) {
        __extends(GrModel, _super);
        function GrModel() {
            _super.apply(this, arguments);
            this.prevNextVisible = true;
        }
        GrModel.prototype.grammContentClick = function () { Pager.navigateToHash(schools.createGrammUrl(schools.tGrammContent, "")); };
        return GrModel;
    })(CourseMeta.MetaModel);
    CourseMeta.GrModel = GrModel;
    var GrFolder = (function (_super) {
        __extends(GrFolder, _super);
        function GrFolder(urlParts) {
            _super.call(this, schools.tGrammFolder, urlParts);
            this.ignorePrevNext = true;
            this.bodyTmpl = "TGramm_Folder";
        }
        GrFolder.prototype.idxFrom = function () { return CSLocalize('fe6997da0e5e407288cda87e156820a0', 'Content'); };
        return GrFolder;
    })(GrModel);
    CourseMeta.GrFolder = GrFolder;
    var GrContent = (function (_super) {
        __extends(GrContent, _super);
        function GrContent(urlParts) {
            _super.call(this, schools.tGrammContent, urlParts);
            this.prevNextVisible = false;
            this.bodyTmpl = "TSchoolGrammContentBody";
        }
        GrContent.prototype.breadcrumbs = function () { return []; };
        GrContent.prototype.title = function () { return CourseMeta.actGrammar.title + ", " + CSLocalize('49dd8f327c6f484aaff1c9412690b970', 'content'); };
        return GrContent;
    })(GrModel);
    CourseMeta.GrContent = GrContent;
    var GrPage = (function (_super) {
        __extends(GrPage, _super);
        function GrPage(urlParts) {
            _super.call(this, schools.tGrammPage, urlParts);
            this.bodyTmpl = "TSchoolGrammBody";
        }
        GrPage.prototype.doUpdate = function (completed) {
            CourseMeta.lib.onChangeUrl(this.productUrl, this.persistence, this.url, function (loadedEx) {
                return CourseMeta.lib.doRefresh(function () {
                    return CourseMeta.lib.displayEx(loadedEx, null, function (loadedEx) { return DictConnector.initDict(CourseMeta.actGrammarModule.dict); });
                });
            });
        };
        //Prev x Next pro gramatiku
        GrPage.prototype.hasPrev = function () { return !!CourseMeta.actGrammarEx.prev; };
        GrPage.prototype.hasNext = function () { return !!CourseMeta.actGrammarEx.next; };
        GrPage.prototype.prevClick = function () { CourseMeta.gui.gotoData(CourseMeta.actGrammarEx.prev); };
        GrPage.prototype.nextClick = function () { CourseMeta.gui.gotoData(CourseMeta.actGrammarEx.next); };
        GrPage.prototype.idxFrom = function () { return (CourseMeta.actGrammarEx.idx + 1).toString() + "/" + CourseMeta.actGrammarExCount.toString() + ": " + CSLocalize('5592859748ca440d97b0e2bcdd1ff22b', 'content'); };
        GrPage.prototype.exerciseHtml = function () { return JsRenderTemplateEngine.render("c_gen", CourseMeta.actGrammarEx.page); };
        return GrPage;
    })(GrModel);
    CourseMeta.GrPage = GrPage;
    //Pager.registerAppLocator(schools.appId, schools.tDictInfo, (urlParts, completed) => completed(new DictInfoModel(urlParts)));
    //Pager.registerAppLocator(schools.appId, schools.tGrammFolder, (urlParts, completed) => completed(new GrFolder(urlParts)));
    //Pager.registerAppLocator(schools.appId, schools.tGrammPage, (urlParts, completed) => completed(new GrPage(urlParts)));
    //Pager.registerAppLocator(schools.appId, schools.tGrammContent, (urlParts, completed) => completed(new GrContent(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schools.tDictInfo, schools.appId, schools.tDictInfo, 4, function (urlParts) { return new DictInfoModel(urlParts); }); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schools.tGrammFolder, schools.appId, schools.tGrammFolder, 4, function (urlParts) { return new GrFolder(urlParts); }); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schools.tGrammPage, schools.appId, schools.tGrammPage, 4, function (urlParts) { return new GrPage(urlParts); }); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schools.tGrammContent, schools.appId, schools.tGrammContent, 4, function (urlParts) { return new GrContent(urlParts); }); });
})(CourseMeta || (CourseMeta = {}));
/// <reference path="../jslib/js/GenLMComLib.ts" />
/// <reference path="GenCourse.ts" />
/// <reference path="GenSchools.ts" />
/// <reference path="../courses/GenCourseModel.ts" />
var schools;
(function (schools) {
    //****************** informace o kurzech a testech
    (function (PretestMode) {
        PretestMode[PretestMode["first"] = 0] = "first";
        PretestMode[PretestMode["testHome"] = 1] = "testHome";
        PretestMode[PretestMode["testForm"] = 2] = "testForm";
        PretestMode[PretestMode["testTest"] = 3] = "testTest";
        PretestMode[PretestMode["testTestFinished"] = 4] = "testTestFinished";
        PretestMode[PretestMode["tested"] = 5] = "tested"; //test dobehl, je nastaven zacatek kurzu
    })(schools.PretestMode || (schools.PretestMode = {}));
    var PretestMode = schools.PretestMode;
    ;
    ;
})(schools || (schools = {}));
var schools;
(function (schools) {
    schools.tMy = "schoolMyModel".toLowerCase();
    schools.tCourseMeta = "schoolCourseMetaModel".toLowerCase();
    schools.tCoursePretest = "schoolCoursePretestModel".toLowerCase();
    schools.tExCpv = "cpv_exercise";
    schools.tDictCpv = "cpv_dict";
    schools.tMediaCpv = "cpv_media";
    schools.tEx = "schoolExModel".toLowerCase();
    schools.tGrammFolder = "schoolGrammModel".toLowerCase();
    schools.tGrammPage = "schoolGrammPageModel".toLowerCase();
    schools.tGrammContent = "schoolGrammContentModel".toLowerCase();
    schools.tDictInfo = "schoolDictInfoModel".toLowerCase();
    schools.tTest = "schoolTestModel".toLowerCase();
    schools.memoryPersistId = 'memory';
    function getHash(type, companyId, productUrl, persistence, url) {
        return oldPrefix + [schools.appId, type, companyId.toString(), encodeUrlHash(productUrl), persistence, encodeUrlHash(url)].join(hashDelim);
    }
    schools.getHash = getHash;
    function InitModel(compl) {
        Logger.traceMsg('Model.InitModel');
        var completed = function () {
            Logger.traceMsg('Model.InitModel completed');
            boot.minInit();
            //$('body').addClass(Trados.actLangCode);
            //if (cfg.designId) $('body').addClass("design-" + cfg.designId);
            //if (Trados.isRtl) $('body').addClass("rtl-able");
            compl();
        };
        //query string as lowercase
        var params = LowUtils.parseQuery(location.search);
        if (!params)
            params = {};
        var pn;
        for (pn in params) {
            var lp = pn.toLowerCase();
            if (pn == lp)
                continue;
            params[lp] = params[pn];
            delete params[pn];
        }
        //prevezmi parametry z query stringu
        var qr = params['persistType'.toLowerCase()];
        if (qr)
            cfg.persistType = schools.persistTypes[qr];
        qr = params['displayMode'.toLowerCase()];
        if (qr)
            cfg.displayMode = schools.displayModes[qr];
        var initHash = function (hash) { Pager.initHash = function () { return _.isEmpty(cfg.hash) ? hash : cfg.hash; }; };
        switch (cfg.target) {
            case LMComLib.Targets.author:
                CourseMeta.persist = persistMemory.persistCourse;
                //var search = LowUtils.parseQuery(location.search);
                //CourseMeta.forceEval = search != null && search["forceeval"] == "true";
                Trados.adjustLoc(function () {
                    var cook = LMComLib.LMCookieJS_Create(scormCompanyId, 0, null, "id", null, LMComLib.OtherType.Moodle, "id", "firstName", "lastName", '', 0, 0, null);
                    LMStatus.setCookie(cook, false);
                    LMStatus.Cookie = cook;
                    initHash(getHash(schools.tCourseMeta, scormCompanyId, cfg.rootProductId, null, null));
                    completed();
                });
                break;
            case LMComLib.Targets.scorm:
                switch (cfg.persistType) {
                    case schools.persistTypes.persistScormEx:
                        CourseMeta.persist = persistScormEx.persistCourse;
                        Trados.adjustLoc(function () {
                            scorm.init(function (compHost, id, firstName, lastName, isFirstEnter) {
                                var cook = LMComLib.LMCookieJS_Create(scormCompanyId, 0, null, id, null, LMComLib.OtherType.Moodle, id, firstName, lastName, '', 0, 0, null);
                                LMStatus.setCookie(cook, false);
                                LMStatus.Cookie = cook;
                                initHash(getHash(schools.tCourseMeta, scormCompanyId, cfg.rootProductId, null, null));
                                CourseMeta.lib.adjustAllProductList(function () {
                                    if (cfg.licenceConfig && cfg.licenceConfig.isDynamic)
                                        boot.loadCourseJS(completed);
                                    else
                                        completed();
                                });
                            });
                        });
                        break;
                    case schools.persistTypes.persistMemory:
                        CourseMeta.persist = persistMemory.persistCourse;
                        Trados.adjustLoc(function () {
                            //scorm.initDummy();
                            var cook = LMComLib.LMCookieJS_Create(scormCompanyId, 0, null, "id", null, LMComLib.OtherType.Moodle, "id", "firstName", "lastName", '', 0, 0, null);
                            LMStatus.setCookie(cook, false);
                            LMStatus.Cookie = cook;
                            initHash(getHash(schools.tCourseMeta, scormCompanyId, cfg.rootProductId, null, null));
                            CourseMeta.lib.adjustAllProductList(completed); //nacteni infos o vsech produktech
                        });
                        break;
                    default:
                        CourseMeta.persist = persistNewEA.persistCourse;
                        Trados.adjustLoc(function () {
                            scorm.init(function (compHost, id, firstName, lastName, isFirstEnter) {
                                Pager.ajaxGet(//z moodle info adjustuj uzivatele a firmu
                                Pager.pathType.restServices, Login.CmdAdjustScormUser_Type, Login.CmdAdjustScormUser_Create(compHost, id, firstName, lastName, isFirstEnter, cfg.rootProductId), function (res) {
                                    LMStatus.setCookie(res.Cookie, false);
                                    LMStatus.Cookie = res.Cookie;
                                    setTimeout(LMStatus.loggedBodyClass, 1);
                                    initHash(getHash(schools.tCourseMeta, res.companyId, cfg.rootProductId, null, null));
                                    CourseMeta.lib.adjustAllProductList(completed); //nacteni infos o vsech produktech
                                });
                            });
                        });
                        break;
                }
                break;
            //case LMComLib.Targets.phoneGap:
            //case LMComLib.Targets.download:
            //case LMComLib.Targets.sl:
            //  setTimeout(LMStatus.loggedBodyClass, 1);
            //  //LMStatus.loggedBodyClass();
            //  LMStatus.Cookie = offlineCookie;
            //  persistLocal.Init(cfg.target, () => {
            //    Trados.adjustLoc(() => {
            //      Pager.initUrl = new Url(tHome, offlineCompanyId, cfg.rootCourse, null);
            //      prods.init(completed)//nacteni infos o vsech produktech
            //    });
            //  });
            //  break;
            case LMComLib.Targets.web:
                switch (cfg.persistType) {
                    case schools.persistTypes.persistScormEx:
                        CourseMeta.persist = persistScormEx.persistCourse;
                        Trados.adjustLoc(function () {
                            initHash(getHash(schools.tCourseMeta, scormCompanyId, cfg.rootProductId, null, null));
                            LMStatus.adjustLoggin(function () { return CourseMeta.lib.adjustAllProductList(completed); });
                        });
                        break;
                    case schools.persistTypes.persistMemory:
                        LMStatus.Cookie = offlineCookie;
                        CourseMeta.persist = persistMemory.persistCourse;
                        Pager.initHash = function () { return cfg.hash ? cfg.hash : Gui2.skin.instance.getSkinHome(Login.getHash(Login.pageLogin)); };
                        Trados.adjustLoc(function () {
                            CourseMeta.lib.adjustAllProductList(completed);
                            //initHash(getHash(tCourseMeta, scormCompanyId, cfg.rootProductId, null));
                            //LMStatus.adjustLoggin(() => CourseMeta.lib.adjustAllProductList(completed));
                        });
                        break;
                    default:
                        CourseMeta.persist = persistNewEA.persistCourse;
                        Pager.initHash = function () { return cfg.hash ? cfg.hash : Gui2.skin.instance.getSkinHome(Login.getHash(Login.pageLogin)); };
                        Trados.adjustLoc(function () {
                            //initHash(Gui2.skin.instance.getLoginHome(Login.getHash(Login.pageLogin)));
                            Pager.afterLoginInit = function (completed) {
                                Logger.traceMsg('Model.InitModel afterLoginInit');
                                //Pager.initHash = getHash(tMy, -1, null, null);
                                if (cfg.licenceConfig && cfg.licenceConfig.isDynamic)
                                    boot.loadCourseJS(completed);
                                else
                                    completed();
                            };
                            LMStatus.adjustLoggin(function () { return CourseMeta.lib.adjustAllProductList(completed); });
                        });
                        break;
                }
                break;
            default:
                throw "not implemented";
        }
    }
    schools.InitModel = InitModel;
    var scormCompanyId = 0x4FFFFFFF - 1;
    function LMComUserId() { return !LMStatus.isLogged() ? -1 : LMStatus.Cookie.id; }
    schools.LMComUserId = LMComUserId;
    function homeTitle() { return CSLocalize('5c4e78c9f3884816a78d1d4d9fe1f458', 'My Online Courses and Tests'); }
    schools.homeTitle = homeTitle;
    var RootModel = (function (_super) {
        __extends(RootModel, _super);
        function RootModel() {
            _super.apply(this, arguments);
        }
        RootModel.prototype.pageChanged = function (oldPg, newPg) {
            if (oldPg == null || newPg == null)
                return;
            var crsTypes = [schools.tEx, schools.tTest, schools.tMy, schools.tCourseMeta];
            if (_.any(crsTypes, function (t) { return newPg.type == t; }))
                LMStatus.clearReturnUrl(); //navrat do kurzu, posledni kurz Url
            if (_.any(crsTypes, function (t) { return oldPg.type == t; }))
                LMStatus.setReturnUrl(oldPg.getHash()); //skok z kurzu, zapamatuj si posledni kurz Url
        };
        RootModel.prototype.loaded = function () {
            CourseMeta.lib.finishHtmlDOM(); //uprav anchory (click event z href)
            $(window).trigger("resize"); //nektere komponenty, napr. progress bar, potrebuji pri resize inicializovat
        };
        return RootModel;
    })(Pager.ViewModelRoot);
    schools.RootModel = RootModel;
    Pager.rootVM = new RootModel();
    var Model = (function (_super) {
        __extends(Model, _super);
        function Model(typeName, urlParts /*companyId: number, productUrl: string, url: string*/) {
            _super.call(this, schools.appId, typeName, urlParts);
            CourseMeta.actCompanyId = this.copmanyId = urlParts && urlParts.length >= 1 ? parseInt(urlParts[0]) : -1;
            this.productUrl = decodeUrlHash(urlParts && urlParts.length >= 2 ? urlParts[1] : null);
            this.persistence = urlParts && urlParts.length >= 3 ? urlParts[2] : null;
            this.url = decodeUrlHash(urlParts && urlParts.length >= 4 ? urlParts[3] : null);
            DictConnector.actDictData = null;
            this.tb = new schools.TopBarModel(this);
        }
        Model.prototype.hasBreadcrumb = function () { return false; };
        Model.prototype.normalDisplay = function () { return true; };
        Model.prototype.previewExDisplay = function () { return false; };
        Model.prototype.update = function (completed) {
            SndLow.Stop();
            SndLow.needInstallFalse();
            if (!LMStatus.isLogged()) {
                completed();
                return;
            }
            this.doUpdate(completed);
        };
        Model.prototype.doUpdate = function (completed) { completed(); };
        Model.prototype.hasLogin = function () { return cfg.target == LMComLib.Targets.web; };
        Model.prototype.title = function () { return homeTitle(); };
        Model.prototype.iconId = function () { return ''; };
        Model.prototype.breadcrumbs = function () { return []; };
        return Model;
    })(Pager.Page);
    schools.Model = Model;
    var offlineCompanyId = 0x4FFFFFFF;
    var offlineCookie = { id: 0x4FFFFFFF, EMail: null, Login: "localUser", LoginEMail: null, Type: 0, TypeId: null, FirstName: null, LastName: null, OtherData: null, Company: null, created: 0, Roles: null, VerifyStatus: 0 };
    function createGrammUrl(type, url) { return getHash(type, CourseMeta.actCompanyId, encodeUrlHash(CourseMeta.actProduct.url), CourseMeta.actProductPersistence, encodeUrlHash(url)); }
    schools.createGrammUrl = createGrammUrl;
    function createDictIntroUrl() { return getHash(schools.tDictInfo, 0, '', null, null); }
    schools.createDictIntroUrl = createDictIntroUrl;
    //export function createHomeUrlStd(): string { return false ? getHash(tCourseMeta, CourseMeta.actCompanyId, CourseMeta.actProduct.url, "") : getHash(tMy, -1, null, null); }
    function createHomeUrlStd() { return getHash(schools.tMy, -1, null, null, null); }
    schools.createHomeUrlStd = createHomeUrlStd;
})(schools || (schools = {}));
///#DEBUG
function fake() {
    CSLocalize('0cf19a3b455d40828295252fb0a321b7', 'Assessment test for Beginners');
    CSLocalize('1d2a3c242b284bca9259b776852b0b9a', 'Assessment test for Advanced');
    CSLocalize('1eb1c7d6e2184db88ce765cdc2ab2efa', 'Assessment test for Advanced');
    CSLocalize('22562c9261a844319eeb5b604bfded79', 'chapters');
    CSLocalize('2d31eeae1c5d483db53452f07d20e0d9', 'Your answers are not all correct. Do you really want to evaluate the exercise?');
    CSLocalize('2ee8666492594108b4ac42d5900f1e2e', 'Congratulations! You have completed the questionnaire. We recommend you do the');
    CSLocalize('2fb0c828db9141ca9dcf0890e3256a51', 'Do you really want to remove this chapter from the learning process?');
    CSLocalize('2fdca34d83c342c6bdf8f99ed718f8be', 'Assessment test for Pre-intermediate');
    CSLocalize('324ea9db901844619d3d1de5d05293fd', 'Assessment test for Beginners');
    CSLocalize('344390c563454f23baea0758357cd6bf', 'Congratulations! You have completed the questionnaire. We recommend you do the');
    CSLocalize('3b2515a8ef6540feb9aa61ba57223ce5', 'Assessment test for Pre-intermediate');
    CSLocalize('3b473d38d79342a18501f9401b734eb6', 'Congratulations! You have completed the chapter.');
    CSLocalize('3de6029a9178476b8bb5b620a31cc546', 'Assessment test for Beginners');
    CSLocalize('43073e32fb5c4ee08d247e501c45a3df', 'Congratulations! You have completed the entrance test.');
    CSLocalize('4b7b50da82224dac90931a97fa8b4bd2', 'The test is not completed, do you really wish to interrupt it? Note: Your results will be saved anyway.');
    CSLocalize('4e20b0cbab9f42508ee43c7f236eb061', 'Congratulations! You have completed the questionnaire. We recommend you do the');
    CSLocalize('58507bbcbd8144caa48d2742ae906200', 'Finished:');
    CSLocalize('5ac28df92076478d93e8913ea2c2b6b9', 'Assessment test for Beginners');
    CSLocalize('6c18d525496449aea1095bc4d51a3071', 'The test is not completed, do you really wish to interrupt it? Note: Your results will be saved anyway.');
    CSLocalize('6ca45688007e4d2cbb6337be6121c148', 'Score');
    CSLocalize('71661be93a204b0398c4628f52611b46', 'done');
    CSLocalize('781a102bcc5041c583e7481d9b24a3d3', 'Assessment test for Beginners');
    CSLocalize('7e1cd46186014c21b971f869981dfff4', 'Do you really want to set the starting point of your study to the chapter');
    CSLocalize('825d0d1d7d014d84a8c00f767bd18f69', 'Congratulations! You have completed the chapter.');
    CSLocalize('863ecfa04f0d438ba29f4d9f570bd523', 'Score:');
    CSLocalize('8d9a5fde99a44f0d8e0012c43b9e2a98', 'Assessment test for Advanced');
    CSLocalize('8e457cd200f44e67bb943f27c20a3b8f', 'Score');
    CSLocalize('90e3f558723446fe9e70f5acfb8eb502', 'The test is not completed, do you really wish to interrupt it? Note: Your results will be saved anyway.');
    CSLocalize('9ce505e50f954a72a64921f397eb1a1e', 'Congratulations! You have completed the questionnaire. We recommend you do the');
    CSLocalize('a988706addc34fb9b23bb8ccde488bec', 'For a better assessment of your language knowledge you will get');
    CSLocalize('b6652a077fb0401faebb8c283e4b8117', 'Congratulations! You have completed the questionnaire. We recommend you do the');
    CSLocalize('b933199b227a4239b27e4ba75a4a2035', 'The test is not completed, do you really wish to interrupt it? Note: Your results will be saved anyway.');
    CSLocalize('c97bd8fbd7434033adb520be906efb6e', 'Assessment test for Advanced');
    CSLocalize('cf1af1547fdf4219b0a5d5f20dc3422f', 'Congratulations! You have completed the chapter. Click on the \'Continue\' button to continue.');
    CSLocalize('d831ae9ba2bc418382d361c2c29a3763', 'Do you really want to return this chapter to the learning process?');
    CSLocalize('e3e1407956114f62b924b8911f1deeb7', 'This chapter is not completed, do you really wish to interrupt your study? Note: Your results will be saved anyway.');
    CSLocalize('e931e33b05af468e93c874190465fa52', 'Do you really want to restore this chapter to the initial (uncompleted) state, so that you can go through it again? By restoring you will lose the results of all exercises from this chapter.');
    CSLocalize('f45743416d034fe6a67f7c8d44ed859f', 'Assessment test for Advanced');
    CSLocalize('f5f06b394fea4d4aa850b2d4e5a05470', 'The test is not completed, do you really wish to interrupt it? Note: Your results will be saved anyway.');
}
///#ENDDEBUG
var fakeLoc = null;
// <reference path="../jslib/jsd/knockout.d.ts" />
var schoolMy;
(function (schoolMy) {
    var errWrongFormat = function () { return CSLocalize('52e17a9a1f654e1893f5cb9131cc1762', 'Incorrect format of the License key. Please, check if you entered it correctly.'); };
    var errUsed = function () { return CSLocalize('28df461f6e2c47f7a8cde96ed974be9e', 'License key used by another user'); };
    var errAdded = function () { return CSLocalize('7a824dbe23b34680b5149663ac66ed24', 'License key already entered'); };
    var errOK = function () { return CSLocalize('6e8be0cf1d8e411cb0876ae1aea57c4c', 'License key accepted'); };
    var Model = (function (_super) {
        __extends(Model, _super);
        function Model() {
            var _this = this;
            _super.call(this, schools.tMy, null);
            this.licKey = validate.create(validate.types.rangelength, function (prop) {
                prop.min = 8;
                prop.max = 8;
            });
            this.licKeyOK = function () {
                _this.licKey.message('');
                if (!validate.isPropsValid([_this.licKey]))
                    return;
                var k;
                var key = _this.licKey();
                key = key.trim();
                try {
                    k = keys.fromString(key);
                }
                catch (err) {
                    _this.licKey.message(errWrongFormat());
                    return;
                }
                Pager.ajaxGet(Pager.pathType.restServices, Login.CmdEnterLicKey_Type, LMStatus.createCmd(function (r) { r.CompLicId = k.licId; r.Counter = k.counter; }), 
                //Login.CmdEnterLicKey_Create(LMStatus.Cookie.id, k.licId, k.counter),
                function (res) {
                    switch (res.res) {
                        case Login.EnterLicenceResult.ok:
                            //this.licKey.message(errOK());
                            _this.licKey("");
                            Login.adjustMyData(true, function () { return Pager.reloadPage(_this); });
                            anim.collapseExpanded();
                            //Pager.closePanels();
                            return;
                        case Login.EnterLicenceResult.added:
                            _this.licKey.message(errAdded());
                            return;
                        case Login.EnterLicenceResult.used:
                            _this.licKey.message(errUsed());
                            return;
                        case Login.EnterLicenceResult.wrongCounter:
                        case Login.EnterLicenceResult.wrongId:
                            _this.licKey.message(errWrongFormat());
                            return;
                    }
                });
            };
        }
        Model.prototype.doUpdate = function (completed) {
            var _this = this;
            this.systemAdmin = Login.isSystemAdmin() ? function () { return LMStatus.setReturnUrlAndGoto(oldPrefix + "schoolAdmin" + hashDelim + "schoolAdminModel"); } : null;
            //var hasCompany = /*this.systemAdmin != null || Login.companyExists();
            if (Login.companyExists()) {
                this.companies = _.map(Login.myData.Companies, function (c) {
                    TreeView.adjustParents(c.DepTree.Departments);
                    var comp = {
                        title: c.Title, items: [], courses: null, data: c,
                        department: ko.observable(c.PublisherOwnerUserId != 0 ? null : TreeView.findNode(c.DepTree.Departments, function (d) { return d.Id == c.DepSelected; })),
                        treeViewModel: null
                    };
                    if (c.DepTree.Departments)
                        comp.treeViewModel = new TreeView.Model(c.DepTree.Departments, false, null, {
                            withCheckbox: false,
                            editable: false,
                            onLinkClick: function (nd) {
                                Pager.ajaxGet(Pager.pathType.restServices, Login.CmdSaveDepartment_Type, Login.CmdSaveDepartment_Create(LMStatus.Cookie.id, c.Id, (nd.data).Id), function (res) {
                                    comp.department((nd.data));
                                    anim.collapseExpanded();
                                });
                            }
                        });
                    var it;
                    if ((c.RoleEx.Role & LMComLib.CompRole.Admin) != 0)
                        comp.items.push(it = {
                            id: 'manage_admin',
                            title: CSLocalize('7dbd71d1e623446e884febbd07c72f9f', 'Manage administrators and their roles'),
                            gotoItem: function () { return Pager.navigateToHash(schoolAdmin.getHash(schoolAdmin.compAdminsTypeName, c.Id)); }
                        });
                    if ((c.RoleEx.Role & LMComLib.CompRole.Products) != 0)
                        comp.items.push(it = {
                            id: 'manage_products',
                            title: CSLocalize('fd0acec43f7d487ba635b4a55343b23a', 'Manage products'),
                            gotoItem: function () { return Pager.navigateToHash(schoolAdmin.getHash(schoolAdmin.productsTypeName, c.Id)); }
                        });
                    if ((c.RoleEx.Role & LMComLib.CompRole.Keys) != 0)
                        comp.items.push(it = {
                            id: 'gen_keys',
                            title: CSLocalize('643da9a0b02b4e209e26e20ca620f54c', 'Generate license keys'),
                            gotoItem: function () { return Pager.navigateToHash(schoolAdmin.getHash(schoolAdmin.keyGenTypeName, c.Id)); }
                        });
                    if ((c.RoleEx.Role & LMComLib.CompRole.Department) != 0)
                        comp.items.push(it = {
                            id: 'edit_criteria',
                            title: CSLocalize('9231de5764184fd7a75389aa2ecfdad5', 'Edit Department structure and criteria for tracking study results'),
                            gotoItem: function () { return Pager.navigateToHash(schoolAdmin.getHash(schoolAdmin.editDepartmentTypeName, c.Id)); }
                        });
                    if ((c.RoleEx.Role & LMComLib.CompRole.Results) != 0)
                        comp.items.push(it = {
                            id: 'view_students_results',
                            title: CSLocalize('2fb8a691d86e4f4181dba3f48708a363', 'View Student results'),
                            gotoItem: function () { return Pager.navigateToHash(schoolAdmin.getHash(schoolAdmin.schoolUserResultsTypeName, c.Id)); }
                        });
                    if ((c.RoleEx.Role & LMComLib.CompRole.HumanEvalator) != 0)
                        comp.items.push(it = {
                            id: 'human_eval',
                            title: CSLocalize('f8fce20059f24b5e82b52bd41fef4bd4', 'Evaluate Speaking and Writing skills'),
                            gotoItem: function () { return Pager.navigateToHash(schoolAdmin.getHash(schoolAdmin.humanEvalTypeName, c.Id)); }
                        });
                    if ((c.RoleEx.Role & LMComLib.CompRole.HumanEvalManager) != 0)
                        comp.items.push(it = {
                            id: 'human_eval_manager',
                            title: CSLocalize('e72a70b3d05244759ea5469440921ff2', 'Assign Tests to Evaluators'),
                            gotoItem: function () { return Pager.navigateToHash(schoolAdmin.getHash(schoolAdmin.humanEvalManagerLangsTypeName, c.Id)); }
                        });
                    //if ((c.RoleEx.Role & LMComLib.CompRole.HumanEvalManager) != 0) comp.items.push(it = {
                    //  id: 'human_eval_manager',
                    //  title: CSLocalize('6e852a7128f54a27b9fb667b03b48a6e', 'Advanced assign to evaluators'),
                    //  gotoItem: () => location.hash = schoolAdmin.getHash(schoolAdmin.humanEvalManagerExTypeName, c.Id)
                    //});
                    if ((c.RoleEx.Role & LMComLib.CompRole.HumanEvalManager) != 0)
                        comp.items.push(it = {
                            id: 'human_evaluators',
                            title: CSLocalize('bce009c57f4b418c9ff42e30c7998479', 'Configure Evaluators'),
                            gotoItem: function () { return Pager.navigateToHash(schoolAdmin.getHash(schoolAdmin.humanEvalManagerEvsTypeName, c.Id)); }
                        });
                    comp.courses = [];
                    //kurzy, k nimz mam licenci
                    _.each(c.Courses, function (crs) {
                        if (crs.isAuthoredCourse && (c.RoleEx.Role & LMComLib.CompRole.Publisher) == 0)
                            return;
                        var pr = CourseMeta.lib.findProduct(crs.ProductId);
                        if (pr == null)
                            return;
                        comp.courses.push(_this.courseLinkFromProduct(pr, comp, crs));
                    });
                    comp.courses = _.sortBy(comp.courses, function (c) { return !c.data.isAuthoredCourse; });
                    return comp;
                });
                this.companies = _.sortBy(this.companies, function (c) { return c.data.PublisherOwnerUserId == 0; });
            }
            completed();
        };
        Model.prototype.courseLinkFromProduct = function (pr, comp, crs) {
            var persistence = crs.isAuthoredCourse ? schools.memoryPersistId : null;
            return {
                //isPublIndiv: crs==null,
                expired: crs.Expired <= 0 ? new Date() : Utils.intToDate(crs.Expired),
                line: pr.line, title: pr.title, prodId: pr.url, isTest: CourseMeta.lib.isTest(pr),
                isVyzvaProduct: CourseMeta.lib.isVyzvaProduct(pr),
                data: crs,
                myCompany: comp,
                gotoUrl: function (dt) {
                    //nove AngularJS produkty
                    if (dt.isVyzvaProduct) {
                        var licenceKeysStr = _.map(crs.LicenceKeys, function (licenceKey) {
                            var parts = licenceKey.split('|');
                            var key = { licId: parseInt(parts[0]), counter: parseInt(parts[1]) };
                            return keys.toString(key);
                        });
                        var ctx = {
                            producturl: blended.encodeUrl(pr.url), companyid: comp.data.Id, loginid: LMStatus.Cookie.id,
                            /*userdataid: LMStatus.Cookie.id,*/ loc: LMComLib.Langs.cs_cz /*Trados.actLang*/, taskid: '', persistence: null,
                            lickeys: licenceKeysStr.join('#')
                        };
                        var hash;
                        switch (pr.url) {
                            case '/lm/blcourse/langmastermanager.product/':
                                hash = blended.root.href(vyzva.stateNames.langmasterManager.name, ctx);
                                break;
                            case '/lm/blcourse/schoolmanager.product/':
                                hash = blended.root.href(vyzva.stateNames.shoolManager.name, ctx);
                                break;
                            default:
                                hash = blended.root.href(blended.prodStates.home.name, ctx);
                                break;
                        }
                        Pager.navigateToHash(hash);
                        return;
                    } //window.location.hash = '/pg/ajs/vyzvaproduct/xxx'; return; }
                    //stare produkty
                    if (dt.isTest && dt.data.LicCount == 0)
                        return;
                    if (comp.data.PublisherOwnerUserId == 0 && dt.myCompany.data.DepTree && dt.myCompany.data.DepTree.Departments && !dt.myCompany.department()) {
                        alert(CSLocalize('a85c8a527bb44bda9a7ee0721707d2ef', 'Choose company department (by clicking on [Change] link above)'));
                        return;
                    }
                    var hash = dt.isTest ? testMe.createUrlPersist(testMe.tEx, comp.data.Id, pr.url, persistence) : new CourseMeta.dataImpl().hrefCompl(comp.data.Id, pr.url, persistence);
                    if (dt.isTest)
                        testMe.alowTestCreate_Url = pr.url;
                    window.location.hash = hash;
                },
                gotoArchive: function (dt) {
                    window.location.hash = testMe.createUrlPersist(testMe.tResults, comp.data.Id, pr.url, persistence);
                }
            };
        };
        Model.prototype.licKeyMsg = function () {
            switch (cfg.designId) {
                case 'skrivanek': return 'Pro získání klíče zašlete email s informací o požadovaném jazyce na <a href="mailto:onlinetesty@skrivanek.cz">onlinetesty@skrivanek.cz</a>.';
                default: return null;
            }
        };
        return Model;
    })(schools.Model);
    schoolMy.Model = Model;
    //Pager.registerAppLocator(schools.appId, schools.tMy, (urlParts, completed) => completed(new schoolMy.Model()));
    schoolMy.myStateName = 'schoolMy_Model'.toLowerCase();
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, schoolMy.myStateName, schools.appId, schools.tMy, 0, function (urlParts) { return new schoolMy.Model(); }); });
})(schoolMy || (schoolMy = {}));
var schools;
(function (schools) {
    //export var readFiles: (urls: string[], completed: (data: string[]) => void) => void;
    //export var readAppDataAndLoc: (urls: Pager.locPaths, completed: (data, loc: string) => void) => void;
    //export var readAppData: (urls: string, completed: (data: string) => void) => void;
    ////nacte soubor z q:\LMCom\rew\Web4\Schools\EAData\ i s lokalizaci
    ////export var readStaticModuleData: (urls: Pager.locPaths, completed: (res, locRes: string) => void ) => void; 
    //export var resetModules: (LMComUserId: number, companyId: number, productId: string, modJsonIds: string[], completed: () => void) => void;
    ////nacte strucne vysledky vsech modulu kurzu
    //export var readCrsResults: (isStart: boolean, lmcomUserId: number, companyId: number, productId: string, completed: (res: ModUser[]) => void) => void;
    ////nacte podrobne vysledky modulu
    //export var readModuleResult: (lmcomUserId: number, companyId: number, productId: string, moduleJsonId: string, completed: (data: ModUser) => void) => void;
    ////zapise podrobne vysledky modulu
    //export var writeModuleResult: (lmcomUserId: number, companyId: number, productId: string, moduleJsonId: string, data: ModUser, dataShort: ModUser, completed: () => void) => void;
    ////metainformace o kurzu v puvodni lm.com DB. V nove verzi musi byt nahrazeny by metaCourse
    //export var readCrsInfo: (lmcomUserId: number, companyId: number, productId: string, completed: (res: CourseInfo) => void) => void;
    //export var setMetaCourse: (lmcomUserId: number, companyId: number, productId: string, value: metaCourse, completed: () => void) => void;
    //export var getMetaCourse: (lmcomUserId: number, companyId: number, productId: string, completed: (res: metaCourse) => void) => void;
    ////export var createTest: (testFileName: string, lmcomUserId: number, companyId: number, productId: string, completed: (testId: number) => void) => void;
    ////export var readTestResults: (isStart: boolean, testIds: number[], completed: (testResults: schools.SchoolCmdTestInfoItem[]) => void) => void;
    function resetModulesLocal(modJsonIds) {
        ////uvolni data aktualniho modulu
        //schools.data.modId = null; schools.data.exStatic = null; schools.data.modUser = null;
        ////vymaz moduly na klientovi
        //_.each(modJsonIds, (key: string) => delete schools.data.crsUser[key]);
    }
    schools.resetModulesLocal = resetModulesLocal;
    function addTimespan(url, replace) {
        return replace ? url + "?timestamp=" + new Date().getTime() : url;
    }
})(schools || (schools = {}));
var persistDownload;
(function (persistDownload) {
    var delphiApi;
    var debugVersion = true;
    var debugDelphiApi = (function () {
        function debugDelphiApi() {
        }
        debugDelphiApi.prototype.init = function (appDir, userDir) {
            oldApi.init(appDir, userDir);
        };
        debugDelphiApi.prototype.readAppFile = function (url) {
            Logger.trace_persistDownload("readAppFile: " + url);
            var res = oldApi.readAppFile(url);
            Logger.trace_persistDownload("readAppFile: OK");
            return res;
        };
        debugDelphiApi.prototype.readFile = function (crsId, url) {
            Logger.trace_persistDownload("readFile: " + url);
            var res = oldApi.readFile(crsId, url);
            Logger.trace_persistDownload("readFile: OK");
            return res;
        };
        debugDelphiApi.prototype.writeFile = function (crsId, url, data) {
            Logger.trace_persistDownload("writeFile: " + url);
            oldApi.writeFile(crsId, url, data);
            Logger.trace_persistDownload("writeFile: OK");
        };
        debugDelphiApi.prototype.deleteFile = function (crsId, url) {
            Logger.trace_persistDownload("deleteFile: " + url);
            oldApi.deleteFile(crsId, url);
            Logger.trace_persistDownload("deleteFile: OK");
        };
        debugDelphiApi.prototype.log = function (msg) {
            throw "not implemented";
        };
        return debugDelphiApi;
    })();
    //export function Init(isSl:boolean, completed: () => void ): void {
    //  delphiApi = (isSl ? slApi : window.external);
    //  if (!isSl) Logger.delphiLog = <any>(window.external);
    //  if (isSl) slApi.init("q:\\temp\\LANGMaster.com\\english_0_1\\cs_cz\\data\\schools\\", "q:\\temp\\DebugDownload\\");
    //  if (!delphiApi || typeof delphiApi.readAppFile == 'undefined') { alert("missing window.external.readAppFile"); return; }
    //  schools.readAppDataAndLoc = readAppDataAndLoc;
    //  schools.readAppData = readAppData;
    //  persistLocal.readFile = readFile;
    //  persistLocal.writeFile = writeFile;
    //  persistLocal.deleteFile = deleteFile;
    //  if (debugVersion) {
    //    oldApi = delphiApi;
    //    delphiApi = new debugDelphiApi();
    //  }
    //  completed();
    //}
    var oldApi;
    function readAppDataAndLoc(urls, completed) {
        completed(delphiApi.readAppFile(urls.url), delphiApi.readAppFile(urls.urlLoc)); //, urls.urlDict == null ? null : delphiApi.readAppFile(urls.urlDict)
    }
    function readAppData(url, completed) {
        completed(delphiApi.readAppFile(url));
    }
    function readFile(crsId, url, completed) {
        var res = delphiApi.readFile(crsId, url);
        completed(res == "" ? null : res);
    }
    function writeFile(crsId, url, data, completed) {
        delphiApi.writeFile(crsId, url, data);
        completed();
    }
    function deleteFile(crsId, url, completed) {
        delphiApi.deleteFile(crsId, url);
        completed();
    }
})(persistDownload || (persistDownload = {}));
//xx/#DEBUG
var Logger;
(function (Logger) {
    function trace_persistDownload(msg) {
        Logger.trace("persistDownload", msg);
    }
    Logger.trace_persistDownload = trace_persistDownload;
})(Logger || (Logger = {}));
//xx/#ENDDEBUG
//var fake_download = null;
var persistLocal;
(function (persistLocal) {
    persistLocal.persistCourse = {
        loadShortUserData: function (userId, companyId, prodUrl, completed) {
        },
        loadUserData: function (userId, companyId, prodUrl, modUrl, completed) {
        },
        saveUserData: function (userId, companyId, prodUrl, data, completed) {
        },
        readFiles: function (urls, completed) { return void {}; },
        resetExs: function (userId, companyId, prodUrl, urls, completed) {
        },
        createArchive: function (userId, companyId, productId, completed) {
        },
        testResults: function (userId, companyId, productId, completed) {
        }
    };
    var modCache = [];
    var fCrsResults = "crs_result.txt";
    var fMetaCourse = "meta_course.txt";
    function fModule(modId) { return "mod_" + modId + ".txt"; }
    function resetModules(lmcomUserId, companyId, crsId, modJsonIds, completed) {
        schools.resetModulesLocal(modJsonIds);
        var defs = _.map(modJsonIds, function (mi) {
            var modId = mi;
            var cId = crsId;
            var dfd = $.Deferred();
            persistLocal.deleteFile(cId, fModule(modId), dfd.resolve);
            return dfd.promise();
        });
        $.when(defs).then(function () {
            _.each(modJsonIds, function (modId) { return delete modCache[modId]; });
            writeCrsResults(crsId, completed);
        }, function () { return alert("fail"); });
    }
    function readCrsResults(isStart, lmcomUserId, companyId, crsId, completed) {
        persistLocal.readFile(crsId, fCrsResults, function (res) { return completed(modCache = (res == null ? [] : JSON.parse(res))); });
    }
    function readModuleResult(lmcomUserId, companyId, crsId, moduleJsonId, completed) {
        persistLocal.readFile(crsId, fModule(moduleJsonId), function (str) { return completed(str == null ? null : JSON.parse(str)); });
    }
    function writeModuleResult(lmcomUserId, companyId, crsId, moduleJsonId, data, dataShort, completed) {
        persistLocal.writeFile(crsId, fModule(moduleJsonId), JSON.stringify(data), function () {
            modCache[moduleJsonId] = dataShort;
            writeCrsResults(crsId, completed);
        });
    }
    //function setMetaCourse(lmcomUserId: number, companyId: number, crsId: string, value: schools.metaCourse, completed: () => void) {
    //  writeFile(crsId, fMetaCourse, JSON.stringify(value), completed);
    //}
    //function getMetaCourse(lmcomUserId: number, companyId: number, crsId: string, completed: (res: schools.metaCourse) => void) {
    //  readFile(crsId, fMetaCourse, res => completed(res == null ? null : JSON.parse(res)));
    //}
    function writeCrsResults(crsId, completed) {
        persistLocal.writeFile(crsId, fCrsResults, JSON.stringify(modCache), completed);
    }
})(persistLocal || (persistLocal = {}));
var persistMemory;
(function (persistMemory) {
    persistMemory.persistCourse = {
        loadShortUserData: function (userId, companyId, prodUrl, completed) {
            var prodDb = memDb[prodUrl];
            if (!prodDb) {
                completed(null);
                return;
            }
            var data = {};
            for (var p in prodDb)
                data[p] = JSON.parse(prodDb[p].shortdata);
            completed(data);
        },
        loadUserData: function (userId, companyId, prodUrl, modUrl, completed) {
            var prodDb = memDb[prodUrl];
            if (!prodDb) {
                completed(null);
                return;
            }
            var m = prodDb[modUrl];
            completed(m && m.data ? JSON.parse(m.data) : null);
        },
        saveUserData: function (userId, companyId, prodUrl, data, completed) {
            var prodDb = memDb[prodUrl];
            if (!prodDb) {
                prodDb = {};
                memDb[prodUrl] = prodDb;
            }
            _.each(data, function (dt) { return prodDb[dt[0]] = { id: dt[0], data: dt[2], shortdata: dt[1] }; });
            completed();
        },
        resetExs: function (userId, companyId, prodUrl, urls, completed) {
            delete memDb[prodUrl];
            completed();
        },
        readFiles: persistNewEA.persistCourse.readFiles,
        createArchive: function (userId, companyId, productId, completed) {
            completed(archiveId++);
            //var id = archiveId++;
            //var oldProd = memDb[productId]; delete memDb[productId];
            //productId = productId + '|' + id.toString();
            //memDb[productId] = oldProd;
            //completed(id);
        },
        testResults: function (userId, companyId, productId, completed) {
            persistMemory.persistCourse.loadUserData(userId, companyId, productId, 'result', completed);
            //var results: Array<testMe.result> = [];
            //for (var p in memDb) {
            //  var key: string = p;
            //  if (productId.indexOf(key) != 0) continue;
            //  persistCourse.loadUserData(userId, companyId, key, 'result', res => { if (!res) return; results.push(res); });  
            //  completed(results);
            //}
        }
    };
    var archiveId = 0;
    function reset() { memDb = {}; }
    persistMemory.reset = reset;
    var memDb = {};
})(persistMemory || (persistMemory = {}));
//xx/#DEBUG
var Logger;
(function (Logger) {
    function trace_persistScormLocal(msg) {
        Logger.trace("persistScormLocal", msg);
    }
    Logger.trace_persistScormLocal = trace_persistScormLocal;
})(Logger || (Logger = {}));
//xx/#ENDDEBUG
//var persistScormL = null;
var persistNewEA;
(function (persistNewEA) {
    function createCmd(lmcomId, companyId, productId, finish) {
        if (finish === void 0) { finish = null; }
        var res = LMStatus.createCmd(function (r) { r.companyId = companyId; r.productId = productId; r.scormId = null; r.date = Utils.nowToInt(); });
        if (finish)
            finish(res);
        if (lmcomId)
            res.lmcomId = lmcomId;
        return res;
    }
    persistNewEA.createCmd = createCmd;
    persistNewEA.persistCourse = {
        loadShortUserData: function (userId, companyId, prodUrl, completed) {
            Pager.ajaxGet(Pager.pathType.restServices, scorm.Cmd_readCrsResults_Type, createCmd(userId, companyId, prodUrl), 
            //scorm.Cmd_readCrsResults_Create(companyId, prodUrl, null, userId, 0),
            function (res) {
                Logger.trace_persistNewEA("loadShortUserData: " + res.join(" ### "));
                var obj = {};
                _.each(res, function (kv) { return obj[kv[0]] = JSON.parse(kv[1]); });
                completed(obj);
            });
        },
        loadUserData: function (userId, companyId, prodUrl, modUrl, completed) {
            Pager.ajaxGet(Pager.pathType.restServices, scorm.Cmd_readModuleResults_Type, createCmd(userId, companyId, prodUrl, function (r) { r.key = modUrl; }), 
            //scorm.Cmd_readModuleResults_Create(modUrl, userId, companyId, prodUrl, null),
            function (res) {
                Logger.trace_persistNewEA("loadUserData resp: " + modUrl + ": " + res);
                completed(_.isEmpty(res) ? {} : JSON.parse(res));
            });
        },
        saveUserData: function (userId, companyId, prodUrl, data, completed) {
            Pager.ajaxPost(Pager.pathType.restServices, scorm.Cmd_saveUserData_Type, createCmd(userId, companyId, prodUrl, function (r) { r.data = data; }), 
            //scorm.Cmd_saveUserData_Create(data, userId, companyId, prodUrl, null),
            function () {
                Logger.trace_persistNewEA("saveUserData");
                completed();
            });
        },
        readFiles: function (urls, completed) {
            if (!urls || urls.length == 0)
                completed([]);
            var data = [];
            var len = urls.length;
            var ajaxDone; //funkce, vracejici funkci
            ajaxDone = function (idx, fail) { return function (res) {
                data[idx] = fail ? null : (res == null ? "" : res);
                len--;
                if (len == 0)
                    completed(data);
            }; };
            for (var i = 0; i < urls.length; i++)
                $.ajax({ url: urls[i].charAt(0) == '/' ? '..' + urls[i] : urls[i], dataType: "text", headers: { "LoggerLogId": Logger.logId(), "LMComVersion": Utils.LMComVersion } }).
                    done(ajaxDone(i, false)).fail(ajaxDone(i, true)); //i a false je znamo v dobe inicializace Ajax, nikoliv az v dobe navratu z ajax
        },
        resetExs: function (userId, companyId, prodUrl, urls, completed) {
            Pager.ajaxPost(Pager.pathType.restServices, scorm.Cmd_resetModules_Type, createCmd(userId, companyId, prodUrl, function (r) { r.modIds = urls; }), 
            //scorm.Cmd_resetModules_Create(urls, userId, companyId, prodUrl, null),
            function (res) {
                Logger.trace_persistNewEA("resetExs: " + res);
                completed();
            });
        },
        createArchive: function (userId, companyId, prodUrl, completed) {
            Pager.ajaxGet(Pager.pathType.restServices, scorm.Cmd_createArchive_Type, createCmd(userId, companyId, prodUrl), 
            //scorm.Cmd_createArchive_Create(LMStatus.Cookie.id, companyId, productId, null),
            function (res) { return completed(res); });
        },
        testResults: function (userId, companyId, prodUrl, completed) {
            Pager.ajaxGet(Pager.pathType.restServices, scorm.Cmd_testResults_Type, createCmd(userId, companyId, prodUrl), 
            //scorm.Cmd_testResults_Create(LMStatus.Cookie.id, companyId, productId, null),
            function (res) { return completed(_.map(res, function (r) { return JSON.parse(r); })); });
        }
    };
})(persistNewEA || (persistNewEA = {}));
//xx/#DEBUG
var Logger;
(function (Logger) {
    function trace_persistNewEA(msg) {
        Logger.trace("persistNewEA", msg);
    }
    Logger.trace_persistNewEA = trace_persistNewEA;
})(Logger || (Logger = {}));
//xx/#ENDDEBUG
//var scorm_dict = null;
var persistScormEx;
(function (persistScormEx) {
    persistScormEx.persistCourse = {
        loadShortUserData: function (userId, companyId, prodUrl, completed) {
            var reqUrl = url(Utils.string_format("type=get_key1str_data2&userid={0}&{1}&key1int={2}", [LMStatus.scormUserId(), scorm.attemptId, tab_modules]));
            Logger.trace_persistScorm("persistScormEx.loadShortUserDatas start: " + reqUrl);
            Pager.doAjax(false, reqUrl, null, null, function (res) {
                var arrRes = {};
                if (res && res.length > 0) {
                    var parts = res.split(delim);
                    var i = 0;
                    while (i < parts.length - 1) {
                        var unp = Utils.unpackStr(parts[i + 1]);
                        Logger.trace_persistScorm("readCrsResults " + parts[i] + ': ' + unp);
                        arrRes[parts[i]] = JSON.parse(unp);
                        i += 2;
                    }
                }
                Logger.trace_persistScorm("persistScormEx.loadShortUserDatas end");
                completed(arrRes);
            });
        },
        loadUserData: function (userId, companyId, prodUrl, modUrl, completed) {
            Logger.trace_persistScorm("persistScormEx.loadUserData start");
            getDataLow("get_data1", modUrl, true, null, false, tab_modules, true, 0, false, function (res) {
                if (res && res.indexOf(delim) >= 0)
                    res = res.split(delim)[0];
                var unp = Utils.unpackStr(res);
                Logger.trace_persistScorm("persistScormEx.loadUserData end: " + unp);
                completed(JSON.parse(unp));
            });
        },
        saveUserData: function (userId, companyId, prodUrl, data, completed) {
            Logger.trace_persistScorm("persistScormEx.saveUserData start");
            _.each(data, function (dt) { return Logger.trace_persistScorm(dt[0] + "=" + dt[1] + "; " + dt[2]); });
            var exs = _.map(data, function (dt) {
                var id = dt[0];
                var dfd = $.Deferred();
                setDataLow(dt[0], null, tab_modules, 0, encodeData(dt[2], dt[1]), dfd.resolve);
                return dfd.promise();
            });
            $.when(exs).then(function () { Logger.trace_persistScorm("persistScormEx.saveUserData end"); completed(); }).fail(function () { debugger; throw 'persistScormEx.saveUserData'; });
        },
        readFiles: persistNewEA.persistCourse.readFiles,
        resetExs: function (userId, companyId, prodUrl, urls, completed) {
            var data = urls.join(delim);
            var reqUrl = url(Utils.string_format("type=del_all_key1str&userid={0}&{1}&key1int={2}", [LMStatus.scormUserId(), scorm.attemptId, tab_modules]));
            Logger.trace_persistScorm("resetModules: " + reqUrl + ", data=" + data);
            Pager.doAjax(true, reqUrl, null, data, function (res) { return completed(); });
        },
        createArchive: function (userId, companyId, productId, completed) {
        },
        testResults: function (userId, companyId, productId, completed) {
        }
    };
    var delim = ";";
    var tab_modules = 1;
    var tab_metadata = 2;
    function encodeData(data1, data2) { return (data1 ? Utils.packStr(data1) : '') + delim + (data2 ? Utils.packStr(data2) : ''); }
    function setDataLow(key1str, key2str, key1int, key2int, data, completed) {
        var reqUrl = url(Utils.string_format("type=set_data&userid={0}&{1}&key1str={2}&key2str={3}&key1int={4}&key2int={5}&date={6}", [LMStatus.scormUserId(), scorm.attemptId, key1str, key2str, key1int, key2int, Utils.nowToInt()]));
        //Debug.trace_persistScorm("setData: " + reqUrl + ", data=" + data);
        Pager.doAjax(true, reqUrl, null, data, function (res) { return completed(); });
    }
    function getDataLow(getDataType, key1str, isKey1str, key2str, isKey2str, key1int, iskey1int, key2int, iskey2int, completed) {
        var query = Utils.string_format("type={0}&userid={1}&{2}", [getDataType, LMStatus.scormUserId(), scorm.attemptId]);
        if (isKey1str)
            query += "&key1str=" + (key1str ? key1str : '');
        if (isKey2str)
            query += "&key2str=" + (key2str ? key2str : '');
        if (iskey1int)
            query += "&key1int=" + key1int.toString();
        if (iskey2int)
            query += "&key2int=" + key2int.toString();
        var reqUrl = url(query);
        //Debug.trace_persistScorm("getData: " + reqUrl);
        Pager.doAjax(false, reqUrl, null, null, function (res) {
            //Debug.trace_persistScorm("getData result: " + res);
            completed(res);
        });
    }
    function url(query) {
        var res = Pager.path(Pager.pathType.restServicesScorm);
        res += res.indexOf('?') >= 0 ? '&' : '?';
        return res + query;
    }
})(persistScormEx || (persistScormEx = {}));
//xx/#DEBUG
var Logger;
(function (Logger) {
    function trace_persistScorm(msg) {
        Logger.trace("persistScorm", msg);
    }
    Logger.trace_persistScorm = trace_persistScorm;
})(Logger || (Logger = {}));
//xx/#ENDDEBUG
//var persistScorm = null;
//POUZIVA se pro zobrazeni chyby v JSCrambler ochrane, viz boot.ts,  export function Error(): void { Pager.loadPage(new splash.licenceError());  }
var splash;
(function (splash) {
    var Page = (function (_super) {
        __extends(Page, _super);
        function Page() {
            _super.call(this, null, null, null);
            this.bodyTmpl = 'Dummy';
        }
        Page.prototype.template = function () { return 'splashRoot'; };
        return Page;
    })(Pager.Page);
    splash.Page = Page;
    var licenceError = (function (_super) {
        __extends(licenceError, _super);
        function licenceError() {
            _super.call(this);
            this.bodyTmpl = 'licenceError';
            this.data = splash.error;
            this.isUserMonthExpired = splash.error.result == schools.licenceResult.userMonthExpired;
            switch (splash.error.result) {
                case schools.licenceResult.demoExpired:
                    this.text = "Trial period expired at " + Utils.intToDateStr(splash.error.DemoExpired);
                    break;
                case schools.licenceResult.userMonthExpired:
                    this.text = "Number of licences exceeded";
                    break;
                default:
                    this.text = "other";
                    break;
            }
        }
        return licenceError;
    })(Page);
    splash.licenceError = licenceError;
    $.views.helpers({
        licenceRespUser: function (usr) {
            return usr.Id.split('-')[1] + ' ' + usr.Name + ' ' + (_.isEmpty(usr.rootCourse) ? '' : CourseMeta.lib.findProduct(usr.rootCourse).title);
        },
        licenceRespBuy: function (buy) {
            return Utils.intToDateStr(buy.Created) + ": " + buy.UserMonths + " licences";
        },
    });
})(splash || (splash = {}));
var schools;
(function (schools) {
    var TopBarModel = (function () {
        function TopBarModel(model) {
            this.model = model;
            this.title = ko.observable('');
            this.suplCtxtGrammar = ko.observable(false); //meni cviceni: phone - dynamicka podminka na kontextovou gramatiku
            this.suplGrammarIcon = ko.observable(true); //meni cviceni: phone - dynamicka podminka na nekontextovou gramatiku
            this.exerciseEvaluated = ko.observable(false); //cviceni je vyhodnocenu
            this.exercisePassive = ko.observable(true); //cviceni je pasivni
            this.score = ko.observable(null); //score vyhodnoceneho cviceni
            var self = this;
            this.grammarClick = function () { return CourseMeta.gui.gotoData(CourseMeta.actGrammar); };
            if (this.needsLogin())
                LMStatus.setReturnUrl();
        }
        TopBarModel.prototype.is = function () {
            var _this = this;
            var typeNames = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                typeNames[_i - 0] = arguments[_i];
            }
            return _.find(typeNames, function (t) { return t == _this.model.type; }) != null;
        };
        //title
        TopBarModel.prototype.isTitle = function () { return this.is(schools.tTest); };
        //logo
        TopBarModel.prototype.logoBig = function () { return !this.logoSmall() && !this.is(schools.tEx); }; //this.is(tMy); }
        TopBarModel.prototype.logoSmall = function () { return this.is(schools.tCourseMeta, schools.tCoursePretest, /*tHome, tCourse, tLess, tMod, tCpv,*/ schools.tGrammFolder, schools.tGrammPage, schools.tGrammContent, schools.tDictInfo, schools.tTest); };
        TopBarModel.prototype.greenArrow = function () { return !this.needsLogin() && this.is(schools.tCourseMeta, schools.tCoursePretest, schools.tEx); };
        TopBarModel.prototype.phoneMore = function () { return !this.needsLogin() && this.is(schools.tMy /*, tHome*/) ? "#collapse-logout" : null; }; //pokud je phone, id DIVu s more informaci, #collapse-more nebo #collapse-more-ex
        //login x logout x profile
        TopBarModel.prototype.logoutAndProfile = function () { return this.isWeb() && !this.needsLogin() && this.is(schools.tMy /*, /*, tHome*/); };
        TopBarModel.prototype.needsLogin = function () { return this.isWeb() && !LMStatus.isLogged(); };
        TopBarModel.prototype.loginUrl = function () {
            if (!this.needsLogin())
                return null;
            if (cfg.logins && cfg.logins.length == 1)
                switch (cfg.logins[0]) {
                    case LMComLib.OtherType.LANGMaster: return "#" + Login.getHash(Login.pageLmLogin);
                    case LMComLib.OtherType.LANGMasterNoEMail: return "#" + Login.getHash(Login.pageLmLoginNoEMail);
                    default: return "#" + Login.getHash(Login.pageLogin);
                }
            else
                return "#" + Login.getHash(Login.pageLogin);
        };
        TopBarModel.prototype.isWeb = function () { return cfg.target == LMComLib.Targets.web; };
        //supplements
        TopBarModel.prototype.hasSupl = function () { return true; };
        //suplGrammarLink(): boolean { return !this.needsLogin() && this.is(tCourseMeta, tCourse, tLess, tMod, tEx) && schools.data.crsStatic2.grammar != null; } //pro ne-phone: staticka podminka na nekontextovou gramatika
        TopBarModel.prototype.suplGrammarLink = function () { return !this.needsLogin() && this.is(schools.tCourseMeta, /*tCourse, tLess, tMod,*/ schools.tEx) && CourseMeta.actGrammar != null; }; //pro ne-phone: staticka podminka na nekontextovou gramatika
        TopBarModel.prototype.suplDict = function () { return !this.needsLogin() && this.is(schools.tEx, schools.tGrammPage) && DictConnector.actDictData != null; /*cfg.dictType!=schools.dictTypes.no;*/ }; //pomocna stranka s vysvetlenim slovniku
        TopBarModel.prototype.suplEval = function () { return !this.needsLogin() && this.is(schools.tEx); }; //informace o vyhodnocenem cviceni
        TopBarModel.prototype.resetClick = function () { CourseMeta.actEx.reset(); return false; }; //??(<schoolEx.Model>(Pager.ActPage)).reset(); }
        TopBarModel.prototype.dictClick = function () { LMStatus.setReturnUrlAndGoto(schools.createDictIntroUrl()); };
        TopBarModel.prototype.suplInstr = function () { return !this.needsLogin() && this.is(schools.tEx); };
        TopBarModel.prototype.suplVocabulary = function () {
            return false;
            //if (!cfg.vocabulary || !this.is(tLess, tMod, tEx)) return false;
            //var lesJson = this.model.myLessonjsonId(); if (lesJson == null) return false;
            //var id = prods.rewLessonId(lesJson); if (id == 0) return false;
            //return true;
        };
        TopBarModel.prototype.vocabularyClick = function () { alert("vocabularyClick"); };
        TopBarModel.prototype.suplBreadcrumb = function () { return !this.needsLogin() && this.is(schools.tEx); };
        //navrat do kurzu pro supplements
        TopBarModel.prototype.backToCourse = function () { return this.is(/*tCpv,*/ schools.tDictInfo, schools.tGrammFolder, schools.tGrammPage, schools.tGrammContent, (typeof schoolAdmin == 'undefined' ? '' : schoolAdmin.schoolUserResultsTypeName)) && LMStatus.isReturnUrl(); };
        TopBarModel.prototype.backToCourseClick = function () { LMStatus.gotoReturnUrl(); }; //Pager.navigateTo(getReturnUrl()); }
        return TopBarModel;
    })();
    schools.TopBarModel = TopBarModel;
})(schools || (schools = {}));
var knockout;
(function (knockout) {
    knockout.rootModule = angular.module('knockoutApp', []); // [/*'ngLocale', 'ngResource',*/ 'ui.router', 'ngAnimate', 'ui.bootstrap']);
    knockout.rootModule.run(['$rootScope', '$compile', function ($rootScope, $compile) {
            knockout.rootScope = $rootScope;
            knockout.compile = $compile;
        }]);
    ko.bindingHandlers['angularjs'] = {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var ctx = bindingContext.$data;
            var value = valueAccessor ? valueAccessor() : 'none';
            //var initInjector = angular.injector(['ng']);
            //var $compile = initInjector.get<ng.ICompileService>('$compile');
            //var el = angular.element('<h3 ng-click="title = title + \'x\'">bindingContext={{title}}, value={{value}}</h3>');
            var el = angular.element('<div ng-controller="xxxx">{{name}}</div>');
            $(element).append(el);
            var compiled = knockout.compile(el);
            var scope = knockout.rootScope.$new(); // false, rootScope);
            $.extend(scope, { title: ctx.title, value: value });
            compiled(scope);
            scope.$apply();
        },
    };
    $(function () { return ko.applyBindings({ title: 'ko model' }, $('#knockout-root')[0]); });
    var controller = (function () {
        function controller($scope) {
            $scope.name = 'i am controller';
        }
        return controller;
    })();
    knockout.rootModule.controller('xxxx', controller);
})(knockout || (knockout = {}));
var test;
(function (test) {
    var modalTest = (function () {
        function modalTest($scope, $modal) {
            this.$scope = $scope;
            this.$modal = $modal;
            $scope.modalTest = this;
        }
        modalTest.prototype.action = function () {
            this.open().then(function (ok) { return alert(ok ? 'ok' : 'cancel'); }, function () { return alert('cancel'); });
        };
        modalTest.prototype.open = function () {
            var instance = this.$modal.open({
                templateUrl: 'modaldialog.html',
            });
            return instance.result;
        };
        return modalTest;
    })();
    test.modalTest = modalTest;
    var modalWindow = (function () {
        function modalWindow($scope, $modalInstance) {
            this.$scope = $scope;
            this.$modalInstance = $modalInstance;
            //debugger;
            $scope.ok = function () { return $modalInstance.close(); };
            $scope.cancel = function () { return $modalInstance.dismiss(); };
        }
        return modalWindow;
    })();
    test.modalWindow = modalWindow;
    test.rootModule = angular.module('testApp', ['ui.router', 'ngAnimate', 'ui.bootstrap']);
    var st1, st2;
    test.rootModule.config(['$stateProvider', function ($stateProvider) {
            $stateProvider
                .state({
                name: 'modal',
                url: '/modal',
                //templateUrl: 'test.html',
                templateUrl: 'modaltest.html',
                controller: modalTest,
            })
                .state(st1 = {
                name: 'test',
                url: '/test',
                //templateUrl: 'test.html',
                template: '<ui-view/>',
                controller: ctrl1, controllerAs: 'ctrl1as',
                resolve: {
                    $ctrl1Resolve: function () { return '$ctrl1Resolve'; },
                }
            })
                .state(st2 = {
                name: 'test.home',
                url: '/home',
                templateUrl: 'test.html',
                //template: '<ui-view/>',
                controller: ctrl2, controllerAs: 'ctrl2as',
                resolve: {
                    $ctrl2Resolve: function () { return '$ctrl2Resolve'; },
                },
                parent: st1
            })
                .state({
                name: 'test.home.page',
                url: '/page',
                template: '<ui-view/>',
                controller: ctrl3, controllerAs: 'ctrl3as',
            })
                .state({
                name: 'test.home.page.home',
                url: '/home',
                controller: ctrl4, controllerAs: 'ctrl4as',
                templateUrl: 'test2.html',
            });
        }]);
    var ctrl1 = (function () {
        function ctrl1($scope, $state, $ctrl1Resolve) {
            this.$ctrl1Resolve = $ctrl1Resolve;
            $scope.scopeProp1 = 'scopeProp1';
            $scope.scopeClick1 = function () { return alert('scopeClick1'); };
            this.prop1 = 'ctrl1.prop1';
            var st = $state.current;
            var constr = this.constructor;
            while (st) {
                if (st.controller == constr) {
                    debugger;
                    break;
                }
                st = st.parent;
            }
        }
        ctrl1.prototype.clickAs1 = function () { alert('ctrl1.clickAs1'); };
        return ctrl1;
    })();
    test.ctrl1 = ctrl1;
    var ctrl2 = (function () {
        function ctrl2($scope, $state, $ctrl1Resolve, $ctrl2Resolve) {
            this.$ctrl1Resolve = $ctrl1Resolve;
            this.$ctrl2Resolve = $ctrl2Resolve;
            $scope.scopeProp2 = 'scopeProp2';
            $scope.scopeClick2 = function () { return alert('scopeClick2'); };
            this.prop2 = 'ctrl2.prop2';
            this.ctrl1as = $scope.ctrl1as;
            var st = $state.current;
            var constr = this.constructor;
            while (st) {
                if (st.controller == constr) {
                    debugger;
                    break;
                }
                st = st.parent;
            }
        }
        ctrl2.prototype.clickAs2 = function () { alert('ctrl2.clickAs2'); };
        return ctrl2;
    })();
    test.ctrl2 = ctrl2;
    var ctrl3 = (function () {
        function ctrl3($scope, $state) {
        }
        return ctrl3;
    })();
    test.ctrl3 = ctrl3;
    var ctrl4 = (function () {
        function ctrl4($scope, $state) {
        }
        return ctrl4;
    })();
    test.ctrl4 = ctrl4;
})(test || (test = {}));
var xxx = (function () {
    function xxx(x) {
        this.x = x;
    }
    return xxx;
})();
var cls = new xxx(12);
var x = cls.x;
//$(() => CourseMeta.processInlineControls('for-playing', $.noop));
$(function () { return CourseMeta.processInlineControls('for-recording', $.noop); });
//http://rangy.googlecode.com/svn/trunk/demos/
//https://github.com/timdown/rangy/wiki/Rangy-Selection
//https://github.com/timdown/rangy/wiki/Rangy-Range
//https://github.com/timdown/rangy/wiki/Rangy-Object
var mediumJS;
(function (mediumJS) {
    var actDiv = null;
    function start(editorId) {
        new editable($(editorId));
        //var medium = new LMMedium.Medium({
        //  element: $(editorId)[0],
        //  mode: LMMedium.Medium.richMode,
        //  placeholder: 'xxx',
        //  pasteAsText: true,
        //  autoHR: false,
        //});
        //var old = Medium.Action.prototype.enterKey;
        //Medium.Action.prototype.enterKey = ev => {
        //  old();
        //};
        //http://stackoverflow.com/questions/6754275/
        //_.each(editorIds, editorId => {
        //  $(editorId).focus(() => {
        //    new editable($(editorId));
        //  });
        //var medium = new Medium({
        //  element: $(editorId)[0],
        //  mode: Medium.richMode,
        //  placeholder: 'xxx',
        //  pasteAsText: true,
        //  autoHR: false,
        //});
        //var enterKey = medium.action.enterKey;
        //medium.action.enterKey = function (ev) {
        //  enterKey.call(medium.action, ev);
        //};
        //});
        //var old = Medium.Action.prototype.enterKey;
        //Medium.Action.prototype.enterKey = ev => {
        //  old();
        //};
        //var old = medium.action.handledEvents.keydown;
        //medium.action.handledEvents.keydown = (ev: Event) => {
        //  old(ev);
        //};
    }
    mediumJS.start = start;
    var editable = (function () {
        function editable(el) {
            this.el = el;
            el.on("focus blur keydown keyup paste click mousedown", function (ev) {
                //***** ochrana .read-only elementu
                var blocks = $(ev.target).closest(".read-only");
                if (blocks.length == 0 && ev.type == "keydown") {
                    var forw = false;
                    if ((forw = forwardArrowCodes[ev.which]) || backwardArrowCodes[ev.which]) {
                        setTimeout(function () {
                            var range = rangy.getSelection().getRangeAt(0); //aktualni selection range
                            var start = range.startContainer; //vlastnik selekce
                            if (start.nodeType == Node.TEXT_NODE)
                                start = start.parentNode; //text => dej parenta
                            blocks = $(start).closest(".read-only");
                            if (blocks.length == 0)
                                return;
                            if (forw)
                                range.collapseAfter(blocks[0]);
                            else
                                range.collapseBefore(blocks[0]);
                            range.select(); //selection (karet) je v inner elementu - pak neni sance jej z nej dostat, zmen jej
                        }, 1);
                        return;
                    }
                    else if (ev.which == key.backspace || ev.which == key.k_delete) {
                        //var ROs = _.map(el.find('.read-only'), jq => bililiteRange(jq));
                        var isDel = ev.which == key.k_delete;
                        //http://www.w3.org/TR/DOM-Level-3-Events-key/
                        //http://bililite.com/blog/2015/01/14/bililiterange-sendkeys/
                        //http://bililite.com/blog/2011/01/17/cross-browser-text-ranges-and-selections/
                        var rng = bililiteRange(el[0]).bounds('selection');
                        //if (rng._bounds[0] != rng._bounds[1]) return true;
                        //var oldPos = rng._bounds[0];
                        if (rng._bounds[0] == 0 && rng._bounds[1] == 0)
                            return false;
                        else if (isDel && rng._bounds[0] == 0 && rng._bounds[1] == 1)
                            return false;
                        console.log(rng._bounds[0].toString() + '-' + rng._bounds[1].toString());
                        rng.sendkeys(isDel ? '{ArrowRight}' : '{ArrowLeft}').select();
                        var isRO = false;
                        try {
                            var range = rangy.getSelection().getRangeAt(0);
                            var start = range.endContainer;
                            if (start.nodeType == Node.TEXT_NODE)
                                start = start.parentNode; //text => dej parenta
                            if ($(start).closest(".read-only").length > 0)
                                isRO = true;
                        }
                        finally {
                            bililiteRange(el[0]).bounds('selection').sendkeys(!isDel ? '{ArrowRight}' : '{ArrowLeft}').select();
                        }
                        return !isRO;
                        //$(start).trigger(<any>{ type: "keydown", key: 'ArrowRight' });
                        return false;
                        //bililiteRange(this).bounds('selection').sendkeys(x).select();
                        var e = jQuery.Event("keypress");
                        e.which = e.keyCode = key.a;
                        el.trigger(e);
                        //e = jQuery.Event("keyup");
                        //e.which = e.keyCode = key.a;
                        //el.trigger(e);
                        return false;
                        var range = rangy.getSelection().getRangeAt(0);
                        range.moveStart('character', 5);
                        range.collapse(true);
                        var start = range.startContainer;
                        if ($(start.parentNode).closest(".read-only").length > 0)
                            return false;
                    }
                    else if (ev.which == key.k_delete || ev.which == key.backspace) {
                        var isDel = ev.which == key.k_delete;
                        var range = rangy.getSelection().getRangeAt(0);
                        var ros = el.find('.read-only');
                        var start = range.endContainer;
                        var retCode = true;
                        if (start.nodeType == Node.TEXT_NODE) {
                            if ($(start.parentNode).closest(".read-only").length > 0)
                                return false;
                            var text = start;
                            if (isDel && text.length != range.endOffset)
                                return true;
                            else if (!isDel && range.endOffset > 0)
                                return true;
                            _.each(ros, function (ro) {
                                if (!retCode)
                                    return;
                                var rng = rangy.createRange();
                                rng.selectNode(ro);
                                if (isDel) {
                                    var res = range.compareBoundaryPoints(rangy.END_TO_START, rng);
                                    retCode = res > 0;
                                }
                                else {
                                    var res = range.compareBoundaryPoints(rangy.START_TO_END, rng);
                                    retCode = res < 0;
                                }
                            });
                        }
                        else {
                            _.each(ros, function (ro) {
                                if (!retCode)
                                    return;
                                var rng = rangy.createRange();
                                rng.selectNode(ro);
                                if (isDel) {
                                    var res = range.compareBoundaryPoints(rangy.END_TO_START, rng);
                                    retCode = res > 0;
                                }
                                else {
                                    var res = range.compareBoundaryPoints(rangy.START_TO_END, rng);
                                    retCode = res < 0;
                                }
                            });
                        }
                        return retCode;
                        var range = rangy.getSelection().getRangeAt(0);
                        var start = range.endContainer;
                        if ($(start.parentNode).closest(".read-only").length > 0)
                            return false;
                        if (start.nodeType == Node.TEXT_NODE) {
                            var text = start;
                            if (ev.which == key.k_delete) {
                                if ($(start.nextSibling).closest(".read-only").length > 0)
                                    return false;
                            }
                            else {
                                if (range.endOffset != 0)
                                    return true;
                                if ($(start.previousSibling).closest(".read-only").length > 0)
                                    return false;
                            }
                        }
                    }
                    return true;
                }
                var block = blocks.length > 0 ? blocks[0] : null;
                if (block)
                    return false;
                //***** zpracovani eventu
                return true;
            });
            el.attr("contenteditable", "true");
        }
        return editable;
    })();
    mediumJS.editable = editable;
    function range(editorId) {
        $(function () {
            rangy.init();
            var node = $('#code')[0];
            var txt = node.firstChild;
            var range = rangy.createRange();
            //range.selectNode(node.firstChild);
            range.setStart(txt, 16);
            range.setEnd(txt, 23);
            //range.selectNode(txt);
            var sel = rangy.getSelection();
            sel.setSingleRange(range);
            //sel.addRange(range);
        });
    }
    mediumJS.range = range;
    (function (key) {
        key[key["backspace"] = 8] = "backspace";
        key[key["tab"] = 9] = "tab";
        key[key["enter"] = 13] = "enter";
        key[key["shift"] = 16] = "shift";
        key[key["ctrl"] = 17] = "ctrl";
        key[key["alt"] = 18] = "alt";
        key[key["pause"] = 19] = "pause";
        key[key["capsLock"] = 20] = "capsLock";
        key[key["escape"] = 27] = "escape";
        key[key["pageUp"] = 33] = "pageUp";
        key[key["pageDown"] = 34] = "pageDown";
        key[key["end"] = 35] = "end";
        key[key["home"] = 36] = "home";
        key[key["leftArrow"] = 37] = "leftArrow";
        key[key["upArrow"] = 38] = "upArrow";
        key[key["rightArrow"] = 39] = "rightArrow";
        key[key["downArrow"] = 40] = "downArrow";
        key[key["insert"] = 45] = "insert";
        key[key["k_delete"] = 46] = "k_delete";
        key[key["k_0"] = 48] = "k_0";
        key[key["k_1"] = 49] = "k_1";
        key[key["k_2"] = 50] = "k_2";
        key[key["k_3"] = 51] = "k_3";
        key[key["k_4"] = 52] = "k_4";
        key[key["k_5"] = 53] = "k_5";
        key[key["k_6"] = 54] = "k_6";
        key[key["k_7"] = 55] = "k_7";
        key[key["k_8"] = 56] = "k_8";
        key[key["k_9"] = 57] = "k_9";
        key[key["a"] = 65] = "a";
        key[key["b"] = 66] = "b";
        key[key["c"] = 67] = "c";
        key[key["d"] = 68] = "d";
        key[key["e"] = 69] = "e";
        key[key["f"] = 70] = "f";
        key[key["g"] = 71] = "g";
        key[key["h"] = 72] = "h";
        key[key["i"] = 73] = "i";
        key[key["j"] = 74] = "j";
        key[key["k"] = 75] = "k";
        key[key["l"] = 76] = "l";
        key[key["m"] = 77] = "m";
        key[key["n"] = 78] = "n";
        key[key["o"] = 79] = "o";
        key[key["p"] = 80] = "p";
        key[key["q"] = 81] = "q";
        key[key["r"] = 82] = "r";
        key[key["s"] = 83] = "s";
        key[key["t"] = 84] = "t";
        key[key["u"] = 85] = "u";
        key[key["v"] = 86] = "v";
        key[key["w"] = 87] = "w";
        key[key["x"] = 88] = "x";
        key[key["y"] = 89] = "y";
        key[key["z"] = 90] = "z";
        key[key["leftWindow"] = 91] = "leftWindow";
        key[key["rightWindowKey"] = 92] = "rightWindowKey";
        key[key["select"] = 93] = "select";
        key[key["numpad0"] = 96] = "numpad0";
        key[key["numpad1"] = 97] = "numpad1";
        key[key["numpad2"] = 98] = "numpad2";
        key[key["numpad3"] = 99] = "numpad3";
        key[key["numpad4"] = 100] = "numpad4";
        key[key["numpad5"] = 101] = "numpad5";
        key[key["numpad6"] = 102] = "numpad6";
        key[key["numpad7"] = 103] = "numpad7";
        key[key["numpad8"] = 104] = "numpad8";
        key[key["numpad9"] = 105] = "numpad9";
        key[key["multiply"] = 106] = "multiply";
        key[key["add"] = 107] = "add";
        key[key["subtract"] = 109] = "subtract";
        key[key["decimalPoint"] = 110] = "decimalPoint";
        key[key["divide"] = 111] = "divide";
        key[key["f1"] = 112] = "f1";
        key[key["f2"] = 113] = "f2";
        key[key["f3"] = 114] = "f3";
        key[key["f4"] = 115] = "f4";
        key[key["f5"] = 116] = "f5";
        key[key["f6"] = 117] = "f6";
        key[key["f7"] = 118] = "f7";
        key[key["f8"] = 119] = "f8";
        key[key["f9"] = 120] = "f9";
        key[key["f10"] = 121] = "f10";
        key[key["f11"] = 122] = "f11";
        key[key["f12"] = 123] = "f12";
        key[key["numLock"] = 144] = "numLock";
        key[key["scrollLock"] = 145] = "scrollLock";
        key[key["semiColon"] = 186] = "semiColon";
        key[key["equalSign"] = 187] = "equalSign";
        key[key["comma"] = 188] = "comma";
        key[key["dash"] = 189] = "dash";
        key[key["period"] = 190] = "period";
        key[key["forwardSlash"] = 191] = "forwardSlash";
        key[key["graveAccent"] = 192] = "graveAccent";
        key[key["openBracket"] = 219] = "openBracket";
        key[key["backSlash"] = 220] = "backSlash";
        key[key["closeBracket"] = 221] = "closeBracket";
        key[key["singleQuote"] = 222] = "singleQuote";
    })(mediumJS.key || (mediumJS.key = {}));
    var key = mediumJS.key;
    ;
    var forwardArrowCodes = {};
    forwardArrowCodes[key.rightArrow] = true;
    forwardArrowCodes[key.downArrow] = true;
    forwardArrowCodes[key.pageDown] = true;
    forwardArrowCodes[key.end] = true;
    var backwardArrowCodes = {};
    backwardArrowCodes[key.leftArrow] = true;
    backwardArrowCodes[key.upArrow] = true;
    backwardArrowCodes[key.pageUp] = true;
    backwardArrowCodes[key.home] = true;
})(mediumJS || (mediumJS = {}));
var LMMedium;
(function (LMMedium) {
    var Cache = (function () {
        function Cache() {
            this.initialized = false;
            this.cmd = false;
            this.focusedElement = null;
        }
        return Cache;
    })();
    LMMedium.Cache = Cache;
})(LMMedium || (LMMedium = {}));
//(function(Medium) {
//	"use strict";
//	Medium.Cache = function () {
//		this.initialized = false;
//		this.cmd = false;
//		this.focusedElement = null
//	};
//})(Medium);
/// <reference path="base.ts" />
var LMMedium;
(function (LMMedium) {
    LMMedium.w = window;
    LMMedium.d = document;
    LMMedium.key = LMMedium.w['key'] = {
        'backspace': 8,
        'tab': 9,
        'enter': 13,
        'shift': 16,
        'ctrl': 17,
        'alt': 18,
        'pause': 19,
        'capsLock': 20,
        'escape': 27,
        'pageUp': 33,
        'pageDown': 34,
        'end': 35,
        'home': 36,
        'leftArrow': 37,
        'upArrow': 38,
        'rightArrow': 39,
        'downArrow': 40,
        'insert': 45,
        'delete': 46,
        '0': 48,
        '1': 49,
        '2': 50,
        '3': 51,
        '4': 52,
        '5': 53,
        '6': 54,
        '7': 55,
        '8': 56,
        '9': 57,
        'a': 65,
        'b': 66,
        'c': 67,
        'd': 68,
        'e': 69,
        'f': 70,
        'g': 71,
        'h': 72,
        'i': 73,
        'j': 74,
        'k': 75,
        'l': 76,
        'm': 77,
        'n': 78,
        'o': 79,
        'p': 80,
        'q': 81,
        'r': 82,
        's': 83,
        't': 84,
        'u': 85,
        'v': 86,
        'w': 87,
        'x': 88,
        'y': 89,
        'z': 90,
        'leftWindow': 91,
        'rightWindowKey': 92,
        'select': 93,
        'numpad0': 96,
        'numpad1': 97,
        'numpad2': 98,
        'numpad3': 99,
        'numpad4': 100,
        'numpad5': 101,
        'numpad6': 102,
        'numpad7': 103,
        'numpad8': 104,
        'numpad9': 105,
        'multiply': 106,
        'add': 107,
        'subtract': 109,
        'decimalPoint': 110,
        'divide': 111,
        'f1': 112,
        'f2': 113,
        'f3': 114,
        'f4': 115,
        'f5': 116,
        'f6': 117,
        'f7': 118,
        'f8': 119,
        'f9': 120,
        'f10': 121,
        'f11': 122,
        'f12': 123,
        'numLock': 144,
        'scrollLock': 145,
        'semiColon': 186,
        'equalSign': 187,
        'comma': 188,
        'dash': 189,
        'period': 190,
        'forwardSlash': 191,
        'graveAccent': 192,
        'openBracket': 219,
        'backSlash': 220,
        'closeBracket': 221,
        'singleQuote': 222
    };
    var utils;
    (function (utils) {
        function isCommand(s, e, fnTrue, fnFalse) {
            if ((s.modifier === 'ctrl' && e.ctrlKey) ||
                (s.modifier === 'cmd' && e.metaKey) ||
                (s.modifier === 'auto' && (e.ctrlKey || e.metaKey))) {
                return fnTrue.call();
            }
            else {
                return fnFalse.call();
            }
        }
        utils.isCommand = isCommand;
        function isShift(e, fnTrue, fnFalse) {
            if (e.shiftKey) {
                return fnTrue.call();
            }
            else {
                return fnFalse.call();
            }
        }
        utils.isShift = isShift;
        function isModifier(settings, e, fn) {
            var cmd = settings.modifiers[e.keyCode];
            if (cmd) {
                return fn.call(null, cmd);
            }
            return false;
        }
        utils.isModifier = isModifier;
        utils.special = {};
        utils.special[LMMedium.key['backspace']] = true;
        utils.special[LMMedium.key['shift']] = true;
        utils.special[LMMedium.key['ctrl']] = true;
        utils.special[LMMedium.key['alt']] = true;
        utils.special[LMMedium.key['delete']] = true;
        utils.special[LMMedium.key['cmd']] = true;
        function isSpecial(e) {
            return typeof utils.special[e.keyCode] !== 'undefined';
        }
        utils.isSpecial = isSpecial;
        utils.navigational = {};
        utils.navigational[LMMedium.key['upArrow']] = true;
        utils.navigational[LMMedium.key['downArrow']] = true;
        utils.navigational[LMMedium.key['leftArrow']] = true;
        utils.navigational[LMMedium.key['rightArrow']] = true;
        function isNavigational(e) {
            return typeof utils.navigational[e.keyCode] !== 'undefined';
        }
        utils.isNavigational = isNavigational;
        /**
         * @param element
         * @param eventNamesString
         * @param func
         * @returns Medium.Utilities
         */
        function addEvents(element, eventNamesString, func) {
            var i = 0, eventName, eventNames = eventNamesString.split(' '), max = eventNames.length;
            for (; i < max; i++) {
                eventName = eventNames[i];
                if (eventName.length > 0) {
                    addEvent(element, eventName, func);
                }
            }
            return LMMedium.utils;
        }
        utils.addEvents = addEvents;
        /*
         * Handle Events
         */
        function addEvent(element, eventName, func) {
            if (element.addEventListener) {
                element.addEventListener(eventName, func, false);
            }
            else if (element.attachEvent) {
                element.attachEvent("on" + eventName, func);
            }
            else {
                element['on' + eventName] = func;
            }
            return LMMedium.utils;
        }
        utils.addEvent = addEvent;
        function removeEvent(element, eventName, func) {
            if (element.removeEventListener) {
                element.removeEventListener(eventName, func, false);
            }
            else if (element.detachEvent) {
                element.detachEvent("on" + eventName, func);
            }
            else {
                element['on' + eventName] = null;
            }
            return LMMedium.utils;
        }
        utils.removeEvent = removeEvent;
        function preventDefaultEvent(e) {
            if (e.preventDefault) {
                e.preventDefault();
            }
            else {
                e.returnValue = false;
            }
            return LMMedium.utils;
        }
        utils.preventDefaultEvent = preventDefaultEvent;
        function stopPropagation(e) {
            e = e || window.event;
            e.cancelBubble = true;
            if (e.stopPropagation !== undefined) {
                e.stopPropagation();
            }
            return LMMedium.utils;
        }
        utils.stopPropagation = stopPropagation;
        function isEventSupported(element, eventName) {
            eventName = 'on' + eventName;
            var el = LMMedium.d.createElement(element.tagName), isSupported = (eventName in el);
            if (!isSupported) {
                el.setAttribute(eventName, 'return;');
                isSupported = typeof el[eventName] == 'function';
            }
            el = null;
            return isSupported;
        }
        utils.isEventSupported = isEventSupported;
        function triggerEvent(element, eventName) {
            var e;
            if (LMMedium.d.createEvent) {
                e = LMMedium.d.createEvent("HTMLEvents");
                e.initEvent(eventName, true, true);
                e.eventName = eventName;
                element.dispatchEvent(e);
            }
            else {
                e = LMMedium.d.createEventObject();
                element.fireEvent("on" + eventName, e);
            }
            return LMMedium.utils;
        }
        utils.triggerEvent = triggerEvent;
        function deepExtend(destination, source) {
            var property, propertyValue;
            for (property in source)
                if (source.hasOwnProperty(property)) {
                    propertyValue = source[property];
                    if (propertyValue !== undefined
                        && propertyValue !== null
                        && propertyValue.constructor !== undefined
                        && propertyValue.constructor === Object) {
                        destination[property] = destination[property] || {};
                        deepExtend(destination[property], propertyValue);
                    }
                    else {
                        destination[property] = propertyValue;
                    }
                }
            return destination;
        }
        utils.deepExtend = deepExtend;
        /*
         * This is a Paste Hook. When the user pastes
         * content, this ultimately converts it into
         * plain text before inserting the data.
         */
        function pasteHook(medium, fn) {
            medium.makeUndoable();
            var tempEditable = LMMedium.d.createElement('div'), el = medium.element, existingValue, existingLength, overallLength, s = medium.settings, value, body = LMMedium.d.body;
            var bodyParent = (body.parentNode);
            var scrollTop = bodyParent.scrollTop, scrollLeft = bodyParent.scrollLeft;
            tempEditable.className = s.cssClasses.pasteHook;
            tempEditable.setAttribute('contenteditable', "true");
            body.appendChild(tempEditable);
            utils.selectNode(tempEditable);
            bodyParent.scrollTop = scrollTop;
            bodyParent.scrollLeft = scrollLeft;
            setTimeout(function () {
                value = text(tempEditable);
                el.focus();
                if (s.maxLength > 0) {
                    existingValue = text(el);
                    existingLength = existingValue.length;
                    overallLength = existingLength + value.length;
                    if (overallLength > existingLength) {
                        value = value.substring(0, s.maxLength - existingLength);
                    }
                }
                utils.detachNode(tempEditable);
                bodyParent.scrollTop = scrollTop;
                bodyParent.scrollLeft = scrollLeft;
                fn(value);
            }, 0);
            return LMMedium.utils;
        }
        utils.pasteHook = pasteHook;
        function traverseAll(element, options, depth) {
            var children = element.childNodes, length = children.length, i = 0, node;
            depth = depth || 1;
            options = options || {};
            if (length > 0) {
                for (; i < length; i++) {
                    node = children[i];
                    switch (node.nodeType) {
                        case 1:
                            traverseAll(node, options, depth + 1);
                            if (options.element !== undefined)
                                options.element(node, i, depth, element);
                            break;
                        case 3:
                            if (options.fragment !== undefined)
                                options.fragment(node, i, depth, element);
                    }
                    //length may change
                    length = children.length;
                    //if length did change, and we are at the last item, this causes infinite recursion, so if we are at the last item, then stop to prevent this
                    if (node === element.lastChild) {
                        i = length;
                    }
                }
            }
            return LMMedium.utils;
        }
        utils.traverseAll = traverseAll;
        function trim(string) {
            return string.replace(/^[\s]+|\s+$/g, '');
        }
        utils.trim = trim;
        function arrayContains(array, variable) {
            var i = array.length;
            while (i--) {
                if (array[i] === variable) {
                    return true;
                }
            }
            return false;
        }
        utils.arrayContains = arrayContains;
        function addClass(el, className) {
            if (el.classList)
                el.classList.add(className);
            else
                el.className += ' ' + className;
            return LMMedium.utils;
        }
        utils.addClass = addClass;
        function removeClass(el, className) {
            if (el.classList)
                el.classList.remove(className);
            else
                el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
            return LMMedium.utils;
        }
        utils.removeClass = removeClass;
        function hasClass(el, className) {
            if (el.classList)
                return el.classList.contains(className);
            else
                return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);
        }
        utils.hasClass = hasClass;
        function isHidden(el) {
            return el.offsetWidth === 0 || el.offsetHeight === 0;
        }
        utils.isHidden = isHidden;
        function isVisible(el) {
            return el.offsetWidth !== 0 || el.offsetHeight !== 0;
        }
        utils.isVisible = isVisible;
        function encodeHtml(html) {
            var pn = LMMedium.d.createElement('a').appendChild(LMMedium.d.createTextNode(html)).parentNode;
            return pn.innerHTML;
        }
        utils.encodeHtml = encodeHtml;
        function text(node, val) {
            if (val !== undefined) {
                if (node === null) {
                    return this;
                }
                if (node.textContent !== undefined) {
                    node.textContent = val;
                }
                else {
                    node.innerText = val;
                }
                return this;
            }
            else if (node === null) {
                return this;
            }
            else if (node.innerText !== undefined) {
                return utils.trim(node.innerText);
            }
            else if (node.textContent !== undefined) {
                return utils.trim(node.textContent);
            }
            else if (node.data !== undefined) {
                return utils.trim(node.data);
            }
            //for good measure
            return '';
        }
        utils.text = text;
        function changeTag(oldNode, newTag) {
            var newNode = LMMedium.d.createElement(newTag), node, nextNode;
            node = oldNode.firstChild;
            while (node) {
                nextNode = node.nextSibling;
                newNode.appendChild(node);
                node = nextNode;
            }
            oldNode.parentNode.insertBefore(newNode, oldNode);
            oldNode.parentNode.removeChild(oldNode);
            return newNode;
        }
        utils.changeTag = changeTag;
        function detachNode(el) {
            if (el.parentNode !== null) {
                el.parentNode.removeChild(el);
            }
            return this;
        }
        utils.detachNode = detachNode;
        function selectNode(el) {
            var range, selection;
            el.focus();
            if (LMMedium.d.body.createTextRange) {
                range = LMMedium.d.body.createTextRange();
                range.moveToElementText(el);
                range.select();
            }
            else if (LMMedium.w.getSelection) {
                selection = LMMedium.w.getSelection();
                range = LMMedium.d.createRange();
                range.selectNodeContents(el);
                selection.removeAllRanges();
                selection.addRange(range);
            }
            return this;
        }
        utils.selectNode = selectNode;
        function baseAtCaret(medium) {
            if (!medium.isActive())
                return null;
            var sel = LMMedium.w.getSelection ? LMMedium.w.getSelection() : document.selection;
            if (sel.rangeCount) {
                var selRange = sel.getRangeAt(0), container = selRange.endContainer;
                switch (container.nodeType) {
                    case 3:
                        if (container.data && container.data.length != selRange.endOffset)
                            return false;
                        break;
                }
                return container;
            }
            return null;
        }
        utils.baseAtCaret = baseAtCaret;
        function atCaret(medium) {
            var container = this.baseAtCaret(medium) || {}, el = medium.element;
            if (container === false)
                return null;
            while (container && container.parentNode !== el) {
                container = container.parentNode;
            }
            if (container && container.nodeType == 1) {
                return container;
            }
            return null;
        }
        utils.atCaret = atCaret;
        function hide(el) {
            el.style.display = 'none';
        }
        utils.hide = hide;
        function show(el) {
            el.style.display = '';
        }
        utils.show = show;
        function hideAnim(el) {
            el.style.opacity = 1;
        }
        utils.hideAnim = hideAnim;
        function showAnim(el) {
            el.style.opacity = 0.01;
            el.style.display = '';
        }
        utils.showAnim = showAnim;
    })(utils = LMMedium.utils || (LMMedium.utils = {}));
})(LMMedium || (LMMedium = {}));
/// <reference path="base.ts" />
var LMMedium;
(function (LMMedium) {
    var Selection = (function () {
        function Selection() {
        }
        Selection.prototype.saveSelection = function () {
            if (LMMedium.w.getSelection) {
                var sel = LMMedium.w.getSelection();
                if (sel.rangeCount > 0) {
                    return sel.getRangeAt(0);
                }
            }
            else if (LMMedium.d.selection && LMMedium.d.selection.createRange) {
                return LMMedium.d.selection.createRange();
            }
            return null;
        };
        Selection.prototype.restoreSelection = function (range) {
            if (range) {
                if (LMMedium.w.getSelection) {
                    var sel = LMMedium.w.getSelection();
                    sel.removeAllRanges();
                    sel.addRange(range);
                }
                else if (LMMedium.d.selection && range.select) {
                    range.select();
                }
            }
        };
        return Selection;
    })();
    LMMedium.Selection = Selection;
})(LMMedium || (LMMedium = {}));
/// <reference path="base.ts" />
/// <reference path="utilities.ts" />
var LMMedium;
(function (LMMedium) {
    var Undoable = (function () {
        function Undoable(medium) {
            this.medium = medium;
            this.movingThroughStack = false;
            this.stack = new Undo.Stack();
            var me = this;
            me.element = medium.settings.element;
            var EditCommand = Undo.Command.extend({
                constructor: function (oldValue, newValue) {
                    me.oldValue = oldValue;
                    me.newValue = newValue;
                },
                execute: function () {
                },
                undo: function () {
                    me.element.innerHTML = me.oldValue;
                    medium.canUndo = me.stack.canUndo();
                    medium.canRedo = me.stack.canRedo();
                    medium.dirty = me.stack.dirty();
                },
                redo: function () {
                    me.element.innerHTML = me.newValue;
                    medium.canUndo = me.stack.canUndo();
                    medium.canRedo = me.stack.canRedo();
                    medium.dirty = me.stack.dirty();
                }
            });
            this.makeUndoable = function (isInit) {
                var newValue = me.element.innerHTML;
                if (isInit) {
                    me.startValue = me.element.innerHTML;
                    me.stack.execute(new EditCommand(me.startValue, me.startValue));
                }
                else if (newValue != me.startValue) {
                    if (!me.movingThroughStack) {
                        // this could try and make a diff instead of storing snapshots
                        me.stack.execute(new EditCommand(me.startValue, newValue));
                        me.startValue = newValue;
                        medium.dirty = me.stack.dirty();
                    }
                    LMMedium.utils.triggerEvent(medium.settings.element, "change");
                }
            };
            LMMedium.utils.addEvent(me.element, 'keyup', function (e) {
                if (e.ctrlKey || e.keyCode === LMMedium.key.z) {
                    LMMedium.utils.preventDefaultEvent(e);
                    return;
                }
                // a way too simple algorithm in place of single-character undo
                clearTimeout(me.timer);
                me.timer = setTimeout(function () {
                    this.makeUndoable();
                }, 250);
            })
                .addEvent(me.element, 'keydown', function (e) {
                if (!e.ctrlKey || e.keyCode !== LMMedium.key.z) {
                    me.movingThroughStack = false;
                    return;
                }
                LMMedium.utils.preventDefaultEvent(e);
                me.movingThroughStack = true;
                if (e.shiftKey) {
                    me.stack.canRedo() && me.stack.redo();
                }
                else {
                    me.stack.canUndo() && me.stack.undo();
                }
            });
        }
        return Undoable;
    })();
    LMMedium.Undoable = Undoable;
})(LMMedium || (LMMedium = {}));
/// <reference path="utilities.ts" />
/// <reference path="base.ts" />
var LMMedium;
(function (LMMedium) {
    function isEditable(e) {
        if (e.hasOwnProperty('target') && e.target.getAttribute('contenteditable') === 'false') {
            LMMedium.utils.preventDefaultEvent(e);
            return false;
        }
        return true;
    }
    var Action = (function () {
        function Action(medium) {
            this.medium = medium;
            this.handledEvents = {
                keydown: null,
                keyup: null,
                blur: null,
                focus: null,
                paste: null,
                click: null
            };
        }
        Action.prototype.setup = function () {
            this
                .handleFocus()
                .handleBlur()
                .handleKeyDown()
                .handleKeyUp()
                .handlePaste()
                .handleClick();
        };
        Action.prototype.destroy = function () {
            var el = this.medium.element;
            LMMedium.utils
                .removeEvent(el, 'focus', this.handledEvents.focus)
                .removeEvent(el, 'blur', this.handledEvents.blur)
                .removeEvent(el, 'keydown', this.handledEvents.keydown)
                .removeEvent(el, 'keyup', this.handledEvents.keyup)
                .removeEvent(el, 'paste', this.handledEvents.paste)
                .removeEvent(el, 'click', this.handledEvents.click);
        };
        Action.prototype.handleFocus = function () {
            var medium = this.medium, el = medium.element;
            LMMedium.utils.addEvent(el, 'focus', this.handledEvents.focus = function (e) {
                e = e || LMMedium.w.event;
                if (!isEditable(e)) {
                    return false;
                }
                LMMedium.Medium.activeElement = el;
                medium.placeholders();
            });
            return this;
        };
        Action.prototype.handleBlur = function () {
            var medium = this.medium, el = medium.element;
            LMMedium.utils.addEvent(el, 'blur', this.handledEvents.blur = function (e) {
                e = e || LMMedium.w.event;
                if (LMMedium.Medium.activeElement === el) {
                    LMMedium.Medium.activeElement = null;
                }
                medium.placeholders();
            });
            return this;
        };
        Action.prototype.handleKeyDown = function () {
            var action = this, medium = this.medium, settings = medium.settings, cache = medium.cache, el = medium.element;
            LMMedium.utils.addEvent(el, 'keydown', this.handledEvents.keydown = function (e) {
                e = e || LMMedium.w.event;
                if (!isEditable(e)) {
                    return false;
                }
                var keepEvent = true;
                //in Chrome it sends out this event before every regular event, not sure why
                if (e.keyCode === 229)
                    return;
                LMMedium.utils.isCommand(settings, e, function () {
                    cache.cmd = true;
                }, function () {
                    cache.cmd = false;
                });
                LMMedium.utils.isShift(e, function () {
                    cache.shift = true;
                }, function () {
                    cache.shift = false;
                });
                LMMedium.utils.isModifier(settings, e, function (cmd) {
                    if (cache.cmd) {
                        if ((settings.mode === LMMedium.Medium.inlineMode) || (settings.mode === LMMedium.Medium.partialMode)) {
                            LMMedium.utils.preventDefaultEvent(e);
                            return false;
                        }
                        var cmdType = typeof cmd;
                        var fn = null;
                        if (cmdType === "function") {
                            fn = cmd;
                        }
                        else {
                            fn = medium[cmd];
                        }
                        keepEvent = fn.call(medium, e);
                        if (keepEvent === false || keepEvent === medium) {
                            LMMedium.utils.preventDefaultEvent(e);
                            LMMedium.utils.stopPropagation(e);
                        }
                        return true;
                    }
                    return false;
                });
                if (settings.maxLength !== -1) {
                    var len = LMMedium.utils.text(el).length, hasSelection = false, selection = LMMedium.w.getSelection(), isSpecial = LMMedium.utils.isSpecial(e), isNavigational = LMMedium.utils.isNavigational(e);
                    if (selection) {
                        hasSelection = !selection.isCollapsed;
                    }
                    if (isSpecial || isNavigational) {
                        return true;
                    }
                    if (len >= settings.maxLength && !hasSelection) {
                        settings.maxLengthReached(el);
                        LMMedium.utils.preventDefaultEvent(e);
                        return false;
                    }
                }
                switch (e.keyCode) {
                    case LMMedium.key['enter']:
                        if (action.enterKey(e) === false) {
                            LMMedium.utils.preventDefaultEvent(e);
                        }
                        break;
                    case LMMedium.key['backspace']:
                    case LMMedium.key['delete']:
                        action.backspaceOrDeleteKey(e);
                        break;
                }
                return keepEvent;
            });
            return this;
        };
        Action.prototype.handleKeyUp = function () {
            var action = this, medium = this.medium, settings = medium.settings, cache = medium.cache, cursor = medium.cursor, el = medium.element;
            LMMedium.utils.addEvent(el, 'keyup', this.handledEvents.keyup = function (e) {
                e = e || LMMedium.w.event;
                if (!isEditable(e)) {
                    return false;
                }
                LMMedium.utils.isCommand(settings, e, function () {
                    cache.cmd = false;
                }, function () {
                    cache.cmd = true;
                });
                medium.clean(null);
                medium.placeholders();
                //here we have a key context, so if you need to create your own object within a specific context it is doable
                var keyContext;
                if (settings.keyContext !== null
                    && (keyContext = settings.keyContext[e.keyCode])) {
                    var el = cursor.parent();
                    if (el) {
                        keyContext.call(medium, e, el);
                    }
                }
                action.preserveElementFocus();
            });
            return this;
        };
        Action.prototype.handlePaste = function () {
            var medium = this.medium, el = medium.element, text, i, max, data, cD, type, types;
            LMMedium.utils.addEvent(el, 'paste', this.handledEvents.paste = function (e) {
                e = e || LMMedium.w.event;
                if (!isEditable(e)) {
                    return false;
                }
                i = 0;
                LMMedium.utils.preventDefaultEvent(e);
                text = '';
                cD = e.clipboardData;
                if (cD && (data = cD.getData)) {
                    types = cD.types;
                    max = types.length;
                    for (i = 0; i < max; i++) {
                        type = types[i];
                        switch (type) {
                            //case 'text/html':
                            //	return medium.paste(cD.getData('text/html'));
                            case 'text/plain':
                                return medium.paste(cD.getData('text/plain'));
                        }
                    }
                }
                medium.paste();
            });
            return this;
        };
        Action.prototype.handleClick = function () {
            var medium = this.medium, el = medium.element, cursor = medium.cursor;
            LMMedium.utils.addEvent(el, 'click', this.handledEvents.click = function (e) {
                if (!isEditable(e)) {
                    cursor.caretToAfter(e.target);
                }
            });
            return this;
        };
        Action.prototype.enterKey = function (e) {
            var medium = this.medium, el = medium.element, settings = medium.settings, cache = medium.cache, cursor = medium.cursor;
            if (settings.mode === LMMedium.Medium.inlineMode || settings.mode === LMMedium.Medium.inlineRichMode) {
                return false;
            }
            if (cache.shift) {
                if (settings.tags['break']) {
                    medium.addTag(settings.tags['break'], true);
                    return false;
                }
            }
            else {
                var focusedElement = LMMedium.utils.atCaret(medium) || {}, children = el.children, lastChild = focusedElement === el.lastChild ? el.lastChild : null, makeHR, secondToLast, paragraph;
                if (lastChild
                    && lastChild !== el.firstChild
                    && settings.autoHR
                    && settings.mode !== LMMedium.Medium.partialMode
                    && settings.tags.horizontalRule) {
                    LMMedium.utils.preventDefaultEvent(e);
                    makeHR =
                        LMMedium.utils.text(lastChild) === ""
                            && lastChild.nodeName.toLowerCase() === settings.tags.paragraph;
                    if (makeHR && children.length >= 2) {
                        secondToLast = children[children.length - 2];
                        if (secondToLast.nodeName.toLowerCase() === settings.tags.horizontalRule) {
                            makeHR = false;
                        }
                    }
                    if (makeHR) {
                        medium.addTag(settings.tags.horizontalRule, false, true, focusedElement);
                        focusedElement = focusedElement.nextSibling;
                    }
                    if ((paragraph = medium.addTag(settings.tags.paragraph, true, null, focusedElement)) !== null) {
                        paragraph.innerHTML = '';
                        cursor.set(0, paragraph);
                    }
                }
            }
            return true;
        };
        Action.prototype.backspaceOrDeleteKey = function (e) {
            var medium = this.medium, cursor = medium.cursor, settings = medium.settings, el = medium.element;
            if (settings.onBackspaceOrDelete !== undefined) {
                var result = settings.onBackspaceOrDelete.call(medium, e, el);
                if (result) {
                    return;
                }
            }
            if (el.lastChild === null)
                return;
            var lastChild = el.lastChild, beforeLastChild = lastChild.previousSibling, anchorNode = rangy.getSelection().anchorNode;
            if (lastChild
                && settings.tags.horizontalRule
                && lastChild.nodeName.toLocaleLowerCase() === settings.tags.horizontalRule) {
                el.removeChild(lastChild);
            }
            else if (lastChild
                && beforeLastChild
                && LMMedium.utils.text(lastChild).length < 1
                && beforeLastChild.nodeName.toLowerCase() === settings.tags.horizontalRule
                && lastChild.nodeName.toLowerCase() === settings.tags.paragraph) {
                el.removeChild(lastChild);
                el.removeChild(beforeLastChild);
            }
            else if (el.childNodes.length === 1
                && lastChild
                && !LMMedium.utils.text(lastChild).length) {
                LMMedium.utils.preventDefaultEvent(e);
                medium.setupContents();
            }
            else if (anchorNode && anchorNode === el) {
                medium.deleteSelection();
                medium.setupContents();
                cursor.set(0, el.firstChild);
            }
        };
        Action.prototype.preserveElementFocus = function () {
            // Fetch node that has focus
            var anchorNode = LMMedium.w.getSelection ? LMMedium.w.getSelection().anchorNode : document.activeElement;
            if (anchorNode) {
                var medium = this.medium, cache = medium.cache, el = medium.element, s = medium.settings, cur = anchorNode.parentNode, children = el.children, diff = cur !== cache.focusedElement, elementIndex = 0, i;
                // anchorNode is our target if element is empty
                if (cur === s.element) {
                    cur = anchorNode;
                }
                // Find our child index
                for (i = 0; i < children.length; i++) {
                    if (cur === children[i]) {
                        elementIndex = i;
                        break;
                    }
                }
                // Focused element is different
                if (diff) {
                    cache.focusedElement = cur;
                    cache.focusedElementIndex = elementIndex;
                }
            }
        };
        return Action;
    })();
    LMMedium.Action = Action;
})(LMMedium || (LMMedium = {}));
/// <reference path="base.ts" />
/// <reference path="utilities.ts" />
var LMMedium;
(function (LMMedium) {
    var Element = (function () {
        function Element(medium, tagName, attributes) {
            this.medium = medium;
            this.element = medium.element;
            switch (tagName.toLowerCase()) {
                case 'bold':
                    this.tagName = 'b';
                    break;
                case 'italic':
                    this.tagName = 'i';
                    break;
                case 'underline':
                    this.tagName = 'u';
                    break;
                default:
                    this.tagName = tagName;
            }
            this.attributes = attributes || {};
            this.clean = true;
        }
        Element.prototype.invoke = function (fn) {
            if (LMMedium.Medium.activeElement === this.element) {
                if (fn) {
                    fn.apply(this);
                }
                var attr = this.attributes, tagName = this.tagName.toLowerCase(), applier, cl;
                if (attr.className !== undefined) {
                    cl = (attr.className.split[' '] || [attr.className]).shift();
                    delete attr.className;
                }
                else {
                    cl = 'medium-' + tagName;
                }
                applier = rangy.createClassApplier(cl, {
                    elementTagName: tagName,
                    elementAttributes: this.attributes
                });
                this.medium.makeUndoable();
                applier.toggleSelection(LMMedium.w);
                if (this.clean) {
                    //cleanup
                    this.medium.clean();
                    this.medium.placeholders();
                }
            }
        };
        /**
         *
         * @param {Boolean} clean
         * @returns {Medium.Element}
         */
        Element.prototype.setClean = function (clean) {
            this.clean = clean;
            return this;
        };
        return Element;
    })();
    LMMedium.Element = Element;
})(LMMedium || (LMMedium = {}));
/// <reference path="base.ts" />
/// <reference path="utilities.ts" />
var LMMedium;
(function (LMMedium) {
    var Drag = (function () {
        function Drag(medium) {
            this.medium = medium;
            this.handledEvents = {
                dragstart: null,
                dragend: null,
                mouseover: null,
                mouseout: null,
                mousemove: null
            };
            this.elementClass = 'Medium-focused';
            this.buttonClass = 'Medium-drag';
            //thank you ascii for not including a directional icon (boo!)
            //http://www.flaticon.com/free-icon/pointer-crosstree_10119
            this.iconSrc = 'data:image/svg+xml;utf8,\
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="21.424px" height="21.424px" viewBox="0 0 21.424 21.424" style="enable-background:new 0 0 21.424 21.424;" xml:space="preserve">\
	<g>\
		<g>\
			<path style="fill:{{iconColor}};" d="M13.616,17.709L13.616,17.709h0.781l-3.686,3.715l-3.685-3.715h0.781l0,0H13.616z M13.616,17.709 M14.007,17.709 M12.555,19.566 M8.87,19.566 M7.418,17.709 M7.809,17.709 M10.712,17.709"/>\
			<path style="fill:{{iconColor}};" d="M13.616,3.715L13.616,3.715h0.781L10.712,0L7.027,3.715h0.781l0,0H13.616z M13.616,3.715 M14.007,3.715 M12.555,1.858 M8.87,1.858 M7.418,3.715 M7.809,3.715 M10.712,3.715"/>\
			<path style="fill:{{iconColor}};" d="M3.716,13.616L3.716,13.616v0.781L0,10.712l3.716-3.685v0.781l0,0V13.616z M3.716,13.616 M3.716,14.007 M1.858,12.555 M1.858,8.87 M3.716,7.417 M3.716,7.808 M3.716,10.712"/>\
			<path style="fill:{{iconColor}};" d="M17.709,13.616L17.709,13.616v0.781l3.715-3.685l-3.715-3.685v0.781l0,0V13.616z M17.709,13.616 M17.709,14.007 M19.566,12.555 M19.566,8.87 M17.709,7.417 M17.709,7.808 M17.709,10.712"/>\
		</g>\
		<path style="fill-rule:evenodd;clip-rule:evenodd;fill:{{iconColor}};" d="M10.712,6.608c2.267,0,4.104,1.838,4.104,4.104 c0,2.266-1.837,4.104-4.104,4.104c-2.266,0-4.104-1.837-4.104-4.104C6.608,8.446,8.446,6.608,10.712,6.608L10.712,6.608z M10.712,7.515c-1.765,0-3.196,1.432-3.196,3.197s1.432,3.197,3.196,3.197c1.766,0,3.197-1.432,3.197-3.197 S12.478,7.515,10.712,7.515z"/>\
	</g>\
</svg>';
            this.iconColor = '#231F20';
            var that = this;
            var iconSrc = this.iconSrc.replace(/[{][{]([a-zA-Z]+)[}][}]/g, function (ignore, match) {
                if (that.hasOwnProperty(match)) {
                    return that[match];
                }
                return ignore;
            });
            var icon = this.icon = LMMedium.d.createElement('img');
            icon.className = this.buttonClass;
            icon.setAttribute('contenteditable', 'false');
            icon.setAttribute('src', iconSrc);
            this.hide();
            this.element = null;
            this.protectedElement = null;
        }
        Drag.prototype.setup = function () {
            this
                .handleDragstart()
                .handleDragend()
                .handleMouseover()
                .handleMouseout()
                .handleMousemove();
        };
        Drag.prototype.destroy = function () {
            LMMedium.utils
                .removeEvent(this.icon, 'dragstart', this.handledEvents.dragstart)
                .removeEvent(this.icon, 'dragend', this.handledEvents.dragend)
                .removeEvent(this.icon, 'mouseover', this.handledEvents.mouseover)
                .removeEvent(this.icon, 'mouseout', this.handledEvents.mouseout)
                .removeEvent(this.medium.element, 'mousemove', this.handledEvents.mousemove);
        };
        Drag.prototype.hide = function () {
            LMMedium.utils.hide(this.icon);
        };
        Drag.prototype.handleDragstart = function () {
            var me = this;
            LMMedium.utils.addEvent(this.icon, 'dragstart', this.handledEvents.dragstart = function (e) {
                if (me.protectedElement !== null)
                    return;
                e = e || LMMedium.w.event;
                me.protectedElement = LMMedium.utils.detachNode(me.element);
                me.icon.style.opacity = 0.00;
            });
            return this;
        };
        Drag.prototype.handleDragend = function () {
            var me = this;
            LMMedium.utils.addEvent(this.icon, 'dragend', this.handledEvents.dragend = LMMedium.d.body.ondragend = function (e) {
                if (me.protectedElement === null)
                    return;
                setTimeout(function () {
                    me.cleanCanvas();
                    me.protectedElement = null;
                }, 1);
            });
            return this;
        };
        Drag.prototype.handleMouseover = function () {
            var me = this;
            LMMedium.utils.addEvent(this.icon, 'mouseover', this.handledEvents.mouseover = function (e) {
                if (me.protectedElement !== null)
                    return;
                LMMedium.utils
                    .stopPropagation(e)
                    .addClass(me.element, me.elementClass);
            });
            return this;
        };
        Drag.prototype.handleMouseout = function () {
            var me = this;
            LMMedium.utils.addEvent(this.icon, 'mouseout', this.handledEvents.mouseout = function (e) {
                if (me.protectedElement !== null)
                    return;
                LMMedium.utils
                    .stopPropagation(e)
                    .removeClass(me.element, me.elementClass);
            });
            return this;
        };
        Drag.prototype.handleMousemove = function () {
            var me = this;
            LMMedium.utils.addEvent(this.medium.element, 'mousemove', this.handledEvents.mousemove = function (e) {
                e = e || LMMedium.w.event;
                var target = e.target || {};
                if (target.getAttribute('contenteditable') === 'false') {
                    me.show(target);
                }
            });
            return this;
        };
        Drag.prototype.show = function (el) {
            if (el === this.icon && this.protectedElement === null)
                return;
            this.element = el;
            var style = this.icon.style, left = el.offsetLeft, top = el.offsetTop;
            el.dragIcon = this.icon;
            el.parentNode.appendChild(this.icon);
            style.opacity = 1;
            style.left = left + 'px';
            style.top = top + 'px';
            LMMedium.utils.show(this.icon);
        };
        Drag.prototype.cleanCanvas = function () {
            var target, inserted = false, buttons = LMMedium.d.getElementsByClassName(this.buttonClass);
            this.icon.style.opacity = 1;
            while (buttons.length > 0) {
                if (LMMedium.utils.isVisible(target = buttons[0])) {
                    if (!inserted) {
                        target.parentNode.insertBefore(this.element, target);
                        inserted = true;
                    }
                    LMMedium.utils.detachNode(target);
                }
            }
            LMMedium.utils.detachNode(this.icon);
        };
        return Drag;
    })();
    LMMedium.Drag = Drag;
})(LMMedium || (LMMedium = {}));
/// <reference path="base.ts" />
/// <reference path="utilities.ts" />
var LMMedium;
(function (LMMedium) {
    var Injector = (function () {
        function Injector() {
        }
        /**
         * @methodOf Medium.Injector
         * @param {String|HtmlElement} htmlRaw
         * @returns {[HtmlElement|Node]}
         */
        Injector.prototype.inject = function (htmlRaw) {
            var nodes = [], html, isConverted = false;
            if (typeof htmlRaw === 'string') {
                var htmlConverter = LMMedium.d.createElement('div');
                htmlConverter.innerHTML = htmlRaw;
                html = htmlConverter.childNodes;
                isConverted = true;
            }
            else {
                html = htmlRaw;
            }
            this.insertHTML('<span id="Medium-wedge"></span>', false);
            var wedge = LMMedium.d.getElementById('Medium-wedge'), parent = wedge.parentNode, i = 0;
            wedge.removeAttribute('id');
            if (isConverted) {
                //make an array of elements that are about to be inserted, can't use html because they will
                while (i < html.length) {
                    nodes.push(html[i]);
                    i++;
                }
                while (html.length > 0) {
                    parent.insertBefore(html[html.length - 1], wedge);
                }
            }
            else {
                nodes.push(html);
                parent.insertBefore(html, wedge);
            }
            parent.removeChild(wedge);
            wedge = null;
            return nodes;
        };
        //Thank you Tim Down (super uber genius): http://stackoverflow.com/questions/6690752/insert-html-at-caret-in-a-contenteditable-div/6691294#6691294
        Injector.prototype.insertHTML = function (html, selectPastedContent) {
            var sel, range;
            if (LMMedium.w.getSelection) {
                // IE9 and non-IE
                sel = LMMedium.w.getSelection();
                if (sel.getRangeAt && sel.rangeCount) {
                    range = sel.getRangeAt(0);
                    range.deleteContents();
                    // Range.createContextualFragment() would be useful here but is
                    // only relatively recently standardized and is not supported in
                    // some browsers (IE9, for one)
                    var el = LMMedium.d.createElement("div");
                    el.innerHTML = html;
                    var frag = LMMedium.d.createDocumentFragment(), node, lastNode;
                    while ((node = el.firstChild)) {
                        lastNode = frag.appendChild(node);
                    }
                    var firstNode = frag.firstChild;
                    range.insertNode(frag);
                    // Preserve the selection
                    if (lastNode) {
                        range = range.cloneRange();
                        range.setStartAfter(lastNode);
                        if (selectPastedContent) {
                            range.setStartBefore(firstNode);
                        }
                        else {
                            range.collapse(true);
                        }
                        sel.removeAllRanges();
                        sel.addRange(range);
                    }
                }
            }
            else if ((sel = LMMedium.d.selection) && sel.type != "Control") {
                // IE < 9
                var originalRange = sel.createRange();
                originalRange.collapse(true);
                sel.createRange().pasteHTML(html);
                if (selectPastedContent) {
                    range = sel.createRange();
                    range.setEndPoint("StartToStart", originalRange);
                    range.select();
                }
            }
        };
        return Injector;
    })();
    LMMedium.Injector = Injector;
})(LMMedium || (LMMedium = {}));
/// <reference path="base.ts" />
/// <reference path="utilities.ts" />
/// <reference path="injector.ts" />
var LMMedium;
(function (LMMedium) {
    var Html = (function () {
        function Html(medium, html) {
            this.medium = medium;
            this.html = html;
            this.clean = true;
            this.injector = new LMMedium.Injector();
        }
        Html.prototype.insert = function (fn, selectInserted) {
            if (LMMedium.Medium.activeElement === this.medium.element) {
                if (fn) {
                    fn.apply(this);
                }
                var inserted = this.injector.inject(this.html, selectInserted);
                if (this.clean) {
                    //cleanup
                    this.medium.clean();
                    this.medium.placeholders();
                }
                this.medium.makeUndoable();
                return inserted;
            }
            else {
                return null;
            }
        };
        /**
         * @methodOf Medium.Html
         * @param clean
         * @returns {Medium.Html}
         */
        Html.prototype.setClean = function (clean) {
            this.clean = clean;
            return this;
        };
        return Html;
    })();
    LMMedium.Html = Html;
})(LMMedium || (LMMedium = {}));
/// <reference path="utilities.ts" />
/// <reference path="cache.ts" />
/// <reference path="cursor.ts" />
/// <reference path="selection.ts" />
/// <reference path="undoable.ts" />
/// <reference path="action.ts" />
/// <reference path="element.ts" />
/// <reference path="drag.ts" />
/// <reference path="html.ts" />
rangy.rangePrototype.insertNodeAtEnd = function (node) {
    var range = this.cloneRange();
    range.collapse(false);
    range.insertNode(node);
    range.detach();
    this.setEndAfter(node);
};
var LMMedium;
(function (LMMedium) {
    var Medium = (function () {
        function Medium(userSettings) {
            this.userSettings = userSettings;
            var medium = this;
            var defaultSettings = LMMedium.utils.deepExtend({}, Medium.defaultSettings);
            var settings = this.settings = LMMedium.utils.deepExtend(defaultSettings, userSettings);
            this.cache = new LMMedium.Cache();
            this.selection = new LMMedium.Selection();
            this.action = new LMMedium.Action(this);
            this.cursor = new LMMedium.Cursor(this);
            this.undoable = new LMMedium.Undoable(this);
            var el;
            var newVal;
            var i;
            for (i in defaultSettings)
                if (defaultSettings.hasOwnProperty(i)) {
                    // Override defaults with data-attributes
                    if (typeof defaultSettings[i] !== 'object'
                        && defaultSettings.hasOwnProperty(i)
                        && settings.element.getAttribute('data-medium-' + LMMedium.key)) {
                        newVal = settings.element.getAttribute('data-medium-' + LMMedium.key);
                        if (newVal.toLowerCase() === "false" || newVal.toLowerCase() === "true") {
                            newVal = newVal.toLowerCase() === "true";
                        }
                        settings[i] = newVal;
                    }
                }
            if (settings.modifiers) {
                for (i in settings.modifiers)
                    if (settings.modifiers.hasOwnProperty(i)) {
                        if (typeof (LMMedium.key[i]) !== 'undefined') {
                            settings.modifiers[LMMedium.key[i]] = settings.modifiers[i];
                        }
                    }
            }
            if (settings.keyContext) {
                for (i in settings.keyContext)
                    if (settings.keyContext.hasOwnProperty(i)) {
                        if (typeof (LMMedium.key[i]) !== 'undefined') {
                            settings.keyContext[LMMedium.key[i]] = settings.keyContext[i];
                        }
                    }
            }
            // Extend Settings
            el = settings.element;
            // Editable
            el.contentEditable = true;
            el.className += (' ' + settings.cssClasses.editor) + (' ' + settings.cssClasses.editor + '-' + settings.mode);
            settings.tags = (settings.tags || {});
            if (settings.tags.outerLevel) {
                settings.tags.outerLevel = settings.tags.outerLevel.concat([settings.tags.paragraph, settings.tags.horizontalRule]);
            }
            this.settings = settings;
            this.element = el;
            el.medium = this;
            this.utils = LMMedium.utils;
            // Initialize editor
            medium.clean(null);
            medium.placeholders();
            this.action.preserveElementFocus();
            this.dirty = false;
            this.makeUndoable = this.undoable.makeUndoable;
            if (settings.drag) {
                medium.drag = new LMMedium.Drag(medium);
                medium.drag.setup();
            }
            this.action.setup();
            // Set as initialized
            this.cache.initialized = true;
            this.makeUndoable(true);
        }
        Medium.prototype.placeholders = function () {
            //in IE8, just gracefully degrade to no placeholders
            if (!LMMedium.w.getComputedStyle)
                return;
            var s = this.settings, placeholder = this.placeholder || (this.placeholder = LMMedium.d.createElement('div')), el = this.element, style = placeholder.style, elStyle = LMMedium.w.getComputedStyle(el, null), qStyle = function (prop) {
                return elStyle.getPropertyValue(prop);
            }, text = LMMedium.utils.text(el), cursor = this.cursor, childCount = el.children.length, hasFocus = Medium.activeElement === el;
            el.placeholder = placeholder;
            // Empty Editor
            if (!hasFocus
                && text.length < 1
                && childCount < 2) {
                if (el.placeHolderActive)
                    return;
                if (!el.innerHTML.match('<' + s.tags.paragraph)) {
                    el.innerHTML = '';
                }
                // We need to add placeholders
                if (s.placeholder.length > 0) {
                    if (!placeholder.setup) {
                        placeholder.setup = true;
                        //background & background color
                        style.background = qStyle('background');
                        style.backgroundColor = qStyle('background-color');
                        //text size & text color
                        style.fontSize = qStyle('font-size');
                        style.color = elStyle.color;
                        //begin box-model
                        //margin
                        style.marginTop = qStyle('margin-top');
                        style.marginBottom = qStyle('margin-bottom');
                        style.marginLeft = qStyle('margin-left');
                        style.marginRight = qStyle('margin-right');
                        //padding
                        style.paddingTop = qStyle('padding-top');
                        style.paddingBottom = qStyle('padding-bottom');
                        style.paddingLeft = qStyle('padding-left');
                        style.paddingRight = qStyle('padding-right');
                        //border
                        style.borderTopWidth = qStyle('border-top-width');
                        style.borderTopColor = qStyle('border-top-color');
                        style.borderTopStyle = qStyle('border-top-style');
                        style.borderBottomWidth = qStyle('border-bottom-width');
                        style.borderBottomColor = qStyle('border-bottom-color');
                        style.borderBottomStyle = qStyle('border-bottom-style');
                        style.borderLeftWidth = qStyle('border-left-width');
                        style.borderLeftColor = qStyle('border-left-color');
                        style.borderLeftStyle = qStyle('border-left-style');
                        style.borderRightWidth = qStyle('border-right-width');
                        style.borderRightColor = qStyle('border-right-color');
                        style.borderRightStyle = qStyle('border-right-style');
                        //end box model
                        //element setup
                        placeholder.className = s.cssClasses.placeholder + ' ' + s.cssClasses.placeholder + '-' + s.mode;
                        placeholder.innerHTML = '<div>' + s.placeholder + '</div>';
                        el.parentNode.insertBefore(placeholder, el);
                    }
                    el.className += ' ' + s.cssClasses.clear;
                    style.display = '';
                    // Add base P tag and do auto focus, give it a min height if el has one
                    style.minHeight = el.clientHeight + 'px';
                    style.minWidth = el.clientWidth + 'px';
                    if (s.mode !== Medium.inlineMode && s.mode !== Medium.inlineRichMode) {
                        this.setupContents();
                        if (childCount === 0 && el.firstChild) {
                            this.cursor.set(0, el.firstChild);
                        }
                    }
                }
                el.placeHolderActive = true;
            }
            else if (el.placeHolderActive) {
                el.placeHolderActive = false;
                style.display = 'none';
                el.className = LMMedium.utils.trim(el.className.replace(s.cssClasses.clear, ''));
                this.setupContents();
            }
        };
        /**
          Cleans element
          @param {HtmlElement} [el] default is settings.element
         */
        Medium.prototype.clean = function (el) {
            /*
             Deletes invalid nodes
             Removes Attributes*/
            var s = this.settings, placeholderClass = s.cssClasses.placeholder, attributesToRemove = (s.attributes || {}).remove || [], tags = s.tags || {}, onlyOuter = tags.outerLevel || null, onlyInner = tags.innerLevel || null, outerSwitch = {}, innerSwitch = {}, paragraphTag = (tags.paragraph || '').toUpperCase(), html = this.html, attr, text, j;
            el = el || s.element;
            if (s.mode === Medium.inlineRichMode) {
                onlyOuter = s.tags.innerLevel;
            }
            if (onlyOuter !== null) {
                for (j = 0; j < onlyOuter.length; j++) {
                    outerSwitch[onlyOuter[j].toUpperCase()] = true;
                }
            }
            if (onlyInner !== null) {
                for (j = 0; j < onlyInner.length; j++) {
                    innerSwitch[onlyInner[j].toUpperCase()] = true;
                }
            }
            LMMedium.utils.traverseAll(el, {
                element: function (child, i, depth, parent) {
                    var nodeName = child.nodeName, shouldDelete = true, attrValue;
                    // Remove attributes
                    for (j = 0; j < attributesToRemove.length; j++) {
                        attr = attributesToRemove[j];
                        if (child.hasAttribute(attr)) {
                            attrValue = child.getAttribute(attr);
                            if (attrValue !== placeholderClass && (!attrValue.match('medium-') && attr === 'class')) {
                                child.removeAttribute(attr);
                            }
                        }
                    }
                    if (onlyOuter === null && onlyInner === null) {
                        return;
                    }
                    if (depth === 1 && outerSwitch[nodeName] !== undefined) {
                        shouldDelete = false;
                    }
                    else if (depth > 1 && innerSwitch[nodeName] !== undefined) {
                        shouldDelete = false;
                    }
                    // Convert tags or delete
                    if (shouldDelete) {
                        if (LMMedium.w.getComputedStyle(child, null).getPropertyValue('display') === 'block') {
                            if (paragraphTag.length > 0 && paragraphTag !== nodeName) {
                                LMMedium.utils.changeTag(child, paragraphTag);
                            }
                            if (depth > 1) {
                                while (parent.childNodes.length > i) {
                                    parent.parentNode.insertBefore(parent.lastChild, parent.nextSibling);
                                }
                            }
                        }
                        else {
                            switch (nodeName) {
                                case 'BR':
                                    if (child === child.parentNode.lastChild) {
                                        if (child === child.parentNode.firstChild) {
                                            break;
                                        }
                                        text = LMMedium.d.createTextNode("");
                                        text.innerHTML = '&nbsp';
                                        child.parentNode.insertBefore(text, child);
                                        break;
                                    }
                                default:
                                    while (child.firstChild !== null) {
                                        child.parentNode.insertBefore(child.firstChild, child);
                                    }
                                    LMMedium.utils.detachNode(child);
                                    break;
                            }
                        }
                    }
                }
            });
        };
        /**
         
          @param {String|Object} html
          @param {Function} [callback]
          @param {Boolean} [skipChangeEvent]
          @returns {Medium}
         */
        Medium.prototype.insertHtml = function (html, callback, skipChangeEvent) {
            var result = (new LMMedium.Html(this, html))
                .insert(this.settings.beforeInsertHtml), lastElement = result[result.length - 1];
            if (skipChangeEvent === true) {
                LMMedium.utils.triggerEvent(this.element, "change");
            }
            if (callback) {
                callback.apply(result);
            }
            switch (lastElement.nodeName) {
                //lists need their last child selected if it exists
                case 'UL':
                case 'OL':
                case 'DL':
                    if (lastElement.lastChild !== null) {
                        this.cursor.moveCursorToEnd(lastElement.lastChild);
                        break;
                    }
                default:
                    this.cursor.moveCursorToEnd(lastElement);
            }
            return this;
        };
        Medium.prototype.addTag = function (tag, shouldFocus, isEditable, afterElement) {
            if (!this.settings.beforeAddTag(tag, shouldFocus, isEditable, afterElement)) {
                var newEl = LMMedium.d.createElement(tag);
                var toFocus;
                if (typeof isEditable !== "undefined" && isEditable === false) {
                    newEl.contentEditable = "false";
                }
                if (newEl.innerHTML.length == 0) {
                    newEl.innerHTML = ' ';
                }
                if (afterElement && afterElement.nextSibling) {
                    afterElement.parentNode.insertBefore(newEl, afterElement.nextSibling);
                    toFocus = afterElement.nextSibling;
                }
                else {
                    this.element.appendChild(newEl);
                    toFocus = this.lastChild();
                }
                if (shouldFocus) {
                    this.cache.focusedElement = toFocus;
                    this.cursor.set(0, toFocus);
                }
                return newEl;
            }
            return null;
        };
        /**
         
          @param {String} tagName
          @param {Object} [attributes]
          @param {Boolean} [skipChangeEvent]
          @returns {Medium}
         */
        Medium.prototype.invokeElement = function (tagName, attributes, skipChangeEvent) {
            var settings = this.settings, remove = attributes.remove || [];
            attributes = attributes || {};
            switch (settings.mode) {
                case Medium.inlineMode:
                case Medium.partialMode:
                    return this;
                default:
            }
            //invoke works off class, so if it isn't there, we just add it
            if (remove.length > 0) {
                if (!LMMedium.utils.arrayContains(settings, 'class')) {
                    remove.push('class');
                }
            }
            (new LMMedium.Element(this, tagName, attributes))
                .invoke(this.settings.beforeInvokeElement);
            if (skipChangeEvent === true) {
                LMMedium.utils.triggerEvent(this.element, "change");
            }
            return this;
        };
        /**
         
          @param {String} [value]
          @returns {Medium}
         */
        Medium.prototype.value = function (value) {
            if (typeof value !== 'undefined') {
                this.element.innerHTML = value;
                this.clean(null);
                this.placeholders();
                this.makeUndoable();
            }
            else {
                return this.element.innerHTML;
            }
            return this;
        };
        /**
          Focus on element
          @returns {Medium}
         */
        Medium.prototype.focus = function () {
            var el = this.element;
            el.focus();
            return this;
        };
        /**
          Select all text
          @returns {Medium}
         */
        Medium.prototype.select = function () {
            LMMedium.utils.selectNode(Medium.activeElement = this.element);
            return this;
        };
        Medium.prototype.isActive = function () {
            return (Medium.activeElement === this.element);
        };
        Medium.prototype.setupContents = function () {
            var el = this.element, children = el.children, childNodes = el.childNodes, initialParagraph, s = this.settings;
            if (!s.tags.paragraph
                || children.length > 0
                || s.mode === Medium.inlineMode
                || s.mode === Medium.inlineRichMode) {
                return null;
            }
            //has content, but no children
            if (childNodes.length > 0) {
                initialParagraph = LMMedium.d.createElement(s.tags.paragraph);
                if (el.innerHTML.match('^[&]nbsp[;]')) {
                    el.innerHTML = el.innerHTML.substring(6, el.innerHTML.length - 1);
                }
                initialParagraph.innerHTML = el.innerHTML;
                el.innerHTML = '';
                el.appendChild(initialParagraph);
            }
            else {
                initialParagraph = LMMedium.d.createElement(s.tags.paragraph);
                initialParagraph.innerHTML = '&nbsp;';
                el.appendChild(initialParagraph);
                this.cursor.set(0, el.firstChild);
            }
            return this;
        };
        Medium.prototype.destroy = function () {
            var el = this.element, settings = this.settings, placeholder = this.placeholder || null;
            if (placeholder !== null && placeholder.setup && placeholder.parentNode !== null) {
                //remove placeholder
                placeholder.parentNode.removeChild(placeholder);
                delete el.placeHolderActive;
            }
            //remove contenteditable
            el.removeAttribute('contenteditable');
            //remove classes
            el.className = LMMedium.utils.trim(el.className
                .replace(settings.cssClasses.editor, '')
                .replace(settings.cssClasses.clear, '')
                .replace(settings.cssClasses.editor + '-' + settings.mode, ''));
            //remove events
            this.action.destroy();
            if (this.settings.drag) {
                this.drag.destroy();
            }
        };
        // Clears the element and restores the placeholder
        Medium.prototype.clear = function () {
            this.element.innerHTML = '';
            this.placeholders();
        };
        /**
          Splits content in medium element at cursor
          @returns {DocumentFragment|null}
         */
        Medium.prototype.splitAtCaret = function () {
            if (!this.isActive())
                return null;
            var selector = (LMMedium.w.getSelection || LMMedium.d.selection);
            var sel = selector();
            var offset = sel.focusOffset, node = sel.focusNode, el = this.element, range = LMMedium.d.createRange(), endRange = LMMedium.d.createRange(), contents;
            range.setStart(node, offset);
            endRange.selectNodeContents(el);
            range.setEnd(endRange.endContainer, endRange.endOffset);
            contents = range.extractContents();
            return contents;
        };
        /**
          Deletes selection
         */
        Medium.prototype.deleteSelection = function () {
            if (!this.isActive())
                return;
            var sel = rangy.getSelection(), range;
            if (sel.rangeCount > 0) {
                range = sel.getRangeAt(0);
                range.deleteContents();
            }
        };
        Medium.prototype.lastChild = function () {
            return this.element.lastChild;
        };
        Medium.prototype.bold = function () {
            switch (this.settings.mode) {
                case Medium.partialMode:
                case Medium.inlineMode:
                    return this;
            }
            (new LMMedium.Element(this, 'bold', null))
                .setClean(false)
                .invoke(this.settings.beforeInvokeElement);
            return this;
        };
        Medium.prototype.underline = function () {
            switch (this.settings.mode) {
                case Medium.partialMode:
                case Medium.inlineMode:
                    return this;
            }
            (new LMMedium.Element(this, 'underline', null))
                .setClean(false)
                .invoke(this.settings.beforeInvokeElement);
            return this;
        };
        Medium.prototype.italicize = function () {
            switch (this.settings.mode) {
                case Medium.partialMode:
                case Medium.inlineMode:
                    return this;
            }
            (new LMMedium.Element(this, 'italic', null))
                .setClean(false)
                .invoke(this.settings.beforeInvokeElement);
            return this;
        };
        Medium.prototype.quote = function () {
            return this;
        };
        /**
         
          @param {String} [text]
          @returns {boolean}
         */
        Medium.prototype.paste = function (text) {
            var value = this.value(), length = value.length, totalLength, settings = this.settings, selection = this.selection, el = this.element, medium = this, postPaste = function (text) {
                text = text || '';
                if (text.length > 0) {
                    el.focus();
                    Medium.activeElement = el;
                    selection.restoreSelection(sel);
                    //encode the text first
                    text = LMMedium.utils.encodeHtml(text);
                    //cut down it's length
                    totalLength = text.length + length;
                    if (settings.maxLength > 0 && totalLength > settings.maxLength) {
                        text = text.substring(0, settings.maxLength - length);
                    }
                    if (settings.mode !== Medium.inlineMode) {
                        text = text.replace(/\n/g, '<br>');
                    }
                    (new LMMedium.Html(medium, text))
                        .setClean(false)
                        .insert(settings.beforeInsertHtml, true);
                    medium.clean(null);
                    medium.placeholders();
                }
            };
            medium.makeUndoable();
            if (text !== undefined) {
                postPaste(text);
            }
            else if (settings.pasteAsText) {
                var sel = selection.saveSelection();
                LMMedium.utils.pasteHook(this, postPaste);
            }
            else {
                setTimeout(function () {
                    medium.clean(null);
                    medium.placeholders();
                }, 20);
            }
            return true;
        };
        Medium.prototype.undo = function () {
            var undoable = this.undoable, stack = undoable.stack, can = stack.canUndo();
            if (can) {
                stack.undo();
            }
            return this;
        };
        Medium.prototype.redo = function () {
            var undoable = this.undoable, stack = undoable.stack, can = stack.canRedo();
            if (can) {
                stack.redo();
            }
            return this;
        };
        Medium.inlineMode = 'inline';
        Medium.partialMode = 'partial';
        Medium.richMode = 'rich';
        Medium.inlineRichMode = 'inlineRich';
        Medium.Messages = {
            pastHere: 'Paste Here'
        };
        Medium.defaultSettings = {
            element: null,
            modifier: 'auto',
            placeholder: "",
            autofocus: false,
            autoHR: true,
            mode: Medium.richMode,
            maxLength: -1,
            modifiers: {
                'b': 'bold',
                'i': 'italicize',
                'u': 'underline'
            },
            tags: {
                'break': 'br',
                'horizontalRule': 'hr',
                'paragraph': 'p',
                'outerLevel': ['pre', 'blockquote', 'figure'],
                'innerLevel': ['a', 'b', 'u', 'i', 'img', 'strong']
            },
            cssClasses: {
                editor: 'Medium',
                pasteHook: 'Medium-paste-hook',
                placeholder: 'Medium-placeholder',
                clear: 'Medium-clear'
            },
            attributes: {
                remove: ['style', 'class']
            },
            pasteAsText: true,
            beforeInvokeElement: function () {
                //this = Medium.Element
            },
            beforeInsertHtml: function () {
                //this = Medium.Html
            },
            maxLengthReached: function (element) {
                //element
            },
            beforeAddTag: function (tag, shouldFocus, isEditable, afterElement) {
            },
            keyContext: null,
            drag: false
        };
        return Medium;
    })();
    LMMedium.Medium = Medium;
})(LMMedium || (LMMedium = {}));
/// <reference path="base.ts" />
/// <reference path="utilities.ts" />
var LMMedium;
(function (LMMedium) {
    var Cursor = (function () {
        function Cursor(medium) {
            this.medium = medium;
        }
        Cursor.prototype.set = function (pos, el) {
            var range;
            if (LMMedium.d.createRange) {
                var selection = LMMedium.w.getSelection(), lastChild = this.medium.lastChild(), length = LMMedium.utils.text(lastChild).length - 1, toModify = el ? el : lastChild, theLength = ((typeof pos !== 'undefined') && (pos !== null) ? pos : length);
                range = LMMedium.d.createRange();
                range.setStart(toModify, theLength);
                range.collapse(true);
                selection.removeAllRanges();
                selection.addRange(range);
            }
            else {
                range = LMMedium.d.body.createTextRange();
                range.moveToElementText(el);
                range.collapse(false);
                range.select();
            }
        };
        //http://davidwalsh.name/caret-end
        Cursor.prototype.moveCursorToEnd = function (el) {
            //get the browser selection object - it may or may not have a selected range
            var selection = rangy.getSelection(), 
            //create a range object to set the caret positioning for
            range = rangy.createRange();
            //set the caret after the start node and at the end of the end node
            //Note: the end is set using endNode.length when the node is of the text type
            //and it is set using childNodes.length when the end node is of the element type
            range.setStartAfter(el);
            range.setEnd(el, el.length || el.childNodes.length);
            //apply this range to the selection object
            selection.removeAllRanges();
            selection.addRange(range);
        };
        Cursor.prototype.moveCursorToAfter = function (el) {
            var sel = rangy.getSelection();
            if (sel.rangeCount) {
                var range = sel.getRangeAt(0);
                range.collapse(false);
                range.collapseAfter(el);
                sel.setSingleRange(range);
            }
        };
        Cursor.prototype.parent = function () {
            var target = null, range;
            if (LMMedium.w.getSelection) {
                range = LMMedium.w.getSelection().getRangeAt(0);
                target = range.commonAncestorContainer;
                target = (target.nodeType === 1
                    ? target
                    : target.parentNode);
            }
            else if (LMMedium.d.selection) {
                target = LMMedium.d.selection.createRange().parentElement();
            }
            if (target.tagName == 'SPAN') {
                target = target.parentNode;
            }
            return target;
        };
        Cursor.prototype.caretToBeginning = function (el) {
            this.set(0, el);
        };
        Cursor.prototype.caretToEnd = function (el) {
            this.moveCursorToEnd(el);
        };
        Cursor.prototype.caretToAfter = function (el) {
            this.moveCursorToAfter(el);
        };
        return Cursor;
    })();
    LMMedium.Cursor = Cursor;
})(LMMedium || (LMMedium = {}));
//interface JQuery {
//  transition;
//}
//interface JQuerySupport {
//  transition;
//}
//interface KnockoutBindingHandlers {
//  fadeVisible;
//}
//module testTransit {
//  export class view {
//    constructor(public title: string, template: string) { this.template(template); }
//    visible = ko.observable(true);
//    template = ko.observable<string>('dummy');
//  }
//  export class test {
//    views: Array<KnockoutObservable<view>> = [ko.observable<view>(null), ko.observable<view>(null)];
//    actCount = 1;
//    setView(v: view) {
//      var nextCount = this.actCount == 0 ? 1 : 0;
//      this.views[nextCount](v);
//      if (this.views[this.actCount]()) this.views[this.actCount]().visible(false);
//      this.actCount = nextCount;
//    }
//    change() { this.setView(new view('title ' + (cnt++).toString(), this.actCount == 0 ? 't0' : 't1')); }
//  } var cnt = 0;
//  $(() => ko.applyBindings(new test(), $('body')[0]));
//  ko.bindingHandlers.fadeVisible = {
//    update: function (element, valueAccessor) {
//      var data: view = ko.dataFor(element);
//      var value = ko.utils.unwrapObservable(valueAccessor());
//      if ($.support.transition) {
//        var width = $('body').width();
//        if (value) $(element).css({ left: '-' + width.toString() + 'px' }).transition({ x: '+=' + width.toString() }, 300);
//        else $(element).transition({ x: '+=' + width.toString() }, 300, () => data.template('dummy'));
//      } else {
//        if (!value) data.template('dummy');
//      }
//    }
//  };
//}
//module router {
//  export var obj = {
//    _trimSeparators: function (str) {
//        return str.replace(/^[\/.]+|\/+$/g, "")
//      },
//    _escapeRe: function (str) {
//        return str.replace(/\W/g, "\\$1")
//      },
//    _checkConstraint: function (param, constraint) {
//      param = String(param);
//      if (typeof constraint === "string")
//        constraint = new RegExp(constraint);
//      var match = constraint.exec(param);
//      if (!match || match[0] !== param)
//        return false;
//        return true
//      },
//    _ensureReady: function () {
//      var self = this;
//      if (this._patternRe)
//        return false;
//      this._pattern = this._trimSeparators(this._pattern);
//      this._patternRe = "";
//      this._params = [];
//      this._segments = [];
//      this._separators = [];
//      this._pattern.replace(/[^\/]+/g, function (segment, index) {
//        self._segments.push(segment);
//        if (index)
//          self._separators.push(self._pattern.substr(index - 1, 1))
//        });
//      $.each(this._segments, function (index) {
//        var isStatic = true,
//          segment = this,
//          separator = index ? self._separators[index - 1] : "";
//        if (segment.charAt(0) === ":") {
//          isStatic = false;
//          segment = segment.substr(1);
//          self._params.push(segment);
//          self._patternRe += "(?:" + separator + "([^/]+))";
//          if (segment in self._defaults)
//            self._patternRe += "?"
//          }
//        else
//          self._patternRe += separator + self._escapeRe(segment)
//        });
//      this._patternRe = new RegExp("^" + this._patternRe + "$")
//      },
//    ctor: function (pattern, defaults, constraints) {
//      this._pattern = pattern || "";
//      this._defaults = defaults || {};
//      this._constraints = constraints || {}
//      },
//    parse: function (uri) {
//      var self = this;
//      this._ensureReady();
//      var matches = this._patternRe.exec(uri);
//      if (!matches)
//        return false;
//      var result = $.extend({}, this._defaults);
//      $.each(this._params, function (i) {
//        var index = i + 1;
//        if (matches.length >= index && matches[index])
//          result[this] = self.parseSegment(matches[index])
//        });
//      $.each(this._constraints, function (key) {
//        if (!self._checkConstraint(result[key], self._constraints[key])) {
//          result = false;
//            return false
//          }
//      });
//        return result
//      },
//    format: function (routeValues): any {
//      var self = this,
//        query = "";
//      this._ensureReady();
//      var mergeValues = $.extend({}, this._defaults),
//        useStatic = 0,
//        ret = [],
//        dels = [],
//        unusedRouteValues = {};
//      $.each(routeValues, function (paramName, paramValue) {
//        routeValues[paramName] = self.formatSegment(paramValue);
//        if (!(paramName in mergeValues))
//          unusedRouteValues[paramName] = true
//        });
//      $.each(this._segments, function (index, segment) {
//        ret[index] = index ? self._separators[index - 1] : '';
//        if (segment.charAt(0) === ':') {
//          var paramName = segment.substr(1);
//          if (!(paramName in routeValues) && !(paramName in self._defaults)) {
//            ret = null;
//              return false
//            }
//          if (paramName in self._constraints && !self._checkConstraint(routeValues[paramName], self._constraints[paramName])) {
//            ret = null;
//              return false
//            }
//          if (paramName in routeValues) {
//            if (routeValues[paramName] !== undefined) {
//              mergeValues[paramName] = routeValues[paramName];
//              ret[index] += routeValues[paramName];
//              useStatic = index
//              }
//            delete unusedRouteValues[paramName]
//            }
//          else if (paramName in mergeValues) {
//            ret[index] += mergeValues[paramName];
//            dels.push(index)
//            }
//        }
//        else {
//          ret[index] += segment;
//          useStatic = index
//          }
//      });
//      $.each(mergeValues, function (key, value) {
//        if (!!value && $.inArray(":" + key, self._segments) === -1 && routeValues[key] !== value) {
//          ret = null;
//            return false
//          }
//      });
//      var unusedCount = 0;
//      if (!$.isEmptyObject(unusedRouteValues)) {
//        query = "?";
//        $.each(unusedRouteValues, function (key) {
//          query += key + "=" + routeValues[key] + "&";
//          unusedCount++
//          });
//        query = query.substr(0, query.length - 1)
//        }
//      $.each(routeValues, function (i) {
//        if (!this in mergeValues) {
//          ret = null;
//            return false
//          }
//      });
//      if (ret === null)
//        return false;
//      if (dels.length)
//        $.map(dels, function (i) {
//          if (i >= useStatic)
//            ret[i] = ''
//          });
//      var path = ret.join('');
//      path = path.replace(/\/+$/, "");
//        return {
//        uri: path + query,
//        unusedCount: unusedCount
//      }
//      },
//    formatSegment: function (value) {
//      if ($.isArray(value) || $.isPlainObject(value))
//        return "json:" + encodeURIComponent(JSON.stringify(value));
//        return encodeURIComponent(value)
//      },
//    parseSegment: function (value) {
//      if (value.substr(0, 5) === "json:")
//        try {
//            return $.parseJSON(decodeURIComponent(value.substr(5)))
//          }
//        catch (x) { }
//        return decodeURIComponent(value)
//      }
//  };
//  export function Route(pattern, defaults, constraints) {
//    this._pattern = pattern || "";
//    this._defaults = defaults || {};
//    this._constraints = constraints || {};
//    var obj = {
//      _trimSeparators: function (str) {
//                return str.replace(/^[\/.]+|\/+$/g, "")
//            },
//      _escapeRe: function (str) {
//                return str.replace(/\W/g, "\\$1")
//            },
//      _checkConstraint: function (param, constraint) {
//        param = String(param);
//        if (typeof constraint === "string")
//          constraint = new RegExp(constraint);
//        var match = constraint.exec(param);
//        if (!match || match[0] !== param)
//          return false;
//                return true
//            },
//      _ensureReady: function () {
//        var self = this;
//        if (this._patternRe)
//          return false;
//        this._pattern = this._trimSeparators(this._pattern);
//        this._patternRe = "";
//        this._params = [];
//        this._segments = [];
//        this._separators = [];
//        this._pattern.replace(/[^\/]+/g, function (segment, index) {
//          self._segments.push(segment);
//          if (index)
//            self._separators.push(self._pattern.substr(index - 1, 1))
//                });
//        $.each(this._segments, function (index) {
//          var isStatic = true,
//            segment = this,
//            separator = index ? self._separators[index - 1] : "";
//          if (segment.charAt(0) === ":") {
//            isStatic = false;
//            segment = segment.substr(1);
//            self._params.push(segment);
//            self._patternRe += "(?:" + separator + "([^/]+))";
//            if (segment in self._defaults)
//              self._patternRe += "?"
//                    }
//          else
//            self._patternRe += separator + self._escapeRe(segment)
//                });
//        this._patternRe = new RegExp("^" + this._patternRe + "$")
//            },
//      parse: function (uri) {
//        var self = this;
//        this._ensureReady();
//        var matches = this._patternRe.exec(uri);
//        if (!matches)
//          return false;
//        var result = $.extend({}, this._defaults);
//        $.each(this._params, function (i) {
//          var index = i + 1;
//          if (matches.length >= index && matches[index])
//            result[this] = self.parseSegment(matches[index])
//                });
//        $.each(this._constraints, function (key) {
//          if (!self._checkConstraint(result[key], self._constraints[key])) {
//            result = false;
//                        return false
//                    }
//        });
//                return result
//            },
//      format: function (routeValues): any {
//        var self = this,
//          query = "";
//        this._ensureReady();
//        var mergeValues = $.extend({}, this._defaults),
//          useStatic = 0,
//          ret = [],
//          dels = [],
//          unusedRouteValues = {};
//        $.each(routeValues, function (paramName, paramValue) {
//          routeValues[paramName] = self.formatSegment(paramValue);
//          if (!(paramName in mergeValues))
//            unusedRouteValues[paramName] = true
//                });
//        $.each(this._segments, function (index, segment) {
//          ret[index] = index ? self._separators[index - 1] : '';
//          if (segment.charAt(0) === ':') {
//            var paramName = segment.substr(1);
//            if (!(paramName in routeValues) && !(paramName in self._defaults)) {
//              ret = null;
//                            return false
//                        }
//            if (paramName in self._constraints && !self._checkConstraint(routeValues[paramName], self._constraints[paramName])) {
//              ret = null;
//                            return false
//                        }
//            if (paramName in routeValues) {
//              if (routeValues[paramName] !== undefined) {
//                mergeValues[paramName] = routeValues[paramName];
//                ret[index] += routeValues[paramName];
//                useStatic = index
//                            }
//              delete unusedRouteValues[paramName]
//                        }
//            else if (paramName in mergeValues) {
//              ret[index] += mergeValues[paramName];
//              dels.push(index)
//                        }
//          }
//          else {
//            ret[index] += segment;
//            useStatic = index
//                    }
//        });
//        $.each(mergeValues, function (key, value) {
//          if (!!value && $.inArray(":" + key, self._segments) === -1 && routeValues[key] !== value) {
//            ret = null;
//                        return false
//                    }
//        });
//        var unusedCount = 0;
//        if (!$.isEmptyObject(unusedRouteValues)) {
//          query = "?";
//          $.each(unusedRouteValues, function (key) {
//            query += key + "=" + routeValues[key] + "&";
//            unusedCount++
//                    });
//          query = query.substr(0, query.length - 1)
//                }
//        $.each(routeValues, function (i) {
//          if (!this in mergeValues) {
//            ret = null;
//                        return false
//                    }
//        });
//        if (ret === null)
//          return false;
//        if (dels.length)
//          $.map(dels, function (i) {
//            if (i >= useStatic)
//              ret[i] = ''
//                    });
//        var path = ret.join('');
//        path = path.replace(/\/+$/, "");
//                return {
//          uri: path + query,
//          unusedCount: unusedCount
//        }
//            },
//      formatSegment: function (value) {
//        if ($.isArray(value) || $.isPlainObject(value))
//          return "json:" + encodeURIComponent(JSON.stringify(value));
//                return encodeURIComponent(value)
//            },
//      parseSegment: function (value) {
//        if (value.substr(0, 5) === "json:")
//          try {
//                        return $.parseJSON(decodeURIComponent(value.substr(5)))
//                    }
//          catch (x) { }
//                return decodeURIComponent(value)
//            }
//    };
//  }
//} 
function toXmlAcc(jsonml, acc) {
    if (_.isArray(jsonml)) {
        acc.push("<");
        acc.push(jsonml[0]);
        var pos = 1;
        var attributes = jsonml[1];
        if (attributes && !_.isArray(attributes) && typeof (attributes) !== "string") {
            for (var key in attributes) {
                if (attributes.hasOwnProperty(key)) {
                    acc.push(' ');
                    acc.push(key);
                    acc.push('="');
                    xmlEscape(attributes[key], acc);
                    acc.push('"');
                }
            }
            ++pos;
        }
        if (pos < jsonml.length) {
            acc.push(">");
            do {
                toXmlAcc(jsonml[pos], acc);
                ++pos;
            } while (pos < jsonml.length);
            acc.push("</");
            acc.push(jsonml[0]);
            acc.push(">");
        }
        else {
            acc.push(" />");
        }
    }
    else {
        xmlEscape(jsonml.toString(), acc);
    }
}
function xmlEscape(str, acc) {
    for (var i = 0; i < str.length; ++i) {
        var c = str[i];
        var code = c.charCodeAt(0);
        var s = reventities[c];
        if (s) {
            acc.push("&" + s + ";");
        }
        else if (code >= 128) {
            acc.push("&#" + code + ";");
        }
        else {
            acc.push(c);
        }
    }
}
var reventities = (function () {
    var result = {};
    for (var key in entities) {
        if (entities.hasOwnProperty(key)) {
            result[entities[key]] = key;
        }
    }
    return result;
})();
var entities = {
    "quot": '"',
    "amp": '&',
    "apos": "'",
    "lt": '<',
    "gt": '>'
};
var testMe;
(function (testMe) {
    (function (Status) {
        Status[Status["no"] = 0] = "no";
        Status[Status["Started"] = 1] = "Started";
        Status[Status["Interrupted"] = 2] = "Interrupted";
        Status[Status["SendedToEvaluation"] = 3] = "SendedToEvaluation";
        Status[Status["EvalAssigned"] = 4] = "EvalAssigned";
        Status[Status["Evaluated"] = 5] = "Evaluated";
    })(testMe.Status || (testMe.Status = {}));
    var Status = testMe.Status;
})(testMe || (testMe = {}));
var testMe;
(function (testMe) {
    var Skills = (function () {
        function Skills() {
        }
        Skills.no = "no";
        Skills.UseLanguage = "UseLanguage";
        Skills.Reading = "Reading";
        Skills.Listening = "Listening";
        Skills.Speaking = "Speaking";
        Skills.Writing = "Writing";
        return Skills;
    })();
    testMe.Skills = Skills;
    testMe.tEx = "testExModel".toLowerCase();
    testMe.tResults = "testResultsModel".toLowerCase();
    testMe.tResult = "testResultModel".toLowerCase();
    var greenGreen = 0;
    var greenDone = 1;
    var notifier = (function () {
        function notifier() {
            this.progressBar = ko.observable(0);
            this.remaindSeconds = 0;
            this.active = ko.observable(false);
            this.progressText = ko.observable('');
            this.skillText = ko.observable('');
        }
        return notifier;
    })();
    testMe.notifier = notifier;
    testMe.notify = new notifier();
    function testTitle(test) { return !test ? '' : (!test.isDemoTest ? test.title : CSLocalize('20c1ce9cee3d4c02b9e9cb4a76fdb2f4', 'Demo test')); }
    var Model = (function (_super) {
        __extends(Model, _super);
        function Model(urlParts) {
            _super.call(this, testMe.tEx, urlParts);
            this.isPretest = false; //zobraz pretest stranku
            this.isHome = true; //zobraz home stranku
            this.makeInterruptionInEx = false; //ve cviceni vypln interruption
            this.isResult = false; //priznak cviceni v result stavu. Nastane pouze kdyz se naviguje na stranku testu s hotovym testem
            this.greenStatus = greenGreen; //stav zelene sipky, jedna z hodnot greenGreen, ...
            //exItems: Array<IExItem>; //navigace nad cvicenimi
            this.modStarts = {};
            this.actIdx = 0; //index aktualniho cviceni aktualniho modulu
            this.skipAdjustExModule = false;
            this.startTime = 0; //cas spusteni testu
            this.instrTitle = ko.observable("");
            this.instrBody = ko.observable("");
            //progressBar = ko.observable(0);
            //progressText = ko.observable('');
            this.notLowTime = ko.observable(true);
            this.testDisabled = ko.observable(false);
            this.needsRecording = ko.observable(false);
            this.needsPlaying = ko.observable(false);
            this.isDemoTest = ko.observable(true);
            this.testTitle = ko.observable('');
            this.hasDemotest = ko.observable(false);
            this.appId = testMe.appId;
        }
        Model.prototype.leave = function () {
            testMe.alowTestCreate_Url = null;
            //saveProduct($.noop);
        };
        Model.prototype.loaded = function () {
            var _this = this;
            if (!this.actTest || this.actTest.needs == CourseMeta.testNeeds.no)
                return;
            if (this.isHome) {
                var id = this.needsRecording() ? 'testForRecording' : 'testForPlaying';
                CourseMeta.processInlineControls(id.toLowerCase(), $.noop);
            }
            else
                SndLow.getGlobalMedia().adjustGlobalDriver(this.needsRecording(), function (dr, disabled) { return _this.testDisabled(disabled); });
        };
        Model.prototype.demoTestClick = function () {
            if (!this.actTest || !this.actTest.demoTestUrl)
                return;
            persistMemory.reset();
            var hash = testMe.createUrlPersist(testMe.tEx, CourseMeta.actCompanyId, this.actTest.demoTestUrl, schools.memoryPersistId);
            testMe.alowTestCreate_Url = this.actTest.demoTestUrl;
            window.location.hash = hash;
        };
        //  if (!this.actTest || this.actTest.needs == CourseMeta.testNeeds.no) return false;
        //  return this.actTest.needs == CourseMeta.testNeeds.recording;
        //}
        Model.prototype.doUpdate = function (completed) {
            var _this = this;
            var th = this;
            //CourseMeta.lib.adjustInstr(() => //nacteni a lokalizace insrukci
            CourseMeta.lib.adjustProduct(th.productUrl, th.persistence, function (justLoaded) {
                //*** multi test
                var multiTest = _this.multiTest();
                if (multiTest) {
                    if (!multiTest.level) {
                        th.isPretest = true;
                        th.isHome = false;
                        th.greenTitle = CSLocalize('cabaf1ac6e8e4e219201e43b28852705', 'Finish Self-evaluation form');
                        var questEx = _this.multiQuestionnaire();
                        CourseMeta.lib.adjustEx(questEx, function () { return CourseMeta.lib.displayEx(questEx, null, function (actEx) {
                            Logger.trace_course('testMe questEx: doUpdate end');
                        }); });
                        return;
                    }
                    else
                        th.actTest = _this.multiActTest();
                }
                else
                    //*** normalni test
                    th.actTest = CourseMeta.actCourseRoot;
                _this.needsRecording(_this.actTest.needs == CourseMeta.testNeeds.recording);
                _this.needsPlaying(_this.actTest.needs == CourseMeta.testNeeds.playing);
                _this.isDemoTest(!_this.actTest || _this.actTest.isDemoTest);
                _this.testTitle(testTitle(_this.actTest));
                _this.hasDemotest(_this.actTest && !!_this.actTest.demoTestUrl); //nastavuje se v ObjectModel\Model\CourseMeta.cs if (res2.line == LineIds.English), NewLMComModel\Design\CourseProducts.cs lang != CourseIds.English ? "needs=recording" : 
                //osetreni home
                if (th.isHome) {
                    th.greenTitle = CSLocalize('130c662ad53e4f5589557fdd620e47a5', 'Run test');
                    th.makeInterruptionInEx = !!th.actTest.interrupts;
                    if (!th.actTest.isDemoTest && testMe.alowTestCreate_Url != th.productUrl) {
                        location.href = '#';
                        return;
                    }
                    th.actTest.expandDynamicAll(); //expanze dynamickych modulu
                    th.findActModule(); //najdi aktualni modul
                    if (th.actModule == null) {
                        location.hash = createResultUrl();
                        return;
                    } //neni aktualni modul (tj. hotovo) => jdi na vysledek 
                }
                th.createSkillsModel();
                if (th.isHome) {
                    completed();
                    return;
                }
                if (!th.actTest.interrupts) {
                    th.actTest.interrupts = [];
                    th.actTest.started = Utils.dateToNum(new Date());
                    th.actTest.userPending = true;
                }
                if (th.makeInterruptionInEx) {
                    var beg = th.actTest.lastDate();
                    if (!beg)
                        beg = th.actTest.started;
                    th.actTest.interrupts.push({ beg: beg, end: Utils.nowToNum(), ip: Login.myData.IP });
                    th.makeInterruptionInEx = false;
                    th.actTest.userPending = true;
                }
                if (th.actModule.done) {
                    th.greenTitle = CSLocalize('4baea1f87da040baa7431720c340eac2', 'Finish');
                    th.greenIcon = 'fast-forward';
                }
                else {
                    th.greenTitle = CSLocalize('ae062730194a47a58d7e8b4b04a0e299', 'Continue');
                    th.greenIcon = 'play';
                }
                var actEx = th.getActEx();
                //un-done, aby se cviceni neukazovalo vyhodnocene
                _this.exWasDone = actEx.done;
                actEx.done = false;
                //display ex
                saveProduct(function () {
                    return CourseMeta.lib.adjustEx(actEx, function () { return CourseMeta.lib.displayEx(actEx, null, function (actEx) {
                        Logger.trace_course('testMe: doUpdate end');
                        th.instrTitle(actEx.page.instrTitle);
                        th.instrBody(_.map(actEx.page.instrs, function (s) { var res = CourseMeta.instructions[s.toLowerCase()]; return res ? res : (_.isEmpty(s) ? "" : "Missing [" + s + "] instruction"); }).join());
                        th.startTimer(); //adjustace mereni casu
                        //completed(); completed je osetreno v displayEx. Pri completed by knockout hlasil vicenasobny binding.
                    }); });
                });
            });
        };
        Model.prototype.multiTest = function () { return CourseMeta.isType(CourseMeta.actCourseRoot, CourseMeta.runtimeType.multiTest) ? CourseMeta.actCourseRoot : null; };
        Model.prototype.multiQuestionnaire = function () { return (_.find(this.multiTest().Items, function (it) { return CourseMeta.isType(it, CourseMeta.runtimeType.multiQuestionnaire); }).Items[0]); };
        Model.prototype.multiActTest = function () {
            var mt = this.multiTest();
            var end = '/' + mt.level + '/';
            return (_.find(mt.Items, function (dt) { return Utils.endsWith(dt.url, end); }));
        };
        Model.prototype.htmlClearing = function () {
            testMe.notify.active(false);
            if (CourseMeta.actExPageControl && CourseMeta.actExPageControl.sndPage)
                CourseMeta.actExPageControl.sndPage.htmlClearing();
            this.clearTimer();
        };
        Model.prototype.startTimer = function () {
            var _this = this;
            var th = this;
            if (th.timer)
                return;
            th.startTime = Utils.nowToNum();
            var saveCounter = 0;
            testMe.notify.active(true);
            th.timer = setInterval(function () {
                if (!th.actModule || !th.actTest || savingProduct)
                    return;
                //inicializace casovych informaci modulu
                var initElapsed = th.actModule.elapsed;
                if (!initElapsed)
                    initElapsed = 0; //udaj z databaze
                var startElapsed = th.modStarts[th.actModule.url];
                if (!startElapsed)
                    th.modStarts[th.actModule.url] = startElapsed = Utils.nowToNum() - initElapsed; //udaj pri startu modulu
                //vypocet
                var newElapsed = Utils.nowToNum() - startElapsed; //novy elapsed
                var maxElapsed = (cfg.testGroup_debug ? 2 : th.actModule.minutes) * 60;
                var done = newElapsed >= maxElapsed;
                if (done)
                    newElapsed = maxElapsed;
                th.actModule.elapsed = newElapsed;
                th.actModule.end = Utils.nowToNum();
                th.actModule.userPending = true;
                if (done) {
                    th.clearTimer();
                    testMe.notify.progressBar(0);
                    testMe.notify.remaindSeconds = 0;
                    testMe.notify.progressText(CSLocalize('fc80a4f55fcd438c88417436eb8a20ea', 'Time limit for this section has expired!'));
                    console.log('testme: before Time limit expired');
                    anim.alert().show(CSLocalize('d3e3441ec93045d0afd3e9ff25049570', 'Time limit for this section has expired.'), function (ok) {
                        console.log('testme: after Time limit expired');
                        _this.eval(false);
                        th.finishModule();
                    }, function () { return anim.alert().isCancelVisible(false); });
                }
                else {
                    var percent = 100 - 100 * newElapsed / maxElapsed;
                    th.notLowTime(percent > 15);
                    testMe.notify.remaindSeconds = maxElapsed - newElapsed;
                    testMe.notify.progressBar(percent);
                    testMe.notify.progressText(Utils.formatTimeSpan(maxElapsed - newElapsed));
                    if (saveCounter > 20) {
                        saveProduct($.noop);
                        saveCounter = 0;
                    }
                    else
                        saveCounter++;
                }
            }, 500);
            //}, 500);
        };
        Model.prototype.eval = function (markDone) {
            var ex = this.getActEx();
            if (!ex || !ex.evaluator)
                return;
            ex.testEvaluate();
            delete ex.beg;
            ex.done = markDone || this.exWasDone;
            //if (!ex.testDone && markDone) ex.testDone = true;
            //soucet elapsed vsech cviceni testu
            var exElapsed = 0;
            _.each(this.actTest.Items, function (m) { return _.each(m.Items, function (ex) { if (ex.elapsed)
                exElapsed += ex.elapsed; }); });
            //soucet elapsed vsech modulu
            var modElapsed = 0;
            _.each(this.actTest.Items, function (t) { return modElapsed += t.elapsed; });
            //uprav elapsed aktualniho cviceni
            if (modElapsed > exElapsed)
                ex.elapsed += Math.floor(modElapsed - exElapsed);
            //aktualizuj moduly a test
            CourseMeta.actCourseRoot.refreshNumbers();
        };
        Model.prototype.finishModule = function () {
            var _this = this;
            Logger.trace_course('testMe: finishModule start');
            this.clearTimer();
            //_.each(this.actModule.Items, (ex: CourseMeta.exImpl) => { if (!ex.done) { ex.s = 0; ex.done = true; ex.userPending = true; } });
            _.each(this.actModule.Items, function (ex) { if (ex.done)
                return; ex.done = true; ex.userPending = true; });
            CourseMeta.actCourseRoot.refreshNumbers();
            this.actModule.end = Utils.nowToNum();
            this.actModule.userPending = true;
            this.findActModule();
            if (this.actModule == null) {
                this.actTest.ms = 0;
                _.each(this.actTest.Items, function (it) { return _this.actTest.ms += it.ms; });
                saveProduct(function () {
                    return CourseMeta.lib.actPersistence().createArchive(LMStatus.Cookie.id, CourseMeta.actCompanyId, CourseMeta.actProduct.url, function (archiveId) {
                        //aktualni produkt je na serveru prejmenovan, prejmenuj i na klientovi
                        CourseMeta.actProduct.url += '|' + archiveId.toString();
                        _this.productUrl = CourseMeta.actProduct.url;
                        _this.actTest.createEmptyResult(archiveId); //vytvor test result
                        _this.actTest.adjustResult(); //vytvor test result
                        saveProduct(function () {
                            Login.adjustMyData(true, function () {
                                Logger.trace_course('testMe: finishModule, test end');
                                window.location.hash = createResultUrl(); //jdi na result stranku
                            });
                        });
                    });
                });
            }
            else {
                saveProduct(function () {
                    Logger.trace_course('testMe: finishModule end');
                    Pager.reloadPage();
                });
            }
        };
        Model.prototype.findActModule = function () {
            var th = this;
            CourseMeta.actCourseRoot.refreshNumbers();
            //if (!th.actModule) {
            th.actModule = (_.find(th.actTest.Items, function (it) { return !it.done; }));
            if (!th.actModule) {
                th.actTest.done = true;
                return;
            }
            if (!th.actModule.beg)
                th.actModule.beg = Utils.nowToNum();
            th.actIdx = 0;
        };
        Model.prototype.doGreenClick = function () {
            var _this = this;
            if (this.testDisabled())
                return;
            if (this.isHome) {
                this.isHome = false;
                Pager.reloadPage();
            }
            else if (this.isPretest) {
                var multiEx = this.multiQuestionnaire();
                //var selected: { [grpId: string]: string; } = {};
                var levToScore = { 'a1': 1, 'a2': 2, 'b1': 3, 'b2': 4, 'c1': 5, 'c2': 6 };
                var numToLev = ['a1', 'a2', 'b1', 'b2', 'c1', 'c2'];
                var levComplBoundary = [6, 10, 14, 18, 22, 24];
                var levStdBoundary = [3, 5, 7, 9, 11, 12];
                var score = 0;
                var isAll = true;
                var singleSels = multiEx.page.evalPage.Items[0].Items;
                _.each(singleSels, function (grp) {
                    var ctrl = (_.find(grp.evalControls, function (r) { return r.selected(); }));
                    //selected[grp.id.substr(6)] = ctrl ? ctrl.id.substr(ctrl.id.length-2) : null;
                    if (!ctrl)
                        isAll = false;
                    else
                        score += levToScore[ctrl.id.substr(ctrl.id.length - 2)];
                });
                if (!isAll) {
                    anim.alert().show(CSLocalize('5ae8d0cbcd5e44b68843f2010ec215b7', 'Fill in all parts of the self-evaluation form'), $.noop, function () { return anim.alert().isCancelVisible(false); });
                    return;
                }
                var boundaries = singleSels.length == 4 ? levComplBoundary : levStdBoundary; //aktualni hranice pro skore
                var multiTest = this.multiTest();
                for (var i = 0; i < boundaries.length; i++)
                    if (score <= boundaries[i]) {
                        multiTest.level = numToLev[i];
                        break;
                    }
                anim.alert().show(CSLocalize('8f8d748c9209489b8710fa30b10905d3', 'The following test will be started now') + ':<p class="text-info"><b>' + this.multiActTest().title + '</b></p>', function () {
                    multiTest.userPending = true;
                    _this.isPretest = false;
                    _this.isHome = true;
                    Pager.blockGui(true);
                    saveProduct(Pager.reloadPage);
                }, function () { return anim.alert().isCancelVisible(false); });
            }
            else if (this.isResult) {
                debugger;
                throw 'this.isResult';
            }
            else {
                if (!this.actModule)
                    throw '!this.actModule';
                this.eval(true); //vyhodnot cviceni
                if (this.actModule.done) {
                    anim.alert().show(this.finishText(), function (ok) {
                        console.log('testme: in finish');
                        if (ok === true) {
                            Pager.blockGui(true);
                            setTimeout(function () { return _this.finishModule(); }, 1);
                        }
                        else if (ok === false) {
                            _this.greenStatus = greenDone; //jeste kontroluj cviceni
                            Pager.blockGui(true);
                            _this.actIdx++;
                            if (_this.actIdx >= _this.actModule.Items.length)
                                _this.actIdx = 0; //dalsi cviceni
                            saveProduct(Pager.reloadPage);
                        }
                    });
                }
                else {
                    Pager.blockGui(true);
                    this.actIdx++;
                    if (this.actIdx >= this.actModule.Items.length)
                        this.actIdx = 0; //dalsi cviceni
                    saveProduct(Pager.reloadPage);
                }
            }
        };
        //actModuleDone(): boolean { return this.actModule && _.all(this.actModule.Items, (e: CourseMeta.exImpl) => e.done); }
        Model.prototype.doSkipClick = function () {
            Pager.blockGui(true);
            this.eval(false);
            this.actIdx++;
            if (this.actIdx >= this.actModule.Items.length)
                this.actIdx = 0; //dalsi cviceni
            saveProduct(Pager.reloadPage);
        };
        Model.prototype.doExClick = function (newIdx) {
            Pager.blockGui(true);
            this.eval(false);
            this.actIdx = newIdx;
            saveProduct(Pager.reloadPage);
        };
        Model.prototype.doFinishClick = function () {
            var _this = this;
            this.eval(false); //vyhodnot cviceni
            console.log('testme: before force finish');
            anim.alert().show(this.finishText(), function (ok) {
                console.log('testme: in force finish');
                if (!ok)
                    return;
                console.log('testme: in force finish ok');
                Pager.blockGui(true);
                setTimeout(function () { return _this.finishModule(); }, 1);
            });
            //if (!confirm(this.finishText())) return;
            //Pager.blockGui(true);
            //setTimeout(() => this.finishModule(), 1);
        };
        Model.prototype.finishText = function () { return '<p class="text-info"><b>' + CSLocalize('883fd55fbeb14d3a9461ffc130bfb6fa', 'Finishing of the section') + '</b></p>' + CSLocalize('8705c1b208864ed1aba65ab1697bb816', 'Do you really want to finish this section?') + '<br/>' + CSLocalize('92e75ac9aeb44296878c7bcff2ecc030', 'After that you will not be allowed to check and correct your answers.'); };
        Model.skillText = function (skill) {
            switch (skill) {
                case testMe.Skills.UseLanguage: return CSLocalize('eaddb5e3f7be4215abc0174d0e5b25e8', 'Grammar and  Vocabulary');
                case testMe.Skills.Reading: return CSLocalize('74cebd49d27c458cb7393fdc3efa5131', 'Reading');
                case testMe.Skills.Speaking: return CSLocalize('55989a271c5e490d8323792e5be89ac6', 'Speaking');
                case testMe.Skills.Listening: return CSLocalize('701d44c0f6e648b4ba6c20a98d3a2a8e', 'Listening');
                case testMe.Skills.Writing: return CSLocalize('8e2f5a7271a6408884371e33fd5ed593', 'Writing');
                default: return skill;
            }
        };
        Model.prototype.createSkillsModel = function () {
            var _this = this;
            if (this.isResult) {
                debugger;
                throw 'this.isResult';
            }
            var res = [];
            res.push({ title: CSLocalize('02bea28a09a847cca2488a6791e87e2a', 'Introduction'), active: this.isHome ? 'active' : '' });
            _.each((this.actTest.Items), function (it) { return res.push({ title: Model.skillText(it.skill), active: !_this.isHome && _this.actModule == it ? 'active' : '' }); });
            res.push({ title: CSLocalize('ba059f7aff4a4a2f965ffb17656b0e60', 'Results'), active: '' });
            //res.push({ title: 'Vysledky', active: this.isResult ? 'active' : '' });
            this.skills = res;
            var act = _.find(res, function (r) { return r.active != ''; });
            testMe.notify.skillText(/*this.skillSmall =*/ act.title);
            this.skillSmallStatus = act == res[0] ? 0 : (act == res[res.length - 1] ? 2 : 1);
        };
        Model.prototype.clearTimer = function () { if (!this.timer)
            return; clearInterval(this.timer); this.timer = null; };
        Model.prototype.getActEx = function () { return this.actModule && this.actModule.Items[this.actIdx] ? (this.actModule.Items[this.actIdx]) : null; };
        return Model;
    })(schools.Model);
    testMe.Model = Model;
    var SkillItemLabel = (function () {
        function SkillItemLabel() {
        }
        return SkillItemLabel;
    })();
    testMe.SkillItemLabel = SkillItemLabel; //model pro prehled skills v navbaru
    function saveProduct(completed) {
        savingProduct = true;
        CourseMeta.lib.saveProduct(function () { savingProduct = false; completed(); });
    }
    var savingProduct;
    //Bezpecne save produktu: pokud je nejake jine save rozbehnute, pozdrzi se az do dobehnuti posledniho.
    //http://jsfiddle.net/L5nud/111/
    function saveProduct_(completed) {
        Logger.trace_course('saveProduct: testMe start');
        promise = promise.then(saveProductLow(function () { Logger.trace_course('saveProduct: testMe end'); completed(); })); //zarad dalsi pozadavek na konec nedokoncenych pozadavku
    }
    function saveProductLow(completed) {
        var deferred = $.Deferred();
        CourseMeta.lib.saveProduct(deferred.resolve);
        return function () { return deferred.promise().then(completed); };
    }
    var promise = $.when($.noop);
    var multiTestImpl = (function (_super) {
        __extends(multiTestImpl, _super);
        function multiTestImpl() {
            _super.apply(this, arguments);
        }
        //persistence
        multiTestImpl.prototype.setUserData = function (data) {
            if (!data) {
                data = { level: null };
                this.userPending = true;
            }
            this.level = data.level;
        };
        multiTestImpl.prototype.getUserData = function (setData) {
            var dt = { level: this.level };
            setData(JSON.stringify(dt), null, CourseModel.CourseDataFlag.multiTestImpl, null);
        };
        return multiTestImpl;
    })(CourseMeta.courseNode);
    testMe.multiTestImpl = multiTestImpl;
    var testImpl = (function (_super) {
        __extends(testImpl, _super);
        function testImpl() {
            _super.call(this);
            this.ip = Login.myData.IP;
            this.interrupts = null;
        }
        testImpl.prototype.doReset = function () {
            _.each(this.Items, function (it) { return it.doReset(); });
            this.interrupts = null;
            this.ip = Login.myData.IP;
            this.done = false;
        };
        testImpl.prototype.lastDate = function () { var max = 0; _.each(this.Items, function (it) { return max = Math.max(max, it.end); }); return max; };
        testImpl.prototype.createEmptyResult = function (id) {
            this.result = {
                domain: Pager.basicDir.substr(Pager.basicDir.lastIndexOf('//') + 2),
                id: id,
                firstName: LMStatus.Cookie.FirstName,
                lastName: LMStatus.Cookie.LastName,
                eMail: LMStatus.Cookie.EMail ? LMStatus.Cookie.EMail : LMStatus.Cookie.LoginEMail,
                title: testTitle(this),
                ip: this.ip,
                interrupts: this.interrupts,
                skills: _.map(this.Items, function (sk) {
                    //posledi 3 polozku se aktualizuji az v adjustResult (adjustResult se vola jednouna konci testu a opakovan pri humanEval)
                    var res = { title: sk.title, skill: sk.skill, elapsed: sk.elapsed, finished: sk.end, started: sk.beg, ms: sk.ms, s: 0, flag: 0, scoreWeight: 0 };
                    return res;
                }),
                company: _.find(Login.myData.Companies, function (c) { return c.Id == CourseMeta.actCompanyId; }).Title,
                score: 0,
                flag: 0,
                //score: 0,
                productUrl: CourseMeta.actProduct.url,
                lmcomId: schools.LMComUserId(),
                companyId: CourseMeta.actCompanyId,
                level: this.level
            };
        };
        testImpl.prototype.adjustResult = function () {
            var _this = this;
            //aktualni flag a skore (protoze adjustResult se vola jek na konci testu tak i po human eval testu)
            this.result.flag = 0;
            _.each(this.Items, function (sk) {
                var skResult = _.find(_this.result.skills, function (s) { return s.skill == sk.skill; });
                skResult.flag = sk.flag;
                skResult.s = sk.s;
                skResult.scoreWeight = sk.scoreWeight;
                _this.result.flag |= sk.flag;
            });
            //score weights
            var wsum = 0, wcnt = 0;
            _.each(this.result.skills, function (sk) { if (!sk.scoreWeight)
                return; wsum += sk.scoreWeight; wcnt++; });
            if (wsum > 100) {
                debugger;
                throw 'wsum > 100';
            }
            var wempty = (100 - wsum) / (this.Items.length - wcnt); //pocet procent pro undefined scoreWeight
            //dosad weights, aby jejich soucet byl 100
            var wintSum = 0;
            _.each(this.result.skills, function (sk) { return wintSum += sk.scoreWeight = Math.round(sk.scoreWeight ? sk.scoreWeight : wempty); });
            if (wintSum > 100 || wintSum < 98) {
                debugger;
                throw 'wintSum > 100 || wintSum < 98';
            } // neco je spatne
            if (wintSum < 100)
                this.result.skills[0].scoreWeight += 100 - wintSum;
            if (!Course.needsHumanEval(this.result.flag)) {
                //vazeny prumer
                var ssum = 0;
                _.each(this.result.skills, function (sk) { return ssum += Course.scorePercent(sk) * sk.scoreWeight; });
                this.result.score = Math.round(ssum / 100);
            }
            this.userPending = true;
        };
        //persistence
        testImpl.prototype.setUserData = function (data) {
            if (!data) {
                data = { interrupts: null, ip: Login.myData.IP, started: Utils.dateToNum(new Date()) };
                this.userPending = true;
            }
            this.started = data.started;
            this.ip = data.ip;
            this.interrupts = data.interrupts;
        };
        testImpl.prototype.getUserData = function (setData) {
            var dt = { interrupts: this.interrupts, ip: Login.myData.IP, started: this.started };
            setData(JSON.stringify(dt), null, this.flag | CourseModel.CourseDataFlag.testImpl, null);
            if (this.result)
                setData(null, JSON.stringify(this.result), this.flag | CourseModel.CourseDataFlag.testImpl_result, testImpl.resultKey);
        };
        testImpl.prototype.expandDynamicAll = function () {
            var res = false;
            CourseMeta.scan(this, function (nd) {
                if (!CourseMeta.isType(nd, CourseMeta.runtimeType.taskTestSkill))
                    return;
                if (nd.expandDynamic())
                    res = true;
                //prevzeti informaci z dynamicModuleData
                //var dynData: CourseMeta.dynamicModuleData = <CourseMeta.dynamicModuleData><any>(nd.oldItems[0]);
                //nd.minutes = dynData.minutes ? dynData.minutes : 0; nd.skill = dynData.skill ? dynData.skill : 0; nd.scoreWeight = dynData.scoreWeight ? dynData.scoreWeight : 0;
            });
            return res;
        };
        testImpl.resultKey = 'result';
        return testImpl;
    })(CourseMeta.courseNode);
    testMe.testImpl = testImpl;
    var testSkillImpl = (function (_super) {
        __extends(testSkillImpl, _super);
        function testSkillImpl() {
            _super.call(this);
            this.beg = this.end = this.elapsed = 0;
        }
        testSkillImpl.prototype.refreshNumbers = function (exCountOnly) {
            if (exCountOnly === void 0) { exCountOnly = false; }
            var th = this;
            th.exCount = th.Items.length;
            th.s = th.flag = 0;
            th.done = true;
            _.each(th.Items, function (it) { it.refreshNumbers(); it.complNotPassiveCnt = 1; if (!it.s)
                it.s = 0; th.s += it.s; th.done = th.done && it.done; th.flag = Course.agregateFlag(th.flag, it.flag); });
            th.complPassiveCnt = 0;
            th.complNotPassiveCnt = th.Items.length;
        };
        testSkillImpl.prototype.setUserData = function (data) {
            _super.prototype.setUserData.call(this, data.modUrls);
            this.beg = data.started;
            this.end = data.finished;
            this.elapsed = data.elapsed;
        };
        testSkillImpl.prototype.getUserData = function (setData) {
            var data = { modUrls: _.map(this.Items, function (it) { return it.url; }), started: this.beg, finished: this.end, elapsed: this.elapsed };
            setData(JSON.stringify(data), null, this.flag | CourseModel.CourseDataFlag.testSkillImpl, null);
        };
        return testSkillImpl;
    })(CourseMeta.modImpl);
    testMe.testSkillImpl = testSkillImpl;
    function createUrlPersist(type, companyId, productUrl, persistence) {
        return oldPrefix + [testMe.appId, type, companyId.toString(), encodeUrlHash(productUrl), persistence].join(hashDelim);
    }
    testMe.createUrlPersist = createUrlPersist;
    function createUrlCompl(type, companyId, productUrl) {
        return createUrlPersist(type, companyId, encodeUrlHash(productUrl), CourseMeta.actProductPersistence);
    }
    testMe.createUrlCompl = createUrlCompl;
    function createResultUrl(companyId, productUrl) {
        if (companyId === void 0) { companyId = 0; }
        if (productUrl === void 0) { productUrl = null; }
        return createUrlCompl(testMe.tResult, companyId ? companyId : CourseMeta.actCompanyId, productUrl ? productUrl : CourseMeta.actProduct.url);
        //return [appId, type ? type : tEx, companyId ? companyId : CourseMeta.actCompanyId, productUrl ? productUrl : CourseMeta.actProduct.url].join(hashDelim);
    }
    testMe.createResultUrl = createResultUrl;
    //Pager.registerAppLocator(appId, tEx, (urlParts, completed) => completed(new Model(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, testMe.tEx, testMe.appId, testMe.tEx, 3, function (urlParts) { return new Model(urlParts); }); });
})(testMe || (testMe = {}));
var testMe;
(function (testMe) {
    var ResultLow = (function (_super) {
        __extends(ResultLow, _super);
        function ResultLow() {
            _super.apply(this, arguments);
            this.br = [{ title: schools.homeTitle(), iconId: function () { return 'home'; }, url: '' }];
        }
        ResultLow.prototype.breadcrumbs = function () { return this.br; };
        return ResultLow;
    })(schools.Model);
    testMe.ResultLow = ResultLow;
    var Result = (function (_super) {
        __extends(Result, _super);
        function Result(urlParts) {
            _super.call(this, testMe.tResult, urlParts);
            this.appId = testMe.appId;
        }
        Result.prototype.doUpdate = function (completed) {
            var th = this;
            CourseMeta.lib.actPersistence().loadUserData(schools.LMComUserId(), CourseMeta.actCompanyId, th.productUrl, testMe.testImpl.resultKey, function (data) {
                extendResult(data);
                th.data = data;
                th.br.pushArray([
                    { title: th.data.title, iconId: function () { return 'folder-open'; }, url: testMe.createUrlCompl(testMe.tResults, CourseMeta.actCompanyId, th.productUrl.split('|')[0]) },
                    { title: th.data.subTitleShort(), iconId: function () { return 'puzzle-piece'; }, url: '' }
                ]);
                completed();
            });
        };
        Result.prototype.downloadCert = function () {
            Pager.ajax_download(Pager.path(Pager.pathType.restServices), persistNewEA.createCmd(schools.LMComUserId(), CourseMeta.actCompanyId, this.productUrl, function (cmd) { return cmd.loc = Trados.actLang; }), scorm.Cmd_testCert_Type);
        };
        return Result;
    })(ResultLow);
    testMe.Result = Result;
    var Results = (function (_super) {
        __extends(Results, _super);
        function Results(urlParts) {
            _super.call(this, testMe.tResults, urlParts);
            this.appId = testMe.appId;
        }
        Results.prototype.doUpdate = function (completed) {
            var th = this;
            CourseMeta.lib.actPersistence().testResults(schools.LMComUserId(), CourseMeta.actCompanyId, th.productUrl, function (data) {
                _.each(data, function (r) { return extendResult(r); });
                th.tests = data;
                var cnt = 0;
                _.each(th.tests, function (t) { return t.idx = cnt++; });
                th.barTitle = th.tests[0].title;
                th.br.pushArray([
                    { title: th.barTitle, iconId: function () { return 'folder-open'; }, url: '' }
                ]);
                th.gotoTest = function (idx) { return window.location.hash = testMe.createUrlCompl(testMe.tResult, CourseMeta.actCompanyId, th.productUrl + '|' + th.tests[idx].id.toString()); };
                completed();
            });
        };
        return Results;
    })(ResultLow);
    testMe.Results = Results;
    function extendResult(r) {
        Utils.extendObject(r, [resultImpl]);
        _.each(r.skills, function (s) { return Utils.extendObject(s, [skillResultImpl]); });
    }
    var resultImpl = (function () {
        function resultImpl() {
        }
        resultImpl.prototype.started = function () { return Utils.numToDate(_.min(this.skills, function (sk) { return sk.started; }).started); };
        resultImpl.prototype.finished = function () { return Utils.numToDate(_.max(this.skills, function (sk) { return sk.started; }).finished); };
        resultImpl.prototype.elapsed = function () { var res = 0; _.each(this.skills, function (sk) { return res += sk.elapsed; }); return res; };
        resultImpl.prototype.dateTxt = function () { return resultImpl.dateTxtProc(this.started(), this.finished()); };
        resultImpl.dateTxtProc = function (stDt, finDt) {
            var stD = Globalize.format(stDt, 'd');
            var stT = Globalize.format(stDt, 'H:mm:ss');
            var finD = Globalize.format(finDt, 'd');
            var finT = Globalize.format(finDt, 'H:mm:ss');
            var dtSame = stDt.setHours(0, 0, 0, 0) == finDt.setHours(0, 0, 0, 0);
            return dtSame ? stD + ' (' + stT + ' - ' + finT + ')' : stD + ' ' + stT + ' - ' + finD + ' ' + finT;
        };
        resultImpl.prototype.elapsedTxt = function () { return Utils.formatTimeSpan(this.elapsed()); };
        resultImpl.prototype.interruptsTxt = function () {
            if (!this.interrupts || this.interrupts.length == 0)
                return '0';
            var len = 0;
            _.each(this.interrupts, function (it) { return len += it.end - it.beg; });
            return this.interrupts.length.toString() + 'x, ' + CSLocalize('ee6f54e31d3c4743883b7bf5175867a8', 'duration') + ' ' + Utils.formatTimeSpan(len);
        };
        resultImpl.prototype.ipsTxt = function () {
            var ips = _.map(this.interrupts, function (it) { return it.ip; });
            ips.push(this.ip);
            ips = _.uniq(ips);
            var huge = ips.length > 2;
            ips = ips.slice(0, 2);
            var res = ips.join(', ');
            return huge ? res + ',...' : res;
        };
        resultImpl.prototype.subTitleShort = function () { return Globalize.format(this.started(), 'd'); };
        resultImpl.prototype.subTitleLong = function () { return this.title + ': ' + Globalize.format(this.started(), 'd'); };
        //************ interruprions a IP address
        resultImpl.prototype.hasIntIpData = function () { return this.interrupts && this.interrupts.length > 0; };
        resultImpl.prototype.adjustIntIpData = function () {
            if (this.intIpData)
                return this.intIpData;
            var res = [];
            var temp;
            _.each(this.interrupts, function (it) { return res.push([
                Globalize.format(temp = Utils.numToDate(it.beg), 'd') + ', ' + Globalize.format(temp = Utils.numToDate(it.beg), 'H:mm:ss'),
                Globalize.format(temp = Utils.numToDate(it.end), 'd') + ', ' + Globalize.format(temp = Utils.numToDate(it.end), 'H:mm:ss'),
                Utils.formatTimeSpan(it.end - it.beg),
                it.ip
            ]); });
            return res;
        };
        resultImpl.prototype.adjustIpData = function () {
            if (this.ipData)
                return this.ipData;
            var res = _.uniq(_.map(this.interrupts, function (it) { return it.ip; }));
            res.push(this.ip);
            res = _.uniq(res);
            return res;
        };
        resultImpl.prototype.waitForHuman = function () { return Course.needsHumanEval(this.flag); };
        return resultImpl;
    })();
    testMe.resultImpl = resultImpl;
    var skillResultImpl = (function () {
        function skillResultImpl() {
        }
        skillResultImpl.prototype.dateTxt = function () { return resultImpl.dateTxtProc(Utils.numToDate(this.started), Utils.numToDate(this.finished)); };
        skillResultImpl.prototype.elapsedTxt = function () { return Utils.formatTimeSpan(this.elapsed); };
        skillResultImpl.prototype.skillText = function () { return testMe.Model.skillText(this.skill); };
        skillResultImpl.prototype.waitForHuman = function () { return Course.needsHumanEval(this.flag); };
        skillResultImpl.prototype.score = function () { return Course.scorePercent(this); };
        return skillResultImpl;
    })();
    testMe.skillResultImpl = skillResultImpl;
    //Pager.registerAppLocator(appId, tResult,(urlParts, completed) => completed(new Result(urlParts)));
    //Pager.registerAppLocator(appId, tResults, (urlParts, completed) => completed(new Results(urlParts)));
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, testMe.tResult, testMe.appId, testMe.tResult, 3, function (urlParts) { return new Result(urlParts); }); });
    blended.oldLocators.push(function ($stateProvider) { return blended.registerOldLocator($stateProvider, testMe.tResults, testMe.appId, testMe.tResults, 3, function (urlParts) { return new Results(urlParts); }); });
})(testMe || (testMe = {}));

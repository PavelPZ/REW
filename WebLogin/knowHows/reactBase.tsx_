//React "Hello World" Examples: https://gist.github.com/danawoodman/9cfddb1a0c934a35f31a
//https://facebook.github.io/react/docs/component-api.html
//https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
//http://redux.js.org/docs/introduction/
//https://github.com/rackt/react-redux/releases
//Imutable helper: https://facebook.github.io/react/docs/update.html, https://facebook.github.io/react/docs/advanced-performance.html
//HELP: https://github.com/rackt/react-redux/blob/master/docs/api.md

//D:\LMCom\rew\WebLogin\scripts\typings\react-redux.d.ts
//export function connect<P>(mapStateToProps?: MapStateToProps,
//  mapDispatchToProps?: MapDispatchToPropsFunction | MapDispatchToPropsObject,
//  mergeProps?: MergeProps,
//  options?: Options): (cls: React.ClassicComponentClass<P>) => React.ClassicComponentClass<P>;

//D:\LMCom\rew\WebLogin\scripts\typings\react-global.d.ts
//import ReactDOM = __React; 

namespace testReactRouter {

  interface IAction { type: string; }

  interface IAppProps extends React.Props<any>, IAppStates { dispatch?: (action: IAction) => void; }
  interface IAppStates { hello1?: IHelloWorldStates; hello2?: IHelloWorldStates; }
  type AppType = React.ClassicComponent<IAppProps, IAppStates>;
  var App = React.createClass<IAppProps, IAppStates>({
    render() {
      var th = this as AppType;
      return <div>
        <div onClick={() => th.props.dispatch({ type: APPCLICK }) }>Click</div>
        <HelloMessage1 is1={true}/>
        <HelloMessage2 is1={false}/>
        </div >;
    },
  });
  App = ReactRedux.connect<IAppStates, IAppProps>(s => s)(App);

  interface IHelloAction extends IAction { is1: boolean; }
  interface IHelloWorldProps extends React.Props<any>, IHelloWorldStates { is1: boolean, dispatch?: (action: IHelloAction) => void; }
  interface IHelloWorldStates { actName?: string; }

  type HelloMessageType = React.ClassicComponent<IHelloWorldProps, IHelloWorldStates>; 
  var HelloMessage = React.createClass<IHelloWorldProps, IHelloWorldStates>({
    render() {
      var th = this as HelloMessageType;
      return <div onClick={() => th.props.dispatch({ type: CLICK, is1: th.props.is1 }) }>Hello {th.props.actName}</div >;
    },
  });
  var HelloMessage1 = ReactRedux.connect<IAppStates, IHelloWorldProps>(s => s.hello1)(HelloMessage);
  var HelloMessage2 = ReactRedux.connect<IAppStates, IHelloWorldProps>(s => s.hello2)(HelloMessage);

  var CLICK = 'click';
  var APPCLICK = 'appclick';

  function modifyNameReducer(old: IAppStates, action: IAction): IAppStates {
    switch (action.type) {
      case APPCLICK:
        var res: IAppStates = {
          hello1: { actName: old.hello1.actName + '*' }, 
          hello2: { actName: old.hello2.actName + '*' },
        };
        return res;
      case CLICK:
        var res: IAppStates = Object.assign({}, old);
        var act = action as IHelloAction;
        //var res: IAppStates = {
        //  hello1: old.hello1,
        //  hello2: old.hello2,
        //};
        if (act.is1) res.hello1 = { actName: old.hello1.actName + '*' };
        else res.hello2 = { actName: old.hello2.actName + '*' };
        return res;
      default: return old ? old : {
        hello1: { actName: 'John' },
        hello2: { actName: 'Marthy' }
      }
    }
  }

  ReactDOM.render(
    <ReactRedux.Provider store={Redux.createStore(modifyNameReducer) }><App/></ReactRedux.Provider>,
    document.getElementById('app')
  );
  //var str = React.renderToStaticMarkup(<HelloMessage initName="John" />);
  //alert(str);
  //var str = React.renderToString(<HelloMessage initName="John" />);
  //alert(str);
  //var reduxReducer = ReduxActions.handleActions<IHelloWorldStates>({
  //  [CLICK]: (st, act) => { return { actName: st.actName + '*' }; }
  //}, { actName: 'John2' });
  //const rootReducer = Redux.combineReducers({ reduxReducer });
  //case CLICK: return old; 
  //case CLICK: old.actName = old.actName + '*'; return old;

}
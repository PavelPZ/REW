#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NewDataNet35
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NewLMCom")]
	public partial class Container : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLANGMasterScorm(LANGMasterScorm instance);
    partial void UpdateLANGMasterScorm(LANGMasterScorm instance);
    partial void DeleteLANGMasterScorm(LANGMasterScorm instance);
    #endregion
		
		public Container() : 
				base(global::ScormExNet35.Properties.Settings.Default.NewLMComConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Container(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Container(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Container(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Container(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LANGMasterScorm> LANGMasterScorms
		{
			get
			{
				return this.GetTable<LANGMasterScorm>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LANGMasterScorms")]
	public partial class LANGMasterScorm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private long _AttemptId;
		
		private string _AttemptIdStr;
		
		private System.Nullable<System.Guid> _AttemptIdGuid;
		
		private string _Key1Str;
		
		private string _Key2Str;
		
		private long _Key1Int;
		
		private long _Key2Int;
		
		private string _Data1;
		
		private string _Data2;
		
		private long _Date;
		
		private System.Data.Linq.Binary _RowVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnAttemptIdChanging(long value);
    partial void OnAttemptIdChanged();
    partial void OnAttemptIdStrChanging(string value);
    partial void OnAttemptIdStrChanged();
    partial void OnAttemptIdGuidChanging(System.Nullable<System.Guid> value);
    partial void OnAttemptIdGuidChanged();
    partial void OnKey1StrChanging(string value);
    partial void OnKey1StrChanged();
    partial void OnKey2StrChanging(string value);
    partial void OnKey2StrChanged();
    partial void OnKey1IntChanging(long value);
    partial void OnKey1IntChanged();
    partial void OnKey2IntChanging(long value);
    partial void OnKey2IntChanged();
    partial void OnData1Changing(string value);
    partial void OnData1Changed();
    partial void OnData2Changing(string value);
    partial void OnData2Changed();
    partial void OnDateChanging(long value);
    partial void OnDateChanged();
    partial void OnRowVersionChanging(System.Data.Linq.Binary value);
    partial void OnRowVersionChanged();
    #endregion
		
		public LANGMasterScorm()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttemptId", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long AttemptId
		{
			get
			{
				return this._AttemptId;
			}
			set
			{
				if ((this._AttemptId != value))
				{
					this.OnAttemptIdChanging(value);
					this.SendPropertyChanging();
					this._AttemptId = value;
					this.SendPropertyChanged("AttemptId");
					this.OnAttemptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttemptIdStr", DbType="NVarChar(120)", UpdateCheck=UpdateCheck.Never)]
		public string AttemptIdStr
		{
			get
			{
				return this._AttemptIdStr;
			}
			set
			{
				if ((this._AttemptIdStr != value))
				{
					this.OnAttemptIdStrChanging(value);
					this.SendPropertyChanging();
					this._AttemptIdStr = value;
					this.SendPropertyChanged("AttemptIdStr");
					this.OnAttemptIdStrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttemptIdGuid", DbType="UniqueIdentifier", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.Guid> AttemptIdGuid
		{
			get
			{
				return this._AttemptIdGuid;
			}
			set
			{
				if ((this._AttemptIdGuid != value))
				{
					this.OnAttemptIdGuidChanging(value);
					this.SendPropertyChanging();
					this._AttemptIdGuid = value;
					this.SendPropertyChanged("AttemptIdGuid");
					this.OnAttemptIdGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Key1Str", DbType="NVarChar(120)", UpdateCheck=UpdateCheck.Never)]
		public string Key1Str
		{
			get
			{
				return this._Key1Str;
			}
			set
			{
				if ((this._Key1Str != value))
				{
					this.OnKey1StrChanging(value);
					this.SendPropertyChanging();
					this._Key1Str = value;
					this.SendPropertyChanged("Key1Str");
					this.OnKey1StrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Key2Str", DbType="NVarChar(120)", UpdateCheck=UpdateCheck.Never)]
		public string Key2Str
		{
			get
			{
				return this._Key2Str;
			}
			set
			{
				if ((this._Key2Str != value))
				{
					this.OnKey2StrChanging(value);
					this.SendPropertyChanging();
					this._Key2Str = value;
					this.SendPropertyChanged("Key2Str");
					this.OnKey2StrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Key1Int", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Key1Int
		{
			get
			{
				return this._Key1Int;
			}
			set
			{
				if ((this._Key1Int != value))
				{
					this.OnKey1IntChanging(value);
					this.SendPropertyChanging();
					this._Key1Int = value;
					this.SendPropertyChanged("Key1Int");
					this.OnKey1IntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Key2Int", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Key2Int
		{
			get
			{
				return this._Key2Int;
			}
			set
			{
				if ((this._Key2Int != value))
				{
					this.OnKey2IntChanging(value);
					this.SendPropertyChanging();
					this._Key2Int = value;
					this.SendPropertyChanged("Key2Int");
					this.OnKey2IntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data1", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Data1
		{
			get
			{
				return this._Data1;
			}
			set
			{
				if ((this._Data1 != value))
				{
					this.OnData1Changing(value);
					this.SendPropertyChanging();
					this._Data1 = value;
					this.SendPropertyChanged("Data1");
					this.OnData1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data2", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Data2
		{
			get
			{
				return this._Data2;
			}
			set
			{
				if ((this._Data2 != value))
				{
					this.OnData2Changing(value);
					this.SendPropertyChanging();
					this._Data2 = value;
					this.SendPropertyChanged("Data2");
					this.OnData2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowVersion", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary RowVersion
		{
			get
			{
				return this._RowVersion;
			}
			set
			{
				if ((this._RowVersion != value))
				{
					this.OnRowVersionChanging(value);
					this.SendPropertyChanging();
					this._RowVersion = value;
					this.SendPropertyChanged("RowVersion");
					this.OnRowVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
